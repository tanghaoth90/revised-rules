#include "souffle/CompiledSouffle.h"

namespace souffle {
using namespace ram;
class Sf_pts2o1h_itsc : public SouffleProgram {
private:
static inline bool regex_wrapper(const char *pattern, const char *text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\")\n";
}
   return result;
}
static inline std::string substr_wrapper(const char *str, size_t idx, size_t len) {
   std::string sub_str, result; 
   try { result = std::string(str).substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
std::string profiling_fname;
public:
SymbolTable symTable;
// -- Table: _AssignHeapAllocation
ram::Relation<Auto,5>* rel_1_AssignHeapAllocation;
souffle::RelationWrapper<0,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_1_AssignHeapAllocation;
// -- Table: AssignHeapAllocation_Heap
ram::Relation<Auto,2, ram::index<0>>* rel_2_AssignHeapAllocation_Heap;
// -- Table: isAssignHeapAllocation_Insn
ram::Relation<Auto,1>* rel_3_isAssignHeapAllocation_Insn;
// -- Table: _AssignBinop
ram::Relation<Auto,4>* rel_4_AssignBinop;
souffle::RelationWrapper<1,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_4_AssignBinop;
// -- Table: _AssignCast
ram::Relation<Auto,6>* rel_5_AssignCast;
souffle::RelationWrapper<2,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_5_AssignCast;
// -- Table: AssignCast_From
ram::Relation<Auto,2, ram::index<0>>* rel_6_AssignCast_From;
// -- Table: _AssignCastNull
ram::Relation<Auto,5>* rel_7_AssignCastNull;
souffle::RelationWrapper<3,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_7_AssignCastNull;
// -- Table: _AssignCastNumConstant
ram::Relation<Auto,6>* rel_8_AssignCastNumConstant;
souffle::RelationWrapper<4,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_8_AssignCastNumConstant;
// -- Table: AssignCastNumConstant_Id
ram::Relation<Auto,2, ram::index<0>>* rel_9_AssignCastNumConstant_Id;
// -- Table: AssignCast_Type
ram::Relation<Auto,2, ram::index<0>>* rel_10_AssignCast_Type;
// -- Table: isAssignCast_Insn
ram::Relation<Auto,1>* rel_11_isAssignCast_Insn;
// -- Table: _AssignInstanceOf
ram::Relation<Auto,6>* rel_12_AssignInstanceOf;
souffle::RelationWrapper<5,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_12_AssignInstanceOf;
// -- Table: _AssignLocal
ram::Relation<Auto,5>* rel_13_AssignLocal;
souffle::RelationWrapper<6,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_13_AssignLocal;
// -- Table: AssignLocal_From
ram::Relation<Auto,2, ram::index<0>>* rel_14_AssignLocal_From;
// -- Table: isAssignLocal_Insn
ram::Relation<Auto,1>* rel_15_isAssignLocal_Insn;
// -- Table: _AssignNull
ram::Relation<Auto,4>* rel_16_AssignNull;
souffle::RelationWrapper<7,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_16_AssignNull;
// -- Table: isAssignNull_Insn
ram::Relation<Auto,1>* rel_17_isAssignNull_Insn;
// -- Table: _AssignNumConstant
ram::Relation<Auto,5>* rel_18_AssignNumConstant;
souffle::RelationWrapper<8,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_18_AssignNumConstant;
// -- Table: AssignNumConstant_Id
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_19_AssignNumConstant_Id;
// -- Table: isNumConstant
ram::Relation<Auto,1>* rel_20_isNumConstant;
// -- Table: _AssignUnop
ram::Relation<Auto,4>* rel_21_AssignUnop;
souffle::RelationWrapper<9,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_21_AssignUnop;
// -- Table: AssignInstruction_To
ram::Relation<Auto,2, ram::index<0>>* rel_22_AssignInstruction_To;
// -- Table: _Return
ram::Relation<Auto,4>* rel_23_Return;
souffle::RelationWrapper<10,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_23_Return;
// -- Table: ReturnNonvoid_Var
ram::Relation<Auto,2, ram::index<0>>* rel_24_ReturnNonvoid_Var;
// -- Table: isReturnNonvoid_Insn
ram::Relation<Auto,1>* rel_25_isReturnNonvoid_Insn;
// -- Table: _NativeReturnVar
ram::Relation<Auto,2>* rel_26_NativeReturnVar;
souffle::RelationWrapper<11,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_26_NativeReturnVar;
// -- Table: _AssignPhantomInvoke
ram::Relation<Auto,3>* rel_27_AssignPhantomInvoke;
souffle::RelationWrapper<12,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_27_AssignPhantomInvoke;
// -- Table: _BreakpointStmt
ram::Relation<Auto,3>* rel_28_BreakpointStmt;
souffle::RelationWrapper<13,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_28_BreakpointStmt;
// -- Table: _DynamicMethodInvocation
ram::Relation<Auto,5>* rel_29_DynamicMethodInvocation;
souffle::RelationWrapper<14,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_29_DynamicMethodInvocation;
// -- Table: _EnterMonitor
ram::Relation<Auto,4>* rel_30_EnterMonitor;
souffle::RelationWrapper<15,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_30_EnterMonitor;
// -- Table: _ExitMonitor
ram::Relation<Auto,4>* rel_31_ExitMonitor;
souffle::RelationWrapper<16,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_31_ExitMonitor;
// -- Table: _FormalParam
ram::Relation<Auto,3, ram::index<1,0>>* rel_32_FormalParam;
souffle::RelationWrapper<17,ram::Relation<Auto,3, ram::index<1,0>>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_32_FormalParam;
// -- Table: _Goto
ram::Relation<Auto,4>* rel_33_Goto;
souffle::RelationWrapper<18,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_33_Goto;
// -- Table: _If
ram::Relation<Auto,4>* rel_34_If;
souffle::RelationWrapper<19,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_34_If;
// -- Table: _LoadArrayIndex
ram::Relation<Auto,5>* rel_35_LoadArrayIndex;
souffle::RelationWrapper<20,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_35_LoadArrayIndex;
// -- Table: LoadArrayIndex_Base
ram::Relation<Auto,2, ram::index<0>>* rel_36_LoadArrayIndex_Base;
// -- Table: LoadArrayIndex_To
ram::Relation<Auto,2, ram::index<0>>* rel_37_LoadArrayIndex_To;
// -- Table: isLoadArrayIndex_Insn
ram::Relation<Auto,1>* rel_38_isLoadArrayIndex_Insn;
// -- Table: _LoadInstanceField
ram::Relation<Auto,6>* rel_39_LoadInstanceField;
souffle::RelationWrapper<21,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_39_LoadInstanceField;
// -- Table: LoadInstanceField_Base
ram::Relation<Auto,2, ram::index<0>>* rel_40_LoadInstanceField_Base;
// -- Table: LoadInstanceField_To
ram::Relation<Auto,2, ram::index<0>>* rel_41_LoadInstanceField_To;
// -- Table: isLoadInstanceField_Insn
ram::Relation<Auto,1>* rel_42_isLoadInstanceField_Insn;
// -- Table: _LoadStaticField
ram::Relation<Auto,5>* rel_43_LoadStaticField;
souffle::RelationWrapper<22,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_43_LoadStaticField;
// -- Table: LoadStaticField_To
ram::Relation<Auto,2, ram::index<0>>* rel_44_LoadStaticField_To;
// -- Table: isLoadStaticField_Insn
ram::Relation<Auto,1>* rel_45_isLoadStaticField_Insn;
// -- Table: _LookupSwitch
ram::Relation<Auto,4>* rel_46_LookupSwitch;
souffle::RelationWrapper<23,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_46_LookupSwitch;
// -- Table: _PhantomInvoke
ram::Relation<Auto,3>* rel_47_PhantomInvoke;
souffle::RelationWrapper<24,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_47_PhantomInvoke;
// -- Table: _ReturnVoid
ram::Relation<Auto,3>* rel_48_ReturnVoid;
souffle::RelationWrapper<25,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_48_ReturnVoid;
// -- Table: _SpecialMethodInvocation
ram::Relation<Auto,5>* rel_49_SpecialMethodInvocation;
souffle::RelationWrapper<26,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_49_SpecialMethodInvocation;
// -- Table: _StaticMethodInvocation
ram::Relation<Auto,4>* rel_50_StaticMethodInvocation;
souffle::RelationWrapper<27,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_50_StaticMethodInvocation;
// -- Table: isStaticMethodInvocation_Insn
ram::Relation<Auto,1, ram::index<0>>* rel_51_isStaticMethodInvocation_Insn;
// -- Table: _StoreArrayIndex
ram::Relation<Auto,5>* rel_52_StoreArrayIndex;
souffle::RelationWrapper<28,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_52_StoreArrayIndex;
// -- Table: StoreArrayIndex_Base
ram::Relation<Auto,2, ram::index<0>>* rel_53_StoreArrayIndex_Base;
// -- Table: StoreArrayIndex_From
ram::Relation<Auto,2, ram::index<0>>* rel_54_StoreArrayIndex_From;
// -- Table: isStoreArrayIndex_Insn
ram::Relation<Auto,1>* rel_55_isStoreArrayIndex_Insn;
// -- Table: _StoreInstanceField
ram::Relation<Auto,6>* rel_56_StoreInstanceField;
souffle::RelationWrapper<29,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_56_StoreInstanceField;
// -- Table: StoreInstanceField_Base
ram::Relation<Auto,2, ram::index<0>>* rel_57_StoreInstanceField_Base;
// -- Table: StoreInstanceField_From
ram::Relation<Auto,2, ram::index<0>>* rel_58_StoreInstanceField_From;
// -- Table: isStoreInstanceField_Insn
ram::Relation<Auto,1>* rel_59_isStoreInstanceField_Insn;
// -- Table: _StoreStaticField
ram::Relation<Auto,5>* rel_60_StoreStaticField;
souffle::RelationWrapper<30,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_60_StoreStaticField;
// -- Table: FieldInstruction_Signature
ram::Relation<Auto,2, ram::index<0>>* rel_61_FieldInstruction_Signature;
// -- Table: StoreStaticField_From
ram::Relation<Auto,2, ram::index<0>>* rel_62_StoreStaticField_From;
// -- Table: isStoreStaticField_Insn
ram::Relation<Auto,1>* rel_63_isStoreStaticField_Insn;
// -- Table: _TableSwitch
ram::Relation<Auto,4>* rel_64_TableSwitch;
souffle::RelationWrapper<31,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_64_TableSwitch;
// -- Table: _Throw
ram::Relation<Auto,4>* rel_65_Throw;
souffle::RelationWrapper<32,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_65_Throw;
// -- Table: Throw_Var
ram::Relation<Auto,2, ram::index<0>>* rel_66_Throw_Var;
// -- Table: _ThrowNull
ram::Relation<Auto,3>* rel_67_ThrowNull;
souffle::RelationWrapper<33,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_67_ThrowNull;
// -- Table: isThrow_Insn
ram::Relation<Auto,1>* rel_68_isThrow_Insn;
// -- Table: Throw
ram::Relation<Auto,2>* rel_69_Throw;
souffle::RelationWrapper<34,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_69_Throw;
// -- Table: _UnsupportedInstruction
ram::Relation<Auto,3>* rel_70_UnsupportedInstruction;
souffle::RelationWrapper<35,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_70_UnsupportedInstruction;
// -- Table: _VirtualMethodInvocation
ram::Relation<Auto,5>* rel_71_VirtualMethodInvocation;
souffle::RelationWrapper<36,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_71_VirtualMethodInvocation;
// -- Table: _CallbackMethod
ram::Relation<Auto,1>* rel_72_CallbackMethod;
souffle::RelationWrapper<37,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_72_CallbackMethod;
// -- Table: _Method
ram::Relation<Auto,6>* rel_73_Method;
souffle::RelationWrapper<38,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_73_Method;
// -- Table: Method_DeclaringType
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_74_Method_DeclaringType;
// -- Table: Method_Descriptor
ram::Relation<Auto,2, ram::index<0,1>>* rel_75_Method_Descriptor;
// -- Table: Method_SimpleName
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_76_Method_SimpleName;
// -- Table: Method_ReturnType
ram::Relation<Auto,2, ram::index<0,1>>* rel_77_Method_ReturnType;
// -- Table: _Method_DeclaresException
ram::Relation<Auto,2>* rel_78_Method_DeclaresException;
souffle::RelationWrapper<39,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_78_Method_DeclaresException;
// -- Table: _Method_Modifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_79_Method_Modifier;
souffle::RelationWrapper<40,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_79_Method_Modifier;
// -- Table: MethodImplemented
ram::Relation<Auto,4, ram::index<2>, ram::index<0,1,2>>* rel_80_MethodImplemented;
// -- Table: ClassInitializer
ram::Relation<Auto,2, ram::index<0>>* rel_81_ClassInitializer;
// -- Table: _ThisVar
ram::Relation<Auto,2, ram::index<0>>* rel_82_ThisVar;
souffle::RelationWrapper<41,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_82_ThisVar;
// -- Table: _Var_DeclaringMethod
ram::Relation<Auto,2>* rel_83_Var_DeclaringMethod;
souffle::RelationWrapper<42,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_83_Var_DeclaringMethod;
// -- Table: isMethod
ram::Relation<Auto,1, ram::index<0>>* rel_84_isMethod;
// -- Table: Instruction_Method
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_85_Instruction_Method;
// -- Table: @delta_Instruction_Method
ram::Relation<Auto,2, ram::index<0>>* rel_86_delta_Instruction_Method;
// -- Table: @new_Instruction_Method
ram::Relation<Auto,2, ram::index<0>>* rel_87_new_Instruction_Method;
// -- Table: ReturnVar
ram::Relation<Auto,2, ram::index<1,0>>* rel_88_ReturnVar;
// -- Table: @delta_ReturnVar
ram::Relation<Auto,2, ram::index<1>>* rel_89_delta_ReturnVar;
// -- Table: @new_ReturnVar
ram::Relation<Auto,2, ram::index<1>>* rel_90_new_ReturnVar;
// -- Table: MethodInvocation_Method
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_91_MethodInvocation_Method;
// -- Table: StaticMethodInvocation
ram::Relation<Auto,3, ram::index<1>, ram::index<2>>* rel_92_StaticMethodInvocation;
// -- Table: OptForNameInvocation
ram::Relation<Auto,2>* rel_93_OptForNameInvocation;
// -- Table: AssignNull
ram::Relation<Auto,2, ram::index<1>>* rel_94_AssignNull;
// -- Table: Instruction_Index
ram::Relation<Auto,2, ram::index<0>>* rel_95_Instruction_Index;
// -- Table: AssignCast
ram::Relation<Auto,4, ram::index<1>, ram::index<3>>* rel_96_AssignCast;
// -- Table: SpecialMethodInvocation_Base
ram::Relation<Auto,2, ram::index<0>>* rel_97_SpecialMethodInvocation_Base;
// -- Table: isVirtualMethodInvocation_Insn
ram::Relation<Auto,1, ram::index<0>>* rel_98_isVirtualMethodInvocation_Insn;
// -- Table: VirtualMethodInvocation
ram::Relation<Auto,3, ram::index<1>>* rel_99_VirtualMethodInvocation;
// -- Table: VirtualMethodInvocation_Descriptor
ram::Relation<Auto,2, ram::index<0>>* rel_100_VirtualMethodInvocation_Descriptor;
// -- Table: VirtualMethodInvocation_SimpleName
ram::Relation<Auto,2>* rel_101_VirtualMethodInvocation_SimpleName;
// -- Table: VirtualMethodInvocation_Base
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_102_VirtualMethodInvocation_Base;
// -- Table: Type_null
ram::Relation<Auto,1>* rel_103_Type_null;
// -- Table: HeapAllocation_Null
ram::Relation<Auto,1, ram::index<0>>* rel_104_HeapAllocation_Null;
// -- Table: _ClassHeap
ram::Relation<Auto,2>* rel_105_ClassHeap;
souffle::RelationWrapper<43,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_105_ClassHeap;
// -- Table: isClassHeap
ram::Relation<Auto,1>* rel_106_isClassHeap;
// -- Table: _Dacapo
ram::Relation<Auto,2>* rel_107_Dacapo;
souffle::RelationWrapper<44,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_107_Dacapo;
// -- Table: HeapAllocation_Keep
ram::Relation<Auto,1, ram::index<0>>* rel_108_HeapAllocation_Keep;
// -- Table: _MethodHandleConstant
ram::Relation<Auto,1>* rel_109_MethodHandleConstant;
souffle::RelationWrapper<45,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_109_MethodHandleConstant;
// -- Table: _NormalHeap
ram::Relation<Auto,2>* rel_110_NormalHeap;
souffle::RelationWrapper<46,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_110_NormalHeap;
// -- Table: _StringConstant
ram::Relation<Auto,1>* rel_111_StringConstant;
souffle::RelationWrapper<47,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_111_StringConstant;
// -- Table: isHeapAllocation
ram::Relation<Auto,1, ram::index<0>>* rel_112_isHeapAllocation;
// -- Table: HeapAllocation_Type
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_113_HeapAllocation_Type;
// -- Table: Value_isHeap
ram::Relation<Auto,1>* rel_114_Value_isHeap;
// -- Table: isStringConstant
ram::Relation<Auto,1, ram::index<0>>* rel_115_isStringConstant;
// -- Table: _Activity
ram::Relation<Auto,1>* rel_116_Activity;
souffle::RelationWrapper<48,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_116_Activity;
// -- Table: _ApplicationClass
ram::Relation<Auto,1, ram::index<0>>* rel_117_ApplicationClass;
souffle::RelationWrapper<49,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_117_ApplicationClass;
// -- Table: ApplicationMethod
ram::Relation<Auto,1, ram::index<0>>* rel_118_ApplicationMethod;
souffle::RelationWrapper<50,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_118_ApplicationMethod;
// -- Table: Stats_Simple_Application_Cast
ram::Relation<Auto,4>* rel_119_Stats_Simple_Application_Cast;
souffle::RelationWrapper<51,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_119_Stats_Simple_Application_Cast;
// -- Table: Stats_Simple_Application_VirtualMethodInvocation
ram::Relation<Auto,1>* rel_120_Stats_Simple_Application_VirtualMethodInvocation;
souffle::RelationWrapper<52,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_120_Stats_Simple_Application_VirtualMethodInvocation;
// -- Table: Stats_Simple_ApplicationConcreteMethod
ram::Relation<Auto,1>* rel_121_Stats_Simple_ApplicationConcreteMethod;
souffle::RelationWrapper<53,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_121_Stats_Simple_ApplicationConcreteMethod;
// -- Table: _ArrayType
ram::Relation<Auto,1>* rel_122_ArrayType;
souffle::RelationWrapper<54,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_122_ArrayType;
// -- Table: _BroadcastReceiver
ram::Relation<Auto,1>* rel_123_BroadcastReceiver;
souffle::RelationWrapper<55,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_123_BroadcastReceiver;
// -- Table: _ClassType
ram::Relation<Auto,1>* rel_124_ClassType;
souffle::RelationWrapper<56,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_124_ClassType;
// -- Table: _ComponentType
ram::Relation<Auto,2, ram::index<0,1>>* rel_125_ComponentType;
souffle::RelationWrapper<57,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_125_ComponentType;
// -- Table: isArrayType
ram::Relation<Auto,1, ram::index<0>>* rel_126_isArrayType;
// -- Table: _ContentProvider
ram::Relation<Auto,1>* rel_127_ContentProvider;
souffle::RelationWrapper<58,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_127_ContentProvider;
// -- Table: _DirectSuperclass
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_128_DirectSuperclass;
souffle::RelationWrapper<59,ram::Relation<Auto,2, ram::index<0>, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_128_DirectSuperclass;
// -- Table: Subclass
ram::Relation<Auto,2, ram::index<0,1>>* rel_129_Subclass;
// -- Table: @delta_Subclass
ram::Relation<Auto,2>* rel_130_delta_Subclass;
// -- Table: @new_Subclass
ram::Relation<Auto,2>* rel_131_new_Subclass;
// -- Table: isClassType
ram::Relation<Auto,1, ram::index<0>>* rel_132_isClassType;
// -- Table: ClassNameIndexes
ram::Relation<Auto,2, ram::index<0,1>>* rel_133_ClassNameIndexes;
// -- Table: @delta_ClassNameIndexes
ram::Relation<Auto,2>* rel_134_delta_ClassNameIndexes;
// -- Table: @new_ClassNameIndexes
ram::Relation<Auto,2>* rel_135_new_ClassNameIndexes;
// -- Table: DotsInClassName
ram::Relation<Auto,2, ram::index<0>>* rel_136_DotsInClassName;
// -- Table: NotLastDot
ram::Relation<Auto,2, ram::index<0,1>>* rel_137_NotLastDot;
// -- Table: LastDot
ram::Relation<Auto,2, ram::index<0>>* rel_138_LastDot;
// -- Table: _DirectSuperinterface
ram::Relation<Auto,2>* rel_139_DirectSuperinterface;
souffle::RelationWrapper<60,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_139_DirectSuperinterface;
// -- Table: Superinterface
ram::Relation<Auto,2, ram::index<1,0>>* rel_140_Superinterface;
// -- Table: @delta_Superinterface
ram::Relation<Auto,2, ram::index<1>>* rel_141_delta_Superinterface;
// -- Table: @new_Superinterface
ram::Relation<Auto,2, ram::index<1>>* rel_142_new_Superinterface;
// -- Table: _InterfaceType
ram::Relation<Auto,1>* rel_143_InterfaceType;
souffle::RelationWrapper<61,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_143_InterfaceType;
// -- Table: isInterfaceType
ram::Relation<Auto,1, ram::index<0>>* rel_144_isInterfaceType;
// -- Table: isReferenceType
ram::Relation<Auto,1, ram::index<0>>* rel_145_isReferenceType;
// -- Table: _Service
ram::Relation<Auto,1>* rel_146_Service;
souffle::RelationWrapper<62,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_146_Service;
// -- Table: AndroidAppComponent
ram::Relation<Auto,1>* rel_147_AndroidAppComponent;
// -- Table: _Var_Type
ram::Relation<Auto,2>* rel_148_Var_Type;
souffle::RelationWrapper<63,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_148_Var_Type;
// -- Table: isType
ram::Relation<Auto,1, ram::index<0>>* rel_149_isType;
// -- Table: AssignHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_150_AssignHeapAllocation;
// -- Table: OptAssignHeapAllocation
ram::Relation<Auto,2, ram::index<1>>* rel_151_OptAssignHeapAllocation;
// -- Table: ObjectMultipleAllocated
ram::Relation<Auto,1, ram::index<0>>* rel_152_ObjectMultipleAllocated;
// -- Table: MethodLookup
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_153_MethodLookup;
// -- Table: @delta_MethodLookup
ram::Relation<Auto,4, ram::index<2>>* rel_154_delta_MethodLookup;
// -- Table: @new_MethodLookup
ram::Relation<Auto,4, ram::index<2>>* rel_155_new_MethodLookup;
// -- Table: OverridesFinalize
ram::Relation<Auto,1, ram::index<0>>* rel_156_OverridesFinalize;
// -- Table: AllocatedObjectSupportsFinalize
ram::Relation<Auto,2, ram::index<0>>* rel_157_AllocatedObjectSupportsFinalize;
// -- Table: FakeInvocation_RegisterFinalize0
ram::Relation<Auto,2>* rel_158_FakeInvocation_RegisterFinalize0;
// -- Table: MethodDeclaredOrInherited
ram::Relation<Auto,2, ram::index<1,0>>* rel_159_MethodDeclaredOrInherited;
// -- Table: @delta_MethodDeclaredOrInherited
ram::Relation<Auto,2>* rel_160_delta_MethodDeclaredOrInherited;
// -- Table: @new_MethodDeclaredOrInherited
ram::Relation<Auto,2>* rel_161_new_MethodDeclaredOrInherited;
// -- Table: ProtectedMethodOfComponent
ram::Relation<Auto,1>* rel_162_ProtectedMethodOfComponent;
// -- Table: PublicMethodOfComponent
ram::Relation<Auto,1>* rel_163_PublicMethodOfComponent;
// -- Table: CollectionLibraryClass
ram::Relation<Auto,1, ram::index<0>>* rel_164_CollectionLibraryClass;
// -- Table: SpecialLibraryClass
ram::Relation<Auto,1, ram::index<0>>* rel_165_SpecialLibraryClass;
// -- Table: SpecialLibraryMethod
ram::Relation<Auto,1, ram::index<0>>* rel_166_SpecialLibraryMethod;
// -- Table: SpecialLibraryObject
ram::Relation<Auto,1>* rel_167_SpecialLibraryObject;
// -- Table: ImplicitlyInstantiatedLibraryType
ram::Relation<Auto,1>* rel_168_ImplicitlyInstantiatedLibraryType;
// -- Table: ReifiedLibraryObject
ram::Relation<Auto,2>* rel_169_ReifiedLibraryObject;
// -- Table: AndroidLibraryType
ram::Relation<Auto,1, ram::index<0>>* rel_170_AndroidLibraryType;
// -- Table: AndroidApplicationClass
ram::Relation<Auto,1, ram::index<0>>* rel_171_AndroidApplicationClass;
// -- Table: AndroidLibraryListenerType
ram::Relation<Auto,1>* rel_172_AndroidLibraryListenerType;
// -- Table: ReifiedComponent
ram::Relation<Auto,2>* rel_173_ReifiedComponent;
// -- Table: ViewRetrievalByArg0MethodInvocation
ram::Relation<Auto,1>* rel_174_ViewRetrievalByArg0MethodInvocation;
// -- Table: Type_byte
ram::Relation<Auto,1>* rel_175_Type_byte;
// -- Table: Type_char
ram::Relation<Auto,1>* rel_176_Type_char;
// -- Table: Type_double
ram::Relation<Auto,1>* rel_177_Type_double;
// -- Table: Type_float
ram::Relation<Auto,1>* rel_178_Type_float;
// -- Table: Type_int
ram::Relation<Auto,1>* rel_179_Type_int;
// -- Table: Type_long
ram::Relation<Auto,1>* rel_180_Type_long;
// -- Table: Type_short
ram::Relation<Auto,1>* rel_181_Type_short;
// -- Table: isPrimitiveType
ram::Relation<Auto,1, ram::index<0>>* rel_182_isPrimitiveType;
// -- Table: SubtypeOf
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_183_SubtypeOf;
// -- Table: @delta_SubtypeOf
ram::Relation<Auto,2, ram::index<0,1>>* rel_184_delta_SubtypeOf;
// -- Table: @new_SubtypeOf
ram::Relation<Auto,2, ram::index<0,1>>* rel_185_new_SubtypeOf;
// -- Table: ExceptionType
ram::Relation<Auto,1, ram::index<0>>* rel_186_ExceptionType;
// -- Table: ExceptionTypeToHeap
ram::Relation<Auto,2, ram::index<1>>* rel_187_ExceptionTypeToHeap;
// -- Table: ExceptionHeapTypeRepresentativeOrdinal
ram::Relation<Auto,2>* rel_188_ExceptionHeapTypeRepresentativeOrdinal;
// -- Table: SupertypeOf
ram::Relation<Auto,2, ram::index<1,0>>* rel_189_SupertypeOf;
// -- Table: AppMethodOverridesAndroidLibraryMethod
ram::Relation<Auto,1, ram::index<0>>* rel_190_AppMethodOverridesAndroidLibraryMethod;
// -- Table: OverridingProtectedMethodOfComponent
ram::Relation<Auto,1>* rel_191_OverridingProtectedMethodOfComponent;
// -- Table: ListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_192_ListenerType;
// -- Table: AndroidApplicationListenerClass
ram::Relation<Auto,1>* rel_193_AndroidApplicationListenerClass;
// -- Table: StringFactoryType
ram::Relation<Auto,1, ram::index<0>>* rel_194_StringFactoryType;
// -- Table: StringFactoryHeap
ram::Relation<Auto,1, ram::index<0>>* rel_195_StringFactoryHeap;
// -- Table: _EmptyArray
ram::Relation<Auto,1, ram::index<0>>* rel_196_EmptyArray;
souffle::RelationWrapper<64,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_196_EmptyArray;
// -- Table: MethodAndTypeToHeap
ram::Relation<Auto,3, ram::index<1,2>>* rel_197_MethodAndTypeToHeap;
// -- Table: AllocationsPerMethodAndType
ram::Relation<Auto,3>* rel_198_AllocationsPerMethodAndType;
// -- Table: MethodAllocationMergeThreshold
ram::Relation<Auto,1>* rel_199_MethodAllocationMergeThreshold;
// -- Table: AllocationShouldBeMergedPerMethod
ram::Relation<Auto,2>* rel_200_AllocationShouldBeMergedPerMethod;
// -- Table: MethodAndTypeToMergedHeap
ram::Relation<Auto,3, ram::index<1,2>>* rel_201_MethodAndTypeToMergedHeap;
// -- Table: MinHeapOrdinalPerMethodAndType
ram::Relation<Auto,3, ram::index<0>>* rel_202_MinHeapOrdinalPerMethodAndType;
// -- Table: MethodAndTypeToRepresentative
ram::Relation<Auto,3>* rel_203_MethodAndTypeToRepresentative;
// -- Table: HeapRepresentative
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_204_HeapRepresentative;
// -- Table: HeapIsMergedString
ram::Relation<Auto,1, ram::index<0>>* rel_205_HeapIsMergedString;
// -- Table: HeapIsMergedStringFactory
ram::Relation<Auto,1, ram::index<0>>* rel_206_HeapIsMergedStringFactory;
// -- Table: RepresentativesToPickFrom
ram::Relation<Auto,2, ram::index<1>>* rel_207_RepresentativesToPickFrom;
// -- Table: MinRepresentativeHeapToPickFromOrdinal
ram::Relation<Auto,2, ram::index<0>>* rel_208_MinRepresentativeHeapToPickFromOrdinal;
// -- Table: HeapAllocation_Merge
ram::Relation<Auto,2, ram::index<0,1>>* rel_209_HeapAllocation_Merge;
// -- Table: HeapAllocation_ContextInsensitive
ram::Relation<Auto,1, ram::index<0>>* rel_210_HeapAllocation_ContextInsensitive;
// -- Table: AssignContextInsensitiveHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_211_AssignContextInsensitiveHeapAllocation;
// -- Table: HeapAllocation_Special
ram::Relation<Auto,1, ram::index<0>>* rel_212_HeapAllocation_Special;
// -- Table: AssignNormalHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_213_AssignNormalHeapAllocation;
// -- Table: _Field
ram::Relation<Auto,4>* rel_214_Field;
souffle::RelationWrapper<65,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_214_Field;
// -- Table: Field_DeclaringType
ram::Relation<Auto,2, ram::index<0>>* rel_215_Field_DeclaringType;
// -- Table: _AssignReturnValue
ram::Relation<Auto,2>* rel_216_AssignReturnValue;
souffle::RelationWrapper<66,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_216_AssignReturnValue;
// -- Table: AssignReturnValue
ram::Relation<Auto,2, ram::index<0>>* rel_217_AssignReturnValue;
// -- Table: _Tamiflex_ReflectionData
ram::Relation<Auto,6>* rel_218_Tamiflex_ReflectionData;
souffle::RelationWrapper<67,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_218_Tamiflex_ReflectionData;
// -- Table: _Tamiflex_ToDoopFormat
ram::Relation<Auto,2, ram::index<0>>* rel_219_Tamiflex_ToDoopFormat;
// -- Table: Tamiflex_ReflectionData
ram::Relation<Auto,6, ram::index<5>>* rel_220_Tamiflex_ReflectionData;
// -- Table: _MethodInvocation_Line
ram::Relation<Auto,2, ram::index<1>>* rel_221_MethodInvocation_Line;
souffle::RelationWrapper<68,ram::Relation<Auto,2, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_221_MethodInvocation_Line;
// -- Table: Tamiflex_ReflectionMap
ram::Relation<Auto,2, ram::index<1>>* rel_222_Tamiflex_ReflectionMap;
// -- Table: Tamiflex_ReifiedFieldArray
ram::Relation<Auto,3>* rel_223_Tamiflex_ReifiedFieldArray;
// -- Table: Tamiflex_ReifiedMethod
ram::Relation<Auto,3>* rel_224_Tamiflex_ReifiedMethod;
// -- Table: Tamiflex_ReifiedMethodArray
ram::Relation<Auto,3>* rel_225_Tamiflex_ReifiedMethodArray;
// -- Table: _Field_Modifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_226_Field_Modifier;
souffle::RelationWrapper<69,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_226_Field_Modifier;
// -- Table: isField
ram::Relation<Auto,1, ram::index<0>>* rel_227_isField;
// -- Table: LoadStaticField
ram::Relation<Auto,3, ram::index<0>, ram::index<2>>* rel_228_LoadStaticField;
// -- Table: Tamiflex_ReifiedField
ram::Relation<Auto,3>* rel_229_Tamiflex_ReifiedField;
// -- Table: MainClass
ram::Relation<Auto,1>* rel_230_MainClass;
// -- Table: MainMethodDeclaration
ram::Relation<Auto,1>* rel_231_MainMethodDeclaration;
// -- Table: _ActualParam
ram::Relation<Auto,3, ram::index<1,0>>* rel_232_ActualParam;
souffle::RelationWrapper<70,ram::Relation<Auto,3, ram::index<1,0>>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_232_ActualParam;
// -- Table: StoreInstanceField
ram::Relation<Auto,4>* rel_233_StoreInstanceField;
// -- Table: LoadInstanceField
ram::Relation<Auto,4>* rel_234_LoadInstanceField;
// -- Table: VarsAtInvocationRetrievingView
ram::Relation<Auto,2>* rel_235_VarsAtInvocationRetrievingView;
// -- Table: _BootstrapParam
ram::Relation<Auto,3>* rel_236_BootstrapParam;
souffle::RelationWrapper<71,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_236_BootstrapParam;
// -- Table: isMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_237_isMethodInvocation;
// -- Table: isVar
ram::Relation<Auto,1, ram::index<0>>* rel_238_isVar;
// -- Table: StoreStaticField
ram::Relation<Auto,3, ram::index<0>, ram::index<2>>* rel_239_StoreStaticField;
// -- Table: AssignLocal
ram::Relation<Auto,3, ram::index<0>>* rel_240_AssignLocal;
// -- Table: Var_Type
ram::Relation<Auto,2, ram::index<0>>* rel_241_Var_Type;
// -- Table: ResolveInvocation
ram::Relation<Auto,3, ram::index<0,1>>* rel_242_ResolveInvocation;
// -- Table: SiteShouldNotBeRefined
ram::Relation<Auto,1, ram::index<0>>* rel_243_SiteShouldNotBeRefined;
// -- Table: StoreArrayIndex
ram::Relation<Auto,3, ram::index<2>>* rel_244_StoreArrayIndex;
// -- Table: OptStoreArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_245_OptStoreArrayIndex;
// -- Table: LoadArrayIndex
ram::Relation<Auto,3, ram::index<2>>* rel_246_LoadArrayIndex;
// -- Table: OptLoadArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_247_OptLoadArrayIndex;
// -- Table: Var_DeclaringMethod
ram::Relation<Auto,2, ram::index<0>>* rel_248_Var_DeclaringMethod;
// -- Table: ApplicationVar
ram::Relation<Auto,1>* rel_249_ApplicationVar;
// -- Table: isInstruction
ram::Relation<Auto,1, ram::index<0>>* rel_250_isInstruction;
// -- Table: Tamiflex_Constructor_NewInstance
ram::Relation<Auto,3>* rel_251_Tamiflex_Constructor_NewInstance;
// -- Table: Tamiflex_Array_NewInstance
ram::Relation<Auto,2>* rel_252_Tamiflex_Array_NewInstance;
// -- Table: Tamiflex_Class_NewInstance
ram::Relation<Auto,2>* rel_253_Tamiflex_Class_NewInstance;
// -- Table: _ClassModifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_254_ClassModifier;
souffle::RelationWrapper<72,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_254_ClassModifier;
// -- Table: ClassHasPossibleEntryPoint
ram::Relation<Auto,1>* rel_255_ClassHasPossibleEntryPoint;
// -- Table: PrefixAbove
ram::Relation<Auto,3>* rel_256_PrefixAbove;
// -- Table: PrefixBelow
ram::Relation<Auto,2>* rel_257_PrefixBelow;
// -- Table: ClassIsAboveOtherInNamingHierarchy
ram::Relation<Auto,2, ram::index<1>>* rel_258_ClassIsAboveOtherInNamingHierarchy;
// -- Table: ClassWithTopLevelEntryPoint
ram::Relation<Auto,1, ram::index<0>>* rel_259_ClassWithTopLevelEntryPoint;
// -- Table: PossibleEntryPoint
ram::Relation<Auto,1>* rel_260_PossibleEntryPoint;
// -- Table: TopLevelEntryPoint
ram::Relation<Auto,1, ram::index<0>>* rel_261_TopLevelEntryPoint;
// -- Table: FormalsForEntryPoints
ram::Relation<Auto,2>* rel_262_FormalsForEntryPoints;
// -- Table: AllConcreteImplementations
ram::Relation<Auto,2, ram::index<1>>* rel_263_AllConcreteImplementations;
// -- Table: TypeToConcreteImplementationOrd
ram::Relation<Auto,2>* rel_264_TypeToConcreteImplementationOrd;
// -- Table: ConcreteImplementations
ram::Relation<Auto,2>* rel_265_ConcreteImplementations;
// -- Table: ConcreteType
ram::Relation<Auto,1, ram::index<0>>* rel_266_ConcreteType;
// -- Table: StaticToActualType
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_267_StaticToActualType;
// -- Table: ObjToMock
ram::Relation<Auto,1, ram::index<0>>* rel_268_ObjToMock;
// -- Table: @delta_ObjToMock
ram::Relation<Auto,1>* rel_269_delta_ObjToMock;
// -- Table: @new_ObjToMock
ram::Relation<Auto,1>* rel_270_new_ObjToMock;
// -- Table: MockObject
ram::Relation<Auto,2, ram::index<1>>* rel_271_MockObject;
// -- Table: MockObjectForType
ram::Relation<Auto,2, ram::index<1>>* rel_272_MockObjectForType;
// -- Table: MockObjectForComponentType
ram::Relation<Auto,2, ram::index<1>>* rel_273_MockObjectForComponentType;
// -- Table: TypeForFormals
ram::Relation<Auto,3>* rel_274_TypeForFormals;
// -- Table: MockForFormal
ram::Relation<Auto,4, ram::index<3>>* rel_275_MockForFormal;
// -- Table: ConcreteClass
ram::Relation<Auto,1, ram::index<0>>* rel_276_ConcreteClass;
// -- Table: isImmutableHContext
ram::Relation<Auto,1>* rel_277_isImmutableHContext;
// -- Table: ContextForEntryPoint
ram::Relation<Auto,2>* rel_278_ContextForEntryPoint;
// -- Table: ReceiverPointsTo
ram::Relation<Auto,5>* rel_279_ReceiverPointsTo;
// -- Table: HContextForEntryPoint
ram::Relation<Auto,2, ram::index<1>>* rel_280_HContextForEntryPoint;
// -- Table: MockObjectContext
ram::Relation<Auto,3>* rel_281_MockObjectContext;
// -- Table: _AndroidEntryPoint
ram::Relation<Auto,1>* rel_282_AndroidEntryPoint;
souffle::RelationWrapper<73,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_282_AndroidEntryPoint;
// -- Table: ImplicitReachable
ram::Relation<Auto,1>* rel_283_ImplicitReachable;
// -- Table: isJVMStartupHContext
ram::Relation<Auto,1>* rel_284_isJVMStartupHContext;
// -- Table: _LayoutControl
ram::Relation<Auto,3>* rel_285_LayoutControl;
souffle::RelationWrapper<74,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_285_LayoutControl;
// -- Table: LayoutControl
ram::Relation<Auto,3, ram::index<1>>* rel_286_LayoutControl;
// -- Table: ProtectedOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_287_ProtectedOnMethodOfLayoutControl;
// -- Table: OverridingProtectedOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_288_OverridingProtectedOnMethodOfLayoutControl;
// -- Table: Value_isMock
ram::Relation<Auto,1>* rel_289_Value_isMock;
// -- Table: PublicOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_290_PublicOnMethodOfLayoutControl;
// -- Table: ReifiedLayoutControl
ram::Relation<Auto,3, ram::index<0,1>>* rel_291_ReifiedLayoutControl;
// -- Table: ReifiedAndroidObjectValue
ram::Relation<Auto,2, ram::index<1>>* rel_292_ReifiedAndroidObjectValue;
// -- Table: ViewObjectValueFromId
ram::Relation<Auto,2, ram::index<1>>* rel_293_ViewObjectValueFromId;
// -- Table: _FieldInitialValue
ram::Relation<Auto,2, ram::index<1>>* rel_294_FieldInitialValue;
souffle::RelationWrapper<75,ram::Relation<Auto,2, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_294_FieldInitialValue;
// -- Table: isValue
ram::Relation<Auto,1, ram::index<0>>* rel_295_isValue;
// -- Table: MainThread
ram::Relation<Auto,2>* rel_296_MainThread;
// -- Table: MainThreadGroup
ram::Relation<Auto,2>* rel_297_MainThreadGroup;
// -- Table: SystemThreadGroup
ram::Relation<Auto,2>* rel_298_SystemThreadGroup;
// -- Table: ObjectShouldNotBeRefined
ram::Relation<Auto,1, ram::index<0>>* rel_299_ObjectShouldNotBeRefined;
// -- Table: Value_Type
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_300_Value_Type;
souffle::RelationWrapper<76,ram::Relation<Auto,2, ram::index<0>, ram::index<1>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_300_Value_Type;
// -- Table: Value_Num
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_301_Value_Num;
// -- Table: Value_isNonHeap
ram::Relation<Auto,1>* rel_302_Value_isNonHeap;
// -- Table: NotEmptyArrayValue
ram::Relation<Auto,1, ram::index<0>>* rel_303_NotEmptyArrayValue;
// -- Table: NotSpecialObject
ram::Relation<Auto,1, ram::index<0>>* rel_304_NotSpecialObject;
// -- Table: MainMethodArgArray
ram::Relation<Auto,1>* rel_305_MainMethodArgArray;
// -- Table: MainMethodArgArrayContent
ram::Relation<Auto,1>* rel_306_MainMethodArgArrayContent;
// -- Table: _ExceptionHandler
ram::Relation<Auto,7>* rel_307_ExceptionHandler;
souffle::RelationWrapper<77,ram::Relation<Auto,7>,Tuple<RamDomain,7>,7,true,false> wrapper_rel_307_ExceptionHandler;
// -- Table: ExceptionHandler_FormalParam
ram::Relation<Auto,2, ram::index<0>>* rel_308_ExceptionHandler_FormalParam;
// -- Table: ExceptionHandler_Begin
ram::Relation<Auto,2, ram::index<0>>* rel_309_ExceptionHandler_Begin;
// -- Table: ExceptionHandler_End
ram::Relation<Auto,2, ram::index<0>>* rel_310_ExceptionHandler_End;
// -- Table: ExceptionHandler_Method
ram::Relation<Auto,2>* rel_311_ExceptionHandler_Method;
// -- Table: ExceptionHandler_InRange
ram::Relation<Auto,2, ram::index<1>>* rel_312_ExceptionHandler_InRange;
// -- Table: ExceptionHandler_Type
ram::Relation<Auto,2, ram::index<0>>* rel_313_ExceptionHandler_Type;
// -- Table: ExceptionHandler_Index
ram::Relation<Auto,2, ram::index<0,1>>* rel_314_ExceptionHandler_Index;
// -- Table: _ExceptionHandler_Previous
ram::Relation<Auto,2, ram::index<0>>* rel_315_ExceptionHandler_Previous;
souffle::RelationWrapper<78,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_315_ExceptionHandler_Previous;
// -- Table: ExceptionHandler_Before
ram::Relation<Auto,2, ram::index<0,1>>* rel_316_ExceptionHandler_Before;
// -- Table: @delta_ExceptionHandler_Before
ram::Relation<Auto,2>* rel_317_delta_ExceptionHandler_Before;
// -- Table: @new_ExceptionHandler_Before
ram::Relation<Auto,2>* rel_318_new_ExceptionHandler_Before;
// -- Table: ExceptionHandler_Impossible
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_319_ExceptionHandler_Impossible;
// -- Table: ExceptionHandler_SameBlock_PartialOrder
ram::Relation<Auto,2, ram::index<1>>* rel_320_ExceptionHandler_SameBlock_PartialOrder;
// -- Table: ExceptionHandler_SameInsn_PartialOrder
ram::Relation<Auto,3, ram::index<1,2>>* rel_321_ExceptionHandler_SameInsn_PartialOrder;
// -- Table: ExceptionHandler_SameInsn_Repr
ram::Relation<Auto,2, ram::index<0>>* rel_322_ExceptionHandler_SameInsn_Repr;
// -- Table: isExceptionHandler
ram::Relation<Auto,1>* rel_323_isExceptionHandler;
// -- Table: ExceptionHandler_SameBlock_Repr
ram::Relation<Auto,2, ram::index<0>>* rel_324_ExceptionHandler_SameBlock_Repr;
// -- Table: ExceptionHandler_TypeIsCaught
ram::Relation<Auto,2, ram::index<0,1>>* rel_325_ExceptionHandler_TypeIsCaught;
// -- Table: isImmutableContext
ram::Relation<Auto,1>* rel_326_isImmutableContext;
// -- Table: _replace_tpt
ram::Relation<Auto,6, ram::index<0,1,2>>* rel_327_replace_tpt;
souffle::RelationWrapper<79,ram::Relation<Auto,6, ram::index<0,1,2>>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_327_replace_tpt;
// -- Table: _replace_cge
ram::Relation<Auto,8, ram::index<0,1,2,3>>* rel_328_replace_cge;
souffle::RelationWrapper<80,ram::Relation<Auto,8, ram::index<0,1,2,3>>,Tuple<RamDomain,8>,8,true,false> wrapper_rel_328_replace_cge;
// -- Table: HasItsc
ram::Relation<Auto,7, ram::index<0,1,2,3>, ram::index<4,5,6>>* rel_329_HasItsc;
// -- Table: Itsc
ram::Relation<Auto,8, ram::index<0,1,2,3,4,5,6>>* rel_330_Itsc;
// -- Table: isClinitContext
ram::Relation<Auto,1>* rel_331_isClinitContext;
// -- Table: isInitialContext
ram::Relation<Auto,1>* rel_332_isInitialContext;
// -- Table: isJVMStartupContext
ram::Relation<Auto,1>* rel_333_isJVMStartupContext;
// -- Table: ForcedReachableAndroidContext
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_334_ForcedReachableAndroidContext;
// -- Table: @delta_ForcedReachableAndroidContext
ram::Relation<Auto,2>* rel_335_delta_ForcedReachableAndroidContext;
// -- Table: @new_ForcedReachableAndroidContext
ram::Relation<Auto,2>* rel_336_new_ForcedReachableAndroidContext;
// -- Table: ReachableApplicationObjectOfType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_337_ReachableApplicationObjectOfType;
// -- Table: @delta_ReachableApplicationObjectOfType
ram::Relation<Auto,3>* rel_338_delta_ReachableApplicationObjectOfType;
// -- Table: @new_ReachableApplicationObjectOfType
ram::Relation<Auto,3>* rel_339_new_ReachableApplicationObjectOfType;
// -- Table: ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_340_ApplicationObjectFlowingToLibrary;
// -- Table: @delta_ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_341_delta_ApplicationObjectFlowingToLibrary;
// -- Table: @new_ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_342_new_ApplicationObjectFlowingToLibrary;
// -- Table: PublicOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_343_PublicOnMethodOfReachableListener;
// -- Table: @delta_PublicOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_344_delta_PublicOnMethodOfReachableListener;
// -- Table: @new_PublicOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_345_new_PublicOnMethodOfReachableListener;
// -- Table: LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_346_LibraryReachableAppListenerType;
// -- Table: @delta_LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_347_delta_LibraryReachableAppListenerType;
// -- Table: @new_LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_348_new_LibraryReachableAppListenerType;
// -- Table: ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_349_ProtectedOnMethodOfReachableListener;
// -- Table: @delta_ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_350_delta_ProtectedOnMethodOfReachableListener;
// -- Table: @new_ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_351_new_ProtectedOnMethodOfReachableListener;
// -- Table: OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_352_OverridingProtectedOnMethodOfReachableListener;
// -- Table: @delta_OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_353_delta_OverridingProtectedOnMethodOfReachableListener;
// -- Table: @new_OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_354_new_OverridingProtectedOnMethodOfReachableListener;
// -- Table: FormalOfForcedReachableContext
ram::Relation<Auto,3, ram::index<2>, ram::index<0,1,2>>* rel_355_FormalOfForcedReachableContext;
// -- Table: @delta_FormalOfForcedReachableContext
ram::Relation<Auto,3>* rel_356_delta_FormalOfForcedReachableContext;
// -- Table: @new_FormalOfForcedReachableContext
ram::Relation<Auto,3>* rel_357_new_FormalOfForcedReachableContext;
// -- Table: ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_358_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: @delta_ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_359_delta_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: @new_ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_360_new_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: InitializedClass
ram::Relation<Auto,1, ram::index<0>>* rel_361_InitializedClass;
// -- Table: @delta_InitializedClass
ram::Relation<Auto,1>* rel_362_delta_InitializedClass;
// -- Table: @new_InitializedClass
ram::Relation<Auto,1>* rel_363_new_InitializedClass;
// -- Table: Instruction_Throws
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_364_Instruction_Throws;
souffle::RelationWrapper<81,ram::Relation<Auto,4, ram::index<0,1,2,3>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_364_Instruction_Throws;
// -- Table: @delta_Instruction_Throws
ram::Relation<Auto,4>* rel_365_delta_Instruction_Throws;
// -- Table: @new_Instruction_Throws
ram::Relation<Auto,4>* rel_366_new_Instruction_Throws;
// -- Table: ThrowPointsTo
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_367_ThrowPointsTo;
souffle::RelationWrapper<82,ram::Relation<Auto,4, ram::index<0,1,2,3>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_367_ThrowPointsTo;
// -- Table: @delta_ThrowPointsTo
ram::Relation<Auto,4>* rel_368_delta_ThrowPointsTo;
// -- Table: @new_ThrowPointsTo
ram::Relation<Auto,4>* rel_369_new_ThrowPointsTo;
// -- Table: RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_370_RunningThread;
// -- Table: @delta_RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_371_delta_RunningThread;
// -- Table: @new_RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_372_new_RunningThread;
// -- Table: ReachableCurrentThreadInvocation
ram::Relation<Auto,2, ram::index<0,1>>* rel_373_ReachableCurrentThreadInvocation;
// -- Table: @delta_ReachableCurrentThreadInvocation
ram::Relation<Auto,2>* rel_374_delta_ReachableCurrentThreadInvocation;
// -- Table: @new_ReachableCurrentThreadInvocation
ram::Relation<Auto,2>* rel_375_new_ReachableCurrentThreadInvocation;
// -- Table: isContext
ram::Relation<Auto,1, ram::index<0>>* rel_376_isContext;
// -- Table: @delta_isContext
ram::Relation<Auto,1>* rel_377_delta_isContext;
// -- Table: @new_isContext
ram::Relation<Auto,1>* rel_378_new_isContext;
// -- Table: isHContext
ram::Relation<Auto,1, ram::index<0>>* rel_379_isHContext;
// -- Table: @delta_isHContext
ram::Relation<Auto,1>* rel_380_delta_isHContext;
// -- Table: @new_isHContext
ram::Relation<Auto,1>* rel_381_new_isHContext;
// -- Table: ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_382_ImmutableContextFromHContext;
// -- Table: @delta_ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_383_delta_ImmutableContextFromHContext;
// -- Table: @new_ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_384_new_ImmutableContextFromHContext;
// -- Table: ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_385_ImmutableHContextFromContext;
// -- Table: @delta_ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_386_delta_ImmutableHContextFromContext;
// -- Table: @new_ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_387_new_ImmutableHContextFromContext;
// -- Table: ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_388_ImmutableContextFromContext;
// -- Table: @delta_ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_389_delta_ImmutableContextFromContext;
// -- Table: @new_ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_390_new_ImmutableContextFromContext;
// -- Table: VarPointsTo
ram::Relation<Auto,4, ram::index<3,2,0,1>>* rel_391_VarPointsTo;
souffle::RelationWrapper<83,ram::Relation<Auto,4, ram::index<3,2,0,1>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_391_VarPointsTo;
// -- Table: @delta_VarPointsTo
ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>* rel_392_delta_VarPointsTo;
// -- Table: @new_VarPointsTo
ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>* rel_393_new_VarPointsTo;
// -- Table: InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<4,2,3,0,1>>* rel_394_InstanceFieldPointsTo;
// -- Table: @delta_InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<0,1,2,3,4>>* rel_395_delta_InstanceFieldPointsTo;
// -- Table: @new_InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<0,1,2,3,4>>* rel_396_new_InstanceFieldPointsTo;
// -- Table: StaticFieldPointsTo
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_397_StaticFieldPointsTo;
// -- Table: @delta_StaticFieldPointsTo
ram::Relation<Auto,3>* rel_398_delta_StaticFieldPointsTo;
// -- Table: @new_StaticFieldPointsTo
ram::Relation<Auto,3>* rel_399_new_StaticFieldPointsTo;
// -- Table: ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<3,2,0,1>>* rel_400_ArrayIndexPointsTo;
// -- Table: @delta_ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_401_delta_ArrayIndexPointsTo;
// -- Table: @new_ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_402_new_ArrayIndexPointsTo;
// -- Table: CallGraphEdge
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_403_CallGraphEdge;
souffle::RelationWrapper<84,ram::Relation<Auto,4, ram::index<0,1,2,3>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_403_CallGraphEdge;
// -- Table: @delta_CallGraphEdge
ram::Relation<Auto,4>* rel_404_delta_CallGraphEdge;
// -- Table: @new_CallGraphEdge
ram::Relation<Auto,4>* rel_405_new_CallGraphEdge;
// -- Table: Reachable
ram::Relation<Auto,1, ram::index<0>>* rel_406_Reachable;
souffle::RelationWrapper<85,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_406_Reachable;
// -- Table: @delta_Reachable
ram::Relation<Auto,1>* rel_407_delta_Reachable;
// -- Table: @new_Reachable
ram::Relation<Auto,1>* rel_408_new_Reachable;
// -- Table: ReachableContext
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_409_ReachableContext;
// -- Table: @delta_ReachableContext
ram::Relation<Auto,2, ram::index<1,0>>* rel_410_delta_ReachableContext;
// -- Table: @new_ReachableContext
ram::Relation<Auto,2, ram::index<1,0>>* rel_411_new_ReachableContext;
// -- Table: OptInterproceduralAssign
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_412_OptInterproceduralAssign;
// -- Table: @delta_OptInterproceduralAssign
ram::Relation<Auto,4>* rel_413_delta_OptInterproceduralAssign;
// -- Table: @new_OptInterproceduralAssign
ram::Relation<Auto,4>* rel_414_new_OptInterproceduralAssign;
// -- Table: OptStoreIntoArray
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_415_OptStoreIntoArray;
// -- Table: @delta_OptStoreIntoArray
ram::Relation<Auto,4>* rel_416_delta_OptStoreIntoArray;
// -- Table: @new_OptStoreIntoArray
ram::Relation<Auto,4>* rel_417_new_OptStoreIntoArray;
// -- Table: LoadHeapInstanceField
ram::Relation<Auto,5, ram::index<2,3,4,0,1>>* rel_418_LoadHeapInstanceField;
// -- Table: @delta_LoadHeapInstanceField
ram::Relation<Auto,5>* rel_419_delta_LoadHeapInstanceField;
// -- Table: @new_LoadHeapInstanceField
ram::Relation<Auto,5>* rel_420_new_LoadHeapInstanceField;
// -- Table: StoreHeapInstanceField
ram::Relation<Auto,5, ram::index<3,4,0,1,2>>* rel_421_StoreHeapInstanceField;
souffle::RelationWrapper<86,ram::Relation<Auto,5, ram::index<3,4,0,1,2>>,Tuple<RamDomain,5>,5,false,true> wrapper_rel_421_StoreHeapInstanceField;
// -- Table: @delta_StoreHeapInstanceField
ram::Relation<Auto,5>* rel_422_delta_StoreHeapInstanceField;
// -- Table: @new_StoreHeapInstanceField
ram::Relation<Auto,5>* rel_423_new_StoreHeapInstanceField;
// -- Table: LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_424_LoadHeapArrayIndex;
// -- Table: @delta_LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_425_delta_LoadHeapArrayIndex;
// -- Table: @new_LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_426_new_LoadHeapArrayIndex;
// -- Table: StoreHeapArrayIndex
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_427_StoreHeapArrayIndex;
// -- Table: @delta_StoreHeapArrayIndex
ram::Relation<Auto,4>* rel_428_delta_StoreHeapArrayIndex;
// -- Table: @new_StoreHeapArrayIndex
ram::Relation<Auto,4>* rel_429_new_StoreHeapArrayIndex;
// -- Table: AbstractCallGraphEdge
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_430_AbstractCallGraphEdge;
// -- Table: @delta_AbstractCallGraphEdge
ram::Relation<Auto,4>* rel_431_delta_AbstractCallGraphEdge;
// -- Table: @new_AbstractCallGraphEdge
ram::Relation<Auto,4>* rel_432_new_AbstractCallGraphEdge;
// -- Table: AbstractThrowPointsTo
ram::Relation<Auto,4, ram::index<3,0,1,2>>* rel_433_AbstractThrowPointsTo;
// -- Table: @delta_AbstractThrowPointsTo
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_434_delta_AbstractThrowPointsTo;
// -- Table: @new_AbstractThrowPointsTo
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_435_new_AbstractThrowPointsTo;
// -- Table: OptAssignCast
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_436_OptAssignCast;
// -- Table: @delta_OptAssignCast
ram::Relation<Auto,3>* rel_437_delta_OptAssignCast;
// -- Table: @new_OptAssignCast
ram::Relation<Auto,3>* rel_438_new_OptAssignCast;
// -- Table: ReachableStoreStaticFieldFrom
ram::Relation<Auto,1, ram::index<0>>* rel_439_ReachableStoreStaticFieldFrom;
// -- Table: @delta_ReachableStoreStaticFieldFrom
ram::Relation<Auto,1>* rel_440_delta_ReachableStoreStaticFieldFrom;
// -- Table: @new_ReachableStoreStaticFieldFrom
ram::Relation<Auto,1>* rel_441_new_ReachableStoreStaticFieldFrom;
// -- Table: OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<0,1>>* rel_442_OptLoadHeapArrayIndex;
// -- Table: @delta_OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_443_delta_OptLoadHeapArrayIndex;
// -- Table: @new_OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_444_new_OptLoadHeapArrayIndex;
// -- Table: Temp1
ram::Relation<Auto,2, ram::index<0,1>>* rel_445_Temp1;
// -- Table: @delta_Temp1
ram::Relation<Auto,2>* rel_446_delta_Temp1;
// -- Table: @new_Temp1
ram::Relation<Auto,2>* rel_447_new_Temp1;
// -- Table: Temp2
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_448_Temp2;
// -- Table: @delta_Temp2
ram::Relation<Auto,4>* rel_449_delta_Temp2;
// -- Table: @new_Temp2
ram::Relation<Auto,4>* rel_450_new_Temp2;
// -- Table: ReachableLoadArrayIndexBase
ram::Relation<Auto,1, ram::index<0>>* rel_451_ReachableLoadArrayIndexBase;
// -- Table: @delta_ReachableLoadArrayIndexBase
ram::Relation<Auto,1>* rel_452_delta_ReachableLoadArrayIndexBase;
// -- Table: @new_ReachableLoadArrayIndexBase
ram::Relation<Auto,1>* rel_453_new_ReachableLoadArrayIndexBase;
// -- Table: ReachableStoreArrayIndexBase
ram::Relation<Auto,1, ram::index<0>>* rel_454_ReachableStoreArrayIndexBase;
// -- Table: @delta_ReachableStoreArrayIndexBase
ram::Relation<Auto,1>* rel_455_delta_ReachableStoreArrayIndexBase;
// -- Table: @new_ReachableStoreArrayIndexBase
ram::Relation<Auto,1>* rel_456_new_ReachableStoreArrayIndexBase;
// -- Table: OptVirtualMethodInvocationBase
ram::Relation<Auto,2, ram::index<0,1>>* rel_457_OptVirtualMethodInvocationBase;
souffle::RelationWrapper<87,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_457_OptVirtualMethodInvocationBase;
// -- Table: @delta_OptVirtualMethodInvocationBase
ram::Relation<Auto,2>* rel_458_delta_OptVirtualMethodInvocationBase;
// -- Table: @new_OptVirtualMethodInvocationBase
ram::Relation<Auto,2>* rel_459_new_OptVirtualMethodInvocationBase;
// -- Table: OptSpecialMethodInvocationBase
ram::Relation<Auto,2, ram::index<0,1>>* rel_460_OptSpecialMethodInvocationBase;
// -- Table: @delta_OptSpecialMethodInvocationBase
ram::Relation<Auto,2>* rel_461_delta_OptSpecialMethodInvocationBase;
// -- Table: @new_OptSpecialMethodInvocationBase
ram::Relation<Auto,2>* rel_462_new_OptSpecialMethodInvocationBase;
// -- Table: Tamiflex_Invoke
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_463_Tamiflex_Invoke;
// -- Table: @delta_Tamiflex_Invoke
ram::Relation<Auto,3>* rel_464_delta_Tamiflex_Invoke;
// -- Table: @new_Tamiflex_Invoke
ram::Relation<Auto,3>* rel_465_new_Tamiflex_Invoke;
// -- Table: TamiflexCallGraphEdge
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_466_TamiflexCallGraphEdge;
// -- Table: @delta_TamiflexCallGraphEdge
ram::Relation<Auto,4>* rel_467_delta_TamiflexCallGraphEdge;
// -- Table: @new_TamiflexCallGraphEdge
ram::Relation<Auto,4>* rel_468_new_TamiflexCallGraphEdge;
// -- Table: TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_469_TamiflexConstructorCallGraphEdge;
// -- Table: @delta_TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4>* rel_470_delta_TamiflexConstructorCallGraphEdge;
// -- Table: @new_TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4>* rel_471_new_TamiflexConstructorCallGraphEdge;
// -- Table: TamiflexInvocationFirstParam
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_472_TamiflexInvocationFirstParam;
// -- Table: @delta_TamiflexInvocationFirstParam
ram::Relation<Auto,4>* rel_473_delta_TamiflexInvocationFirstParam;
// -- Table: @new_TamiflexInvocationFirstParam
ram::Relation<Auto,4>* rel_474_new_TamiflexInvocationFirstParam;
// -- Table: TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_475_TamiflexInvocationArgumentArrayValue;
// -- Table: @delta_TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4>* rel_476_delta_TamiflexInvocationArgumentArrayValue;
// -- Table: @new_TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4>* rel_477_new_TamiflexInvocationArgumentArrayValue;
// -- Table: Stats_Simple_Application_ArrayIndexPointsTo
ram::Relation<Auto,4>* rel_478_Stats_Simple_Application_ArrayIndexPointsTo;
souffle::RelationWrapper<88,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_478_Stats_Simple_Application_ArrayIndexPointsTo;
// -- Table: Stats_Simple_InsensReachableApplicationMethod
ram::Relation<Auto,1, ram::index<0>>* rel_479_Stats_Simple_InsensReachableApplicationMethod;
souffle::RelationWrapper<89,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_479_Stats_Simple_InsensReachableApplicationMethod;
// -- Table: Stats_Simple_Application_ReachableVirtualMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation;
souffle::RelationWrapper<90,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation;
// -- Table: Stats_Simple_NonReachableApplicationConcreteMethod
ram::Relation<Auto,1>* rel_481_Stats_Simple_NonReachableApplicationConcreteMethod;
souffle::RelationWrapper<91,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_481_Stats_Simple_NonReachableApplicationConcreteMethod;
// -- Table: Stats_Simple_InsensVarPointsTo
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_482_Stats_Simple_InsensVarPointsTo;
souffle::RelationWrapper<92,ram::Relation<Auto,2, ram::index<0>, ram::index<1>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_482_Stats_Simple_InsensVarPointsTo;
// -- Table: Stats_Simple_Application_EmptyVirtualMethodInvocation
ram::Relation<Auto,1>* rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation;
souffle::RelationWrapper<93,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation;
// -- Table: Stats_Simple_Application_NullVirtualMethodInvocation
ram::Relation<Auto,1>* rel_484_Stats_Simple_Application_NullVirtualMethodInvocation;
souffle::RelationWrapper<94,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_484_Stats_Simple_Application_NullVirtualMethodInvocation;
// -- Table: Stats_Simple_AssignedVariable
ram::Relation<Auto,1>* rel_485_Stats_Simple_AssignedVariable;
souffle::RelationWrapper<95,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_485_Stats_Simple_AssignedVariable;
// -- Table: Stats_Simple_ReachableCast
ram::Relation<Auto,4, ram::index<0>>* rel_486_Stats_Simple_ReachableCast;
souffle::RelationWrapper<96,ram::Relation<Auto,4, ram::index<0>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_486_Stats_Simple_ReachableCast;
// -- Table: Stats_Simple_Application_ReachableCast
ram::Relation<Auto,4>* rel_487_Stats_Simple_Application_ReachableCast;
souffle::RelationWrapper<97,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_487_Stats_Simple_Application_ReachableCast;
// -- Table: Stats_Simple_Application_PotentiallyFailingCast
ram::Relation<Auto,3>* rel_488_Stats_Simple_Application_PotentiallyFailingCast;
souffle::RelationWrapper<98,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_488_Stats_Simple_Application_PotentiallyFailingCast;
// -- Table: Stats_Simple_PotentiallyFailingCast
ram::Relation<Auto,3>* rel_489_Stats_Simple_PotentiallyFailingCast;
souffle::RelationWrapper<99,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_489_Stats_Simple_PotentiallyFailingCast;
// -- Table: Stats_Simple_InsensReachableVar
ram::Relation<Auto,1>* rel_490_Stats_Simple_InsensReachableVar;
souffle::RelationWrapper<100,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_490_Stats_Simple_InsensReachableVar;
// -- Table: Stats_Simple_ReachableVar
ram::Relation<Auto,2>* rel_491_Stats_Simple_ReachableVar;
souffle::RelationWrapper<101,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_491_Stats_Simple_ReachableVar;
// -- Table: Stats_Simple_Application_InsensArrayIndexPointsTo
ram::Relation<Auto,2>* rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo;
souffle::RelationWrapper<102,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo;
// -- Table: Stats_Simple_Application_InsensInstanceFieldPointsTo
ram::Relation<Auto,3>* rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo;
souffle::RelationWrapper<103,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo;
// -- Table: Stats_Simple_Application_InsensVarPointsTo
ram::Relation<Auto,2>* rel_494_Stats_Simple_Application_InsensVarPointsTo;
souffle::RelationWrapper<104,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_494_Stats_Simple_Application_InsensVarPointsTo;
// -- Table: Stats_Simple_Application_InstanceFieldPointsTo
ram::Relation<Auto,5>* rel_495_Stats_Simple_Application_InstanceFieldPointsTo;
souffle::RelationWrapper<105,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,false,true> wrapper_rel_495_Stats_Simple_Application_InstanceFieldPointsTo;
// -- Table: Stats_Simple_InsensCallGraphEdge
ram::Relation<Auto,2, ram::index<0>>* rel_496_Stats_Simple_InsensCallGraphEdge;
souffle::RelationWrapper<106,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_496_Stats_Simple_InsensCallGraphEdge;
// -- Table: Stats_Simple_ReachableVirtualMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_497_Stats_Simple_ReachableVirtualMethodInvocation;
souffle::RelationWrapper<107,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_497_Stats_Simple_ReachableVirtualMethodInvocation;
// -- Table: Stats_Simple_VirtualCallGraphEdge
ram::Relation<Auto,2, ram::index<0>>* rel_498_Stats_Simple_VirtualCallGraphEdge;
souffle::RelationWrapper<108,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_498_Stats_Simple_VirtualCallGraphEdge;
// -- Table: Stats_Simple_VirtualTargets
ram::Relation<Auto,2>* rel_499_Stats_Simple_VirtualTargets;
// -- Table: Stats_Simple_PolymorphicCallSite
ram::Relation<Auto,1>* rel_500_Stats_Simple_PolymorphicCallSite;
souffle::RelationWrapper<109,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_500_Stats_Simple_PolymorphicCallSite;
// -- Table: Stats_Simple_Application_PolymorphicCallSite
ram::Relation<Auto,1>* rel_501_Stats_Simple_Application_PolymorphicCallSite;
souffle::RelationWrapper<110,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_501_Stats_Simple_Application_PolymorphicCallSite;
// -- Table: Stats_Simple_EmptyVirtualMethodInvocation
ram::Relation<Auto,1>* rel_502_Stats_Simple_EmptyVirtualMethodInvocation;
souffle::RelationWrapper<111,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_502_Stats_Simple_EmptyVirtualMethodInvocation;
// -- Table: Stats_Simple_NullVirtualMethodInvocation
ram::Relation<Auto,1>* rel_503_Stats_Simple_NullVirtualMethodInvocation;
souffle::RelationWrapper<112,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_503_Stats_Simple_NullVirtualMethodInvocation;
// -- Table: Stats_Simple_Application_ReachableMethod
ram::Relation<Auto,1>* rel_504_Stats_Simple_Application_ReachableMethod;
souffle::RelationWrapper<113,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_504_Stats_Simple_Application_ReachableMethod;
// -- Table: Stats_Simple_Application_VarPointsTo
ram::Relation<Auto,4>* rel_505_Stats_Simple_Application_VarPointsTo;
souffle::RelationWrapper<114,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_505_Stats_Simple_Application_VarPointsTo;
// -- Table: Stats_Simple_InsensArrayIndexPointsTo
ram::Relation<Auto,2>* rel_506_Stats_Simple_InsensArrayIndexPointsTo;
souffle::RelationWrapper<115,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_506_Stats_Simple_InsensArrayIndexPointsTo;
// -- Table: Stats_Simple_InsensInstanceFieldPointsTo
ram::Relation<Auto,3>* rel_507_Stats_Simple_InsensInstanceFieldPointsTo;
souffle::RelationWrapper<116,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_507_Stats_Simple_InsensInstanceFieldPointsTo;
// -- Table: Stats_Simple_InsensStaticFieldPointsTo
ram::Relation<Auto,2>* rel_508_Stats_Simple_InsensStaticFieldPointsTo;
souffle::RelationWrapper<117,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_508_Stats_Simple_InsensStaticFieldPointsTo;
// -- Table: Stats_Metrics
ram::Relation<Auto,3>* rel_509_Stats_Metrics;
souffle::RelationWrapper<118,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_509_Stats_Metrics;
// -- Table: Stats_Simple_ReachableApplicationMethod
ram::Relation<Auto,2>* rel_510_Stats_Simple_ReachableApplicationMethod;
souffle::RelationWrapper<119,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_510_Stats_Simple_ReachableApplicationMethod;
public:
Sf_pts2o1h_itsc(std::string pf="profile.log") : profiling_fname(pf),
rel_1_AssignHeapAllocation(new ram::Relation<Auto,5>()),
wrapper_rel_1_AssignHeapAllocation(*rel_1_AssignHeapAllocation,symTable,"_AssignHeapAllocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?heap","?to","?inmethod"}),
rel_2_AssignHeapAllocation_Heap(new ram::Relation<Auto,2, ram::index<0>>()),
rel_3_isAssignHeapAllocation_Insn(new ram::Relation<Auto,1>()),
rel_4_AssignBinop(new ram::Relation<Auto,4>()),
wrapper_rel_4_AssignBinop(*rel_4_AssignBinop,symTable,"_AssignBinop",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?inmethod"}),
rel_5_AssignCast(new ram::Relation<Auto,6>()),
wrapper_rel_5_AssignCast(*rel_5_AssignCast,symTable,"_AssignCast",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?to","?type","?inmethod"}),
rel_6_AssignCast_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_7_AssignCastNull(new ram::Relation<Auto,5>()),
wrapper_rel_7_AssignCastNull(*rel_7_AssignCastNull,symTable,"_AssignCastNull",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?type","?method"}),
rel_8_AssignCastNumConstant(new ram::Relation<Auto,6>()),
wrapper_rel_8_AssignCastNumConstant(*rel_8_AssignCastNumConstant,symTable,"_AssignCastNumConstant",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?const","?to","?type","?inmethod"}),
rel_9_AssignCastNumConstant_Id(new ram::Relation<Auto,2, ram::index<0>>()),
rel_10_AssignCast_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_11_isAssignCast_Insn(new ram::Relation<Auto,1>()),
rel_12_AssignInstanceOf(new ram::Relation<Auto,6>()),
wrapper_rel_12_AssignInstanceOf(*rel_12_AssignInstanceOf,symTable,"_AssignInstanceOf",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?to","?type","?inmethod"}),
rel_13_AssignLocal(new ram::Relation<Auto,5>()),
wrapper_rel_13_AssignLocal(*rel_13_AssignLocal,symTable,"_AssignLocal",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?to","?inmethod"}),
rel_14_AssignLocal_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_15_isAssignLocal_Insn(new ram::Relation<Auto,1>()),
rel_16_AssignNull(new ram::Relation<Auto,4>()),
wrapper_rel_16_AssignNull(*rel_16_AssignNull,symTable,"_AssignNull",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_17_isAssignNull_Insn(new ram::Relation<Auto,1>()),
rel_18_AssignNumConstant(new ram::Relation<Auto,5>()),
wrapper_rel_18_AssignNumConstant(*rel_18_AssignNumConstant,symTable,"_AssignNumConstant",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?const","?to","?inmethod"}),
rel_19_AssignNumConstant_Id(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_20_isNumConstant(new ram::Relation<Auto,1>()),
rel_21_AssignUnop(new ram::Relation<Auto,4>()),
wrapper_rel_21_AssignUnop(*rel_21_AssignUnop,symTable,"_AssignUnop",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?inmethod"}),
rel_22_AssignInstruction_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_23_Return(new ram::Relation<Auto,4>()),
wrapper_rel_23_Return(*rel_23_Return,symTable,"_Return",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_24_ReturnNonvoid_Var(new ram::Relation<Auto,2, ram::index<0>>()),
rel_25_isReturnNonvoid_Insn(new ram::Relation<Auto,1>()),
rel_26_NativeReturnVar(new ram::Relation<Auto,2>()),
wrapper_rel_26_NativeReturnVar(*rel_26_NativeReturnVar,symTable,"_NativeReturnVar",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?method"}),
rel_27_AssignPhantomInvoke(new ram::Relation<Auto,3>()),
wrapper_rel_27_AssignPhantomInvoke(*rel_27_AssignPhantomInvoke,symTable,"_AssignPhantomInvoke",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_28_BreakpointStmt(new ram::Relation<Auto,3>()),
wrapper_rel_28_BreakpointStmt(*rel_28_BreakpointStmt,symTable,"_BreakpointStmt",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_29_DynamicMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_29_DynamicMethodInvocation(*rel_29_DynamicMethodInvocation,symTable,"_DynamicMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?bootSignature","?dynName","?method"}),
rel_30_EnterMonitor(new ram::Relation<Auto,4>()),
wrapper_rel_30_EnterMonitor(*rel_30_EnterMonitor,symTable,"_EnterMonitor",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_31_ExitMonitor(new ram::Relation<Auto,4>()),
wrapper_rel_31_ExitMonitor(*rel_31_ExitMonitor,symTable,"_ExitMonitor",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_32_FormalParam(new ram::Relation<Auto,3, ram::index<1,0>>()),
wrapper_rel_32_FormalParam(*rel_32_FormalParam,symTable,"_FormalParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?method","?var"}),
rel_33_Goto(new ram::Relation<Auto,4>()),
wrapper_rel_33_Goto(*rel_33_Goto,symTable,"_Goto",std::array<const char *,4>{"s:symbol","i:number","i:number","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_34_If(new ram::Relation<Auto,4>()),
wrapper_rel_34_If(*rel_34_If,symTable,"_If",std::array<const char *,4>{"s:symbol","i:number","i:number","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_35_LoadArrayIndex(new ram::Relation<Auto,5>()),
wrapper_rel_35_LoadArrayIndex(*rel_35_LoadArrayIndex,symTable,"_LoadArrayIndex",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?base","?method"}),
rel_36_LoadArrayIndex_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_37_LoadArrayIndex_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_38_isLoadArrayIndex_Insn(new ram::Relation<Auto,1>()),
rel_39_LoadInstanceField(new ram::Relation<Auto,6>()),
wrapper_rel_39_LoadInstanceField(*rel_39_LoadInstanceField,symTable,"_LoadInstanceField",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?to","?base","?signature","?method"}),
rel_40_LoadInstanceField_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_41_LoadInstanceField_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_42_isLoadInstanceField_Insn(new ram::Relation<Auto,1>()),
rel_43_LoadStaticField(new ram::Relation<Auto,5>()),
wrapper_rel_43_LoadStaticField(*rel_43_LoadStaticField,symTable,"_LoadStaticField",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?signature","?method"}),
rel_44_LoadStaticField_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_45_isLoadStaticField_Insn(new ram::Relation<Auto,1>()),
rel_46_LookupSwitch(new ram::Relation<Auto,4>()),
wrapper_rel_46_LookupSwitch(*rel_46_LookupSwitch,symTable,"_LookupSwitch",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?key","?method"}),
rel_47_PhantomInvoke(new ram::Relation<Auto,3>()),
wrapper_rel_47_PhantomInvoke(*rel_47_PhantomInvoke,symTable,"_PhantomInvoke",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_48_ReturnVoid(new ram::Relation<Auto,3>()),
wrapper_rel_48_ReturnVoid(*rel_48_ReturnVoid,symTable,"_ReturnVoid",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_49_SpecialMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_49_SpecialMethodInvocation(*rel_49_SpecialMethodInvocation,symTable,"_SpecialMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?signature","?base","?method"}),
rel_50_StaticMethodInvocation(new ram::Relation<Auto,4>()),
wrapper_rel_50_StaticMethodInvocation(*rel_50_StaticMethodInvocation,symTable,"_StaticMethodInvocation",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?signature","?method"}),
rel_51_isStaticMethodInvocation_Insn(new ram::Relation<Auto,1, ram::index<0>>()),
rel_52_StoreArrayIndex(new ram::Relation<Auto,5>()),
wrapper_rel_52_StoreArrayIndex(*rel_52_StoreArrayIndex,symTable,"_StoreArrayIndex",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?base","?method"}),
rel_53_StoreArrayIndex_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_54_StoreArrayIndex_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_55_isStoreArrayIndex_Insn(new ram::Relation<Auto,1>()),
rel_56_StoreInstanceField(new ram::Relation<Auto,6>()),
wrapper_rel_56_StoreInstanceField(*rel_56_StoreInstanceField,symTable,"_StoreInstanceField",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?base","?signature","?method"}),
rel_57_StoreInstanceField_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_58_StoreInstanceField_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_59_isStoreInstanceField_Insn(new ram::Relation<Auto,1>()),
rel_60_StoreStaticField(new ram::Relation<Auto,5>()),
wrapper_rel_60_StoreStaticField(*rel_60_StoreStaticField,symTable,"_StoreStaticField",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?signature","?method"}),
rel_61_FieldInstruction_Signature(new ram::Relation<Auto,2, ram::index<0>>()),
rel_62_StoreStaticField_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_63_isStoreStaticField_Insn(new ram::Relation<Auto,1>()),
rel_64_TableSwitch(new ram::Relation<Auto,4>()),
wrapper_rel_64_TableSwitch(*rel_64_TableSwitch,symTable,"_TableSwitch",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?key","?method"}),
rel_65_Throw(new ram::Relation<Auto,4>()),
wrapper_rel_65_Throw(*rel_65_Throw,symTable,"_Throw",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_66_Throw_Var(new ram::Relation<Auto,2, ram::index<0>>()),
rel_67_ThrowNull(new ram::Relation<Auto,3>()),
wrapper_rel_67_ThrowNull(*rel_67_ThrowNull,symTable,"_ThrowNull",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_68_isThrow_Insn(new ram::Relation<Auto,1>()),
rel_69_Throw(new ram::Relation<Auto,2>()),
wrapper_rel_69_Throw(*rel_69_Throw,symTable,"Throw",std::array<const char *,2>{"s:Throw_Insn[s:Instruction]","s:Var"},std::array<const char *,2>{"?insn","?var"}),
rel_70_UnsupportedInstruction(new ram::Relation<Auto,3>()),
wrapper_rel_70_UnsupportedInstruction(*rel_70_UnsupportedInstruction,symTable,"_UnsupportedInstruction",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_71_VirtualMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_71_VirtualMethodInvocation(*rel_71_VirtualMethodInvocation,symTable,"_VirtualMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?signature","?base","?method"}),
rel_72_CallbackMethod(new ram::Relation<Auto,1>()),
wrapper_rel_72_CallbackMethod(*rel_72_CallbackMethod,symTable,"_CallbackMethod",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_73_Method(new ram::Relation<Auto,6>()),
wrapper_rel_73_Method(*rel_73_Method,symTable,"_Method",std::array<const char *,6>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?method","?simplename","?descriptor","?declaringType","?returnType","?jvmDescriptor"}),
rel_74_Method_DeclaringType(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_75_Method_Descriptor(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_76_Method_SimpleName(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_77_Method_ReturnType(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_78_Method_DeclaresException(new ram::Relation<Auto,2>()),
wrapper_rel_78_Method_DeclaresException(*rel_78_Method_DeclaresException,symTable,"_Method_DeclaresException",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?exceptionType","?method"}),
rel_79_Method_Modifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_79_Method_Modifier(*rel_79_Method_Modifier,symTable,"_Method_Modifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?mod","?method"}),
rel_80_MethodImplemented(new ram::Relation<Auto,4, ram::index<2>, ram::index<0,1,2>>()),
rel_81_ClassInitializer(new ram::Relation<Auto,2, ram::index<0>>()),
rel_82_ThisVar(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_82_ThisVar(*rel_82_ThisVar,symTable,"_ThisVar",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?method","?var"}),
rel_83_Var_DeclaringMethod(new ram::Relation<Auto,2>()),
wrapper_rel_83_Var_DeclaringMethod(*rel_83_Var_DeclaringMethod,symTable,"_Var_DeclaringMethod",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?method"}),
rel_84_isMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_85_Instruction_Method(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_86_delta_Instruction_Method(new ram::Relation<Auto,2, ram::index<0>>()),
rel_87_new_Instruction_Method(new ram::Relation<Auto,2, ram::index<0>>()),
rel_88_ReturnVar(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_89_delta_ReturnVar(new ram::Relation<Auto,2, ram::index<1>>()),
rel_90_new_ReturnVar(new ram::Relation<Auto,2, ram::index<1>>()),
rel_91_MethodInvocation_Method(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_92_StaticMethodInvocation(new ram::Relation<Auto,3, ram::index<1>, ram::index<2>>()),
rel_93_OptForNameInvocation(new ram::Relation<Auto,2>()),
rel_94_AssignNull(new ram::Relation<Auto,2, ram::index<1>>()),
rel_95_Instruction_Index(new ram::Relation<Auto,2, ram::index<0>>()),
rel_96_AssignCast(new ram::Relation<Auto,4, ram::index<1>, ram::index<3>>()),
rel_97_SpecialMethodInvocation_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_98_isVirtualMethodInvocation_Insn(new ram::Relation<Auto,1, ram::index<0>>()),
rel_99_VirtualMethodInvocation(new ram::Relation<Auto,3, ram::index<1>>()),
rel_100_VirtualMethodInvocation_Descriptor(new ram::Relation<Auto,2, ram::index<0>>()),
rel_101_VirtualMethodInvocation_SimpleName(new ram::Relation<Auto,2>()),
rel_102_VirtualMethodInvocation_Base(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_103_Type_null(new ram::Relation<Auto,1>()),
rel_104_HeapAllocation_Null(new ram::Relation<Auto,1, ram::index<0>>()),
rel_105_ClassHeap(new ram::Relation<Auto,2>()),
wrapper_rel_105_ClassHeap(*rel_105_ClassHeap,symTable,"_ClassHeap",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?instanceType"}),
rel_106_isClassHeap(new ram::Relation<Auto,1>()),
rel_107_Dacapo(new ram::Relation<Auto,2>()),
wrapper_rel_107_Dacapo(*rel_107_Dacapo,symTable,"_Dacapo",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?method"}),
rel_108_HeapAllocation_Keep(new ram::Relation<Auto,1, ram::index<0>>()),
rel_109_MethodHandleConstant(new ram::Relation<Auto,1>()),
wrapper_rel_109_MethodHandleConstant(*rel_109_MethodHandleConstant,symTable,"_MethodHandleConstant",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_110_NormalHeap(new ram::Relation<Auto,2>()),
wrapper_rel_110_NormalHeap(*rel_110_NormalHeap,symTable,"_NormalHeap",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?type"}),
rel_111_StringConstant(new ram::Relation<Auto,1>()),
wrapper_rel_111_StringConstant(*rel_111_StringConstant,symTable,"_StringConstant",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_112_isHeapAllocation(new ram::Relation<Auto,1, ram::index<0>>()),
rel_113_HeapAllocation_Type(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_114_Value_isHeap(new ram::Relation<Auto,1>()),
rel_115_isStringConstant(new ram::Relation<Auto,1, ram::index<0>>()),
rel_116_Activity(new ram::Relation<Auto,1>()),
wrapper_rel_116_Activity(*rel_116_Activity,symTable,"_Activity",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_117_ApplicationClass(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_117_ApplicationClass(*rel_117_ApplicationClass,symTable,"_ApplicationClass",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?type"}),
rel_118_ApplicationMethod(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_118_ApplicationMethod(*rel_118_ApplicationMethod,symTable,"ApplicationMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_119_Stats_Simple_Application_Cast(new ram::Relation<Auto,4>()),
wrapper_rel_119_Stats_Simple_Application_Cast(*rel_119_Stats_Simple_Application_Cast,symTable,"Stats_Simple_Application_Cast",std::array<const char *,4>{"s:Type","s:Var","s:Var","s:Method"},std::array<const char *,4>{"?type","?from","?to","?inmethod"}),
rel_120_Stats_Simple_Application_VirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_120_Stats_Simple_Application_VirtualMethodInvocation(*rel_120_Stats_Simple_Application_VirtualMethodInvocation,symTable,"Stats_Simple_Application_VirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_121_Stats_Simple_ApplicationConcreteMethod(new ram::Relation<Auto,1>()),
wrapper_rel_121_Stats_Simple_ApplicationConcreteMethod(*rel_121_Stats_Simple_ApplicationConcreteMethod,symTable,"Stats_Simple_ApplicationConcreteMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_122_ArrayType(new ram::Relation<Auto,1>()),
wrapper_rel_122_ArrayType(*rel_122_ArrayType,symTable,"_ArrayType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?arrayType"}),
rel_123_BroadcastReceiver(new ram::Relation<Auto,1>()),
wrapper_rel_123_BroadcastReceiver(*rel_123_BroadcastReceiver,symTable,"_BroadcastReceiver",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_124_ClassType(new ram::Relation<Auto,1>()),
wrapper_rel_124_ClassType(*rel_124_ClassType,symTable,"_ClassType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?class"}),
rel_125_ComponentType(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_125_ComponentType(*rel_125_ComponentType,symTable,"_ComponentType",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?arrayType","?componentType"}),
rel_126_isArrayType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_127_ContentProvider(new ram::Relation<Auto,1>()),
wrapper_rel_127_ContentProvider(*rel_127_ContentProvider,symTable,"_ContentProvider",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_128_DirectSuperclass(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
wrapper_rel_128_DirectSuperclass(*rel_128_DirectSuperclass,symTable,"_DirectSuperclass",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?superclass"}),
rel_129_Subclass(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_130_delta_Subclass(new ram::Relation<Auto,2>()),
rel_131_new_Subclass(new ram::Relation<Auto,2>()),
rel_132_isClassType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_133_ClassNameIndexes(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_134_delta_ClassNameIndexes(new ram::Relation<Auto,2>()),
rel_135_new_ClassNameIndexes(new ram::Relation<Auto,2>()),
rel_136_DotsInClassName(new ram::Relation<Auto,2, ram::index<0>>()),
rel_137_NotLastDot(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_138_LastDot(new ram::Relation<Auto,2, ram::index<0>>()),
rel_139_DirectSuperinterface(new ram::Relation<Auto,2>()),
wrapper_rel_139_DirectSuperinterface(*rel_139_DirectSuperinterface,symTable,"_DirectSuperinterface",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?interface"}),
rel_140_Superinterface(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_141_delta_Superinterface(new ram::Relation<Auto,2, ram::index<1>>()),
rel_142_new_Superinterface(new ram::Relation<Auto,2, ram::index<1>>()),
rel_143_InterfaceType(new ram::Relation<Auto,1>()),
wrapper_rel_143_InterfaceType(*rel_143_InterfaceType,symTable,"_InterfaceType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?interface"}),
rel_144_isInterfaceType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_145_isReferenceType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_146_Service(new ram::Relation<Auto,1>()),
wrapper_rel_146_Service(*rel_146_Service,symTable,"_Service",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_147_AndroidAppComponent(new ram::Relation<Auto,1>()),
rel_148_Var_Type(new ram::Relation<Auto,2>()),
wrapper_rel_148_Var_Type(*rel_148_Var_Type,symTable,"_Var_Type",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?type"}),
rel_149_isType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_150_AssignHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_151_OptAssignHeapAllocation(new ram::Relation<Auto,2, ram::index<1>>()),
rel_152_ObjectMultipleAllocated(new ram::Relation<Auto,1, ram::index<0>>()),
rel_153_MethodLookup(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_154_delta_MethodLookup(new ram::Relation<Auto,4, ram::index<2>>()),
rel_155_new_MethodLookup(new ram::Relation<Auto,4, ram::index<2>>()),
rel_156_OverridesFinalize(new ram::Relation<Auto,1, ram::index<0>>()),
rel_157_AllocatedObjectSupportsFinalize(new ram::Relation<Auto,2, ram::index<0>>()),
rel_158_FakeInvocation_RegisterFinalize0(new ram::Relation<Auto,2>()),
rel_159_MethodDeclaredOrInherited(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_160_delta_MethodDeclaredOrInherited(new ram::Relation<Auto,2>()),
rel_161_new_MethodDeclaredOrInherited(new ram::Relation<Auto,2>()),
rel_162_ProtectedMethodOfComponent(new ram::Relation<Auto,1>()),
rel_163_PublicMethodOfComponent(new ram::Relation<Auto,1>()),
rel_164_CollectionLibraryClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_165_SpecialLibraryClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_166_SpecialLibraryMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_167_SpecialLibraryObject(new ram::Relation<Auto,1>()),
rel_168_ImplicitlyInstantiatedLibraryType(new ram::Relation<Auto,1>()),
rel_169_ReifiedLibraryObject(new ram::Relation<Auto,2>()),
rel_170_AndroidLibraryType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_171_AndroidApplicationClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_172_AndroidLibraryListenerType(new ram::Relation<Auto,1>()),
rel_173_ReifiedComponent(new ram::Relation<Auto,2>()),
rel_174_ViewRetrievalByArg0MethodInvocation(new ram::Relation<Auto,1>()),
rel_175_Type_byte(new ram::Relation<Auto,1>()),
rel_176_Type_char(new ram::Relation<Auto,1>()),
rel_177_Type_double(new ram::Relation<Auto,1>()),
rel_178_Type_float(new ram::Relation<Auto,1>()),
rel_179_Type_int(new ram::Relation<Auto,1>()),
rel_180_Type_long(new ram::Relation<Auto,1>()),
rel_181_Type_short(new ram::Relation<Auto,1>()),
rel_182_isPrimitiveType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_183_SubtypeOf(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_184_delta_SubtypeOf(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_185_new_SubtypeOf(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_186_ExceptionType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_187_ExceptionTypeToHeap(new ram::Relation<Auto,2, ram::index<1>>()),
rel_188_ExceptionHeapTypeRepresentativeOrdinal(new ram::Relation<Auto,2>()),
rel_189_SupertypeOf(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_190_AppMethodOverridesAndroidLibraryMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_191_OverridingProtectedMethodOfComponent(new ram::Relation<Auto,1>()),
rel_192_ListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_193_AndroidApplicationListenerClass(new ram::Relation<Auto,1>()),
rel_194_StringFactoryType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_195_StringFactoryHeap(new ram::Relation<Auto,1, ram::index<0>>()),
rel_196_EmptyArray(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_196_EmptyArray(*rel_196_EmptyArray,symTable,"_EmptyArray",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_197_MethodAndTypeToHeap(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_198_AllocationsPerMethodAndType(new ram::Relation<Auto,3>()),
rel_199_MethodAllocationMergeThreshold(new ram::Relation<Auto,1>()),
rel_200_AllocationShouldBeMergedPerMethod(new ram::Relation<Auto,2>()),
rel_201_MethodAndTypeToMergedHeap(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_202_MinHeapOrdinalPerMethodAndType(new ram::Relation<Auto,3, ram::index<0>>()),
rel_203_MethodAndTypeToRepresentative(new ram::Relation<Auto,3>()),
rel_204_HeapRepresentative(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_205_HeapIsMergedString(new ram::Relation<Auto,1, ram::index<0>>()),
rel_206_HeapIsMergedStringFactory(new ram::Relation<Auto,1, ram::index<0>>()),
rel_207_RepresentativesToPickFrom(new ram::Relation<Auto,2, ram::index<1>>()),
rel_208_MinRepresentativeHeapToPickFromOrdinal(new ram::Relation<Auto,2, ram::index<0>>()),
rel_209_HeapAllocation_Merge(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_210_HeapAllocation_ContextInsensitive(new ram::Relation<Auto,1, ram::index<0>>()),
rel_211_AssignContextInsensitiveHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_212_HeapAllocation_Special(new ram::Relation<Auto,1, ram::index<0>>()),
rel_213_AssignNormalHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_214_Field(new ram::Relation<Auto,4>()),
wrapper_rel_214_Field(*rel_214_Field,symTable,"_Field",std::array<const char *,4>{"s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,4>{"?signature","?declaringClass","?simplename","?type"}),
rel_215_Field_DeclaringType(new ram::Relation<Auto,2, ram::index<0>>()),
rel_216_AssignReturnValue(new ram::Relation<Auto,2>()),
wrapper_rel_216_AssignReturnValue(*rel_216_AssignReturnValue,symTable,"_AssignReturnValue",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?invocation","?to"}),
rel_217_AssignReturnValue(new ram::Relation<Auto,2, ram::index<0>>()),
rel_218_Tamiflex_ReflectionData(new ram::Relation<Auto,6>()),
wrapper_rel_218_Tamiflex_ReflectionData(*rel_218_Tamiflex_ReflectionData,symTable,"_Tamiflex_ReflectionData",std::array<const char *,6>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","i:number"},std::array<const char *,6>{"?classStr","?methodStr","?mapped","?inClassStr","?inMethodStr","?lineNumber"}),
rel_219_Tamiflex_ToDoopFormat(new ram::Relation<Auto,2, ram::index<0>>()),
rel_220_Tamiflex_ReflectionData(new ram::Relation<Auto,6, ram::index<5>>()),
rel_221_MethodInvocation_Line(new ram::Relation<Auto,2, ram::index<1>>()),
wrapper_rel_221_MethodInvocation_Line(*rel_221_MethodInvocation_Line,symTable,"_MethodInvocation_Line",std::array<const char *,2>{"s:symbol","i:number"},std::array<const char *,2>{"?instruction","line"}),
rel_222_Tamiflex_ReflectionMap(new ram::Relation<Auto,2, ram::index<1>>()),
rel_223_Tamiflex_ReifiedFieldArray(new ram::Relation<Auto,3>()),
rel_224_Tamiflex_ReifiedMethod(new ram::Relation<Auto,3>()),
rel_225_Tamiflex_ReifiedMethodArray(new ram::Relation<Auto,3>()),
rel_226_Field_Modifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_226_Field_Modifier(*rel_226_Field_Modifier,symTable,"_Field_Modifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?modifier","?field"}),
rel_227_isField(new ram::Relation<Auto,1, ram::index<0>>()),
rel_228_LoadStaticField(new ram::Relation<Auto,3, ram::index<0>, ram::index<2>>()),
rel_229_Tamiflex_ReifiedField(new ram::Relation<Auto,3>()),
rel_230_MainClass(new ram::Relation<Auto,1>()),
rel_231_MainMethodDeclaration(new ram::Relation<Auto,1>()),
rel_232_ActualParam(new ram::Relation<Auto,3, ram::index<1,0>>()),
wrapper_rel_232_ActualParam(*rel_232_ActualParam,symTable,"_ActualParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?invocation","?var"}),
rel_233_StoreInstanceField(new ram::Relation<Auto,4>()),
rel_234_LoadInstanceField(new ram::Relation<Auto,4>()),
rel_235_VarsAtInvocationRetrievingView(new ram::Relation<Auto,2>()),
rel_236_BootstrapParam(new ram::Relation<Auto,3>()),
wrapper_rel_236_BootstrapParam(*rel_236_BootstrapParam,symTable,"_BootstrapParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?invocation","?var"}),
rel_237_isMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
rel_238_isVar(new ram::Relation<Auto,1, ram::index<0>>()),
rel_239_StoreStaticField(new ram::Relation<Auto,3, ram::index<0>, ram::index<2>>()),
rel_240_AssignLocal(new ram::Relation<Auto,3, ram::index<0>>()),
rel_241_Var_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_242_ResolveInvocation(new ram::Relation<Auto,3, ram::index<0,1>>()),
rel_243_SiteShouldNotBeRefined(new ram::Relation<Auto,1, ram::index<0>>()),
rel_244_StoreArrayIndex(new ram::Relation<Auto,3, ram::index<2>>()),
rel_245_OptStoreArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_246_LoadArrayIndex(new ram::Relation<Auto,3, ram::index<2>>()),
rel_247_OptLoadArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_248_Var_DeclaringMethod(new ram::Relation<Auto,2, ram::index<0>>()),
rel_249_ApplicationVar(new ram::Relation<Auto,1>()),
rel_250_isInstruction(new ram::Relation<Auto,1, ram::index<0>>()),
rel_251_Tamiflex_Constructor_NewInstance(new ram::Relation<Auto,3>()),
rel_252_Tamiflex_Array_NewInstance(new ram::Relation<Auto,2>()),
rel_253_Tamiflex_Class_NewInstance(new ram::Relation<Auto,2>()),
rel_254_ClassModifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_254_ClassModifier(*rel_254_ClassModifier,symTable,"_ClassModifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?modifier"}),
rel_255_ClassHasPossibleEntryPoint(new ram::Relation<Auto,1>()),
rel_256_PrefixAbove(new ram::Relation<Auto,3>()),
rel_257_PrefixBelow(new ram::Relation<Auto,2>()),
rel_258_ClassIsAboveOtherInNamingHierarchy(new ram::Relation<Auto,2, ram::index<1>>()),
rel_259_ClassWithTopLevelEntryPoint(new ram::Relation<Auto,1, ram::index<0>>()),
rel_260_PossibleEntryPoint(new ram::Relation<Auto,1>()),
rel_261_TopLevelEntryPoint(new ram::Relation<Auto,1, ram::index<0>>()),
rel_262_FormalsForEntryPoints(new ram::Relation<Auto,2>()),
rel_263_AllConcreteImplementations(new ram::Relation<Auto,2, ram::index<1>>()),
rel_264_TypeToConcreteImplementationOrd(new ram::Relation<Auto,2>()),
rel_265_ConcreteImplementations(new ram::Relation<Auto,2>()),
rel_266_ConcreteType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_267_StaticToActualType(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_268_ObjToMock(new ram::Relation<Auto,1, ram::index<0>>()),
rel_269_delta_ObjToMock(new ram::Relation<Auto,1>()),
rel_270_new_ObjToMock(new ram::Relation<Auto,1>()),
rel_271_MockObject(new ram::Relation<Auto,2, ram::index<1>>()),
rel_272_MockObjectForType(new ram::Relation<Auto,2, ram::index<1>>()),
rel_273_MockObjectForComponentType(new ram::Relation<Auto,2, ram::index<1>>()),
rel_274_TypeForFormals(new ram::Relation<Auto,3>()),
rel_275_MockForFormal(new ram::Relation<Auto,4, ram::index<3>>()),
rel_276_ConcreteClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_277_isImmutableHContext(new ram::Relation<Auto,1>()),
rel_278_ContextForEntryPoint(new ram::Relation<Auto,2>()),
rel_279_ReceiverPointsTo(new ram::Relation<Auto,5>()),
rel_280_HContextForEntryPoint(new ram::Relation<Auto,2, ram::index<1>>()),
rel_281_MockObjectContext(new ram::Relation<Auto,3>()),
rel_282_AndroidEntryPoint(new ram::Relation<Auto,1>()),
wrapper_rel_282_AndroidEntryPoint(*rel_282_AndroidEntryPoint,symTable,"_AndroidEntryPoint",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?method"}),
rel_283_ImplicitReachable(new ram::Relation<Auto,1>()),
rel_284_isJVMStartupHContext(new ram::Relation<Auto,1>()),
rel_285_LayoutControl(new ram::Relation<Auto,3>()),
wrapper_rel_285_LayoutControl(*rel_285_LayoutControl,symTable,"_LayoutControl",std::array<const char *,3>{"s:NumConstant","s:symbol","s:symbol"},std::array<const char *,3>{"?id","?typename","?parent"}),
rel_286_LayoutControl(new ram::Relation<Auto,3, ram::index<1>>()),
rel_287_ProtectedOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_288_OverridingProtectedOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_289_Value_isMock(new ram::Relation<Auto,1>()),
rel_290_PublicOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_291_ReifiedLayoutControl(new ram::Relation<Auto,3, ram::index<0,1>>()),
rel_292_ReifiedAndroidObjectValue(new ram::Relation<Auto,2, ram::index<1>>()),
rel_293_ViewObjectValueFromId(new ram::Relation<Auto,2, ram::index<1>>()),
rel_294_FieldInitialValue(new ram::Relation<Auto,2, ram::index<1>>()),
wrapper_rel_294_FieldInitialValue(*rel_294_FieldInitialValue,symTable,"_FieldInitialValue",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?fld","?valueString"}),
rel_295_isValue(new ram::Relation<Auto,1, ram::index<0>>()),
rel_296_MainThread(new ram::Relation<Auto,2>()),
rel_297_MainThreadGroup(new ram::Relation<Auto,2>()),
rel_298_SystemThreadGroup(new ram::Relation<Auto,2>()),
rel_299_ObjectShouldNotBeRefined(new ram::Relation<Auto,1, ram::index<0>>()),
rel_300_Value_Type(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
wrapper_rel_300_Value_Type(*rel_300_Value_Type,symTable,"Value_Type",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Type"},std::array<const char *,2>{"?value","?type"}),
rel_301_Value_Num(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_302_Value_isNonHeap(new ram::Relation<Auto,1>()),
rel_303_NotEmptyArrayValue(new ram::Relation<Auto,1, ram::index<0>>()),
rel_304_NotSpecialObject(new ram::Relation<Auto,1, ram::index<0>>()),
rel_305_MainMethodArgArray(new ram::Relation<Auto,1>()),
rel_306_MainMethodArgArrayContent(new ram::Relation<Auto,1>()),
rel_307_ExceptionHandler(new ram::Relation<Auto,7>()),
wrapper_rel_307_ExceptionHandler(*rel_307_ExceptionHandler,symTable,"_ExceptionHandler",std::array<const char *,7>{"s:symbol","s:symbol","i:number","s:symbol","s:symbol","i:number","i:number"},std::array<const char *,7>{"?handler","?method","?index","?type","?var","?begin","?end"}),
rel_308_ExceptionHandler_FormalParam(new ram::Relation<Auto,2, ram::index<0>>()),
rel_309_ExceptionHandler_Begin(new ram::Relation<Auto,2, ram::index<0>>()),
rel_310_ExceptionHandler_End(new ram::Relation<Auto,2, ram::index<0>>()),
rel_311_ExceptionHandler_Method(new ram::Relation<Auto,2>()),
rel_312_ExceptionHandler_InRange(new ram::Relation<Auto,2, ram::index<1>>()),
rel_313_ExceptionHandler_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_314_ExceptionHandler_Index(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_315_ExceptionHandler_Previous(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_315_ExceptionHandler_Previous(*rel_315_ExceptionHandler_Previous,symTable,"_ExceptionHandler_Previous",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?handler","?previous"}),
rel_316_ExceptionHandler_Before(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_317_delta_ExceptionHandler_Before(new ram::Relation<Auto,2>()),
rel_318_new_ExceptionHandler_Before(new ram::Relation<Auto,2>()),
rel_319_ExceptionHandler_Impossible(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_320_ExceptionHandler_SameBlock_PartialOrder(new ram::Relation<Auto,2, ram::index<1>>()),
rel_321_ExceptionHandler_SameInsn_PartialOrder(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_322_ExceptionHandler_SameInsn_Repr(new ram::Relation<Auto,2, ram::index<0>>()),
rel_323_isExceptionHandler(new ram::Relation<Auto,1>()),
rel_324_ExceptionHandler_SameBlock_Repr(new ram::Relation<Auto,2, ram::index<0>>()),
rel_325_ExceptionHandler_TypeIsCaught(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_326_isImmutableContext(new ram::Relation<Auto,1>()),
rel_327_replace_tpt(new ram::Relation<Auto,6, ram::index<0,1,2>>()),
wrapper_rel_327_replace_tpt(*rel_327_replace_tpt,symTable,"_replace_tpt",std::array<const char *,6>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?con_ctx1","?con_ctx2","?con_m","?abs_ctx1","?abs_ctx2","?abs_m"}),
rel_328_replace_cge(new ram::Relation<Auto,8, ram::index<0,1,2,3>>()),
wrapper_rel_328_replace_cge(*rel_328_replace_cge,symTable,"_replace_cge",std::array<const char *,8>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,8>{"?con_invo","?con_ctx1","?con_ctx2","?con_m","?abs_invo","?abs_ctx1","?abs_ctx2","?abs_m"}),
rel_329_HasItsc(new ram::Relation<Auto,7, ram::index<0,1,2,3>, ram::index<4,5,6>>()),
rel_330_Itsc(new ram::Relation<Auto,8, ram::index<0,1,2,3,4,5,6>>()),
rel_331_isClinitContext(new ram::Relation<Auto,1>()),
rel_332_isInitialContext(new ram::Relation<Auto,1>()),
rel_333_isJVMStartupContext(new ram::Relation<Auto,1>()),
rel_334_ForcedReachableAndroidContext(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_335_delta_ForcedReachableAndroidContext(new ram::Relation<Auto,2>()),
rel_336_new_ForcedReachableAndroidContext(new ram::Relation<Auto,2>()),
rel_337_ReachableApplicationObjectOfType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_338_delta_ReachableApplicationObjectOfType(new ram::Relation<Auto,3>()),
rel_339_new_ReachableApplicationObjectOfType(new ram::Relation<Auto,3>()),
rel_340_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_341_delta_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_342_new_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_343_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_344_delta_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_345_new_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_346_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_347_delta_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_348_new_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_349_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_350_delta_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_351_new_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_352_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_353_delta_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_354_new_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_355_FormalOfForcedReachableContext(new ram::Relation<Auto,3, ram::index<2>, ram::index<0,1,2>>()),
rel_356_delta_FormalOfForcedReachableContext(new ram::Relation<Auto,3>()),
rel_357_new_FormalOfForcedReachableContext(new ram::Relation<Auto,3>()),
rel_358_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_359_delta_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_360_new_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_361_InitializedClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_362_delta_InitializedClass(new ram::Relation<Auto,1>()),
rel_363_new_InitializedClass(new ram::Relation<Auto,1>()),
rel_364_Instruction_Throws(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
wrapper_rel_364_Instruction_Throws(*rel_364_Instruction_Throws,symTable,"Instruction_Throws",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Instruction"},std::array<const char *,4>{"?hctx","?value","?ctx","?insn"}),
rel_365_delta_Instruction_Throws(new ram::Relation<Auto,4>()),
rel_366_new_Instruction_Throws(new ram::Relation<Auto,4>()),
rel_367_ThrowPointsTo(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
wrapper_rel_367_ThrowPointsTo(*rel_367_ThrowPointsTo,symTable,"ThrowPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Method"},std::array<const char *,4>{"?hctx","?value","?ctx","?method"}),
rel_368_delta_ThrowPointsTo(new ram::Relation<Auto,4>()),
rel_369_new_ThrowPointsTo(new ram::Relation<Auto,4>()),
rel_370_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_371_delta_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_372_new_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_373_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_374_delta_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2>()),
rel_375_new_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2>()),
rel_376_isContext(new ram::Relation<Auto,1, ram::index<0>>()),
rel_377_delta_isContext(new ram::Relation<Auto,1>()),
rel_378_new_isContext(new ram::Relation<Auto,1>()),
rel_379_isHContext(new ram::Relation<Auto,1, ram::index<0>>()),
rel_380_delta_isHContext(new ram::Relation<Auto,1>()),
rel_381_new_isHContext(new ram::Relation<Auto,1>()),
rel_382_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_383_delta_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_384_new_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_385_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_386_delta_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_387_new_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_388_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_389_delta_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_390_new_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_391_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2,0,1>>()),
wrapper_rel_391_VarPointsTo(*rel_391_VarPointsTo,symTable,"VarPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,4>{"?hctx","?value","?ctx","?var"}),
rel_392_delta_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>()),
rel_393_new_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>()),
rel_394_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<4,2,3,0,1>>()),
rel_395_delta_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<0,1,2,3,4>>()),
rel_396_new_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<0,1,2,3,4>>()),
rel_397_StaticFieldPointsTo(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_398_delta_StaticFieldPointsTo(new ram::Relation<Auto,3>()),
rel_399_new_StaticFieldPointsTo(new ram::Relation<Auto,3>()),
rel_400_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<3,2,0,1>>()),
rel_401_delta_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_402_new_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_403_CallGraphEdge(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
wrapper_rel_403_CallGraphEdge(*rel_403_CallGraphEdge,symTable,"CallGraphEdge",std::array<const char *,4>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:MethodInvocation[s:Instruction]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Method"},std::array<const char *,4>{"?callerCtx","?invocation","?calleeCtx","?method"}),
rel_404_delta_CallGraphEdge(new ram::Relation<Auto,4>()),
rel_405_new_CallGraphEdge(new ram::Relation<Auto,4>()),
rel_406_Reachable(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_406_Reachable(*rel_406_Reachable,symTable,"Reachable",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_407_delta_Reachable(new ram::Relation<Auto,1>()),
rel_408_new_Reachable(new ram::Relation<Auto,1>()),
rel_409_ReachableContext(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_410_delta_ReachableContext(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_411_new_ReachableContext(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_412_OptInterproceduralAssign(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_413_delta_OptInterproceduralAssign(new ram::Relation<Auto,4>()),
rel_414_new_OptInterproceduralAssign(new ram::Relation<Auto,4>()),
rel_415_OptStoreIntoArray(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_416_delta_OptStoreIntoArray(new ram::Relation<Auto,4>()),
rel_417_new_OptStoreIntoArray(new ram::Relation<Auto,4>()),
rel_418_LoadHeapInstanceField(new ram::Relation<Auto,5, ram::index<2,3,4,0,1>>()),
rel_419_delta_LoadHeapInstanceField(new ram::Relation<Auto,5>()),
rel_420_new_LoadHeapInstanceField(new ram::Relation<Auto,5>()),
rel_421_StoreHeapInstanceField(new ram::Relation<Auto,5, ram::index<3,4,0,1,2>>()),
wrapper_rel_421_StoreHeapInstanceField(*rel_421_StoreHeapInstanceField,symTable,"StoreHeapInstanceField",std::array<const char *,5>{"s:Field","r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,5>{"?sig","?basehctx","?basevalue","?ctx","?from"}),
rel_422_delta_StoreHeapInstanceField(new ram::Relation<Auto,5>()),
rel_423_new_StoreHeapInstanceField(new ram::Relation<Auto,5>()),
rel_424_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_425_delta_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_426_new_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_427_StoreHeapArrayIndex(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_428_delta_StoreHeapArrayIndex(new ram::Relation<Auto,4>()),
rel_429_new_StoreHeapArrayIndex(new ram::Relation<Auto,4>()),
rel_430_AbstractCallGraphEdge(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_431_delta_AbstractCallGraphEdge(new ram::Relation<Auto,4>()),
rel_432_new_AbstractCallGraphEdge(new ram::Relation<Auto,4>()),
rel_433_AbstractThrowPointsTo(new ram::Relation<Auto,4, ram::index<3,0,1,2>>()),
rel_434_delta_AbstractThrowPointsTo(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_435_new_AbstractThrowPointsTo(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_436_OptAssignCast(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_437_delta_OptAssignCast(new ram::Relation<Auto,3>()),
rel_438_new_OptAssignCast(new ram::Relation<Auto,3>()),
rel_439_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1, ram::index<0>>()),
rel_440_delta_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1>()),
rel_441_new_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1>()),
rel_442_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_443_delta_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_444_new_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_445_Temp1(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_446_delta_Temp1(new ram::Relation<Auto,2>()),
rel_447_new_Temp1(new ram::Relation<Auto,2>()),
rel_448_Temp2(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_449_delta_Temp2(new ram::Relation<Auto,4>()),
rel_450_new_Temp2(new ram::Relation<Auto,4>()),
rel_451_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1, ram::index<0>>()),
rel_452_delta_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1>()),
rel_453_new_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1>()),
rel_454_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1, ram::index<0>>()),
rel_455_delta_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1>()),
rel_456_new_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1>()),
rel_457_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_457_OptVirtualMethodInvocationBase(*rel_457_OptVirtualMethodInvocationBase,symTable,"OptVirtualMethodInvocationBase",std::array<const char *,2>{"s:MethodInvocation[s:Instruction]","s:Var"},std::array<const char *,2>{"?invocation","?base"}),
rel_458_delta_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_459_new_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_460_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_461_delta_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_462_new_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_463_Tamiflex_Invoke(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_464_delta_Tamiflex_Invoke(new ram::Relation<Auto,3>()),
rel_465_new_Tamiflex_Invoke(new ram::Relation<Auto,3>()),
rel_466_TamiflexCallGraphEdge(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_467_delta_TamiflexCallGraphEdge(new ram::Relation<Auto,4>()),
rel_468_new_TamiflexCallGraphEdge(new ram::Relation<Auto,4>()),
rel_469_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_470_delta_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4>()),
rel_471_new_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4>()),
rel_472_TamiflexInvocationFirstParam(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_473_delta_TamiflexInvocationFirstParam(new ram::Relation<Auto,4>()),
rel_474_new_TamiflexInvocationFirstParam(new ram::Relation<Auto,4>()),
rel_475_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_476_delta_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4>()),
rel_477_new_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4>()),
rel_478_Stats_Simple_Application_ArrayIndexPointsTo(new ram::Relation<Auto,4>()),
wrapper_rel_478_Stats_Simple_Application_ArrayIndexPointsTo(*rel_478_Stats_Simple_Application_ArrayIndexPointsTo,symTable,"Stats_Simple_Application_ArrayIndexPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,4>{"?hctx","?value","?baseHCtx","?basevalue"}),
rel_479_Stats_Simple_InsensReachableApplicationMethod(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_479_Stats_Simple_InsensReachableApplicationMethod(*rel_479_Stats_Simple_InsensReachableApplicationMethod,symTable,"Stats_Simple_InsensReachableApplicationMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation(*rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation,symTable,"Stats_Simple_Application_ReachableVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_481_Stats_Simple_NonReachableApplicationConcreteMethod(new ram::Relation<Auto,1>()),
wrapper_rel_481_Stats_Simple_NonReachableApplicationConcreteMethod(*rel_481_Stats_Simple_NonReachableApplicationConcreteMethod,symTable,"Stats_Simple_NonReachableApplicationConcreteMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_482_Stats_Simple_InsensVarPointsTo(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
wrapper_rel_482_Stats_Simple_InsensVarPointsTo(*rel_482_Stats_Simple_InsensVarPointsTo,symTable,"Stats_Simple_InsensVarPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Var"},std::array<const char *,2>{"?value","?var"}),
rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation(*rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation,symTable,"Stats_Simple_Application_EmptyVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_484_Stats_Simple_Application_NullVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_484_Stats_Simple_Application_NullVirtualMethodInvocation(*rel_484_Stats_Simple_Application_NullVirtualMethodInvocation,symTable,"Stats_Simple_Application_NullVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_485_Stats_Simple_AssignedVariable(new ram::Relation<Auto,1>()),
wrapper_rel_485_Stats_Simple_AssignedVariable(*rel_485_Stats_Simple_AssignedVariable,symTable,"Stats_Simple_AssignedVariable",std::array<const char *,1>{"s:Var"},std::array<const char *,1>{"?var"}),
rel_486_Stats_Simple_ReachableCast(new ram::Relation<Auto,4, ram::index<0>>()),
wrapper_rel_486_Stats_Simple_ReachableCast(*rel_486_Stats_Simple_ReachableCast,symTable,"Stats_Simple_ReachableCast",std::array<const char *,4>{"s:Method","s:Type","s:Var","s:Var"},std::array<const char *,4>{"?inmethod","?type","?to","?from"}),
rel_487_Stats_Simple_Application_ReachableCast(new ram::Relation<Auto,4>()),
wrapper_rel_487_Stats_Simple_Application_ReachableCast(*rel_487_Stats_Simple_Application_ReachableCast,symTable,"Stats_Simple_Application_ReachableCast",std::array<const char *,4>{"s:Method","s:Type","s:Var","s:Var"},std::array<const char *,4>{"?inmethod","?type","?to","?from"}),
rel_488_Stats_Simple_Application_PotentiallyFailingCast(new ram::Relation<Auto,3>()),
wrapper_rel_488_Stats_Simple_Application_PotentiallyFailingCast(*rel_488_Stats_Simple_Application_PotentiallyFailingCast,symTable,"Stats_Simple_Application_PotentiallyFailingCast",std::array<const char *,3>{"s:Type","s:Var","s:Var"},std::array<const char *,3>{"?type","?from","?to"}),
rel_489_Stats_Simple_PotentiallyFailingCast(new ram::Relation<Auto,3>()),
wrapper_rel_489_Stats_Simple_PotentiallyFailingCast(*rel_489_Stats_Simple_PotentiallyFailingCast,symTable,"Stats_Simple_PotentiallyFailingCast",std::array<const char *,3>{"s:Type","s:Var","s:Var"},std::array<const char *,3>{"?type","?from","?to"}),
rel_490_Stats_Simple_InsensReachableVar(new ram::Relation<Auto,1>()),
wrapper_rel_490_Stats_Simple_InsensReachableVar(*rel_490_Stats_Simple_InsensReachableVar,symTable,"Stats_Simple_InsensReachableVar",std::array<const char *,1>{"s:Var"},std::array<const char *,1>{"?var"}),
rel_491_Stats_Simple_ReachableVar(new ram::Relation<Auto,2>()),
wrapper_rel_491_Stats_Simple_ReachableVar(*rel_491_Stats_Simple_ReachableVar,symTable,"Stats_Simple_ReachableVar",std::array<const char *,2>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,2>{"?ctx","?var"}),
rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo(*rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo,symTable,"Stats_Simple_Application_InsensArrayIndexPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,2>{"?value","?basevalue"}),
rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo(new ram::Relation<Auto,3>()),
wrapper_rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo(*rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo,symTable,"Stats_Simple_Application_InsensInstanceFieldPointsTo",std::array<const char *,3>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,3>{"?value","?sig","?basevalue"}),
rel_494_Stats_Simple_Application_InsensVarPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_494_Stats_Simple_Application_InsensVarPointsTo(*rel_494_Stats_Simple_Application_InsensVarPointsTo,symTable,"Stats_Simple_Application_InsensVarPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Var"},std::array<const char *,2>{"?value","?var"}),
rel_495_Stats_Simple_Application_InstanceFieldPointsTo(new ram::Relation<Auto,5>()),
wrapper_rel_495_Stats_Simple_Application_InstanceFieldPointsTo(*rel_495_Stats_Simple_Application_InstanceFieldPointsTo,symTable,"Stats_Simple_Application_InstanceFieldPointsTo",std::array<const char *,5>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","s:Field","r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,5>{"?hctx","?value","?sig","?baseHCtx","?basevalue"}),
rel_496_Stats_Simple_InsensCallGraphEdge(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_496_Stats_Simple_InsensCallGraphEdge(*rel_496_Stats_Simple_InsensCallGraphEdge,symTable,"Stats_Simple_InsensCallGraphEdge",std::array<const char *,2>{"s:MethodInvocation[s:Instruction]","s:Method"},std::array<const char *,2>{"?from","?to"}),
rel_497_Stats_Simple_ReachableVirtualMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_497_Stats_Simple_ReachableVirtualMethodInvocation(*rel_497_Stats_Simple_ReachableVirtualMethodInvocation,symTable,"Stats_Simple_ReachableVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_498_Stats_Simple_VirtualCallGraphEdge(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_498_Stats_Simple_VirtualCallGraphEdge(*rel_498_Stats_Simple_VirtualCallGraphEdge,symTable,"Stats_Simple_VirtualCallGraphEdge",std::array<const char *,2>{"s:MethodInvocation[s:Instruction]","s:Method"},std::array<const char *,2>{"?from","?to"}),
rel_499_Stats_Simple_VirtualTargets(new ram::Relation<Auto,2>()),
rel_500_Stats_Simple_PolymorphicCallSite(new ram::Relation<Auto,1>()),
wrapper_rel_500_Stats_Simple_PolymorphicCallSite(*rel_500_Stats_Simple_PolymorphicCallSite,symTable,"Stats_Simple_PolymorphicCallSite",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_501_Stats_Simple_Application_PolymorphicCallSite(new ram::Relation<Auto,1>()),
wrapper_rel_501_Stats_Simple_Application_PolymorphicCallSite(*rel_501_Stats_Simple_Application_PolymorphicCallSite,symTable,"Stats_Simple_Application_PolymorphicCallSite",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_502_Stats_Simple_EmptyVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_502_Stats_Simple_EmptyVirtualMethodInvocation(*rel_502_Stats_Simple_EmptyVirtualMethodInvocation,symTable,"Stats_Simple_EmptyVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_503_Stats_Simple_NullVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_503_Stats_Simple_NullVirtualMethodInvocation(*rel_503_Stats_Simple_NullVirtualMethodInvocation,symTable,"Stats_Simple_NullVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_504_Stats_Simple_Application_ReachableMethod(new ram::Relation<Auto,1>()),
wrapper_rel_504_Stats_Simple_Application_ReachableMethod(*rel_504_Stats_Simple_Application_ReachableMethod,symTable,"Stats_Simple_Application_ReachableMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_505_Stats_Simple_Application_VarPointsTo(new ram::Relation<Auto,4>()),
wrapper_rel_505_Stats_Simple_Application_VarPointsTo(*rel_505_Stats_Simple_Application_VarPointsTo,symTable,"Stats_Simple_Application_VarPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,4>{"?hctx","?value","?ctx","?var"}),
rel_506_Stats_Simple_InsensArrayIndexPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_506_Stats_Simple_InsensArrayIndexPointsTo(*rel_506_Stats_Simple_InsensArrayIndexPointsTo,symTable,"Stats_Simple_InsensArrayIndexPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,2>{"?value","?basevalue"}),
rel_507_Stats_Simple_InsensInstanceFieldPointsTo(new ram::Relation<Auto,3>()),
wrapper_rel_507_Stats_Simple_InsensInstanceFieldPointsTo(*rel_507_Stats_Simple_InsensInstanceFieldPointsTo,symTable,"Stats_Simple_InsensInstanceFieldPointsTo",std::array<const char *,3>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,3>{"?value","?sig","?basevalue"}),
rel_508_Stats_Simple_InsensStaticFieldPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_508_Stats_Simple_InsensStaticFieldPointsTo(*rel_508_Stats_Simple_InsensStaticFieldPointsTo,symTable,"Stats_Simple_InsensStaticFieldPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field"},std::array<const char *,2>{"?value","?sig"}),
rel_509_Stats_Metrics(new ram::Relation<Auto,3>()),
wrapper_rel_509_Stats_Metrics(*rel_509_Stats_Metrics,symTable,"Stats_Metrics",std::array<const char *,3>{"s:symbol","s:symbol","i:number"},std::array<const char *,3>{"order","msg","c"}),
rel_510_Stats_Simple_ReachableApplicationMethod(new ram::Relation<Auto,2>()),
wrapper_rel_510_Stats_Simple_ReachableApplicationMethod(*rel_510_Stats_Simple_ReachableApplicationMethod,symTable,"Stats_Simple_ReachableApplicationMethod",std::array<const char *,2>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Method"},std::array<const char *,2>{"?ctx","?method"}){
addRelation("_AssignHeapAllocation",&wrapper_rel_1_AssignHeapAllocation,1,0);
addRelation("_AssignBinop",&wrapper_rel_4_AssignBinop,1,0);
addRelation("_AssignCast",&wrapper_rel_5_AssignCast,1,0);
addRelation("_AssignCastNull",&wrapper_rel_7_AssignCastNull,1,0);
addRelation("_AssignCastNumConstant",&wrapper_rel_8_AssignCastNumConstant,1,0);
addRelation("_AssignInstanceOf",&wrapper_rel_12_AssignInstanceOf,1,0);
addRelation("_AssignLocal",&wrapper_rel_13_AssignLocal,1,0);
addRelation("_AssignNull",&wrapper_rel_16_AssignNull,1,0);
addRelation("_AssignNumConstant",&wrapper_rel_18_AssignNumConstant,1,0);
addRelation("_AssignUnop",&wrapper_rel_21_AssignUnop,1,0);
addRelation("_Return",&wrapper_rel_23_Return,1,0);
addRelation("_NativeReturnVar",&wrapper_rel_26_NativeReturnVar,1,0);
addRelation("_AssignPhantomInvoke",&wrapper_rel_27_AssignPhantomInvoke,1,0);
addRelation("_BreakpointStmt",&wrapper_rel_28_BreakpointStmt,1,0);
addRelation("_DynamicMethodInvocation",&wrapper_rel_29_DynamicMethodInvocation,1,0);
addRelation("_EnterMonitor",&wrapper_rel_30_EnterMonitor,1,0);
addRelation("_ExitMonitor",&wrapper_rel_31_ExitMonitor,1,0);
addRelation("_FormalParam",&wrapper_rel_32_FormalParam,1,0);
addRelation("_Goto",&wrapper_rel_33_Goto,1,0);
addRelation("_If",&wrapper_rel_34_If,1,0);
addRelation("_LoadArrayIndex",&wrapper_rel_35_LoadArrayIndex,1,0);
addRelation("_LoadInstanceField",&wrapper_rel_39_LoadInstanceField,1,0);
addRelation("_LoadStaticField",&wrapper_rel_43_LoadStaticField,1,0);
addRelation("_LookupSwitch",&wrapper_rel_46_LookupSwitch,1,0);
addRelation("_PhantomInvoke",&wrapper_rel_47_PhantomInvoke,1,0);
addRelation("_ReturnVoid",&wrapper_rel_48_ReturnVoid,1,0);
addRelation("_SpecialMethodInvocation",&wrapper_rel_49_SpecialMethodInvocation,1,0);
addRelation("_StaticMethodInvocation",&wrapper_rel_50_StaticMethodInvocation,1,0);
addRelation("_StoreArrayIndex",&wrapper_rel_52_StoreArrayIndex,1,0);
addRelation("_StoreInstanceField",&wrapper_rel_56_StoreInstanceField,1,0);
addRelation("_StoreStaticField",&wrapper_rel_60_StoreStaticField,1,0);
addRelation("_TableSwitch",&wrapper_rel_64_TableSwitch,1,0);
addRelation("_Throw",&wrapper_rel_65_Throw,1,0);
addRelation("_ThrowNull",&wrapper_rel_67_ThrowNull,1,0);
addRelation("Throw",&wrapper_rel_69_Throw,0,1);
addRelation("_UnsupportedInstruction",&wrapper_rel_70_UnsupportedInstruction,1,0);
addRelation("_VirtualMethodInvocation",&wrapper_rel_71_VirtualMethodInvocation,1,0);
addRelation("_CallbackMethod",&wrapper_rel_72_CallbackMethod,1,0);
addRelation("_Method",&wrapper_rel_73_Method,1,0);
addRelation("_Method_DeclaresException",&wrapper_rel_78_Method_DeclaresException,1,0);
addRelation("_Method_Modifier",&wrapper_rel_79_Method_Modifier,1,0);
addRelation("_ThisVar",&wrapper_rel_82_ThisVar,1,0);
addRelation("_Var_DeclaringMethod",&wrapper_rel_83_Var_DeclaringMethod,1,0);
addRelation("_ClassHeap",&wrapper_rel_105_ClassHeap,1,0);
addRelation("_Dacapo",&wrapper_rel_107_Dacapo,1,0);
addRelation("_MethodHandleConstant",&wrapper_rel_109_MethodHandleConstant,1,0);
addRelation("_NormalHeap",&wrapper_rel_110_NormalHeap,1,0);
addRelation("_StringConstant",&wrapper_rel_111_StringConstant,1,0);
addRelation("_Activity",&wrapper_rel_116_Activity,1,0);
addRelation("_ApplicationClass",&wrapper_rel_117_ApplicationClass,1,0);
addRelation("ApplicationMethod",&wrapper_rel_118_ApplicationMethod,0,1);
addRelation("Stats_Simple_Application_Cast",&wrapper_rel_119_Stats_Simple_Application_Cast,0,1);
addRelation("Stats_Simple_Application_VirtualMethodInvocation",&wrapper_rel_120_Stats_Simple_Application_VirtualMethodInvocation,0,1);
addRelation("Stats_Simple_ApplicationConcreteMethod",&wrapper_rel_121_Stats_Simple_ApplicationConcreteMethod,0,1);
addRelation("_ArrayType",&wrapper_rel_122_ArrayType,1,0);
addRelation("_BroadcastReceiver",&wrapper_rel_123_BroadcastReceiver,1,0);
addRelation("_ClassType",&wrapper_rel_124_ClassType,1,0);
addRelation("_ComponentType",&wrapper_rel_125_ComponentType,1,0);
addRelation("_ContentProvider",&wrapper_rel_127_ContentProvider,1,0);
addRelation("_DirectSuperclass",&wrapper_rel_128_DirectSuperclass,1,0);
addRelation("_DirectSuperinterface",&wrapper_rel_139_DirectSuperinterface,1,0);
addRelation("_InterfaceType",&wrapper_rel_143_InterfaceType,1,0);
addRelation("_Service",&wrapper_rel_146_Service,1,0);
addRelation("_Var_Type",&wrapper_rel_148_Var_Type,1,0);
addRelation("_EmptyArray",&wrapper_rel_196_EmptyArray,1,0);
addRelation("_Field",&wrapper_rel_214_Field,1,0);
addRelation("_AssignReturnValue",&wrapper_rel_216_AssignReturnValue,1,0);
addRelation("_Tamiflex_ReflectionData",&wrapper_rel_218_Tamiflex_ReflectionData,1,0);
addRelation("_MethodInvocation_Line",&wrapper_rel_221_MethodInvocation_Line,1,0);
addRelation("_Field_Modifier",&wrapper_rel_226_Field_Modifier,1,0);
addRelation("_ActualParam",&wrapper_rel_232_ActualParam,1,0);
addRelation("_BootstrapParam",&wrapper_rel_236_BootstrapParam,1,0);
addRelation("_ClassModifier",&wrapper_rel_254_ClassModifier,1,0);
addRelation("_AndroidEntryPoint",&wrapper_rel_282_AndroidEntryPoint,1,0);
addRelation("_LayoutControl",&wrapper_rel_285_LayoutControl,1,0);
addRelation("_FieldInitialValue",&wrapper_rel_294_FieldInitialValue,1,0);
addRelation("Value_Type",&wrapper_rel_300_Value_Type,0,1);
addRelation("_ExceptionHandler",&wrapper_rel_307_ExceptionHandler,1,0);
addRelation("_ExceptionHandler_Previous",&wrapper_rel_315_ExceptionHandler_Previous,1,0);
addRelation("_replace_tpt",&wrapper_rel_327_replace_tpt,1,0);
addRelation("_replace_cge",&wrapper_rel_328_replace_cge,1,0);
addRelation("Instruction_Throws",&wrapper_rel_364_Instruction_Throws,0,1);
addRelation("ThrowPointsTo",&wrapper_rel_367_ThrowPointsTo,0,1);
addRelation("VarPointsTo",&wrapper_rel_391_VarPointsTo,0,1);
addRelation("CallGraphEdge",&wrapper_rel_403_CallGraphEdge,0,1);
addRelation("Reachable",&wrapper_rel_406_Reachable,0,1);
addRelation("StoreHeapInstanceField",&wrapper_rel_421_StoreHeapInstanceField,0,1);
addRelation("OptVirtualMethodInvocationBase",&wrapper_rel_457_OptVirtualMethodInvocationBase,0,1);
addRelation("Stats_Simple_Application_ArrayIndexPointsTo",&wrapper_rel_478_Stats_Simple_Application_ArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_InsensReachableApplicationMethod",&wrapper_rel_479_Stats_Simple_InsensReachableApplicationMethod,0,1);
addRelation("Stats_Simple_Application_ReachableVirtualMethodInvocation",&wrapper_rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_NonReachableApplicationConcreteMethod",&wrapper_rel_481_Stats_Simple_NonReachableApplicationConcreteMethod,0,1);
addRelation("Stats_Simple_InsensVarPointsTo",&wrapper_rel_482_Stats_Simple_InsensVarPointsTo,0,1);
addRelation("Stats_Simple_Application_EmptyVirtualMethodInvocation",&wrapper_rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_Application_NullVirtualMethodInvocation",&wrapper_rel_484_Stats_Simple_Application_NullVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_AssignedVariable",&wrapper_rel_485_Stats_Simple_AssignedVariable,0,1);
addRelation("Stats_Simple_ReachableCast",&wrapper_rel_486_Stats_Simple_ReachableCast,0,1);
addRelation("Stats_Simple_Application_ReachableCast",&wrapper_rel_487_Stats_Simple_Application_ReachableCast,0,1);
addRelation("Stats_Simple_Application_PotentiallyFailingCast",&wrapper_rel_488_Stats_Simple_Application_PotentiallyFailingCast,0,1);
addRelation("Stats_Simple_PotentiallyFailingCast",&wrapper_rel_489_Stats_Simple_PotentiallyFailingCast,0,1);
addRelation("Stats_Simple_InsensReachableVar",&wrapper_rel_490_Stats_Simple_InsensReachableVar,0,1);
addRelation("Stats_Simple_ReachableVar",&wrapper_rel_491_Stats_Simple_ReachableVar,0,1);
addRelation("Stats_Simple_Application_InsensArrayIndexPointsTo",&wrapper_rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_Application_InsensInstanceFieldPointsTo",&wrapper_rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_Application_InsensVarPointsTo",&wrapper_rel_494_Stats_Simple_Application_InsensVarPointsTo,0,1);
addRelation("Stats_Simple_Application_InstanceFieldPointsTo",&wrapper_rel_495_Stats_Simple_Application_InstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_InsensCallGraphEdge",&wrapper_rel_496_Stats_Simple_InsensCallGraphEdge,0,1);
addRelation("Stats_Simple_ReachableVirtualMethodInvocation",&wrapper_rel_497_Stats_Simple_ReachableVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_VirtualCallGraphEdge",&wrapper_rel_498_Stats_Simple_VirtualCallGraphEdge,0,1);
addRelation("Stats_Simple_PolymorphicCallSite",&wrapper_rel_500_Stats_Simple_PolymorphicCallSite,0,1);
addRelation("Stats_Simple_Application_PolymorphicCallSite",&wrapper_rel_501_Stats_Simple_Application_PolymorphicCallSite,0,1);
addRelation("Stats_Simple_EmptyVirtualMethodInvocation",&wrapper_rel_502_Stats_Simple_EmptyVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_NullVirtualMethodInvocation",&wrapper_rel_503_Stats_Simple_NullVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_Application_ReachableMethod",&wrapper_rel_504_Stats_Simple_Application_ReachableMethod,0,1);
addRelation("Stats_Simple_Application_VarPointsTo",&wrapper_rel_505_Stats_Simple_Application_VarPointsTo,0,1);
addRelation("Stats_Simple_InsensArrayIndexPointsTo",&wrapper_rel_506_Stats_Simple_InsensArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_InsensInstanceFieldPointsTo",&wrapper_rel_507_Stats_Simple_InsensInstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_InsensStaticFieldPointsTo",&wrapper_rel_508_Stats_Simple_InsensStaticFieldPointsTo,0,1);
addRelation("Stats_Metrics",&wrapper_rel_509_Stats_Metrics,0,1);
addRelation("Stats_Simple_ReachableApplicationMethod",&wrapper_rel_510_Stats_Simple_ReachableApplicationMethod,0,1);
// -- initialize symbol table --
static const char *symbols[]={
	R"(java.lang.String)",
	R"(java.lang.Class)",
	R"(java.lang.invoke.MethodHandle)",
	R"(abstract)",
	R"(public)",
	R"(private)",
	R"(final)",
	R"(static)",
	R"(boolean)",
	R"(byte)",
	R"(char)",
	R"(short)",
	R"(int)",
	R"(long)",
	R"(float)",
	R"(double)",
	R"(void)",
	R"(null_type)",
	R"(java.lang.Object)",
	R"(<<null pseudo heap>>)",
	R"(<<main method array>>)",
	R"(java.lang.String[])",
	R"(<<main method array content>>)",
	R"(java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem)",
	R"(java.io.UnixFileSystem)",
	R"(java.io.UnixFileSystem.list/new java.lang.String[])",
	R"(java.io.UnixFileSystem.list/new java.lang.String)",
	R"(<<string-constant>>)",
	R"(<<reflection-string-constant>>)",
	R"(<<string-buffer>>)",
	R"(java.lang.StringBuffer)",
	R"(<<string-builder>>)",
	R"(java.lang.StringBuilder)",
	R"(<<system-thread-group>>)",
	R"(<<main-thread-group>>)",
	R"(java.lang.ThreadGroup)",
	R"(<<main-thread>>)",
	R"(java.lang.Thread)",
	R"(<<initial-context>>)",
	R"(<<jvm-startup-context>>)",
	R"(<<jvm-startup-hcontext>>)",
	R"(<<clinit-context>>)",
	R"(<<immutable-context>>)",
	R"(<<immutable-hcontext>>)",
	R"(<<immutable>>)",
	R"(Class)",
	R"(Constructor)",
	R"(java.lang.reflect.Constructor)",
	R"(Field)",
	R"(java.lang.reflect.Field)",
	R"(Method)",
	R"(java.lang.reflect.Method)",
	R"(Array)",
	R"(java.lang.reflect.Array)",
	R"(get*)",
	R"(get)",
	R"(set*)",
	R"(set)",
	R"(finalize)",
	R"(void())",
	R"(<java.lang.Object: void finalize()>)",
	R"(protected)",
	R"(.*<init>.*)",
	R"(java.lang.Cloneable)",
	R"(java.io.Serializable)",
	R"(java.lang.ClassLoader)",
	R"(java.lang.SecurityManager)",
	R"(main)",
	R"(void(java.lang.String[]))",
	R"(java.lang.System)",
	R"(<register-finalize )",
	R"(/)",
	R"(  >)",
	R"(<android component object )",
	R"(>)",
	R"(<layout control object )",
	R"( of type )",
	R"(android.content.Intent)",
	R"(android.os.Bundle)",
	R"(<android library object )",
	R"(^android.*)",
	R"(android.view.View)",
	R"(android.view.ViewGroup)",
	R"(Listener)",
	R"(Callback)",
	R"(^on.*)",
	R"(inflate)",
	R"(getView)",
	R"(findViewById)",
	R"(<clinit>)",
	R"(<java.lang.ref.Finalizer: void register(java.lang.Object)>)",
	R"(<java.lang.System: void initializeSystemClass()>)",
	R"(<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>)",
	R"(<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>)",
	R"(<java.lang.ThreadGroup: void <init>()>)",
	R"(<java.lang.Thread: void exit()>)",
	R"(<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>)",
	R"(<java.lang.ClassLoader: void <init>()>)",
	R"(<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>)",
	R"(<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>)",
	R"(<java.lang.ClassLoader: void addClass(java.lang.Class)>)",
	R"(<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>)",
	R"(<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>)",
	R"(java.lang.Object.clone/@this)",
	R"(java.lang.Object.clone/@native-return)",
	R"(<java.lang.Object: java.lang.Object clone()>)",
	R"(java.lang.System.setIn0/@param0)",
	R"(<java.lang.System: java.io.InputStream in>)",
	R"(<java.lang.System: void setIn0(java.io.InputStream)>)",
	R"(java.lang.System.setOut0/@param0)",
	R"(<java.lang.System: java.io.PrintStream out>)",
	R"(<java.lang.System: void setOut0(java.io.PrintStream)>)",
	R"(java.lang.System.setErr0/@param0)",
	R"(<java.lang.System: java.io.PrintStream err>)",
	R"(<java.lang.System: void setErr0(java.io.PrintStream)>)",
	R"(/@tmp-arraycopy)",
	R"(<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>)",
	R"(<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>)",
	R"(<java.io.FileSystem: java.io.FileSystem getFileSystem()>)",
	R"(/native)",
	R"(<java.io.UnixFileSystem: void <init>()>)",
	R"(<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>)",
	R"(/@native-array-element)",
	R"(<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>)",
	R"(/native )",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>)",
	R"(<java.security.PrivilegedAction: java.lang.Object run()>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>)",
	R"(<java.security.PrivilegedExceptionAction: java.lang.Object run()>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>)",
	R"(<java.lang.ref.Reference: java.lang.ref.Reference pending>)",
	R"(<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this)",
	R"(<init>)",
	R"(java.lang.Throwable)",
	R"(.)",
	R"(java\.util.*)",
	R"(<java.lang.Thread: void start0()>)",
	R"(run)",
	R"(<java.lang.Thread: java.lang.Thread currentThread()>)",
	R"(<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>)",
	R"(num-constant-)",
	R"(.R$)",
	R"(true)",
	R"(::: (Mock))",
	R"(<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>)",
	R"(<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>)",
	R"(<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>)",
	R"(<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>)",
	R"(<(Tamiflex) )",
	R"(<java.lang.Class: java.lang.Object newInstance()>)",
	R"(<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>)",
	R"(<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>)",
	R"(<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>)",
	R"(<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>)",
	R"(/Field[]>)",
	R"(<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>)",
	R"(<java.lang.Class: java.lang.reflect.Field[] getFields()>)",
	R"(java.lang.reflect.Field[])",
	R"(<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>)",
	R"(<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>)",
	R"(/Method[]>)",
	R"(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>)",
	R"(<java.lang.Class: java.lang.reflect.Method[] getMethods()>)",
	R"(java.lang.reflect.Method[])",
	R"(<java.lang.Class: java.lang.Class forName(java.lang.String)>)",
	R"(<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>)",
	R"(<class )",
	R"(<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>)",
	R"(Harness)",
	R"(1.0)",
	R"(var points-to (INS))",
	R"(1.5)",
	R"(var points-to (SENS))",
	R"(5.0)",
	R"(app var points-to (INS))",
	R"(5.5)",
	R"(app var points-to (SENS))",
	R"(10.0)",
	R"(reachable variables (INS))",
	R"(10.5)",
	R"(reachable variables (SENS))",
	R"(2.0)",
	R"(array index points-to (INS))",
	R"(2.5)",
	R"(array index points-to (SENS))",
	R"(6.0)",
	R"(app array index points-to (INS))",
	R"(6.5)",
	R"(app array index points-to (SENS))",
	R"(3.0)",
	R"(instance field points-to (INS))",
	R"(3.5)",
	R"(instance field points-to (SENS))",
	R"(4.0)",
	R"(static field points-to (INS))",
	R"(4.5)",
	R"(static field points-to (SENS))",
	R"(7.0)",
	R"(app instance field points-to (INS))",
	R"(7.5)",
	R"(app instance field points-to (SENS))",
	R"(8.0)",
	R"(call graph edges (INS))",
	R"(8.5)",
	R"(call graph edges (SENS))",
	R"(9.0)",
	R"(non-reachable app concrete methods)",
	R"(11.0)",
	R"(reachable methods (INS))",
	R"(11.5)",
	R"(reachable methods (SENS))",
	R"(12.0)",
	R"(virtual call sites (statically))",
	R"(13.0)",
	R"(reachable virtual call sites)",
	R"(14.0)",
	R"(polymorphic virtual call sites)",
	R"(15.0)",
	R"(null virtual call sites)",
	R"(15.5)",
	R"(empty virtual call sites)",
	R"(16.0)",
	R"(app virtual call sites (statically))",
	R"(17.0)",
	R"(app reachable virtual call sites)",
	R"(18.0)",
	R"(app polymorphic virtual call sites)",
	R"(19.0)",
	R"(app null virtual call sites)",
	R"(19.5)",
	R"(app empty virtual call sites)",
	R"(20.0)",
	R"(casts (statically))",
	R"(21.0)",
	R"(reachable casts)",
	R"(22.0)",
	R"(reachable casts that may fail)",
	R"(23.0)",
	R"(app casts (statically))",
	R"(24.0)",
	R"(app reachable casts)",
	R"(25.0)",
	R"(app reachable casts that may fail)",
	R"(25.5)",
	R"(app reachable methods)",
};
symTable.insert(symbols,253);

}
~Sf_pts2o1h_itsc() {
delete rel_1_AssignHeapAllocation;
delete rel_2_AssignHeapAllocation_Heap;
delete rel_3_isAssignHeapAllocation_Insn;
delete rel_4_AssignBinop;
delete rel_5_AssignCast;
delete rel_6_AssignCast_From;
delete rel_7_AssignCastNull;
delete rel_8_AssignCastNumConstant;
delete rel_9_AssignCastNumConstant_Id;
delete rel_10_AssignCast_Type;
delete rel_11_isAssignCast_Insn;
delete rel_12_AssignInstanceOf;
delete rel_13_AssignLocal;
delete rel_14_AssignLocal_From;
delete rel_15_isAssignLocal_Insn;
delete rel_16_AssignNull;
delete rel_17_isAssignNull_Insn;
delete rel_18_AssignNumConstant;
delete rel_19_AssignNumConstant_Id;
delete rel_20_isNumConstant;
delete rel_21_AssignUnop;
delete rel_22_AssignInstruction_To;
delete rel_23_Return;
delete rel_24_ReturnNonvoid_Var;
delete rel_25_isReturnNonvoid_Insn;
delete rel_26_NativeReturnVar;
delete rel_27_AssignPhantomInvoke;
delete rel_28_BreakpointStmt;
delete rel_29_DynamicMethodInvocation;
delete rel_30_EnterMonitor;
delete rel_31_ExitMonitor;
delete rel_32_FormalParam;
delete rel_33_Goto;
delete rel_34_If;
delete rel_35_LoadArrayIndex;
delete rel_36_LoadArrayIndex_Base;
delete rel_37_LoadArrayIndex_To;
delete rel_38_isLoadArrayIndex_Insn;
delete rel_39_LoadInstanceField;
delete rel_40_LoadInstanceField_Base;
delete rel_41_LoadInstanceField_To;
delete rel_42_isLoadInstanceField_Insn;
delete rel_43_LoadStaticField;
delete rel_44_LoadStaticField_To;
delete rel_45_isLoadStaticField_Insn;
delete rel_46_LookupSwitch;
delete rel_47_PhantomInvoke;
delete rel_48_ReturnVoid;
delete rel_49_SpecialMethodInvocation;
delete rel_50_StaticMethodInvocation;
delete rel_51_isStaticMethodInvocation_Insn;
delete rel_52_StoreArrayIndex;
delete rel_53_StoreArrayIndex_Base;
delete rel_54_StoreArrayIndex_From;
delete rel_55_isStoreArrayIndex_Insn;
delete rel_56_StoreInstanceField;
delete rel_57_StoreInstanceField_Base;
delete rel_58_StoreInstanceField_From;
delete rel_59_isStoreInstanceField_Insn;
delete rel_60_StoreStaticField;
delete rel_61_FieldInstruction_Signature;
delete rel_62_StoreStaticField_From;
delete rel_63_isStoreStaticField_Insn;
delete rel_64_TableSwitch;
delete rel_65_Throw;
delete rel_66_Throw_Var;
delete rel_67_ThrowNull;
delete rel_68_isThrow_Insn;
delete rel_69_Throw;
delete rel_70_UnsupportedInstruction;
delete rel_71_VirtualMethodInvocation;
delete rel_72_CallbackMethod;
delete rel_73_Method;
delete rel_74_Method_DeclaringType;
delete rel_75_Method_Descriptor;
delete rel_76_Method_SimpleName;
delete rel_77_Method_ReturnType;
delete rel_78_Method_DeclaresException;
delete rel_79_Method_Modifier;
delete rel_80_MethodImplemented;
delete rel_81_ClassInitializer;
delete rel_82_ThisVar;
delete rel_83_Var_DeclaringMethod;
delete rel_84_isMethod;
delete rel_85_Instruction_Method;
delete rel_86_delta_Instruction_Method;
delete rel_87_new_Instruction_Method;
delete rel_88_ReturnVar;
delete rel_89_delta_ReturnVar;
delete rel_90_new_ReturnVar;
delete rel_91_MethodInvocation_Method;
delete rel_92_StaticMethodInvocation;
delete rel_93_OptForNameInvocation;
delete rel_94_AssignNull;
delete rel_95_Instruction_Index;
delete rel_96_AssignCast;
delete rel_97_SpecialMethodInvocation_Base;
delete rel_98_isVirtualMethodInvocation_Insn;
delete rel_99_VirtualMethodInvocation;
delete rel_100_VirtualMethodInvocation_Descriptor;
delete rel_101_VirtualMethodInvocation_SimpleName;
delete rel_102_VirtualMethodInvocation_Base;
delete rel_103_Type_null;
delete rel_104_HeapAllocation_Null;
delete rel_105_ClassHeap;
delete rel_106_isClassHeap;
delete rel_107_Dacapo;
delete rel_108_HeapAllocation_Keep;
delete rel_109_MethodHandleConstant;
delete rel_110_NormalHeap;
delete rel_111_StringConstant;
delete rel_112_isHeapAllocation;
delete rel_113_HeapAllocation_Type;
delete rel_114_Value_isHeap;
delete rel_115_isStringConstant;
delete rel_116_Activity;
delete rel_117_ApplicationClass;
delete rel_118_ApplicationMethod;
delete rel_119_Stats_Simple_Application_Cast;
delete rel_120_Stats_Simple_Application_VirtualMethodInvocation;
delete rel_121_Stats_Simple_ApplicationConcreteMethod;
delete rel_122_ArrayType;
delete rel_123_BroadcastReceiver;
delete rel_124_ClassType;
delete rel_125_ComponentType;
delete rel_126_isArrayType;
delete rel_127_ContentProvider;
delete rel_128_DirectSuperclass;
delete rel_129_Subclass;
delete rel_130_delta_Subclass;
delete rel_131_new_Subclass;
delete rel_132_isClassType;
delete rel_133_ClassNameIndexes;
delete rel_134_delta_ClassNameIndexes;
delete rel_135_new_ClassNameIndexes;
delete rel_136_DotsInClassName;
delete rel_137_NotLastDot;
delete rel_138_LastDot;
delete rel_139_DirectSuperinterface;
delete rel_140_Superinterface;
delete rel_141_delta_Superinterface;
delete rel_142_new_Superinterface;
delete rel_143_InterfaceType;
delete rel_144_isInterfaceType;
delete rel_145_isReferenceType;
delete rel_146_Service;
delete rel_147_AndroidAppComponent;
delete rel_148_Var_Type;
delete rel_149_isType;
delete rel_150_AssignHeapAllocation;
delete rel_151_OptAssignHeapAllocation;
delete rel_152_ObjectMultipleAllocated;
delete rel_153_MethodLookup;
delete rel_154_delta_MethodLookup;
delete rel_155_new_MethodLookup;
delete rel_156_OverridesFinalize;
delete rel_157_AllocatedObjectSupportsFinalize;
delete rel_158_FakeInvocation_RegisterFinalize0;
delete rel_159_MethodDeclaredOrInherited;
delete rel_160_delta_MethodDeclaredOrInherited;
delete rel_161_new_MethodDeclaredOrInherited;
delete rel_162_ProtectedMethodOfComponent;
delete rel_163_PublicMethodOfComponent;
delete rel_164_CollectionLibraryClass;
delete rel_165_SpecialLibraryClass;
delete rel_166_SpecialLibraryMethod;
delete rel_167_SpecialLibraryObject;
delete rel_168_ImplicitlyInstantiatedLibraryType;
delete rel_169_ReifiedLibraryObject;
delete rel_170_AndroidLibraryType;
delete rel_171_AndroidApplicationClass;
delete rel_172_AndroidLibraryListenerType;
delete rel_173_ReifiedComponent;
delete rel_174_ViewRetrievalByArg0MethodInvocation;
delete rel_175_Type_byte;
delete rel_176_Type_char;
delete rel_177_Type_double;
delete rel_178_Type_float;
delete rel_179_Type_int;
delete rel_180_Type_long;
delete rel_181_Type_short;
delete rel_182_isPrimitiveType;
delete rel_183_SubtypeOf;
delete rel_184_delta_SubtypeOf;
delete rel_185_new_SubtypeOf;
delete rel_186_ExceptionType;
delete rel_187_ExceptionTypeToHeap;
delete rel_188_ExceptionHeapTypeRepresentativeOrdinal;
delete rel_189_SupertypeOf;
delete rel_190_AppMethodOverridesAndroidLibraryMethod;
delete rel_191_OverridingProtectedMethodOfComponent;
delete rel_192_ListenerType;
delete rel_193_AndroidApplicationListenerClass;
delete rel_194_StringFactoryType;
delete rel_195_StringFactoryHeap;
delete rel_196_EmptyArray;
delete rel_197_MethodAndTypeToHeap;
delete rel_198_AllocationsPerMethodAndType;
delete rel_199_MethodAllocationMergeThreshold;
delete rel_200_AllocationShouldBeMergedPerMethod;
delete rel_201_MethodAndTypeToMergedHeap;
delete rel_202_MinHeapOrdinalPerMethodAndType;
delete rel_203_MethodAndTypeToRepresentative;
delete rel_204_HeapRepresentative;
delete rel_205_HeapIsMergedString;
delete rel_206_HeapIsMergedStringFactory;
delete rel_207_RepresentativesToPickFrom;
delete rel_208_MinRepresentativeHeapToPickFromOrdinal;
delete rel_209_HeapAllocation_Merge;
delete rel_210_HeapAllocation_ContextInsensitive;
delete rel_211_AssignContextInsensitiveHeapAllocation;
delete rel_212_HeapAllocation_Special;
delete rel_213_AssignNormalHeapAllocation;
delete rel_214_Field;
delete rel_215_Field_DeclaringType;
delete rel_216_AssignReturnValue;
delete rel_217_AssignReturnValue;
delete rel_218_Tamiflex_ReflectionData;
delete rel_219_Tamiflex_ToDoopFormat;
delete rel_220_Tamiflex_ReflectionData;
delete rel_221_MethodInvocation_Line;
delete rel_222_Tamiflex_ReflectionMap;
delete rel_223_Tamiflex_ReifiedFieldArray;
delete rel_224_Tamiflex_ReifiedMethod;
delete rel_225_Tamiflex_ReifiedMethodArray;
delete rel_226_Field_Modifier;
delete rel_227_isField;
delete rel_228_LoadStaticField;
delete rel_229_Tamiflex_ReifiedField;
delete rel_230_MainClass;
delete rel_231_MainMethodDeclaration;
delete rel_232_ActualParam;
delete rel_233_StoreInstanceField;
delete rel_234_LoadInstanceField;
delete rel_235_VarsAtInvocationRetrievingView;
delete rel_236_BootstrapParam;
delete rel_237_isMethodInvocation;
delete rel_238_isVar;
delete rel_239_StoreStaticField;
delete rel_240_AssignLocal;
delete rel_241_Var_Type;
delete rel_242_ResolveInvocation;
delete rel_243_SiteShouldNotBeRefined;
delete rel_244_StoreArrayIndex;
delete rel_245_OptStoreArrayIndex;
delete rel_246_LoadArrayIndex;
delete rel_247_OptLoadArrayIndex;
delete rel_248_Var_DeclaringMethod;
delete rel_249_ApplicationVar;
delete rel_250_isInstruction;
delete rel_251_Tamiflex_Constructor_NewInstance;
delete rel_252_Tamiflex_Array_NewInstance;
delete rel_253_Tamiflex_Class_NewInstance;
delete rel_254_ClassModifier;
delete rel_255_ClassHasPossibleEntryPoint;
delete rel_256_PrefixAbove;
delete rel_257_PrefixBelow;
delete rel_258_ClassIsAboveOtherInNamingHierarchy;
delete rel_259_ClassWithTopLevelEntryPoint;
delete rel_260_PossibleEntryPoint;
delete rel_261_TopLevelEntryPoint;
delete rel_262_FormalsForEntryPoints;
delete rel_263_AllConcreteImplementations;
delete rel_264_TypeToConcreteImplementationOrd;
delete rel_265_ConcreteImplementations;
delete rel_266_ConcreteType;
delete rel_267_StaticToActualType;
delete rel_268_ObjToMock;
delete rel_269_delta_ObjToMock;
delete rel_270_new_ObjToMock;
delete rel_271_MockObject;
delete rel_272_MockObjectForType;
delete rel_273_MockObjectForComponentType;
delete rel_274_TypeForFormals;
delete rel_275_MockForFormal;
delete rel_276_ConcreteClass;
delete rel_277_isImmutableHContext;
delete rel_278_ContextForEntryPoint;
delete rel_279_ReceiverPointsTo;
delete rel_280_HContextForEntryPoint;
delete rel_281_MockObjectContext;
delete rel_282_AndroidEntryPoint;
delete rel_283_ImplicitReachable;
delete rel_284_isJVMStartupHContext;
delete rel_285_LayoutControl;
delete rel_286_LayoutControl;
delete rel_287_ProtectedOnMethodOfLayoutControl;
delete rel_288_OverridingProtectedOnMethodOfLayoutControl;
delete rel_289_Value_isMock;
delete rel_290_PublicOnMethodOfLayoutControl;
delete rel_291_ReifiedLayoutControl;
delete rel_292_ReifiedAndroidObjectValue;
delete rel_293_ViewObjectValueFromId;
delete rel_294_FieldInitialValue;
delete rel_295_isValue;
delete rel_296_MainThread;
delete rel_297_MainThreadGroup;
delete rel_298_SystemThreadGroup;
delete rel_299_ObjectShouldNotBeRefined;
delete rel_300_Value_Type;
delete rel_301_Value_Num;
delete rel_302_Value_isNonHeap;
delete rel_303_NotEmptyArrayValue;
delete rel_304_NotSpecialObject;
delete rel_305_MainMethodArgArray;
delete rel_306_MainMethodArgArrayContent;
delete rel_307_ExceptionHandler;
delete rel_308_ExceptionHandler_FormalParam;
delete rel_309_ExceptionHandler_Begin;
delete rel_310_ExceptionHandler_End;
delete rel_311_ExceptionHandler_Method;
delete rel_312_ExceptionHandler_InRange;
delete rel_313_ExceptionHandler_Type;
delete rel_314_ExceptionHandler_Index;
delete rel_315_ExceptionHandler_Previous;
delete rel_316_ExceptionHandler_Before;
delete rel_317_delta_ExceptionHandler_Before;
delete rel_318_new_ExceptionHandler_Before;
delete rel_319_ExceptionHandler_Impossible;
delete rel_320_ExceptionHandler_SameBlock_PartialOrder;
delete rel_321_ExceptionHandler_SameInsn_PartialOrder;
delete rel_322_ExceptionHandler_SameInsn_Repr;
delete rel_323_isExceptionHandler;
delete rel_324_ExceptionHandler_SameBlock_Repr;
delete rel_325_ExceptionHandler_TypeIsCaught;
delete rel_326_isImmutableContext;
delete rel_327_replace_tpt;
delete rel_328_replace_cge;
delete rel_329_HasItsc;
delete rel_330_Itsc;
delete rel_331_isClinitContext;
delete rel_332_isInitialContext;
delete rel_333_isJVMStartupContext;
delete rel_334_ForcedReachableAndroidContext;
delete rel_335_delta_ForcedReachableAndroidContext;
delete rel_336_new_ForcedReachableAndroidContext;
delete rel_337_ReachableApplicationObjectOfType;
delete rel_338_delta_ReachableApplicationObjectOfType;
delete rel_339_new_ReachableApplicationObjectOfType;
delete rel_340_ApplicationObjectFlowingToLibrary;
delete rel_341_delta_ApplicationObjectFlowingToLibrary;
delete rel_342_new_ApplicationObjectFlowingToLibrary;
delete rel_343_PublicOnMethodOfReachableListener;
delete rel_344_delta_PublicOnMethodOfReachableListener;
delete rel_345_new_PublicOnMethodOfReachableListener;
delete rel_346_LibraryReachableAppListenerType;
delete rel_347_delta_LibraryReachableAppListenerType;
delete rel_348_new_LibraryReachableAppListenerType;
delete rel_349_ProtectedOnMethodOfReachableListener;
delete rel_350_delta_ProtectedOnMethodOfReachableListener;
delete rel_351_new_ProtectedOnMethodOfReachableListener;
delete rel_352_OverridingProtectedOnMethodOfReachableListener;
delete rel_353_delta_OverridingProtectedOnMethodOfReachableListener;
delete rel_354_new_OverridingProtectedOnMethodOfReachableListener;
delete rel_355_FormalOfForcedReachableContext;
delete rel_356_delta_FormalOfForcedReachableContext;
delete rel_357_new_FormalOfForcedReachableContext;
delete rel_358_ApplicationObjectFlowingToLibraryStaticType;
delete rel_359_delta_ApplicationObjectFlowingToLibraryStaticType;
delete rel_360_new_ApplicationObjectFlowingToLibraryStaticType;
delete rel_361_InitializedClass;
delete rel_362_delta_InitializedClass;
delete rel_363_new_InitializedClass;
delete rel_364_Instruction_Throws;
delete rel_365_delta_Instruction_Throws;
delete rel_366_new_Instruction_Throws;
delete rel_367_ThrowPointsTo;
delete rel_368_delta_ThrowPointsTo;
delete rel_369_new_ThrowPointsTo;
delete rel_370_RunningThread;
delete rel_371_delta_RunningThread;
delete rel_372_new_RunningThread;
delete rel_373_ReachableCurrentThreadInvocation;
delete rel_374_delta_ReachableCurrentThreadInvocation;
delete rel_375_new_ReachableCurrentThreadInvocation;
delete rel_376_isContext;
delete rel_377_delta_isContext;
delete rel_378_new_isContext;
delete rel_379_isHContext;
delete rel_380_delta_isHContext;
delete rel_381_new_isHContext;
delete rel_382_ImmutableContextFromHContext;
delete rel_383_delta_ImmutableContextFromHContext;
delete rel_384_new_ImmutableContextFromHContext;
delete rel_385_ImmutableHContextFromContext;
delete rel_386_delta_ImmutableHContextFromContext;
delete rel_387_new_ImmutableHContextFromContext;
delete rel_388_ImmutableContextFromContext;
delete rel_389_delta_ImmutableContextFromContext;
delete rel_390_new_ImmutableContextFromContext;
delete rel_391_VarPointsTo;
delete rel_392_delta_VarPointsTo;
delete rel_393_new_VarPointsTo;
delete rel_394_InstanceFieldPointsTo;
delete rel_395_delta_InstanceFieldPointsTo;
delete rel_396_new_InstanceFieldPointsTo;
delete rel_397_StaticFieldPointsTo;
delete rel_398_delta_StaticFieldPointsTo;
delete rel_399_new_StaticFieldPointsTo;
delete rel_400_ArrayIndexPointsTo;
delete rel_401_delta_ArrayIndexPointsTo;
delete rel_402_new_ArrayIndexPointsTo;
delete rel_403_CallGraphEdge;
delete rel_404_delta_CallGraphEdge;
delete rel_405_new_CallGraphEdge;
delete rel_406_Reachable;
delete rel_407_delta_Reachable;
delete rel_408_new_Reachable;
delete rel_409_ReachableContext;
delete rel_410_delta_ReachableContext;
delete rel_411_new_ReachableContext;
delete rel_412_OptInterproceduralAssign;
delete rel_413_delta_OptInterproceduralAssign;
delete rel_414_new_OptInterproceduralAssign;
delete rel_415_OptStoreIntoArray;
delete rel_416_delta_OptStoreIntoArray;
delete rel_417_new_OptStoreIntoArray;
delete rel_418_LoadHeapInstanceField;
delete rel_419_delta_LoadHeapInstanceField;
delete rel_420_new_LoadHeapInstanceField;
delete rel_421_StoreHeapInstanceField;
delete rel_422_delta_StoreHeapInstanceField;
delete rel_423_new_StoreHeapInstanceField;
delete rel_424_LoadHeapArrayIndex;
delete rel_425_delta_LoadHeapArrayIndex;
delete rel_426_new_LoadHeapArrayIndex;
delete rel_427_StoreHeapArrayIndex;
delete rel_428_delta_StoreHeapArrayIndex;
delete rel_429_new_StoreHeapArrayIndex;
delete rel_430_AbstractCallGraphEdge;
delete rel_431_delta_AbstractCallGraphEdge;
delete rel_432_new_AbstractCallGraphEdge;
delete rel_433_AbstractThrowPointsTo;
delete rel_434_delta_AbstractThrowPointsTo;
delete rel_435_new_AbstractThrowPointsTo;
delete rel_436_OptAssignCast;
delete rel_437_delta_OptAssignCast;
delete rel_438_new_OptAssignCast;
delete rel_439_ReachableStoreStaticFieldFrom;
delete rel_440_delta_ReachableStoreStaticFieldFrom;
delete rel_441_new_ReachableStoreStaticFieldFrom;
delete rel_442_OptLoadHeapArrayIndex;
delete rel_443_delta_OptLoadHeapArrayIndex;
delete rel_444_new_OptLoadHeapArrayIndex;
delete rel_445_Temp1;
delete rel_446_delta_Temp1;
delete rel_447_new_Temp1;
delete rel_448_Temp2;
delete rel_449_delta_Temp2;
delete rel_450_new_Temp2;
delete rel_451_ReachableLoadArrayIndexBase;
delete rel_452_delta_ReachableLoadArrayIndexBase;
delete rel_453_new_ReachableLoadArrayIndexBase;
delete rel_454_ReachableStoreArrayIndexBase;
delete rel_455_delta_ReachableStoreArrayIndexBase;
delete rel_456_new_ReachableStoreArrayIndexBase;
delete rel_457_OptVirtualMethodInvocationBase;
delete rel_458_delta_OptVirtualMethodInvocationBase;
delete rel_459_new_OptVirtualMethodInvocationBase;
delete rel_460_OptSpecialMethodInvocationBase;
delete rel_461_delta_OptSpecialMethodInvocationBase;
delete rel_462_new_OptSpecialMethodInvocationBase;
delete rel_463_Tamiflex_Invoke;
delete rel_464_delta_Tamiflex_Invoke;
delete rel_465_new_Tamiflex_Invoke;
delete rel_466_TamiflexCallGraphEdge;
delete rel_467_delta_TamiflexCallGraphEdge;
delete rel_468_new_TamiflexCallGraphEdge;
delete rel_469_TamiflexConstructorCallGraphEdge;
delete rel_470_delta_TamiflexConstructorCallGraphEdge;
delete rel_471_new_TamiflexConstructorCallGraphEdge;
delete rel_472_TamiflexInvocationFirstParam;
delete rel_473_delta_TamiflexInvocationFirstParam;
delete rel_474_new_TamiflexInvocationFirstParam;
delete rel_475_TamiflexInvocationArgumentArrayValue;
delete rel_476_delta_TamiflexInvocationArgumentArrayValue;
delete rel_477_new_TamiflexInvocationArgumentArrayValue;
delete rel_478_Stats_Simple_Application_ArrayIndexPointsTo;
delete rel_479_Stats_Simple_InsensReachableApplicationMethod;
delete rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation;
delete rel_481_Stats_Simple_NonReachableApplicationConcreteMethod;
delete rel_482_Stats_Simple_InsensVarPointsTo;
delete rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation;
delete rel_484_Stats_Simple_Application_NullVirtualMethodInvocation;
delete rel_485_Stats_Simple_AssignedVariable;
delete rel_486_Stats_Simple_ReachableCast;
delete rel_487_Stats_Simple_Application_ReachableCast;
delete rel_488_Stats_Simple_Application_PotentiallyFailingCast;
delete rel_489_Stats_Simple_PotentiallyFailingCast;
delete rel_490_Stats_Simple_InsensReachableVar;
delete rel_491_Stats_Simple_ReachableVar;
delete rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo;
delete rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo;
delete rel_494_Stats_Simple_Application_InsensVarPointsTo;
delete rel_495_Stats_Simple_Application_InstanceFieldPointsTo;
delete rel_496_Stats_Simple_InsensCallGraphEdge;
delete rel_497_Stats_Simple_ReachableVirtualMethodInvocation;
delete rel_498_Stats_Simple_VirtualCallGraphEdge;
delete rel_499_Stats_Simple_VirtualTargets;
delete rel_500_Stats_Simple_PolymorphicCallSite;
delete rel_501_Stats_Simple_Application_PolymorphicCallSite;
delete rel_502_Stats_Simple_EmptyVirtualMethodInvocation;
delete rel_503_Stats_Simple_NullVirtualMethodInvocation;
delete rel_504_Stats_Simple_Application_ReachableMethod;
delete rel_505_Stats_Simple_Application_VarPointsTo;
delete rel_506_Stats_Simple_InsensArrayIndexPointsTo;
delete rel_507_Stats_Simple_InsensInstanceFieldPointsTo;
delete rel_508_Stats_Simple_InsensStaticFieldPointsTo;
delete rel_509_Stats_Metrics;
delete rel_510_Stats_Simple_ReachableApplicationMethod;
}
private:
template <bool performIO> void runFunction(std::string inputDirectory = ".", std::string outputDirectory = ".") {
SignalHandler::instance()->set();
// -- initialize counter --
std::atomic<RamDomain> ctr(0);

#if defined(__EMBEDDED_SOUFFLE__) && defined(_OPENMP)
omp_set_num_threads(1);
#endif

// -- query evaluation --
std::ofstream profile(profiling_fname);
profile << "@start-debug\n";
{
	RamLogger logger(R"(@runtime;)",profile);
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignHeapAllocation.facts"},{"name","_AssignHeapAllocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_1_AssignHeapAllocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [205:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignHeapAllocation_Heap(?instruction,?heap) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AssignHeapAllocation_Heap_op_ctxt,rel_2_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_2_AssignHeapAllocation_Heap->insert(tuple,READ_OP_CONTEXT(rel_2_AssignHeapAllocation_Heap_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_2_AssignHeapAllocation_Heap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [205:1-0:0];)" <<  rel_2_AssignHeapAllocation_Heap->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [151:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isAssignHeapAllocation_Insn(?instruction) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_3_isAssignHeapAllocation_Insn_op_ctxt,rel_3_isAssignHeapAllocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_3_isAssignHeapAllocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_3_isAssignHeapAllocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_3_isAssignHeapAllocation_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [151:1-0:0];)" <<  rel_3_isAssignHeapAllocation_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignBinop.facts"},{"name","_AssignBinop"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_4_AssignBinop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCast.facts"},{"name","_AssignCast"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_5_AssignCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [197:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignCast_From(?instruction,?from) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_From(?instruction,?from) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_6_AssignCast_From_op_ctxt,rel_6_AssignCast_From->createContext());
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_6_AssignCast_From->insert(tuple,READ_OP_CONTEXT(rel_6_AssignCast_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCast_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_From(?instruction,?from) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCast_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_From(?instruction,?from) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_6_AssignCast_From->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignCast_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [197:1-0:0];)" <<  rel_6_AssignCast_From->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNull.facts"},{"name","_AssignCastNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_7_AssignCastNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNumConstant.facts"},{"name","_AssignCastNumConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_8_AssignCastNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [199:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignCastNumConstant_Id(?instruction,?const) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt,rel_9_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_9_AssignCastNumConstant_Id->insert(tuple,READ_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_9_AssignCastNumConstant_Id->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [199:1-0:0];)" <<  rel_9_AssignCastNumConstant_Id->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [198:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignCast_Type(?instruction,?type) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt,rel_10_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_10_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_10_AssignCast_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignCast_Type(?instruction,?type) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt,rel_10_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_10_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_10_AssignCast_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignCast_Type(?instruction,?type) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt,rel_10_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_10_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_10_AssignCast_Type->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignCast_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [198:1-0:0];)" <<  rel_10_AssignCast_Type->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [148:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isAssignCast_Insn(?instruction) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isAssignCast_Insn(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt,rel_11_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_11_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isAssignCast_Insn(?instruction) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isAssignCast_Insn(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_11_isAssignCast_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isAssignCast_Insn(?instruction) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isAssignCast_Insn(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt,rel_11_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_11_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isAssignCast_Insn(?instruction) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isAssignCast_Insn(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_11_isAssignCast_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isAssignCast_Insn(?instruction) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isAssignCast_Insn(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
CREATE_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt,rel_11_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_11_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isAssignCast_Insn(?instruction) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isAssignCast_Insn(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_11_isAssignCast_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [148:1-0:0];)" <<  rel_11_isAssignCast_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignInstanceOf.facts"},{"name","_AssignInstanceOf"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_12_AssignInstanceOf);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignLocal.facts"},{"name","_AssignLocal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_13_AssignLocal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignLocal_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [200:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignLocal_From(?instruction,?from) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_14_AssignLocal_From_op_ctxt,rel_14_AssignLocal_From->createContext());
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_14_AssignLocal_From->insert(tuple,READ_OP_CONTEXT(rel_14_AssignLocal_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignLocal_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignLocal_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_14_AssignLocal_From->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignLocal_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [200:1-0:0];)" <<  rel_14_AssignLocal_From->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [144:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isAssignLocal_Insn(?instruction) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_15_isAssignLocal_Insn_op_ctxt,rel_15_isAssignLocal_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_15_isAssignLocal_Insn->insert(tuple,READ_OP_CONTEXT(rel_15_isAssignLocal_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_15_isAssignLocal_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [144:1-0:0];)" <<  rel_15_isAssignLocal_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNull.facts"},{"name","_AssignNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_16_AssignNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [146:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isAssignNull_Insn(?instruction) :- 
   _AssignNull(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isAssignNull_Insn(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_16_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_16_AssignNull_op_ctxt,rel_16_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_17_isAssignNull_Insn_op_ctxt,rel_17_isAssignNull_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_17_isAssignNull_Insn->insert(tuple,READ_OP_CONTEXT(rel_17_isAssignNull_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isAssignNull_Insn(?instruction) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isAssignNull_Insn(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_17_isAssignNull_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [146:1-0:0];)" <<  rel_17_isAssignNull_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNumConstant.facts"},{"name","_AssignNumConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_18_AssignNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [196:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignNumConstant_Id(?instruction,?const) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_19_AssignNumConstant_Id->insert(tuple,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_19_AssignNumConstant_Id->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [196:1-0:0];)" <<  rel_19_AssignNumConstant_Id->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isNumConstant(?const) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isNumConstant(?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_20_isNumConstant->insert(tuple,READ_OP_CONTEXT(rel_20_isNumConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isNumConstant(?const) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isNumConstant(?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_20_isNumConstant->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isNumConstant(?const) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isNumConstant(?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_20_isNumConstant->insert(tuple,READ_OP_CONTEXT(rel_20_isNumConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isNumConstant(?const) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isNumConstant(?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_20_isNumConstant->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isNumConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2:1-0:0];)" <<  rel_20_isNumConstant->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignUnop.facts"},{"name","_AssignUnop"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_21_AssignUnop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [195:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignBinop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_4_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_4_AssignBinop_op_ctxt,rel_4_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignUnop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_21_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_21_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_21_AssignUnop_op_ctxt,rel_21_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignNull(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_16_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_16_AssignNull_op_ctxt,rel_16_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignInstruction_To(?instruction,?to) :- 
   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_12_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_12_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_12_AssignInstanceOf_op_ctxt,rel_12_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_22_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignInstruction_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [195:1-0:0];)" <<  rel_22_AssignInstruction_To->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Return.facts"},{"name","_Return"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_23_Return);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [206:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReturnNonvoid_Var(?instruction,?var) :- 
   _Return(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_23_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_23_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_24_ReturnNonvoid_Var_op_ctxt,rel_24_ReturnNonvoid_Var->createContext());
CREATE_OP_CONTEXT(rel_23_Return_op_ctxt,rel_23_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_24_ReturnNonvoid_Var->insert(tuple,READ_OP_CONTEXT(rel_24_ReturnNonvoid_Var_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_24_ReturnNonvoid_Var->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [206:1-0:0];)" <<  rel_24_ReturnNonvoid_Var->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [154:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isReturnNonvoid_Insn(?instruction) :- 
   _Return(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_23_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_23_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_23_Return_op_ctxt,rel_23_Return->createContext());
CREATE_OP_CONTEXT(rel_25_isReturnNonvoid_Insn_op_ctxt,rel_25_isReturnNonvoid_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_25_isReturnNonvoid_Insn->insert(tuple,READ_OP_CONTEXT(rel_25_isReturnNonvoid_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_25_isReturnNonvoid_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [154:1-0:0];)" <<  rel_25_isReturnNonvoid_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NativeReturnVar.facts"},{"name","_NativeReturnVar"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_26_NativeReturnVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignPhantomInvoke.facts"},{"name","_AssignPhantomInvoke"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_27_AssignPhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BreakpointStmt.facts"},{"name","_BreakpointStmt"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_28_BreakpointStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DynamicMethodInvocation.facts"},{"name","_DynamicMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_29_DynamicMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EnterMonitor.facts"},{"name","_EnterMonitor"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_30_EnterMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExitMonitor.facts"},{"name","_ExitMonitor"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_31_ExitMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FormalParam.facts"},{"name","_FormalParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_32_FormalParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Goto.facts"},{"name","_Goto"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_33_Goto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./If.facts"},{"name","_If"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_34_If);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadArrayIndex.facts"},{"name","_LoadArrayIndex"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_35_LoadArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [191:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadArrayIndex_Base(?instruction,?base) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_36_LoadArrayIndex_Base_op_ctxt,rel_36_LoadArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_36_LoadArrayIndex_Base->insert(tuple,READ_OP_CONTEXT(rel_36_LoadArrayIndex_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_36_LoadArrayIndex_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [191:1-0:0];)" <<  rel_36_LoadArrayIndex_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [192:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadArrayIndex_To(?instruction,?to) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_37_LoadArrayIndex_To_op_ctxt,rel_37_LoadArrayIndex_To->createContext());
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_37_LoadArrayIndex_To->insert(tuple,READ_OP_CONTEXT(rel_37_LoadArrayIndex_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_37_LoadArrayIndex_To->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [192:1-0:0];)" <<  rel_37_LoadArrayIndex_To->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [123:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isLoadArrayIndex_Insn(?instruction) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_38_isLoadArrayIndex_Insn_op_ctxt,rel_38_isLoadArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_38_isLoadArrayIndex_Insn->insert(tuple,READ_OP_CONTEXT(rel_38_isLoadArrayIndex_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_38_isLoadArrayIndex_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [123:1-0:0];)" <<  rel_38_isLoadArrayIndex_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadInstanceField.facts"},{"name","_LoadInstanceField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_39_LoadInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [183:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadInstanceField_Base(?instruction,?base) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_40_LoadInstanceField_Base_op_ctxt,rel_40_LoadInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_40_LoadInstanceField_Base->insert(tuple,READ_OP_CONTEXT(rel_40_LoadInstanceField_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_40_LoadInstanceField_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [183:1-0:0];)" <<  rel_40_LoadInstanceField_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [184:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadInstanceField_To(?instruction,?to) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_41_LoadInstanceField_To_op_ctxt,rel_41_LoadInstanceField_To->createContext());
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_41_LoadInstanceField_To->insert(tuple,READ_OP_CONTEXT(rel_41_LoadInstanceField_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_41_LoadInstanceField_To->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [184:1-0:0];)" <<  rel_41_LoadInstanceField_To->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [118:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isLoadInstanceField_Insn(?instruction) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_42_isLoadInstanceField_Insn_op_ctxt,rel_42_isLoadInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_42_isLoadInstanceField_Insn->insert(tuple,READ_OP_CONTEXT(rel_42_isLoadInstanceField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_42_isLoadInstanceField_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [118:1-0:0];)" <<  rel_42_isLoadInstanceField_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadStaticField.facts"},{"name","_LoadStaticField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_43_LoadStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadStaticField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [187:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadStaticField_To(?instruction,?to) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_44_LoadStaticField_To_op_ctxt,rel_44_LoadStaticField_To->createContext());
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_44_LoadStaticField_To->insert(tuple,READ_OP_CONTEXT(rel_44_LoadStaticField_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadStaticField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadStaticField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_44_LoadStaticField_To->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadStaticField_To;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [187:1-0:0];)" <<  rel_44_LoadStaticField_To->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [120:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isLoadStaticField_Insn(?instruction) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_45_isLoadStaticField_Insn_op_ctxt,rel_45_isLoadStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_45_isLoadStaticField_Insn->insert(tuple,READ_OP_CONTEXT(rel_45_isLoadStaticField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_45_isLoadStaticField_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [120:1-0:0];)" <<  rel_45_isLoadStaticField_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LookupSwitch.facts"},{"name","_LookupSwitch"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_46_LookupSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./PhantomInvoke.facts"},{"name","_PhantomInvoke"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_47_PhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ReturnVoid.facts"},{"name","_ReturnVoid"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_48_ReturnVoid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./SpecialMethodInvocation.facts"},{"name","_SpecialMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_49_SpecialMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StaticMethodInvocation.facts"},{"name","_StaticMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_50_StaticMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [163:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isStaticMethodInvocation_Insn(?instruction) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_51_isStaticMethodInvocation_Insn_op_ctxt,rel_51_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_51_isStaticMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_51_isStaticMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_51_isStaticMethodInvocation_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [163:1-0:0];)" <<  rel_51_isStaticMethodInvocation_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreArrayIndex.facts"},{"name","_StoreArrayIndex"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_52_StoreArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [194:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreArrayIndex_Base(?instruction,?base) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_53_StoreArrayIndex_Base_op_ctxt,rel_53_StoreArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_53_StoreArrayIndex_Base->insert(tuple,READ_OP_CONTEXT(rel_53_StoreArrayIndex_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_53_StoreArrayIndex_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [194:1-0:0];)" <<  rel_53_StoreArrayIndex_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [193:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreArrayIndex_From(?instruction,?from) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_54_StoreArrayIndex_From_op_ctxt,rel_54_StoreArrayIndex_From->createContext());
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_54_StoreArrayIndex_From->insert(tuple,READ_OP_CONTEXT(rel_54_StoreArrayIndex_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_54_StoreArrayIndex_From->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [193:1-0:0];)" <<  rel_54_StoreArrayIndex_From->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [124:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isStoreArrayIndex_Insn(?instruction) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_55_isStoreArrayIndex_Insn_op_ctxt,rel_55_isStoreArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_55_isStoreArrayIndex_Insn->insert(tuple,READ_OP_CONTEXT(rel_55_isStoreArrayIndex_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_55_isStoreArrayIndex_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [124:1-0:0];)" <<  rel_55_isStoreArrayIndex_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreInstanceField.facts"},{"name","_StoreInstanceField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_56_StoreInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [186:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreInstanceField_Base(?instruction,?base) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_57_StoreInstanceField_Base_op_ctxt,rel_57_StoreInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_57_StoreInstanceField_Base->insert(tuple,READ_OP_CONTEXT(rel_57_StoreInstanceField_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_57_StoreInstanceField_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [186:1-0:0];)" <<  rel_57_StoreInstanceField_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [185:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreInstanceField_From(?instruction,?from) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_58_StoreInstanceField_From_op_ctxt,rel_58_StoreInstanceField_From->createContext());
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_58_StoreInstanceField_From->insert(tuple,READ_OP_CONTEXT(rel_58_StoreInstanceField_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_58_StoreInstanceField_From->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [185:1-0:0];)" <<  rel_58_StoreInstanceField_From->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [119:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isStoreInstanceField_Insn(?instruction) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_59_isStoreInstanceField_Insn_op_ctxt,rel_59_isStoreInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_59_isStoreInstanceField_Insn->insert(tuple,READ_OP_CONTEXT(rel_59_isStoreInstanceField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_59_isStoreInstanceField_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [119:1-0:0];)" <<  rel_59_isStoreInstanceField_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreStaticField.facts"},{"name","_StoreStaticField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_60_StoreStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [182:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(FieldInstruction_Signature(?instruction,?signature) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_61_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_61_FieldInstruction_Signature->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(FieldInstruction_Signature(?instruction,?signature) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_61_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_61_FieldInstruction_Signature->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(FieldInstruction_Signature(?instruction,?signature) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_61_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_61_FieldInstruction_Signature->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(FieldInstruction_Signature(?instruction,?signature) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_61_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_61_FieldInstruction_Signature->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [182:1-0:0];)" <<  rel_61_FieldInstruction_Signature->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreStaticField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [188:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreStaticField_From(?instruction,?from) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_62_StoreStaticField_From_op_ctxt,rel_62_StoreStaticField_From->createContext());
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_62_StoreStaticField_From->insert(tuple,READ_OP_CONTEXT(rel_62_StoreStaticField_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_62_StoreStaticField_From->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreStaticField_From;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [188:1-0:0];)" <<  rel_62_StoreStaticField_From->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [121:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isStoreStaticField_Insn(?instruction) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_63_isStoreStaticField_Insn_op_ctxt,rel_63_isStoreStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_63_isStoreStaticField_Insn->insert(tuple,READ_OP_CONTEXT(rel_63_isStoreStaticField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_63_isStoreStaticField_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [121:1-0:0];)" <<  rel_63_isStoreStaticField_Insn->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./TableSwitch.facts"},{"name","_TableSwitch"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_64_TableSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Throw.facts"},{"name","_Throw"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_65_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Throw_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [174:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Throw_Var(?instruction,?var) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw_Var(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_66_Throw_Var_op_ctxt,rel_66_Throw_Var->createContext());
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_66_Throw_Var->insert(tuple,READ_OP_CONTEXT(rel_66_Throw_Var_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Throw_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw_Var(?instruction,?var) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Throw_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw_Var(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_66_Throw_Var->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Throw_Var;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [174:1-0:0];)" <<  rel_66_Throw_Var->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThrowNull.facts"},{"name","_ThrowNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_67_ThrowNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [107:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isThrow_Insn(?instruction) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isThrow_Insn(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
CREATE_OP_CONTEXT(rel_68_isThrow_Insn_op_ctxt,rel_68_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_68_isThrow_Insn->insert(tuple,READ_OP_CONTEXT(rel_68_isThrow_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isThrow_Insn(?instruction) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isThrow_Insn(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_68_isThrow_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isThrow_Insn(?instruction) :- 
   _ThrowNull(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isThrow_Insn(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_67_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_67_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_67_ThrowNull_op_ctxt,rel_67_ThrowNull->createContext());
CREATE_OP_CONTEXT(rel_68_isThrow_Insn_op_ctxt,rel_68_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_68_isThrow_Insn->insert(tuple,READ_OP_CONTEXT(rel_68_isThrow_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isThrow_Insn(?instruction) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isThrow_Insn(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_68_isThrow_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isThrow_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [107:1-0:0];)" <<  rel_68_isThrow_Insn->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [246:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Throw(?instruction,?var) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_69_Throw_op_ctxt,rel_69_Throw->createContext());
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_69_Throw->insert(tuple,READ_OP_CONTEXT(rel_69_Throw_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw(?instruction,?var) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Throw(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_69_Throw->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Throw(?insn,?var) :- 
   isThrow_Insn(?insn),
   Throw_Var(?insn,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [881:1-883:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [881:1-883:26];Throw(?insn,?var) :- \n   isThrow_Insn(?insn),\n   Throw_Var(?insn,?var).;)",profile);
if (!rel_66_Throw_Var->empty()&&!rel_68_isThrow_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_68_isThrow_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_69_Throw_op_ctxt,rel_69_Throw->createContext());
CREATE_OP_CONTEXT(rel_66_Throw_Var_op_ctxt,rel_66_Throw_Var->createContext());
CREATE_OP_CONTEXT(rel_68_isThrow_Insn_op_ctxt,rel_68_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_66_Throw_Var->equalRange<0>(key,READ_OP_CONTEXT(rel_66_Throw_Var_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_69_Throw->insert(tuple,READ_OP_CONTEXT(rel_69_Throw_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [881:1-883:26];Throw(?insn,?var) :-     isThrow_Insn(?insn),    Throw_Var(?insn,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [881:1-883:26];Throw(?insn,?var) :- \n   isThrow_Insn(?insn),\n   Throw_Var(?insn,?var).;)" <<  rel_69_Throw->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Throw;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [246:1-0:0];)" <<  rel_69_Throw->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Throw.csv"},{"name","Throw"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_69_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_68_isThrow_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_66_Throw_Var->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./UnsupportedInstruction.facts"},{"name","_UnsupportedInstruction"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_70_UnsupportedInstruction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./VirtualMethodInvocation.facts"},{"name","_VirtualMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_71_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./CallbackMethod.facts"},{"name","_CallbackMethod"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_72_CallbackMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method.facts"},{"name","_Method"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_73_Method);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [51:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Method_DeclaringType(?method,?declaringType) :- 
   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_73_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_73_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_73_Method_op_ctxt,rel_73_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_74_Method_DeclaringType->insert(tuple,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Method_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Method_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_74_Method_DeclaringType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Method_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [51:1-0:0];)" <<  rel_74_Method_DeclaringType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [54:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Method_Descriptor(?method,?descriptor) :- 
   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_73_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_73_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_73_Method_op_ctxt,rel_73_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_75_Method_Descriptor->insert(tuple,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Method_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Method_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_75_Method_Descriptor->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Method_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [54:1-0:0];)" <<  rel_75_Method_Descriptor->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [53:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Method_SimpleName(?method,?simplename) :- 
   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_73_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_73_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_73_Method_op_ctxt,rel_73_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_76_Method_SimpleName->insert(tuple,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Method_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Method_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_76_Method_SimpleName->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Method_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [53:1-0:0];)" <<  rel_76_Method_SimpleName->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_ReturnType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [52:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Method_ReturnType(?method,?returnType) :- 
   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_ReturnType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_73_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_73_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt,rel_77_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_73_Method_op_ctxt,rel_73_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_77_Method_ReturnType->insert(tuple,READ_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Method_ReturnType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Method_ReturnType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_77_Method_ReturnType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Method_ReturnType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [52:1-0:0];)" <<  rel_77_Method_ReturnType->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-DeclaresException.facts"},{"name","_Method_DeclaresException"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_78_Method_DeclaresException);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-Modifier.facts"},{"name","_Method_Modifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_79_Method_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodImplemented;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1079:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodImplemented(?simplename,?descriptor,?type,?method) :- 
   Method_SimpleName(?method,?simplename),
   Method_Descriptor(?method,?descriptor),
   Method_DeclaringType(?method,?type),
   !_Method_Modifier("abstract",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1110:1-1114:44])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodImplemented;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :- \n   Method_SimpleName(?method,?simplename),\n   Method_Descriptor(?method,?descriptor),\n   Method_DeclaringType(?method,?type),\n   !_Method_Modifier(\"abstract\",?method).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_76_Method_SimpleName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt,rel_80_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_75_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[1]),(RamDomain)(env2[1]),(RamDomain)(env0[0])});
if (!(rel_80_MethodImplemented->insert(tuple,READ_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodImplemented;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :-     Method_SimpleName(?method,?simplename),    Method_Descriptor(?method,?descriptor),    Method_DeclaringType(?method,?type),    !_Method_Modifier('abstract',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodImplemented;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :- \n   Method_SimpleName(?method,?simplename),\n   Method_Descriptor(?method,?descriptor),\n   Method_DeclaringType(?method,?type),\n   !_Method_Modifier(\"abstract\",?method).;)" <<  rel_80_MethodImplemented->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodImplemented;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1079:1-0:0];)" <<  rel_80_MethodImplemented->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassInitializer;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1277:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassInitializer(?type,?method) :- 
   MethodImplemented("<clinit>","void()",?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1601:1-1602:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassInitializer;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1601:1-1602:60];ClassInitializer(?type,?method) :- \n   MethodImplemented(\"<clinit>\",\"void()\",?type,?method).;)",profile);
if (!rel_80_MethodImplemented->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt,rel_81_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt,rel_80_MethodImplemented->createContext());
const Tuple<RamDomain,4> key({89,59,0,0});
auto range = rel_80_MethodImplemented->equalRange<0,1>(key,READ_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_81_ClassInitializer->insert(tuple,READ_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ClassInitializer;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1601:1-1602:60];ClassInitializer(?type,?method) :-     MethodImplemented('<clinit>','void()',?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ClassInitializer;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1601:1-1602:60];ClassInitializer(?type,?method) :- \n   MethodImplemented(\"<clinit>\",\"void()\",?type,?method).;)" <<  rel_81_ClassInitializer->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ClassInitializer;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1277:1-0:0];)" <<  rel_81_ClassInitializer->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThisVar.facts"},{"name","_ThisVar"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_82_ThisVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-DeclaringMethod.facts"},{"name","_Var_DeclaringMethod"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_83_Var_DeclaringMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [50:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _FormalParam(?index,?method,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isMethod(?method) :- \n   _FormalParam(?index,?method,?var).;)",profile);
if (!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_32_FormalParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isMethod(?method) :-     _FormalParam(?index,?method,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isMethod(?method) :- \n   _FormalParam(?index,?method,?var).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _Method_DeclaresException(?exceptionType,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isMethod(?method) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_78_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_78_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_78_Method_DeclaresException_op_ctxt,rel_78_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isMethod(?method) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isMethod(?method) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _Method_Modifier(?mod,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [345:1-348:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [345:1-348:35];isMethod(?method) :- \n   _Method_Modifier(?mod,?method).;)",profile);
if (!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_79_Method_Modifier->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [345:1-348:35];isMethod(?method) :-     _Method_Modifier(?mod,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [345:1-348:35];isMethod(?method) :- \n   _Method_Modifier(?mod,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _NativeReturnVar(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isMethod(?method) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_26_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_26_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_26_NativeReturnVar_op_ctxt,rel_26_NativeReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isMethod(?method) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isMethod(?method) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _Var_DeclaringMethod(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isMethod(?method) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_83_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_83_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_Var_DeclaringMethod_op_ctxt,rel_83_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isMethod(?method) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isMethod(?method) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _ThisVar(?method,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isMethod(?method) :- \n   _ThisVar(?method,?var).;)",profile);
if (!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_82_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isMethod(?method) :-     _ThisVar(?method,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isMethod(?method) :- \n   _ThisVar(?method,?var).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?signature) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethod(?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethod(?signature) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethod(?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?signature) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethod(?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethod(?signature) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethod(?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?signature) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethod(?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethod(?signature) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethod(?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?method) :- 
   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];isMethod(?method) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_73_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_73_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_73_Method_op_ctxt,rel_73_Method->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];isMethod(?method) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [657:1-665:91];isMethod(?method) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_84_isMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethod(?id) :- 
   _CallbackMethod(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [852:1-854:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [852:1-854:24];isMethod(?id) :- \n   _CallbackMethod(?id).;)",profile);
if (!rel_72_CallbackMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_72_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_CallbackMethod_op_ctxt,rel_72_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_84_isMethod->insert(tuple,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [852:1-854:24];isMethod(?id) :-     _CallbackMethod(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [852:1-854:24];isMethod(?id) :- \n   _CallbackMethod(?id).;)" <<  rel_84_isMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [50:1-0:0];)" <<  rel_84_isMethod->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_73_Method->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [88:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Method(?instruction,?method) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Method(?instruction,?method) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Method(?instruction,?method) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Method(?instruction,?method) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Method(?instruction,?method) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Method(?instruction,?method) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignBinop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Method(?instruction,?method) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_4_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_4_AssignBinop_op_ctxt,rel_4_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Method(?instruction,?method) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Method(?instruction,?method) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignUnop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Method(?instruction,?method) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_21_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_21_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_21_AssignUnop_op_ctxt,rel_21_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Method(?instruction,?method) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Method(?instruction,?method) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Method(?instruction,?method) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Method(?instruction,?method) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Method(?instruction,?method) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Method(?instruction,?method) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Method(?instruction,?method) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Method(?instruction,?method) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Method(?instruction,?method) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Method(?instruction,?method) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Method(?instruction,?method) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Method(?instruction,?method) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Method(?instruction,?method) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Method(?instruction,?method) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignNull(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Method(?instruction,?method) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_16_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_16_AssignNull_op_ctxt,rel_16_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Method(?instruction,?method) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Method(?instruction,?method) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Method(?instruction,?method) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_12_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_12_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_12_AssignInstanceOf_op_ctxt,rel_12_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Method(?instruction,?method) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Method(?instruction,?method) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _EnterMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Method(?instruction,?method) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_30_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_30_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_30_EnterMonitor_op_ctxt,rel_30_EnterMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Method(?instruction,?method) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Method(?instruction,?method) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _ExitMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Method(?instruction,?method) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_31_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_31_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_31_ExitMonitor_op_ctxt,rel_31_ExitMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Method(?instruction,?method) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Method(?instruction,?method) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Method(?instruction,?method) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Method(?instruction,?method) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Method(?instruction,?method) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Method(?instruction,?method) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Method(?instruction,?method) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Method(?instruction,?method) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Method(?instruction,?method) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Method(?instruction,?method) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Method(?instruction,?method) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Method(?instruction,?method) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_29_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_29_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_29_DynamicMethodInvocation_op_ctxt,rel_29_DynamicMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Method(?instruction,?method) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Method(?instruction,?method) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Method(?instruction,?method) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Method(?instruction,?method) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Method(?instruction,?method) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _ThrowNull(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Method(?instruction,?method) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_67_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_67_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_67_ThrowNull_op_ctxt,rel_67_ThrowNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Method(?instruction,?method) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Method(?instruction,?method) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Method(?instruction,?method) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Method(?instruction,?method) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Method(?instruction,?method) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Method(?instruction,?method) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Method(?instruction,?method) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Method(?instruction,?method) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Method(?instruction,?method) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Method(?instruction,?method) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Method(?instruction,?method) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Method(?instruction,?method) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Method(?instruction,?method) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Method(?instruction,?method) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Method(?instruction,?method) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Method(?instruction,?method) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Method(?instruction,?method) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Method(?instruction,?method) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Method(?instruction,?method) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Method(?instruction,?method) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _Goto(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Method(?instruction,?method) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_33_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_33_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_33_Goto_op_ctxt,rel_33_Goto->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Method(?instruction,?method) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Method(?instruction,?method) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _If(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Method(?instruction,?method) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_34_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_34_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_34_If_op_ctxt,rel_34_If->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Method(?instruction,?method) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Method(?instruction,?method) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _TableSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Method(?instruction,?method) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_64_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_64_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_64_TableSwitch_op_ctxt,rel_64_TableSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Method(?instruction,?method) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Method(?instruction,?method) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _LookupSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Method(?instruction,?method) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_46_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_46_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_46_LookupSwitch_op_ctxt,rel_46_LookupSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Method(?instruction,?method) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Method(?instruction,?method) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _Return(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Method(?instruction,?method) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_23_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_23_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_23_Return_op_ctxt,rel_23_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Method(?instruction,?method) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Method(?instruction,?method) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _ReturnVoid(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Method(?instruction,?method) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_48_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_48_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_48_ReturnVoid_op_ctxt,rel_48_ReturnVoid->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Method(?instruction,?method) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Method(?instruction,?method) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _AssignPhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Method(?instruction,?method) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_27_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_27_AssignPhantomInvoke_op_ctxt,rel_27_AssignPhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Method(?instruction,?method) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Method(?instruction,?method) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _PhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Method(?instruction,?method) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_47_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_47_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_47_PhantomInvoke_op_ctxt,rel_47_PhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Method(?instruction,?method) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Method(?instruction,?method) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _BreakpointStmt(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Method(?instruction,?method) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_28_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_28_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_28_BreakpointStmt_op_ctxt,rel_28_BreakpointStmt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Method(?instruction,?method) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Method(?instruction,?method) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(?instruction,?method) :- 
   _UnsupportedInstruction(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Method(?instruction,?method) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_70_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_70_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_70_UnsupportedInstruction_op_ctxt,rel_70_UnsupportedInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Method(?instruction,?method) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Method(?instruction,?method) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>") :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(130)});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Method(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(132)});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(134)});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(135)});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_85_Instruction_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(137)});
if (!(rel_85_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_85_Instruction_Method->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [88:1-0:0];)" <<  rel_85_Instruction_Method->size() << std::endl;
}rel_86_delta_Instruction_Method->insertAll(*rel_85_Instruction_Method);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [257:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReturnVar(?var,?method) :- 
   _NativeReturnVar(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [940:1-941:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [940:1-941:34];ReturnVar(?var,?method) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_26_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_26_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_26_NativeReturnVar_op_ctxt,rel_26_NativeReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_88_ReturnVar->insert(tuple,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [940:1-941:34];ReturnVar(?var,?method) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [940:1-941:34];ReturnVar(?var,?method) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_88_ReturnVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [257:1-0:0];)" <<  rel_88_ReturnVar->size() << std::endl;
}rel_89_delta_ReturnVar->insertAll(*rel_88_ReturnVar);
for(;;) {
SECTIONS_START;
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [88:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Instruction_Method(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>")),"<java.io.FileSystem: java.io.FileSystem getFileSystem()>") :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Method;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];Instruction_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_89_delta_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_89_delta_ReturnVar_op_ctxt,rel_89_delta_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_87_new_Instruction_Method_op_ctxt,rel_87_new_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
if( !rel_85_Instruction_Method->contains(Tuple<RamDomain,2>({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()),125}),READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt))) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_89_delta_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_89_delta_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(125)});
if (!(rel_87_new_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_87_new_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];@new_Instruction_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.FileSystem: java.io.FileSystem getFileSystem()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    @delta_ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>'),    !Instruction_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.FileSystem: java.io.FileSystem getFileSystem()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Instruction_Method;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];Instruction_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_87_new_Instruction_Method->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [88:1-0:0];)" <<  rel_87_new_Instruction_Method->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [257:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReturnVar(?var,?method) :- 
   isReturnNonvoid_Insn(?insn),
   Instruction_Method(?insn,?method),
   ReturnNonvoid_Var(?insn,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [936:1-939:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReturnVar;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [936:1-939:34];ReturnVar(?var,?method) :- \n   isReturnNonvoid_Insn(?insn),\n   Instruction_Method(?insn,?method),\n   ReturnNonvoid_Var(?insn,?var).;)",profile);
if (!rel_86_delta_Instruction_Method->empty()&&!rel_24_ReturnNonvoid_Var->empty()&&!rel_25_isReturnNonvoid_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_25_isReturnNonvoid_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_86_delta_Instruction_Method_op_ctxt,rel_86_delta_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_90_new_ReturnVar_op_ctxt,rel_90_new_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_24_ReturnNonvoid_Var_op_ctxt,rel_24_ReturnNonvoid_Var->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_25_isReturnNonvoid_Insn_op_ctxt,rel_25_isReturnNonvoid_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_86_delta_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_86_delta_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_24_ReturnNonvoid_Var->equalRange<0>(key,READ_OP_CONTEXT(rel_24_ReturnNonvoid_Var_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_88_ReturnVar->contains(Tuple<RamDomain,2>({env2[1],env1[1]}),READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_90_new_ReturnVar->insert(tuple,READ_OP_CONTEXT(rel_90_new_ReturnVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [936:1-939:34];@new_ReturnVar(?var,?method) :-     isReturnNonvoid_Insn(?insn),    @delta_Instruction_Method(?insn,?method),    ReturnNonvoid_Var(?insn,?var),    !ReturnVar(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReturnVar;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [936:1-939:34];ReturnVar(?var,?method) :- \n   isReturnNonvoid_Insn(?insn),\n   Instruction_Method(?insn,?method),\n   ReturnNonvoid_Var(?insn,?var).;)" <<  rel_90_new_ReturnVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [257:1-0:0];)" <<  rel_90_new_ReturnVar->size() << std::endl;
}SECTION_END
SECTIONS_END;
if(((rel_87_new_Instruction_Method->empty()) && (rel_90_new_ReturnVar->empty()))) break;
{
	RamLogger logger(R"(@c-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [88:1-0:0];)",profile);
rel_85_Instruction_Method->insertAll(*rel_87_new_Instruction_Method);
{
auto rel_0 = rel_86_delta_Instruction_Method;
rel_86_delta_Instruction_Method = rel_87_new_Instruction_Method;
rel_87_new_Instruction_Method = rel_0;
}
rel_87_new_Instruction_Method->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [257:1-0:0];)",profile);
rel_88_ReturnVar->insertAll(*rel_90_new_ReturnVar);
{
auto rel_0 = rel_89_delta_ReturnVar;
rel_89_delta_ReturnVar = rel_90_new_ReturnVar;
rel_90_new_ReturnVar = rel_0;
}
rel_90_new_ReturnVar->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_86_delta_Instruction_Method->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_87_new_Instruction_Method->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_89_delta_ReturnVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_90_new_ReturnVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_25_isReturnNonvoid_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_24_ReturnNonvoid_Var->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [208:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(?instruction,?signature) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(?instruction,?signature) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(?instruction,?signature) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>")),"<java.io.UnixFileSystem: void <init>()>") :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];MethodInvocation_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.UnixFileSystem: void <init>()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(127)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];MethodInvocation_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.UnixFileSystem: void <init>()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];MethodInvocation_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.UnixFileSystem: void <init>()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),"<java.lang.Object: void finalize()>") :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];MethodInvocation_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(60)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];MethodInvocation_Method(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.Object: void finalize()>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];MethodInvocation_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.PrivilegedAction: java.lang.Object run()>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.PrivilegedAction: java.lang.Object run()>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.PrivilegedExceptionAction: java.lang.Object run()>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodInvocation_Method(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.PrivilegedExceptionAction: java.lang.Object run()>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136)});
if (!(rel_91_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [208:1-0:0];)" <<  rel_91_MethodInvocation_Method->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [259:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StaticMethodInvocation(?invocation,?signature,?inmethod) :- 
   isStaticMethodInvocation_Insn(?invocation),
   Instruction_Method(?invocation,?inmethod),
   MethodInvocation_Method(?invocation,?signature).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [946:1-949:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :- \n   isStaticMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_51_isStaticMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_51_isStaticMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_51_isStaticMethodInvocation_Insn_op_ctxt,rel_51_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_92_StaticMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :-     isStaticMethodInvocation_Insn(?invocation),    Instruction_Method(?invocation,?inmethod),    MethodInvocation_Method(?invocation,?signature).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :- \n   isStaticMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)" <<  rel_92_StaticMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [259:1-0:0];)" <<  rel_92_StaticMethodInvocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2804:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptForNameInvocation(?invocation,?inmethod) :- 
   isMethod("<java.lang.Class: java.lang.Class forName(java.lang.String)>"),
   StaticMethodInvocation(?invocation,"<java.lang.Class: java.lang.Class forName(java.lang.String)>",?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\",?inmethod).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt,rel_93_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({172});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,172,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2])});
if (!(rel_93_OptForNameInvocation->insert(tuple,READ_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :-     isMethod('<java.lang.Class: java.lang.Class forName(java.lang.String)>'),    StaticMethodInvocation(?invocation,'<java.lang.Class: java.lang.Class forName(java.lang.String)>',?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\",?inmethod).;)" <<  rel_93_OptForNameInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(OptForNameInvocation(?invocation,?inmethod) :- 
   isMethod("<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"),
   StaticMethodInvocation(?invocation,"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>",?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\",?inmethod).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt,rel_93_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({173});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,173,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2])});
if (!(rel_93_OptForNameInvocation->insert(tuple,READ_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :-     isMethod('<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>'),    StaticMethodInvocation(?invocation,'<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>',?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2805:1-2809:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\",?inmethod).;)" <<  rel_93_OptForNameInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OptForNameInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2804:1-0:0];)" <<  rel_93_OptForNameInvocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNull;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [255:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignNull(?to,?inmethod) :- 
   isAssignNull_Insn(?insn),
   AssignInstruction_To(?insn,?to),
   Instruction_Method(?insn,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [927:1-930:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNull;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [927:1-930:40];AssignNull(?to,?inmethod) :- \n   isAssignNull_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod).;)",profile);
if (!rel_22_AssignInstruction_To->empty()&&!rel_85_Instruction_Method->empty()&&!rel_17_isAssignNull_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_17_isAssignNull_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_94_AssignNull_op_ctxt,rel_94_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_17_isAssignNull_Insn_op_ctxt,rel_17_isAssignNull_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[1])});
if (!(rel_94_AssignNull->insert(tuple,READ_OP_CONTEXT(rel_94_AssignNull_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignNull;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [927:1-930:40];AssignNull(?to,?inmethod) :-     isAssignNull_Insn(?insn),    AssignInstruction_To(?insn,?to),    Instruction_Method(?insn,?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignNull;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [927:1-930:40];AssignNull(?to,?inmethod) :- \n   isAssignNull_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod).;)" <<  rel_94_AssignNull->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignNull;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [255:1-0:0];)" <<  rel_94_AssignNull->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_17_isAssignNull_Insn->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [87:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Index(?instruction,?index) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Index(?instruction,?index) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];Instruction_Index(?instruction,?index) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Index(?instruction,?index) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Index(?instruction,?index) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];Instruction_Index(?instruction,?index) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignBinop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Index(?instruction,?index) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_4_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_4_AssignBinop_op_ctxt,rel_4_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Index(?instruction,?index) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];Instruction_Index(?instruction,?index) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignUnop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Index(?instruction,?index) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_21_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_21_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_21_AssignUnop_op_ctxt,rel_21_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Index(?instruction,?index) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];Instruction_Index(?instruction,?index) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Index(?instruction,?index) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Index(?instruction,?index) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];Instruction_Index(?instruction,?index) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Index(?instruction,?index) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Index(?instruction,?index) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];Instruction_Index(?instruction,?index) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Index(?instruction,?index) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Index(?instruction,?index) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];Instruction_Index(?instruction,?index) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Index(?instruction,?index) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Index(?instruction,?index) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];Instruction_Index(?instruction,?index) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignNull(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Index(?instruction,?index) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_16_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_16_AssignNull_op_ctxt,rel_16_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Index(?instruction,?index) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];Instruction_Index(?instruction,?index) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Index(?instruction,?index) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_12_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_12_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_12_AssignInstanceOf_op_ctxt,rel_12_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Index(?instruction,?index) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];Instruction_Index(?instruction,?index) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _EnterMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Index(?instruction,?index) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_30_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_30_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_30_EnterMonitor_op_ctxt,rel_30_EnterMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Index(?instruction,?index) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];Instruction_Index(?instruction,?index) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _ExitMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Index(?instruction,?index) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_31_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_31_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_31_ExitMonitor_op_ctxt,rel_31_ExitMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Index(?instruction,?index) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];Instruction_Index(?instruction,?index) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Index(?instruction,?index) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Index(?instruction,?index) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];Instruction_Index(?instruction,?index) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Index(?instruction,?index) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Index(?instruction,?index) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];Instruction_Index(?instruction,?index) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Index(?instruction,?index) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Index(?instruction,?index) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];Instruction_Index(?instruction,?index) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Index(?instruction,?index) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_29_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_29_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_29_DynamicMethodInvocation_op_ctxt,rel_29_DynamicMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Index(?instruction,?index) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];Instruction_Index(?instruction,?index) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Index(?instruction,?index) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Index(?instruction,?index) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];Instruction_Index(?instruction,?index) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _ThrowNull(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Index(?instruction,?index) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_67_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_67_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_67_ThrowNull_op_ctxt,rel_67_ThrowNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Index(?instruction,?index) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];Instruction_Index(?instruction,?index) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Index(?instruction,?index) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Index(?instruction,?index) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];Instruction_Index(?instruction,?index) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Index(?instruction,?index) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Index(?instruction,?index) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];Instruction_Index(?instruction,?index) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Index(?instruction,?index) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Index(?instruction,?index) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];Instruction_Index(?instruction,?index) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Index(?instruction,?index) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Index(?instruction,?index) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];Instruction_Index(?instruction,?index) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Index(?instruction,?index) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Index(?instruction,?index) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];Instruction_Index(?instruction,?index) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Index(?instruction,?index) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Index(?instruction,?index) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];Instruction_Index(?instruction,?index) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _Goto(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Index(?instruction,?index) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_33_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_33_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_33_Goto_op_ctxt,rel_33_Goto->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Index(?instruction,?index) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];Instruction_Index(?instruction,?index) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _If(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Index(?instruction,?index) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_34_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_34_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_34_If_op_ctxt,rel_34_If->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Index(?instruction,?index) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];Instruction_Index(?instruction,?index) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _TableSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Index(?instruction,?index) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_64_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_64_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_64_TableSwitch_op_ctxt,rel_64_TableSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Index(?instruction,?index) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];Instruction_Index(?instruction,?index) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _LookupSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Index(?instruction,?index) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_46_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_46_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_46_LookupSwitch_op_ctxt,rel_46_LookupSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Index(?instruction,?index) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];Instruction_Index(?instruction,?index) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _Return(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Index(?instruction,?index) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_23_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_23_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_23_Return_op_ctxt,rel_23_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Index(?instruction,?index) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];Instruction_Index(?instruction,?index) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _ReturnVoid(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Index(?instruction,?index) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_48_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_48_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_48_ReturnVoid_op_ctxt,rel_48_ReturnVoid->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Index(?instruction,?index) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];Instruction_Index(?instruction,?index) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _AssignPhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Index(?instruction,?index) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_27_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_27_AssignPhantomInvoke_op_ctxt,rel_27_AssignPhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Index(?instruction,?index) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];Instruction_Index(?instruction,?index) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _PhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Index(?instruction,?index) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_47_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_47_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_47_PhantomInvoke_op_ctxt,rel_47_PhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Index(?instruction,?index) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];Instruction_Index(?instruction,?index) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _BreakpointStmt(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Index(?instruction,?index) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_28_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_28_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_28_BreakpointStmt_op_ctxt,rel_28_BreakpointStmt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Index(?instruction,?index) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];Instruction_Index(?instruction,?index) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(?instruction,?index) :- 
   _UnsupportedInstruction(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Index(?instruction,?index) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_70_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_70_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_70_UnsupportedInstruction_op_ctxt,rel_70_UnsupportedInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Index(?instruction,?index) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];Instruction_Index(?instruction,?index) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>")),1) :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];Instruction_Index(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),1) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];Instruction_Index(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),1) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];Instruction_Index(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),1) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),1) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Index(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),1) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Index(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),1) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];Instruction_Index(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),1) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),1) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),1) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),1) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Index(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),1) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_95_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_95_Instruction_Index->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Instruction_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [87:1-0:0];)" <<  rel_95_Instruction_Index->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [253:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignCast(?type,?from,?to,?inmethod) :- 
   isAssignCast_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   AssignCast_From(?insn,?from),
   AssignInstruction_To(?insn,?to),
   AssignCast_Type(?insn,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [916:1-921:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :- \n   isAssignCast_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignCast_From(?insn,?from),\n   AssignInstruction_To(?insn,?to),\n   AssignCast_Type(?insn,?type).;)",profile);
if (!rel_6_AssignCast_From->empty()&&!rel_10_AssignCast_Type->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_85_Instruction_Method->empty()&&!rel_11_isAssignCast_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_isAssignCast_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_96_AssignCast_op_ctxt,rel_96_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_6_AssignCast_From_op_ctxt,rel_6_AssignCast_From->createContext());
CREATE_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt,rel_10_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_11_isAssignCast_Insn_op_ctxt,rel_11_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_6_AssignCast_From->equalRange<0>(key,READ_OP_CONTEXT(rel_6_AssignCast_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_10_AssignCast_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_10_AssignCast_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_96_AssignCast->insert(tuple,READ_OP_CONTEXT(rel_96_AssignCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :-     isAssignCast_Insn(?insn),    Instruction_Method(?insn,?inmethod),    AssignCast_From(?insn,?from),    AssignInstruction_To(?insn,?to),    AssignCast_Type(?insn,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :- \n   isAssignCast_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignCast_From(?insn,?from),\n   AssignInstruction_To(?insn,?to),\n   AssignCast_Type(?insn,?type).;)" <<  rel_96_AssignCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [253:1-0:0];)" <<  rel_96_AssignCast->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_11_isAssignCast_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_6_AssignCast_From->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_10_AssignCast_Type->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [221:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SpecialMethodInvocation_Base(?instruction,?base) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt,rel_97_SpecialMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_97_SpecialMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_97_SpecialMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SpecialMethodInvocation_Base(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>")),?return) :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];SpecialMethodInvocation_Base(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),?return) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt,rel_97_SpecialMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_97_SpecialMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];SpecialMethodInvocation_Base(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),?return) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];SpecialMethodInvocation_Base(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),?return) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_97_SpecialMethodInvocation_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [221:1-0:0];)" <<  rel_97_SpecialMethodInvocation_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [161:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(?instruction) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>"))) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isVirtualMethodInvocation_Insn(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isVirtualMethodInvocation_Insn(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isVirtualMethodInvocation_Insn(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVirtualMethodInvocation_Insn(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_98_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [161:1-0:0];)" <<  rel_98_isVirtualMethodInvocation_Insn->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [258:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(?invocation,?signature,?inmethod) :- 
   isVirtualMethodInvocation_Insn(?invocation),
   Instruction_Method(?invocation,?inmethod),
   MethodInvocation_Method(?invocation,?signature).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [942:1-945:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :-     isVirtualMethodInvocation_Insn(?invocation),    Instruction_Method(?invocation,?inmethod),    MethodInvocation_Method(?invocation,?signature).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),"<java.lang.Object: void finalize()>","<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>") :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\",\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(60),(RamDomain)(130)});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.Object: void finalize()>','<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\",\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.PrivilegedAction: java.lang.Object run()>","<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133),(RamDomain)(132)});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),"<java.security.PrivilegedAction: java.lang.Object run()>","<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133),(RamDomain)(134)});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.PrivilegedExceptionAction: java.lang.Object run()>","<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136),(RamDomain)(135)});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),"<java.security.PrivilegedExceptionAction: java.lang.Object run()>","<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>") :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136),(RamDomain)(137)});
if (!(rel_99_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [258:1-0:0];)" <<  rel_99_VirtualMethodInvocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [215:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :- 
   isVirtualMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation,?signature),
   Method_SimpleName(?signature,?simplename),
   Method_Descriptor(?signature,?descriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)",profile);
if (!rel_91_MethodInvocation_Method->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_100_VirtualMethodInvocation_Descriptor_op_ctxt,rel_100_VirtualMethodInvocation_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_75_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_100_VirtualMethodInvocation_Descriptor->insert(tuple,READ_OP_CONTEXT(rel_100_VirtualMethodInvocation_Descriptor_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :-     isVirtualMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_SimpleName(?signature,?simplename),    Method_Descriptor(?signature,?descriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)" <<  rel_100_VirtualMethodInvocation_Descriptor->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [215:1-0:0];)" <<  rel_100_VirtualMethodInvocation_Descriptor->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [214:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_SimpleName(?invocation,?simplename) :- 
   isVirtualMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation,?signature),
   Method_SimpleName(?signature,?simplename),
   Method_Descriptor(?signature,?descriptor).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)",profile);
if (!rel_91_MethodInvocation_Method->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_101_VirtualMethodInvocation_SimpleName_op_ctxt,rel_101_VirtualMethodInvocation_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_75_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_101_VirtualMethodInvocation_SimpleName->insert(tuple,READ_OP_CONTEXT(rel_101_VirtualMethodInvocation_SimpleName_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :-     isVirtualMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_SimpleName(?signature,?simplename),    Method_Descriptor(?signature,?descriptor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)" <<  rel_101_VirtualMethodInvocation_SimpleName->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [214:1-0:0];)" <<  rel_101_VirtualMethodInvocation_SimpleName->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [213:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(?instruction,?base) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),?base) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation_Base(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?base) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation_Base(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),?base) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];VirtualMethodInvocation_Base(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?base) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),?base) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),?base) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),?base) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VirtualMethodInvocation_Base(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),?base) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_102_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [213:1-0:0];)" <<  rel_102_VirtualMethodInvocation_Base->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [38:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_null("null_type").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];Type_null(\"null_type\").;)",profile);
rel_103_Type_null->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];Type_null(\"null_type\").;)" <<  rel_103_Type_null->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [38:1-0:0];)" <<  rel_103_Type_null->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [80:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_Null("<<null pseudo heap>>") :- 
   Type_null(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Null(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)",profile);
if (!rel_103_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_103_Type_null_op_ctxt,rel_103_Type_null->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(19)});
if (!(rel_104_HeapAllocation_Null->insert(tuple,READ_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Null('<<null pseudo heap>>') :-     Type_null(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Null(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)" <<  rel_104_HeapAllocation_Null->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [80:1-0:0];)" <<  rel_104_HeapAllocation_Null->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassHeap.facts"},{"name","_ClassHeap"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_105_ClassHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isClassHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [75:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isClassHeap(?id) :- 
   _ClassHeap(?id,?instanceType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isClassHeap(?id) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_105_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_105_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_105_ClassHeap_op_ctxt,rel_105_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_106_isClassHeap_op_ctxt,rel_106_isClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_106_isClassHeap->insert(tuple,READ_OP_CONTEXT(rel_106_isClassHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isClassHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isClassHeap(?id) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isClassHeap(?id) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_106_isClassHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isClassHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [75:1-0:0];)" <<  rel_106_isClassHeap->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Dacapo.facts"},{"name","_Dacapo"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_107_Dacapo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1833:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_Keep(?heap) :- 
   _Dacapo(?heap,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Keep(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_108_HeapAllocation_Keep->insert(tuple,READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Keep(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Keep(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_108_HeapAllocation_Keep->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1833:1-0:0];)" <<  rel_108_HeapAllocation_Keep->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodHandleConstant.facts"},{"name","_MethodHandleConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_109_MethodHandleConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NormalHeap.facts"},{"name","_NormalHeap"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_110_NormalHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StringConstant.facts"},{"name","_StringConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_111_StringConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [72:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isHeapAllocation(?id) :- 
   _NormalHeap(?id,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isHeapAllocation(?id) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_110_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_110_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_110_NormalHeap_op_ctxt,rel_110_NormalHeap->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isHeapAllocation(?id) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isHeapAllocation(?id) :- \n   _NormalHeap(?id,?type).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation(?id) :- 
   _StringConstant(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isHeapAllocation(?id) :- \n   _StringConstant(?id).;)",profile);
if (!rel_111_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_111_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_111_StringConstant_op_ctxt,rel_111_StringConstant->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isHeapAllocation(?id) :-     _StringConstant(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isHeapAllocation(?id) :- \n   _StringConstant(?id).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation(?id) :- 
   _ClassHeap(?id,?instanceType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isHeapAllocation(?id) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_105_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_105_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_105_ClassHeap_op_ctxt,rel_105_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isHeapAllocation(?id) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isHeapAllocation(?id) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation(?id) :- 
   _MethodHandleConstant(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];isHeapAllocation(?id) :- \n   _MethodHandleConstant(?id).;)",profile);
if (!rel_109_MethodHandleConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_109_MethodHandleConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_MethodHandleConstant_op_ctxt,rel_109_MethodHandleConstant->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];isHeapAllocation(?id) :-     _MethodHandleConstant(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];isHeapAllocation(?id) :- \n   _MethodHandleConstant(?id).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<null pseudo heap>>") :- 
   Type_null(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];isHeapAllocation(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)",profile);
if (!rel_103_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_103_Type_null_op_ctxt,rel_103_Type_null->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(19)});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];isHeapAllocation('<<null pseudo heap>>') :-     Type_null(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];isHeapAllocation(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<main method array>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];isHeapAllocation(\"<<main method array>>\").;)",profile);
rel_112_isHeapAllocation->insert(20);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];isHeapAllocation(\"<<main method array>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<main method array content>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];isHeapAllocation(\"<<main method array content>>\").;)",profile);
rel_112_isHeapAllocation->insert(22);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];isHeapAllocation(\"<<main method array content>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37];isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)",profile);
rel_112_isHeapAllocation->insert(23);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37];isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)",profile);
rel_112_isHeapAllocation->insert(25);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
rel_112_isHeapAllocation->insert(26);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<string-constant>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];isHeapAllocation(\"<<string-constant>>\").;)",profile);
rel_112_isHeapAllocation->insert(27);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];isHeapAllocation(\"<<string-constant>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<reflection-string-constant>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];isHeapAllocation(\"<<reflection-string-constant>>\").;)",profile);
rel_112_isHeapAllocation->insert(28);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];isHeapAllocation(\"<<reflection-string-constant>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<string-buffer>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37];isHeapAllocation(\"<<string-buffer>>\").;)",profile);
rel_112_isHeapAllocation->insert(29);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37];isHeapAllocation(\"<<string-buffer>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<string-builder>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38];isHeapAllocation(\"<<string-builder>>\").;)",profile);
rel_112_isHeapAllocation->insert(31);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38];isHeapAllocation(\"<<string-builder>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<system-thread-group>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];isHeapAllocation(\"<<system-thread-group>>\").;)",profile);
rel_112_isHeapAllocation->insert(33);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];isHeapAllocation(\"<<system-thread-group>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<main-thread-group>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];isHeapAllocation(\"<<main-thread-group>>\").;)",profile);
rel_112_isHeapAllocation->insert(34);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];isHeapAllocation(\"<<main-thread-group>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<main-thread>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31];isHeapAllocation(\"<<main-thread>>\").;)",profile);
rel_112_isHeapAllocation->insert(36);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31];isHeapAllocation(\"<<main-thread>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<initial-context>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31];isHeapAllocation(\"<<initial-context>>\").;)",profile);
rel_112_isHeapAllocation->insert(38);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31];isHeapAllocation(\"<<initial-context>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<jvm-startup-context>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31];isHeapAllocation(\"<<jvm-startup-context>>\").;)",profile);
rel_112_isHeapAllocation->insert(39);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31];isHeapAllocation(\"<<jvm-startup-context>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<jvm-startup-hcontext>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31];isHeapAllocation(\"<<jvm-startup-hcontext>>\").;)",profile);
rel_112_isHeapAllocation->insert(40);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31];isHeapAllocation(\"<<jvm-startup-hcontext>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<clinit-context>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31];isHeapAllocation(\"<<clinit-context>>\").;)",profile);
rel_112_isHeapAllocation->insert(41);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31];isHeapAllocation(\"<<clinit-context>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<immutable-context>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31];isHeapAllocation(\"<<immutable-context>>\").;)",profile);
rel_112_isHeapAllocation->insert(42);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31];isHeapAllocation(\"<<immutable-context>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<immutable-hcontext>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31];isHeapAllocation(\"<<immutable-hcontext>>\").;)",profile);
rel_112_isHeapAllocation->insert(43);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31];isHeapAllocation(\"<<immutable-hcontext>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation("<<immutable>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31];isHeapAllocation(\"<<immutable>>\").;)",profile);
rel_112_isHeapAllocation->insert(44);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31];isHeapAllocation(\"<<immutable>>\").;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHeapAllocation(?heap) :- 
   _Dacapo(?heap,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isHeapAllocation(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_112_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isHeapAllocation(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isHeapAllocation(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_112_isHeapAllocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [72:1-0:0];)" <<  rel_112_isHeapAllocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [78:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type(?id,?type) :- 
   _NormalHeap(?id,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_110_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_110_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_110_NormalHeap_op_ctxt,rel_110_NormalHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :- \n   _NormalHeap(?id,?type).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type(?id,"java.lang.String") :- 
   _StringConstant(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];HeapAllocation_Type(?id,\"java.lang.String\") :- \n   _StringConstant(?id).;)",profile);
if (!rel_111_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_111_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_111_StringConstant_op_ctxt,rel_111_StringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(0)});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];HeapAllocation_Type(?id,'java.lang.String') :-     _StringConstant(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];HeapAllocation_Type(?id,\"java.lang.String\") :- \n   _StringConstant(?id).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type(?id,"java.lang.Class") :- 
   _ClassHeap(?id,?instanceType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];HeapAllocation_Type(?id,\"java.lang.Class\") :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_105_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_105_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_105_ClassHeap_op_ctxt,rel_105_ClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(1)});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];HeapAllocation_Type(?id,'java.lang.Class') :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];HeapAllocation_Type(?id,\"java.lang.Class\") :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type(?id,"java.lang.invoke.MethodHandle") :- 
   _MethodHandleConstant(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];HeapAllocation_Type(?id,\"java.lang.invoke.MethodHandle\") :- \n   _MethodHandleConstant(?id).;)",profile);
if (!rel_109_MethodHandleConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_109_MethodHandleConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_109_MethodHandleConstant_op_ctxt,rel_109_MethodHandleConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(2)});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];HeapAllocation_Type(?id,'java.lang.invoke.MethodHandle') :-     _MethodHandleConstant(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [425:1-428:30];HeapAllocation_Type(?id,\"java.lang.invoke.MethodHandle\") :- \n   _MethodHandleConstant(?id).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<null pseudo heap>>",?type) :- 
   Type_null(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Type(\"<<null pseudo heap>>\",?type) :- \n   Type_null(?type).;)",profile);
if (!rel_103_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_103_Type_null_op_ctxt,rel_103_Type_null->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(19),(RamDomain)(env0[0])});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Type('<<null pseudo heap>>',?type) :-     Type_null(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [950:1-953:20];HeapAllocation_Type(\"<<null pseudo heap>>\",?type) :- \n   Type_null(?type).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<main method array>>","java.lang.String[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];HeapAllocation_Type(\"<<main method array>>\",\"java.lang.String[]\").;)",profile);
rel_113_HeapAllocation_Type->insert(20,21);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];HeapAllocation_Type(\"<<main method array>>\",\"java.lang.String[]\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<main method array content>>","java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];HeapAllocation_Type(\"<<main method array content>>\",\"java.lang.String\").;)",profile);
rel_113_HeapAllocation_Type->insert(22,0);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];HeapAllocation_Type(\"<<main method array content>>\",\"java.lang.String\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem","java.io.UnixFileSystem").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37];HeapAllocation_Type(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",\"java.io.UnixFileSystem\").;)",profile);
rel_113_HeapAllocation_Type->insert(23,24);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [992:1-994:37];HeapAllocation_Type(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",\"java.io.UnixFileSystem\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("java.io.UnixFileSystem.list/new java.lang.String[]","java.lang.String[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String[]\",\"java.lang.String[]\").;)",profile);
rel_113_HeapAllocation_Type->insert(25,21);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [995:1-997:33];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String[]\",\"java.lang.String[]\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("java.io.UnixFileSystem.list/new java.lang.String","java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String\",\"java.lang.String\").;)",profile);
rel_113_HeapAllocation_Type->insert(26,0);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [998:1-1000:31];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String\",\"java.lang.String\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<string-constant>>","java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];HeapAllocation_Type(\"<<string-constant>>\",\"java.lang.String\").;)",profile);
rel_113_HeapAllocation_Type->insert(27,0);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];HeapAllocation_Type(\"<<string-constant>>\",\"java.lang.String\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<reflection-string-constant>>","java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];HeapAllocation_Type(\"<<reflection-string-constant>>\",\"java.lang.String\").;)",profile);
rel_113_HeapAllocation_Type->insert(28,0);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1001:1-1004:31];HeapAllocation_Type(\"<<reflection-string-constant>>\",\"java.lang.String\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<string-buffer>>","java.lang.StringBuffer").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37];HeapAllocation_Type(\"<<string-buffer>>\",\"java.lang.StringBuffer\").;)",profile);
rel_113_HeapAllocation_Type->insert(29,30);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1005:1-1007:37];HeapAllocation_Type(\"<<string-buffer>>\",\"java.lang.StringBuffer\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<string-builder>>","java.lang.StringBuilder").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38];HeapAllocation_Type(\"<<string-builder>>\",\"java.lang.StringBuilder\").;)",profile);
rel_113_HeapAllocation_Type->insert(31,32);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1008:1-1010:38];HeapAllocation_Type(\"<<string-builder>>\",\"java.lang.StringBuilder\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<system-thread-group>>","java.lang.ThreadGroup").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];HeapAllocation_Type(\"<<system-thread-group>>\",\"java.lang.ThreadGroup\").;)",profile);
rel_113_HeapAllocation_Type->insert(33,35);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];HeapAllocation_Type(\"<<system-thread-group>>\",\"java.lang.ThreadGroup\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<main-thread-group>>","java.lang.ThreadGroup").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];HeapAllocation_Type(\"<<main-thread-group>>\",\"java.lang.ThreadGroup\").;)",profile);
rel_113_HeapAllocation_Type->insert(34,35);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1011:1-1014:36];HeapAllocation_Type(\"<<main-thread-group>>\",\"java.lang.ThreadGroup\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<main-thread>>","java.lang.Thread").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31];HeapAllocation_Type(\"<<main-thread>>\",\"java.lang.Thread\").;)",profile);
rel_113_HeapAllocation_Type->insert(36,37);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1015:1-1017:31];HeapAllocation_Type(\"<<main-thread>>\",\"java.lang.Thread\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<initial-context>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31];HeapAllocation_Type(\"<<initial-context>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(38,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1018:1-1020:31];HeapAllocation_Type(\"<<initial-context>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<jvm-startup-context>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31];HeapAllocation_Type(\"<<jvm-startup-context>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(39,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1021:1-1023:31];HeapAllocation_Type(\"<<jvm-startup-context>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<jvm-startup-hcontext>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31];HeapAllocation_Type(\"<<jvm-startup-hcontext>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(40,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1024:1-1026:31];HeapAllocation_Type(\"<<jvm-startup-hcontext>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<clinit-context>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31];HeapAllocation_Type(\"<<clinit-context>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(41,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1027:1-1029:31];HeapAllocation_Type(\"<<clinit-context>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<immutable-context>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31];HeapAllocation_Type(\"<<immutable-context>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(42,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1030:1-1032:31];HeapAllocation_Type(\"<<immutable-context>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<immutable-hcontext>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31];HeapAllocation_Type(\"<<immutable-hcontext>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(43,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1033:1-1035:31];HeapAllocation_Type(\"<<immutable-hcontext>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type("<<immutable>>","java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31];HeapAllocation_Type(\"<<immutable>>\",\"java.lang.Object\").;)",profile);
rel_113_HeapAllocation_Type->insert(44,18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1036:1-1038:31];HeapAllocation_Type(\"<<immutable>>\",\"java.lang.Object\").;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Type(?heap,"java.lang.String") :- 
   _Dacapo(?heap,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Type(?heap,\"java.lang.String\") :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(0)});
if (!(rel_113_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Type(?heap,'java.lang.String') :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];HeapAllocation_Type(?heap,\"java.lang.String\") :- \n   _Dacapo(?heap,?method).;)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [78:1-0:0];)" <<  rel_113_HeapAllocation_Type->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_109_MethodHandleConstant->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1314:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Value_isHeap(?heapValue) :- 
   isHeapAllocation(?heapValue),
   HeapAllocation_Type(?heapValue,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_isHeap(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_112_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_114_Value_isHeap_op_ctxt,rel_114_Value_isHeap->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_114_Value_isHeap->insert(tuple,READ_OP_CONTEXT(rel_114_Value_isHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_isHeap(?heapValue) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_isHeap(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_114_Value_isHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Value_isHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1314:1-0:0];)" <<  rel_114_Value_isHeap->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [74:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isStringConstant(?id) :- 
   _StringConstant(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isStringConstant(?id) :- \n   _StringConstant(?id).;)",profile);
if (!rel_111_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_111_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_111_StringConstant_op_ctxt,rel_111_StringConstant->createContext());
CREATE_OP_CONTEXT(rel_115_isStringConstant_op_ctxt,rel_115_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_115_isStringConstant->insert(tuple,READ_OP_CONTEXT(rel_115_isStringConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isStringConstant(?id) :-     _StringConstant(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [402:1-405:24];isStringConstant(?id) :- \n   _StringConstant(?id).;)" <<  rel_115_isStringConstant->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isStringConstant(?heap) :- 
   _Dacapo(?heap,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isStringConstant(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
CREATE_OP_CONTEXT(rel_115_isStringConstant_op_ctxt,rel_115_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_115_isStringConstant->insert(tuple,READ_OP_CONTEXT(rel_115_isStringConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isStringConstant(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2656:1-2659:27];isStringConstant(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_115_isStringConstant->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isStringConstant;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [74:1-0:0];)" <<  rel_115_isStringConstant->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_111_StringConstant->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Activity.facts"},{"name","_Activity"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_116_Activity);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationClass.facts"},{"name","_ApplicationClass"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_117_ApplicationClass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [209:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ApplicationMethod(?method) :- 
   Method_DeclaringType(?method,?class),
   _ApplicationClass(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [962:1-964:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [962:1-964:28];ApplicationMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_74_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_117_ApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_118_ApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [962:1-964:28];ApplicationMethod(?method) :-     Method_DeclaringType(?method,?class),    _ApplicationClass(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [962:1-964:28];ApplicationMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class).;)" <<  rel_118_ApplicationMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [209:1-0:0];)" <<  rel_118_ApplicationMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationMethod.csv"},{"name","ApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_118_ApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2957:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :- 
   ApplicationMethod(?inmethod),
   AssignCast(?type,?from,?to,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3057:1-3059:44])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3057:1-3059:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :- \n   ApplicationMethod(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_96_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_96_AssignCast_op_ctxt,rel_96_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_119_Stats_Simple_Application_Cast_op_ctxt,rel_119_Stats_Simple_Application_Cast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_96_AssignCast->equalRange<3>(key,READ_OP_CONTEXT(rel_96_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_119_Stats_Simple_Application_Cast->insert(tuple,READ_OP_CONTEXT(rel_119_Stats_Simple_Application_Cast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3057:1-3059:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :-     ApplicationMethod(?inmethod),    AssignCast(?type,?from,?to,?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3057:1-3059:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :- \n   ApplicationMethod(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)" <<  rel_119_Stats_Simple_Application_Cast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2957:1-0:0];)" <<  rel_119_Stats_Simple_Application_Cast->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_Cast.csv"},{"name","Stats_Simple_Application_Cast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_119_Stats_Simple_Application_Cast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2945:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_VirtualMethodInvocation(?invocation) :- 
   ApplicationMethod(?method),
   Instruction_Method(?invocation,?method),
   isVirtualMethodInvocation_Insn(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3032:1-3035:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3032:1-3035:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :- \n   ApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_85_Instruction_Method->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_120_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt,rel_120_Stats_Simple_Application_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_98_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_120_Stats_Simple_Application_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_120_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3032:1-3035:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :-     ApplicationMethod(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3032:1-3035:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :- \n   ApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_120_Stats_Simple_Application_VirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2945:1-0:0];)" <<  rel_120_Stats_Simple_Application_VirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_VirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_120_Stats_Simple_Application_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2930:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_ApplicationConcreteMethod(?method) :- 
   ApplicationMethod(?method),
   !_Method_Modifier("abstract",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3003:1-3005:41])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3003:1-3005:41];Stats_Simple_ApplicationConcreteMethod(?method) :- \n   ApplicationMethod(?method),\n   !_Method_Modifier(\"abstract\",?method).;)",profile);
if (!rel_118_ApplicationMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_121_Stats_Simple_ApplicationConcreteMethod_op_ctxt,rel_121_Stats_Simple_ApplicationConcreteMethod->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_121_Stats_Simple_ApplicationConcreteMethod->insert(tuple,READ_OP_CONTEXT(rel_121_Stats_Simple_ApplicationConcreteMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3003:1-3005:41];Stats_Simple_ApplicationConcreteMethod(?method) :-     ApplicationMethod(?method),    !_Method_Modifier('abstract',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3003:1-3005:41];Stats_Simple_ApplicationConcreteMethod(?method) :- \n   ApplicationMethod(?method),\n   !_Method_Modifier(\"abstract\",?method).;)" <<  rel_121_Stats_Simple_ApplicationConcreteMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2930:1-0:0];)" <<  rel_121_Stats_Simple_ApplicationConcreteMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ApplicationConcreteMethod.csv"},{"name","Stats_Simple_ApplicationConcreteMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_121_Stats_Simple_ApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ArrayType.facts"},{"name","_ArrayType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_122_ArrayType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BroadcastReceiver.facts"},{"name","_BroadcastReceiver"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_123_BroadcastReceiver);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassType.facts"},{"name","_ClassType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_124_ClassType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ComponentType.facts"},{"name","_ComponentType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_125_ComponentType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [21:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isArrayType(?arrayType) :- 
   _ArrayType(?arrayType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isArrayType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_122_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_122_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_122_ArrayType_op_ctxt,rel_122_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_126_isArrayType->insert(tuple,READ_OP_CONTEXT(rel_126_isArrayType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isArrayType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isArrayType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_126_isArrayType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isArrayType(?arrayType) :- 
   _ComponentType(?arrayType,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isArrayType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_126_isArrayType->insert(tuple,READ_OP_CONTEXT(rel_126_isArrayType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isArrayType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isArrayType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_126_isArrayType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isArrayType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [21:1-0:0];)" <<  rel_126_isArrayType->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ContentProvider.facts"},{"name","_ContentProvider"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_127_ContentProvider);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperclass.facts"},{"name","_DirectSuperclass"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_128_DirectSuperclass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1084:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Subclass(?c,?a) :- 
   _DirectSuperclass(?a,?c).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1140:1-1141:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1140:1-1141:28];Subclass(?c,?a) :- \n   _DirectSuperclass(?a,?c).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_129_Subclass_op_ctxt,rel_129_Subclass->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_129_Subclass->insert(tuple,READ_OP_CONTEXT(rel_129_Subclass_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1140:1-1141:28];Subclass(?c,?a) :-     _DirectSuperclass(?a,?c).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1140:1-1141:28];Subclass(?c,?a) :- \n   _DirectSuperclass(?a,?c).;)" <<  rel_129_Subclass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1084:1-0:0];)" <<  rel_129_Subclass->size() << std::endl;
}rel_130_delta_Subclass->insertAll(*rel_129_Subclass);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1084:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Subclass(?c,?a) :- 
   Subclass(?b,?a),
   _DirectSuperclass(?b,?c).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1142:1-1144:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;Subclass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1142:1-1144:28];Subclass(?c,?a) :- \n   Subclass(?b,?a),\n   _DirectSuperclass(?b,?c).;)",profile);
if (!rel_130_delta_Subclass->empty()&&!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_130_delta_Subclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_130_delta_Subclass_op_ctxt,rel_130_delta_Subclass->createContext());
CREATE_OP_CONTEXT(rel_131_new_Subclass_op_ctxt,rel_131_new_Subclass->createContext());
CREATE_OP_CONTEXT(rel_129_Subclass_op_ctxt,rel_129_Subclass->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_128_DirectSuperclass->equalRange<0>(key,READ_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_129_Subclass->contains(Tuple<RamDomain,2>({env1[1],env0[1]}),READ_OP_CONTEXT(rel_129_Subclass_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1])});
if (!(rel_131_new_Subclass->insert(tuple,READ_OP_CONTEXT(rel_131_new_Subclass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1142:1-1144:28];@new_Subclass(?c,?a) :-     @delta_Subclass(?b,?a),    _DirectSuperclass(?b,?c),    !Subclass(?c,?a).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Subclass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1142:1-1144:28];Subclass(?c,?a) :- \n   Subclass(?b,?a),\n   _DirectSuperclass(?b,?c).;)" <<  rel_131_new_Subclass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1084:1-0:0];)" <<  rel_131_new_Subclass->size() << std::endl;
}if(rel_131_new_Subclass->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1084:1-0:0];)",profile);
rel_129_Subclass->insertAll(*rel_131_new_Subclass);
{
auto rel_0 = rel_130_delta_Subclass;
rel_130_delta_Subclass = rel_131_new_Subclass;
rel_131_new_Subclass = rel_0;
}
rel_131_new_Subclass->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_130_delta_Subclass->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_131_new_Subclass->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [22:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isClassType(?class) :- 
   _ClassType(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isClassType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_124_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_124_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_124_ClassType_op_ctxt,rel_124_ClassType->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_132_isClassType->insert(tuple,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isClassType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isClassType(?class) :- \n   _ClassType(?class).;)" <<  rel_132_isClassType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isClassType(?class) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_132_isClassType->insert(tuple,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_132_isClassType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isClassType(?superclass) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_132_isClassType->insert(tuple,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isClassType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_132_isClassType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isClassType("java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [399:1-399:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [399:1-399:33];isClassType(\"java.lang.String\").;)",profile);
rel_132_isClassType->insert(0);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [399:1-399:33];isClassType(\"java.lang.String\").;)" <<  rel_132_isClassType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isClassType("java.lang.invoke.MethodHandle").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [424:1-424:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [424:1-424:46];isClassType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_132_isClassType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [424:1-424:46];isClassType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_132_isClassType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isClassType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isClassType(\"java.lang.Object\").;)",profile);
rel_132_isClassType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isClassType(\"java.lang.Object\").;)" <<  rel_132_isClassType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isClassType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [22:1-0:0];)" <<  rel_132_isClassType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2006:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassNameIndexes(0,?type) :- 
   isClassType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2007:1-2008:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2007:1-2008:22];ClassNameIndexes(0,?type) :- \n   isClassType(?type).;)",profile);
if (!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_133_ClassNameIndexes_op_ctxt,rel_133_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(0),(RamDomain)(env0[0])});
if (!(rel_133_ClassNameIndexes->insert(tuple,READ_OP_CONTEXT(rel_133_ClassNameIndexes_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2007:1-2008:22];ClassNameIndexes(0,?type) :-     isClassType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2007:1-2008:22];ClassNameIndexes(0,?type) :- \n   isClassType(?type).;)" <<  rel_133_ClassNameIndexes->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2006:1-0:0];)" <<  rel_133_ClassNameIndexes->size() << std::endl;
}rel_134_delta_ClassNameIndexes->insertAll(*rel_133_ClassNameIndexes);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2006:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassNameIndexes((?pos+1),?t) :- 
   ClassNameIndexes(?pos,?t),
   (?pos+1) < strlen(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2009:1-2011:23])_");
{
	RamLogger logger(R"(@t-recursive-rule;ClassNameIndexes;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2009:1-2011:23];ClassNameIndexes((?pos+1),?t) :- \n   ClassNameIndexes(?pos,?t),\n   (?pos+1) < strlen(?t).;)",profile);
if (!rel_134_delta_ClassNameIndexes->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_134_delta_ClassNameIndexes->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_134_delta_ClassNameIndexes_op_ctxt,rel_134_delta_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_135_new_ClassNameIndexes_op_ctxt,rel_135_new_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_133_ClassNameIndexes_op_ctxt,rel_133_ClassNameIndexes->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((!rel_133_ClassNameIndexes->contains(Tuple<RamDomain,2>({(env0[0]) + (1),env0[1]}),READ_OP_CONTEXT(rel_133_ClassNameIndexes_op_ctxt))) && ((((env0[0]) + (1)) < (strlen(symTable.resolve((size_t)env0[1]))))))) {
Tuple<RamDomain,2> tuple({(RamDomain)((env0[0]) + (1)),(RamDomain)(env0[1])});
if (!(rel_135_new_ClassNameIndexes->insert(tuple,READ_OP_CONTEXT(rel_135_new_ClassNameIndexes_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2009:1-2011:23];@new_ClassNameIndexes((?pos+1),?t) :-     @delta_ClassNameIndexes(?pos,?t),    !ClassNameIndexes((?pos+1),?t),    (?pos+1) < strlen(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ClassNameIndexes;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2009:1-2011:23];ClassNameIndexes((?pos+1),?t) :- \n   ClassNameIndexes(?pos,?t),\n   (?pos+1) < strlen(?t).;)" <<  rel_135_new_ClassNameIndexes->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2006:1-0:0];)" <<  rel_135_new_ClassNameIndexes->size() << std::endl;
}if(rel_135_new_ClassNameIndexes->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2006:1-0:0];)",profile);
rel_133_ClassNameIndexes->insertAll(*rel_135_new_ClassNameIndexes);
{
auto rel_0 = rel_134_delta_ClassNameIndexes;
rel_134_delta_ClassNameIndexes = rel_135_new_ClassNameIndexes;
rel_135_new_ClassNameIndexes = rel_0;
}
rel_135_new_ClassNameIndexes->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_134_delta_ClassNameIndexes->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_135_new_ClassNameIndexes->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;DotsInClassName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2012:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(DotsInClassName(?type,?pos) :- 
   ClassNameIndexes(?pos,?type),
   substr(?type,?pos,1) = ".".
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2018:1-2020:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;DotsInClassName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2018:1-2020:32];DotsInClassName(?type,?pos) :- \n   ClassNameIndexes(?pos,?type),\n   substr(?type,?pos,1) = \".\".;)",profile);
if (!rel_133_ClassNameIndexes->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_133_ClassNameIndexes->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_133_ClassNameIndexes_op_ctxt,rel_133_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_136_DotsInClassName_op_ctxt,rel_136_DotsInClassName->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( (((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[1]),(env0[0]),(1)).c_str()))) == (142))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_136_DotsInClassName->insert(tuple,READ_OP_CONTEXT(rel_136_DotsInClassName_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;DotsInClassName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2018:1-2020:32];DotsInClassName(?type,?pos) :-     ClassNameIndexes(?pos,?type),    substr(?type,?pos,1) = '.'.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;DotsInClassName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2018:1-2020:32];DotsInClassName(?type,?pos) :- \n   ClassNameIndexes(?pos,?type),\n   substr(?type,?pos,1) = \".\".;)" <<  rel_136_DotsInClassName->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;DotsInClassName;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2012:1-0:0];)" <<  rel_136_DotsInClassName->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_133_ClassNameIndexes->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;NotLastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2013:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(NotLastDot(?pos,?type) :- 
   DotsInClassName(?type,?pos),
   DotsInClassName(?type,?pos2),
   ?pos2 > ?pos.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2021:1-2024:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotLastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2021:1-2024:16];NotLastDot(?pos,?type) :- \n   DotsInClassName(?type,?pos),\n   DotsInClassName(?type,?pos2),\n   ?pos2 > ?pos.;)",profile);
if (!rel_136_DotsInClassName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_136_DotsInClassName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_136_DotsInClassName_op_ctxt,rel_136_DotsInClassName->createContext());
CREATE_OP_CONTEXT(rel_137_NotLastDot_op_ctxt,rel_137_NotLastDot->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_136_DotsInClassName->equalRange<0>(key,READ_OP_CONTEXT(rel_136_DotsInClassName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((env1[1]) > (env0[1]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_137_NotLastDot->insert(tuple,READ_OP_CONTEXT(rel_137_NotLastDot_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotLastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2021:1-2024:16];NotLastDot(?pos,?type) :-     DotsInClassName(?type,?pos),    DotsInClassName(?type,?pos2),    ?pos2 > ?pos.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotLastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2021:1-2024:16];NotLastDot(?pos,?type) :- \n   DotsInClassName(?type,?pos),\n   DotsInClassName(?type,?pos2),\n   ?pos2 > ?pos.;)" <<  rel_137_NotLastDot->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;NotLastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2013:1-0:0];)" <<  rel_137_NotLastDot->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2015:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LastDot(?type,?pos) :- 
   DotsInClassName(?type,?pos),
   !NotLastDot(?pos,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2032:1-2034:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2032:1-2034:28];LastDot(?type,?pos) :- \n   DotsInClassName(?type,?pos),\n   !NotLastDot(?pos,?type).;)",profile);
if (!rel_136_DotsInClassName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_136_DotsInClassName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_136_DotsInClassName_op_ctxt,rel_136_DotsInClassName->createContext());
CREATE_OP_CONTEXT(rel_138_LastDot_op_ctxt,rel_138_LastDot->createContext());
CREATE_OP_CONTEXT(rel_137_NotLastDot_op_ctxt,rel_137_NotLastDot->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_137_NotLastDot->contains(Tuple<RamDomain,2>({env0[1],env0[0]}),READ_OP_CONTEXT(rel_137_NotLastDot_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_138_LastDot->insert(tuple,READ_OP_CONTEXT(rel_138_LastDot_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2032:1-2034:28];LastDot(?type,?pos) :-     DotsInClassName(?type,?pos),    !NotLastDot(?pos,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2032:1-2034:28];LastDot(?type,?pos) :- \n   DotsInClassName(?type,?pos),\n   !NotLastDot(?pos,?type).;)" <<  rel_138_LastDot->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LastDot;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2015:1-0:0];)" <<  rel_138_LastDot->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_136_DotsInClassName->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_137_NotLastDot->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperinterface.facts"},{"name","_DirectSuperinterface"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_139_DirectSuperinterface);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1086:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Superinterface(?k,?c) :- 
   _DirectSuperinterface(?c,?k).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1147:1-1148:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1147:1-1148:34];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?k).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_Superinterface_op_ctxt,rel_140_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_140_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_140_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1147:1-1148:34];Superinterface(?k,?c) :-     _DirectSuperinterface(?c,?k).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1147:1-1148:34];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?k).;)" <<  rel_140_Superinterface->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1086:1-0:0];)" <<  rel_140_Superinterface->size() << std::endl;
}rel_141_delta_Superinterface->insertAll(*rel_140_Superinterface);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1086:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Superinterface(?k,?c) :- 
   _DirectSuperinterface(?c,?j),
   Superinterface(?k,?j).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1149:1-1151:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1149:1-1151:28];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?j),\n   Superinterface(?k,?j).;)",profile);
if (!rel_141_delta_Superinterface->empty()&&!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_141_delta_Superinterface_op_ctxt,rel_141_delta_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_142_new_Superinterface_op_ctxt,rel_142_new_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_140_Superinterface_op_ctxt,rel_140_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_141_delta_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_141_delta_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_140_Superinterface->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_140_Superinterface_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_142_new_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_142_new_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1149:1-1151:28];@new_Superinterface(?k,?c) :-     _DirectSuperinterface(?c,?j),    @delta_Superinterface(?k,?j),    !Superinterface(?k,?c).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1149:1-1151:28];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?j),\n   Superinterface(?k,?j).;)" <<  rel_142_new_Superinterface->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Superinterface(?k,?c) :- 
   _DirectSuperclass(?c,?super),
   Superinterface(?k,?super).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1152:1-1154:32])_");
{
	RamLogger logger(R"(@t-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1152:1-1154:32];Superinterface(?k,?c) :- \n   _DirectSuperclass(?c,?super),\n   Superinterface(?k,?super).;)",profile);
if (!rel_141_delta_Superinterface->empty()&&!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_141_delta_Superinterface_op_ctxt,rel_141_delta_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_142_new_Superinterface_op_ctxt,rel_142_new_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_140_Superinterface_op_ctxt,rel_140_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_141_delta_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_141_delta_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_140_Superinterface->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_140_Superinterface_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_142_new_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_142_new_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1152:1-1154:32];@new_Superinterface(?k,?c) :-     _DirectSuperclass(?c,?super),    @delta_Superinterface(?k,?super),    !Superinterface(?k,?c).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1152:1-1154:32];Superinterface(?k,?c) :- \n   _DirectSuperclass(?c,?super),\n   Superinterface(?k,?super).;)" <<  rel_142_new_Superinterface->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1086:1-0:0];)" <<  rel_142_new_Superinterface->size() << std::endl;
}if(rel_142_new_Superinterface->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1086:1-0:0];)",profile);
rel_140_Superinterface->insertAll(*rel_142_new_Superinterface);
{
auto rel_0 = rel_141_delta_Superinterface;
rel_141_delta_Superinterface = rel_142_new_Superinterface;
rel_142_new_Superinterface = rel_0;
}
rel_142_new_Superinterface->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_141_delta_Superinterface->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_142_new_Superinterface->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./InterfaceType.facts"},{"name","_InterfaceType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_143_InterfaceType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [23:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isInterfaceType(?interface) :- 
   _InterfaceType(?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isInterfaceType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_143_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_143_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_143_InterfaceType_op_ctxt,rel_143_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_144_isInterfaceType->insert(tuple,READ_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isInterfaceType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isInterfaceType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_144_isInterfaceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInterfaceType(?interface) :- 
   _DirectSuperinterface(?class,?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isInterfaceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_144_isInterfaceType->insert(tuple,READ_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isInterfaceType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isInterfaceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_144_isInterfaceType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isInterfaceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [23:1-0:0];)" <<  rel_144_isInterfaceType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [19:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isReferenceType(?class) :- 
   _ClassType(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isReferenceType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_124_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_124_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_124_ClassType_op_ctxt,rel_124_ClassType->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isReferenceType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isReferenceType(?class) :- \n   _ClassType(?class).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?arrayType) :- 
   _ArrayType(?arrayType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isReferenceType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_122_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_122_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_122_ArrayType_op_ctxt,rel_122_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isReferenceType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isReferenceType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?interface) :- 
   _InterfaceType(?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isReferenceType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_143_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_143_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_143_InterfaceType_op_ctxt,rel_143_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isReferenceType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isReferenceType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?arrayType) :- 
   _ComponentType(?arrayType,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isReferenceType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isReferenceType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isReferenceType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?class) :- 
   _DirectSuperinterface(?class,?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?class) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?interface) :- 
   _DirectSuperinterface(?class,?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isReferenceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?class) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?superclass) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isReferenceType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?exceptionType) :- 
   _Method_DeclaresException(?exceptionType,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isReferenceType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_78_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_78_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_78_Method_DeclaresException_op_ctxt,rel_78_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isReferenceType(?exceptionType) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isReferenceType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType(?type) :- 
   _ApplicationClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isReferenceType(?type) :- \n   _ApplicationClass(?type).;)",profile);
if (!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_117_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_145_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isReferenceType(?type) :-     _ApplicationClass(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isReferenceType(?type) :- \n   _ApplicationClass(?type).;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType("java.lang.invoke.MethodHandle").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [423:1-423:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [423:1-423:50];isReferenceType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_145_isReferenceType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [423:1-423:50];isReferenceType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType("null_type").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];isReferenceType(\"null_type\").;)",profile);
rel_145_isReferenceType->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];isReferenceType(\"null_type\").;)" <<  rel_145_isReferenceType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isReferenceType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isReferenceType(\"java.lang.Object\").;)",profile);
rel_145_isReferenceType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isReferenceType(\"java.lang.Object\").;)" <<  rel_145_isReferenceType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isReferenceType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [19:1-0:0];)" <<  rel_145_isReferenceType->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Service.facts"},{"name","_Service"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_146_Service);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1244:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AndroidAppComponent(?type) :- 
   _Activity(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _Activity(?type).;)",profile);
if (!rel_116_Activity->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_Activity->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_116_Activity_op_ctxt,rel_116_Activity->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_147_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :-     _Activity(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _Activity(?type).;)" <<  rel_147_AndroidAppComponent->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AndroidAppComponent(?type) :- 
   _Service(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _Service(?type).;)",profile);
if (!rel_146_Service->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_146_Service->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_146_Service_op_ctxt,rel_146_Service->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_147_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :-     _Service(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _Service(?type).;)" <<  rel_147_AndroidAppComponent->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AndroidAppComponent(?type) :- 
   _BroadcastReceiver(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _BroadcastReceiver(?type).;)",profile);
if (!rel_123_BroadcastReceiver->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_123_BroadcastReceiver->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_123_BroadcastReceiver_op_ctxt,rel_123_BroadcastReceiver->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_147_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :-     _BroadcastReceiver(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _BroadcastReceiver(?type).;)" <<  rel_147_AndroidAppComponent->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AndroidAppComponent(?type) :- 
   _ContentProvider(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _ContentProvider(?type).;)",profile);
if (!rel_127_ContentProvider->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_127_ContentProvider->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_127_ContentProvider_op_ctxt,rel_127_ContentProvider->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_147_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :-     _ContentProvider(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1417:1-1421:26];AndroidAppComponent(?type) :- \n   _ContentProvider(?type).;)" <<  rel_147_AndroidAppComponent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AndroidAppComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1244:1-0:0];)" <<  rel_147_AndroidAppComponent->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-Type.facts"},{"name","_Var_Type"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_148_Var_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [17:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isType(?class) :- 
   _ClassType(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_124_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_124_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_124_ClassType_op_ctxt,rel_124_ClassType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [262:1-265:22];isType(?class) :- \n   _ClassType(?class).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?arrayType) :- 
   _ArrayType(?arrayType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_122_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_122_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_122_ArrayType_op_ctxt,rel_122_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [268:1-271:26];isType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?interface) :- 
   _InterfaceType(?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_143_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_143_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_143_InterfaceType_op_ctxt,rel_143_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [274:1-277:30];isType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?arrayType) :- 
   _ComponentType(?arrayType,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?componentType) :- 
   _ComponentType(?arrayType,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?componentType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?componentType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [280:1-285:46];isType(?componentType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?class) :- 
   _DirectSuperinterface(?class,?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?class) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?interface) :- 
   _DirectSuperinterface(?class,?interface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_139_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_DirectSuperinterface_op_ctxt,rel_139_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [303:1-309:45];isType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?class) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?superclass) :- 
   _DirectSuperclass(?class,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [312:1-319:42];isType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?exceptionType) :- 
   _Method_DeclaresException(?exceptionType,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_78_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_78_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_78_Method_DeclaresException_op_ctxt,rel_78_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isType(?exceptionType) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [338:1-342:54];isType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?type) :- 
   _Var_Type(?var,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isType(?type) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_148_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_148_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_148_Var_Type_op_ctxt,rel_148_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isType(?type) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isType(?type) :- \n   _Var_Type(?var,?type).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?type) :- 
   _ApplicationClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isType(?type) :- \n   _ApplicationClass(?type).;)",profile);
if (!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_117_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isType(?type) :-     _ApplicationClass(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [369:1-372:28];isType(?type) :- \n   _ApplicationClass(?type).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?type) :- 
   _NormalHeap(?id,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isType(?type) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_110_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_110_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_110_NormalHeap_op_ctxt,rel_110_NormalHeap->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isType(?type) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [394:1-398:27];isType(?type) :- \n   _NormalHeap(?id,?type).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?instanceType) :- 
   _ClassHeap(?id,?instanceType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isType(?instanceType) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_105_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_105_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_105_ClassHeap_op_ctxt,rel_105_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isType(?instanceType) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [414:1-419:34];isType(?instanceType) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("java.lang.invoke.MethodHandle").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [422:1-422:41])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [422:1-422:41];isType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_149_isType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [422:1-422:41];isType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?id) :- 
   _Activity(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [832:1-834:18])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [832:1-834:18];isType(?id) :- \n   _Activity(?id).;)",profile);
if (!rel_116_Activity->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_Activity->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_Activity_op_ctxt,rel_116_Activity->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [832:1-834:18];isType(?id) :-     _Activity(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [832:1-834:18];isType(?id) :- \n   _Activity(?id).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?id) :- 
   _Service(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [837:1-839:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [837:1-839:17];isType(?id) :- \n   _Service(?id).;)",profile);
if (!rel_146_Service->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_146_Service->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_146_Service_op_ctxt,rel_146_Service->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [837:1-839:17];isType(?id) :-     _Service(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [837:1-839:17];isType(?id) :- \n   _Service(?id).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?id) :- 
   _ContentProvider(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [842:1-844:25])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [842:1-844:25];isType(?id) :- \n   _ContentProvider(?id).;)",profile);
if (!rel_127_ContentProvider->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_127_ContentProvider->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_127_ContentProvider_op_ctxt,rel_127_ContentProvider->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [842:1-844:25];isType(?id) :-     _ContentProvider(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [842:1-844:25];isType(?id) :- \n   _ContentProvider(?id).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType(?id) :- 
   _BroadcastReceiver(?id).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [847:1-849:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [847:1-849:27];isType(?id) :- \n   _BroadcastReceiver(?id).;)",profile);
if (!rel_123_BroadcastReceiver->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_123_BroadcastReceiver->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_123_BroadcastReceiver_op_ctxt,rel_123_BroadcastReceiver->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_149_isType->insert(tuple,READ_OP_CONTEXT(rel_149_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [847:1-849:27];isType(?id) :-     _BroadcastReceiver(?id).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [847:1-849:27];isType(?id) :- \n   _BroadcastReceiver(?id).;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("boolean").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69];isType(\"boolean\").;)",profile);
rel_149_isType->insert(8);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69];isType(\"boolean\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("byte").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];isType(\"byte\").;)",profile);
rel_149_isType->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];isType(\"byte\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("char").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];isType(\"char\").;)",profile);
rel_149_isType->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];isType(\"char\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("short").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];isType(\"short\").;)",profile);
rel_149_isType->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];isType(\"short\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("int").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];isType(\"int\").;)",profile);
rel_149_isType->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];isType(\"int\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("long").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];isType(\"long\").;)",profile);
rel_149_isType->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];isType(\"long\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("float").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];isType(\"float\").;)",profile);
rel_149_isType->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];isType(\"float\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("double").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];isType(\"double\").;)",profile);
rel_149_isType->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];isType(\"double\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("void").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63];isType(\"void\").;)",profile);
rel_149_isType->insert(16);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63];isType(\"void\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("null_type").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];isType(\"null_type\").;)",profile);
rel_149_isType->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [877:1-877:84];isType(\"null_type\").;)" <<  rel_149_isType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isType(\"java.lang.Object\").;)",profile);
rel_149_isType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [878:1-878:94];isType(\"java.lang.Object\").;)" <<  rel_149_isType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [17:1-0:0];)" <<  rel_149_isType->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_124_ClassType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_122_ArrayType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_143_InterfaceType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_139_DirectSuperinterface->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_78_Method_DeclaresException->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_110_NormalHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_105_ClassHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_116_Activity->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_146_Service->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_127_ContentProvider->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_123_BroadcastReceiver->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [256:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignHeapAllocation(?heap,?to,?inmethod) :- 
   isAssignHeapAllocation_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   AssignHeapAllocation_Heap(?insn,?heap),
   AssignInstruction_To(?insn,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [931:1-935:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :- \n   isAssignHeapAllocation_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignHeapAllocation_Heap(?insn,?heap),\n   AssignInstruction_To(?insn,?to).;)",profile);
if (!rel_2_AssignHeapAllocation_Heap->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_85_Instruction_Method->empty()&&!rel_3_isAssignHeapAllocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_3_isAssignHeapAllocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_2_AssignHeapAllocation_Heap_op_ctxt,rel_2_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_3_isAssignHeapAllocation_Insn_op_ctxt,rel_3_isAssignHeapAllocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AssignHeapAllocation_Heap->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AssignHeapAllocation_Heap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_150_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :-     isAssignHeapAllocation_Insn(?insn),    Instruction_Method(?insn,?inmethod),    AssignHeapAllocation_Heap(?insn,?heap),    AssignInstruction_To(?insn,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :- \n   isAssignHeapAllocation_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignHeapAllocation_Heap(?insn,?heap),\n   AssignInstruction_To(?insn,?to).;)" <<  rel_150_AssignHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignHeapAllocation("java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>") :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isHeapAllocation("java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:1-1813:387])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:1-1813:387];AssignHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({23});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(23),(RamDomain)(env1[0]),(RamDomain)(125)});
if (!(rel_150_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:1-1813:387];AssignHeapAllocation('java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem',?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isHeapAllocation('java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:1-1813:387];AssignHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)" <<  rel_150_AssignHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String[]",?return,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?return,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:1-1814:390])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:1-1814:390];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\",?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({25});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(25),(RamDomain)(env1[0]),(RamDomain)(128)});
if (!(rel_150_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:1-1814:390];AssignHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String[]',?return,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?return,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:1-1814:390];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\",?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)" <<  rel_150_AssignHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String",cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>","/@native-array-element"),"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isType("java.lang.String"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\",cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(26),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(128)});
if (!(rel_150_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];AssignHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String',cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\",cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_150_AssignHeapAllocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [256:1-0:0];)" <<  rel_150_AssignHeapAllocation->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_3_isAssignHeapAllocation_Insn->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1939:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptAssignHeapAllocation(?inmethod,?heap) :- 
   AssignHeapAllocation(?heap,_,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1940:1-1941:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1940:1-1941:45];OptAssignHeapAllocation(?inmethod,?heap) :- \n   AssignHeapAllocation(?heap,_,?inmethod).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_151_OptAssignHeapAllocation_op_ctxt,rel_151_OptAssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[0])});
if (!(rel_151_OptAssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_151_OptAssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1940:1-1941:45];OptAssignHeapAllocation(?inmethod,?heap) :-     AssignHeapAllocation(?heap,_,?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1940:1-1941:45];OptAssignHeapAllocation(?inmethod,?heap) :- \n   AssignHeapAllocation(?heap,_,?inmethod).;)" <<  rel_151_OptAssignHeapAllocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1939:1-0:0];)" <<  rel_151_OptAssignHeapAllocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1942:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ObjectMultipleAllocated(?heap) :- 
   OptAssignHeapAllocation(?inmethod1,?heap),
   OptAssignHeapAllocation(?inmethod2,?heap),
   ?inmethod1 != ?inmethod2.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1943:1-1946:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1943:1-1946:28];ObjectMultipleAllocated(?heap) :- \n   OptAssignHeapAllocation(?inmethod1,?heap),\n   OptAssignHeapAllocation(?inmethod2,?heap),\n   ?inmethod1 != ?inmethod2.;)",profile);
if (!rel_151_OptAssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_151_OptAssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_152_ObjectMultipleAllocated_op_ctxt,rel_152_ObjectMultipleAllocated->createContext());
CREATE_OP_CONTEXT(rel_151_OptAssignHeapAllocation_op_ctxt,rel_151_OptAssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_151_OptAssignHeapAllocation->equalRange<1>(key,READ_OP_CONTEXT(rel_151_OptAssignHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((env0[0]) != (env1[0]))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_152_ObjectMultipleAllocated->insert(tuple,READ_OP_CONTEXT(rel_152_ObjectMultipleAllocated_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1943:1-1946:28];ObjectMultipleAllocated(?heap) :-     OptAssignHeapAllocation(?inmethod1,?heap),    OptAssignHeapAllocation(?inmethod2,?heap),    ?inmethod1 != ?inmethod2.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1943:1-1946:28];ObjectMultipleAllocated(?heap) :- \n   OptAssignHeapAllocation(?inmethod1,?heap),\n   OptAssignHeapAllocation(?inmethod2,?heap),\n   ?inmethod1 != ?inmethod2.;)" <<  rel_152_ObjectMultipleAllocated->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1942:1-0:0];)" <<  rel_152_ObjectMultipleAllocated->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_151_OptAssignHeapAllocation->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1078:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodLookup(?simplename,?descriptor,?type,?method) :- 
   MethodImplemented(?simplename,?descriptor,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1099:1-1100:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   MethodImplemented(?simplename,?descriptor,?type,?method).;)",profile);
if (!rel_80_MethodImplemented->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_80_MethodImplemented->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt,rel_80_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_153_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :-     MethodImplemented(?simplename,?descriptor,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   MethodImplemented(?simplename,?descriptor,?type,?method).;)" <<  rel_153_MethodLookup->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MethodLookup(?simplename,?descriptor,?arraytype,?method) :- 
   isArrayType(?arraytype),
   isType("java.lang.Object"),
   MethodImplemented(?simplename,?descriptor,"java.lang.Object",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1105:1-1109:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :- \n   isArrayType(?arraytype),\n   isType(\"java.lang.Object\"),\n   MethodImplemented(?simplename,?descriptor,\"java.lang.Object\",?method).;)",profile);
if (!rel_80_MethodImplemented->empty()&&!rel_126_isArrayType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt,rel_80_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({0,0,18,0});
auto range = rel_80_MethodImplemented->equalRange<2>(key,READ_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env2[3])});
if (!(rel_153_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :-     isArrayType(?arraytype),    isType('java.lang.Object'),    MethodImplemented(?simplename,?descriptor,'java.lang.Object',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :- \n   isArrayType(?arraytype),\n   isType(\"java.lang.Object\"),\n   MethodImplemented(?simplename,?descriptor,\"java.lang.Object\",?method).;)" <<  rel_153_MethodLookup->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1078:1-0:0];)" <<  rel_153_MethodLookup->size() << std::endl;
}rel_154_delta_MethodLookup->insertAll(*rel_153_MethodLookup);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1078:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodLookup(?simplename,?descriptor,?type,?method) :- 
   _DirectSuperclass(?type,?supertype),
   MethodLookup(?simplename,?descriptor,?supertype,?method),
   !MethodImplemented(?simplename,?descriptor,?type,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1101:1-1104:61])_");
{
	RamLogger logger(R"(@t-recursive-rule;MethodLookup;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1101:1-1104:61];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   _DirectSuperclass(?type,?supertype),\n   MethodLookup(?simplename,?descriptor,?supertype,?method),\n   !MethodImplemented(?simplename,?descriptor,?type,_).;)",profile);
if (!rel_154_delta_MethodLookup->empty()&&!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_154_delta_MethodLookup_op_ctxt,rel_154_delta_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_155_new_MethodLookup_op_ctxt,rel_155_new_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt,rel_80_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[1],0});
auto range = rel_154_delta_MethodLookup->equalRange<2>(key,READ_OP_CONTEXT(rel_154_delta_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((rel_80_MethodImplemented->equalRange<0,1,2>(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],0}),READ_OP_CONTEXT(rel_80_MethodImplemented_op_ctxt)).empty()) && (!rel_153_MethodLookup->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env1[3]}),READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env1[3])});
if (!(rel_155_new_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_155_new_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1101:1-1104:61];@new_MethodLookup(?simplename,?descriptor,?type,?method) :-     _DirectSuperclass(?type,?supertype),    @delta_MethodLookup(?simplename,?descriptor,?supertype,?method),    !MethodImplemented(?simplename,?descriptor,?type,_),    !MethodLookup(?simplename,?descriptor,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;MethodLookup;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1101:1-1104:61];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   _DirectSuperclass(?type,?supertype),\n   MethodLookup(?simplename,?descriptor,?supertype,?method),\n   !MethodImplemented(?simplename,?descriptor,?type,_).;)" <<  rel_155_new_MethodLookup->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1078:1-0:0];)" <<  rel_155_new_MethodLookup->size() << std::endl;
}if(rel_155_new_MethodLookup->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1078:1-0:0];)",profile);
rel_153_MethodLookup->insertAll(*rel_155_new_MethodLookup);
{
auto rel_0 = rel_154_delta_MethodLookup;
rel_154_delta_MethodLookup = rel_155_new_MethodLookup;
rel_155_new_MethodLookup = rel_0;
}
rel_155_new_MethodLookup->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_154_delta_MethodLookup->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_155_new_MethodLookup->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_80_MethodImplemented->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridesFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1077:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OverridesFinalize(?class) :- 
   MethodLookup("finalize","void()",?class,?method),
   ?method != "<java.lang.Object: void finalize()>".
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1096:1-1098:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridesFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1096:1-1098:54];OverridesFinalize(?class) :- \n   MethodLookup(\"finalize\",\"void()\",?class,?method),\n   ?method != \"<java.lang.Object: void finalize()>\".;)",profile);
if (!rel_153_MethodLookup->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_156_OverridesFinalize_op_ctxt,rel_156_OverridesFinalize->createContext());
const Tuple<RamDomain,4> key({58,59,0,0});
auto range = rel_153_MethodLookup->equalRange<0,1>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( ((env0[3]) != (60))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_156_OverridesFinalize->insert(tuple,READ_OP_CONTEXT(rel_156_OverridesFinalize_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OverridesFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1096:1-1098:54];OverridesFinalize(?class) :-     MethodLookup('finalize','void()',?class,?method),    ?method != '<java.lang.Object: void finalize()>'.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OverridesFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1096:1-1098:54];OverridesFinalize(?class) :- \n   MethodLookup(\"finalize\",\"void()\",?class,?method),\n   ?method != \"<java.lang.Object: void finalize()>\".;)" <<  rel_156_OverridesFinalize->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OverridesFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1077:1-0:0];)" <<  rel_156_OverridesFinalize->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1076:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AllocatedObjectSupportsFinalize(?heap,?inmethod) :- 
   AssignHeapAllocation(?heap,_,?inmethod),
   HeapAllocation_Type(?heap,?class),
   OverridesFinalize(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1092:1-1095:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :- \n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class),\n   OverridesFinalize(?class).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()&&!rel_113_HeapAllocation_Type->empty()&&!rel_156_OverridesFinalize->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_156_OverridesFinalize_op_ctxt,rel_156_OverridesFinalize->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_156_OverridesFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_156_OverridesFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_157_AllocatedObjectSupportsFinalize->insert(tuple,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :-     AssignHeapAllocation(?heap,_,?inmethod),    HeapAllocation_Type(?heap,?class),    OverridesFinalize(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :- \n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class),\n   OverridesFinalize(?class).;)" <<  rel_157_AllocatedObjectSupportsFinalize->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1076:1-0:0];)" <<  rel_157_AllocatedObjectSupportsFinalize->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_156_OverridesFinalize->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1310:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(FakeInvocation_RegisterFinalize0(?val2,cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_158_FakeInvocation_RegisterFinalize0->insert(tuple,READ_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];FakeInvocation_RegisterFinalize0(?val2,cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_158_FakeInvocation_RegisterFinalize0->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(FakeInvocation_RegisterFinalize0(?val2,cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_158_FakeInvocation_RegisterFinalize0->insert(tuple,READ_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];FakeInvocation_RegisterFinalize0(?val2,cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_158_FakeInvocation_RegisterFinalize0->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1310:1-0:0];)" <<  rel_158_FakeInvocation_RegisterFinalize0->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1254:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodDeclaredOrInherited(?meth,?class) :- 
   isClassType(?class),
   Method_DeclaringType(?meth,?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1461:1-1463:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1461:1-1463:39];MethodDeclaredOrInherited(?meth,?class) :- \n   isClassType(?class),\n   Method_DeclaringType(?meth,?class).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_74_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_159_MethodDeclaredOrInherited->insert(tuple,READ_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1461:1-1463:39];MethodDeclaredOrInherited(?meth,?class) :-     isClassType(?class),    Method_DeclaringType(?meth,?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1461:1-1463:39];MethodDeclaredOrInherited(?meth,?class) :- \n   isClassType(?class),\n   Method_DeclaringType(?meth,?class).;)" <<  rel_159_MethodDeclaredOrInherited->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1254:1-0:0];)" <<  rel_159_MethodDeclaredOrInherited->size() << std::endl;
}rel_160_delta_MethodDeclaredOrInherited->insertAll(*rel_159_MethodDeclaredOrInherited);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1254:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodDeclaredOrInherited(?meth,?class) :- 
   MethodDeclaredOrInherited(?meth,?superClass),
   Method_Descriptor(?meth,?descriptor),
   Method_SimpleName(?meth,?simplename),
   _DirectSuperclass(?class,?superClass),
   MethodLookup(?simplename,?descriptor,?class,?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1464:1-1469:57])_");
{
	RamLogger logger(R"(@t-recursive-rule;MethodDeclaredOrInherited;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1464:1-1469:57];MethodDeclaredOrInherited(?meth,?class) :- \n   MethodDeclaredOrInherited(?meth,?superClass),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   _DirectSuperclass(?class,?superClass),\n   MethodLookup(?simplename,?descriptor,?class,?meth).;)",profile);
if (!rel_160_delta_MethodDeclaredOrInherited->empty()&&!rel_153_MethodLookup->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_160_delta_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_160_delta_MethodDeclaredOrInherited_op_ctxt,rel_160_delta_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_161_new_MethodDeclaredOrInherited_op_ctxt,rel_161_new_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_75_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_128_DirectSuperclass->equalRange<1>(key,READ_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_159_MethodDeclaredOrInherited->contains(Tuple<RamDomain,2>({env0[0],env3[0]}),READ_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt))) {
const Tuple<RamDomain,4> key({env2[1],env1[1],env3[0],env0[0]});
auto range = rel_153_MethodLookup->equalRange<0,1,2,3>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env3[0])});
if (!(rel_161_new_MethodDeclaredOrInherited->insert(tuple,READ_OP_CONTEXT(rel_161_new_MethodDeclaredOrInherited_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1464:1-1469:57];@new_MethodDeclaredOrInherited(?meth,?class) :-     @delta_MethodDeclaredOrInherited(?meth,?superClass),    Method_Descriptor(?meth,?descriptor),    Method_SimpleName(?meth,?simplename),    _DirectSuperclass(?class,?superClass),    MethodLookup(?simplename,?descriptor,?class,?meth),    !MethodDeclaredOrInherited(?meth,?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;MethodDeclaredOrInherited;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1464:1-1469:57];MethodDeclaredOrInherited(?meth,?class) :- \n   MethodDeclaredOrInherited(?meth,?superClass),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   _DirectSuperclass(?class,?superClass),\n   MethodLookup(?simplename,?descriptor,?class,?meth).;)" <<  rel_161_new_MethodDeclaredOrInherited->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1254:1-0:0];)" <<  rel_161_new_MethodDeclaredOrInherited->size() << std::endl;
}if(rel_161_new_MethodDeclaredOrInherited->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1254:1-0:0];)",profile);
rel_159_MethodDeclaredOrInherited->insertAll(*rel_161_new_MethodDeclaredOrInherited);
{
auto rel_0 = rel_160_delta_MethodDeclaredOrInherited;
rel_160_delta_MethodDeclaredOrInherited = rel_161_new_MethodDeclaredOrInherited;
rel_161_new_MethodDeclaredOrInherited = rel_0;
}
rel_161_new_MethodDeclaredOrInherited->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_160_delta_MethodDeclaredOrInherited->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_161_new_MethodDeclaredOrInherited->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1256:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ProtectedMethodOfComponent(?meth) :- 
   AndroidAppComponent(?type),
   MethodDeclaredOrInherited(?meth,?type),
   _Method_Modifier("protected",?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1474:1-1477:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1474:1-1477:39];ProtectedMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"protected\",?meth).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_162_ProtectedMethodOfComponent_op_ctxt,rel_162_ProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_159_MethodDeclaredOrInherited->equalRange<1>(key,READ_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({61,env1[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_162_ProtectedMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_162_ProtectedMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1474:1-1477:39];ProtectedMethodOfComponent(?meth) :-     AndroidAppComponent(?type),    MethodDeclaredOrInherited(?meth,?type),    _Method_Modifier('protected',?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1474:1-1477:39];ProtectedMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"protected\",?meth).;)" <<  rel_162_ProtectedMethodOfComponent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1256:1-0:0];)" <<  rel_162_ProtectedMethodOfComponent->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1255:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PublicMethodOfComponent(?meth) :- 
   AndroidAppComponent(?type),
   MethodDeclaredOrInherited(?meth,?type),
   _Method_Modifier("public",?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1470:1-1473:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1470:1-1473:36];PublicMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"public\",?meth).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_163_PublicMethodOfComponent_op_ctxt,rel_163_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_159_MethodDeclaredOrInherited->equalRange<1>(key,READ_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({4,env1[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_163_PublicMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_163_PublicMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1470:1-1473:36];PublicMethodOfComponent(?meth) :-     AndroidAppComponent(?type),    MethodDeclaredOrInherited(?meth,?type),    _Method_Modifier('public',?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1470:1-1473:36];PublicMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"public\",?meth).;)" <<  rel_163_PublicMethodOfComponent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1255:1-0:0];)" <<  rel_163_PublicMethodOfComponent->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2111:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(CollectionLibraryClass(?class) :- 
   isClassType(?class),
   isType(?class),
   !_ApplicationClass(?class),
   "java\.util.*" match ?class.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2112:1-2116:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2112:1-2116:33];CollectionLibraryClass(?class) :- \n   isClassType(?class),\n   isType(?class),\n   !_ApplicationClass(?class),\n   \"java\.util.*\" match ?class.;)",profile);
if (!rel_132_isClassType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_164_CollectionLibraryClass_op_ctxt,rel_164_CollectionLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((!rel_117_ApplicationClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt))) && (regex_wrapper(symTable.resolve((size_t)143),symTable.resolve((size_t)env0[0]))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_164_CollectionLibraryClass->insert(tuple,READ_OP_CONTEXT(rel_164_CollectionLibraryClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2112:1-2116:33];CollectionLibraryClass(?class) :-     isClassType(?class),    isType(?class),    !_ApplicationClass(?class),    'java\.util.*' match ?class.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2112:1-2116:33];CollectionLibraryClass(?class) :- \n   isClassType(?class),\n   isType(?class),\n   !_ApplicationClass(?class),\n   \"java\.util.*\" match ?class.;)" <<  rel_164_CollectionLibraryClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2111:1-0:0];)" <<  rel_164_CollectionLibraryClass->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2106:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SpecialLibraryClass(?class) :- 
   isClassType(?class),
   !_ApplicationClass(?class),
   !CollectionLibraryClass(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2107:1-2110:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2107:1-2110:35];SpecialLibraryClass(?class) :- \n   isClassType(?class),\n   !_ApplicationClass(?class),\n   !CollectionLibraryClass(?class).;)",profile);
if (!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_164_CollectionLibraryClass_op_ctxt,rel_164_CollectionLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt,rel_165_SpecialLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((!rel_117_ApplicationClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt))) && (!rel_164_CollectionLibraryClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_164_CollectionLibraryClass_op_ctxt))))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_165_SpecialLibraryClass->insert(tuple,READ_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2107:1-2110:35];SpecialLibraryClass(?class) :-     isClassType(?class),    !_ApplicationClass(?class),    !CollectionLibraryClass(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2107:1-2110:35];SpecialLibraryClass(?class) :- \n   isClassType(?class),\n   !_ApplicationClass(?class),\n   !CollectionLibraryClass(?class).;)" <<  rel_165_SpecialLibraryClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2106:1-0:0];)" <<  rel_165_SpecialLibraryClass->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_164_CollectionLibraryClass->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2102:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SpecialLibraryMethod(?method) :- 
   Method_DeclaringType(?method,?class),
   SpecialLibraryClass(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2103:1-2105:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2103:1-2105:31];SpecialLibraryMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   SpecialLibraryClass(?class).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_165_SpecialLibraryClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_74_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt,rel_165_SpecialLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_166_SpecialLibraryMethod_op_ctxt,rel_166_SpecialLibraryMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_165_SpecialLibraryClass->equalRange<0>(key,READ_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_166_SpecialLibraryMethod->insert(tuple,READ_OP_CONTEXT(rel_166_SpecialLibraryMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2103:1-2105:31];SpecialLibraryMethod(?method) :-     Method_DeclaringType(?method,?class),    SpecialLibraryClass(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2103:1-2105:31];SpecialLibraryMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   SpecialLibraryClass(?class).;)" <<  rel_166_SpecialLibraryMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2102:1-0:0];)" <<  rel_166_SpecialLibraryMethod->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2097:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SpecialLibraryObject(?heap) :- 
   AssignHeapAllocation_Heap(?insn,?heap),
   Instruction_Method(?insn,?method),
   SpecialLibraryMethod(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2098:1-2101:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2098:1-2101:33];SpecialLibraryObject(?heap) :- \n   AssignHeapAllocation_Heap(?insn,?heap),\n   Instruction_Method(?insn,?method),\n   SpecialLibraryMethod(?method).;)",profile);
if (!rel_2_AssignHeapAllocation_Heap->empty()&&!rel_85_Instruction_Method->empty()&&!rel_166_SpecialLibraryMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AssignHeapAllocation_Heap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AssignHeapAllocation_Heap_op_ctxt,rel_2_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_166_SpecialLibraryMethod_op_ctxt,rel_166_SpecialLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_167_SpecialLibraryObject_op_ctxt,rel_167_SpecialLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_166_SpecialLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_166_SpecialLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_167_SpecialLibraryObject->insert(tuple,READ_OP_CONTEXT(rel_167_SpecialLibraryObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2098:1-2101:33];SpecialLibraryObject(?heap) :-     AssignHeapAllocation_Heap(?insn,?heap),    Instruction_Method(?insn,?method),    SpecialLibraryMethod(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2098:1-2101:33];SpecialLibraryObject(?heap) :- \n   AssignHeapAllocation_Heap(?insn,?heap),\n   Instruction_Method(?insn,?method),\n   SpecialLibraryMethod(?method).;)" <<  rel_167_SpecialLibraryObject->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2097:1-0:0];)" <<  rel_167_SpecialLibraryObject->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_2_AssignHeapAllocation_Heap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_166_SpecialLibraryMethod->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1247:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ImplicitlyInstantiatedLibraryType("android.content.Intent") :- 
   isType("android.content.Intent").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType(\"android.content.Intent\") :- \n   isType(\"android.content.Intent\").;)",profile);
if (!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({77});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(77)});
if (!(rel_168_ImplicitlyInstantiatedLibraryType->insert(tuple,READ_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType('android.content.Intent') :-     isType('android.content.Intent').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType(\"android.content.Intent\") :- \n   isType(\"android.content.Intent\").;)" <<  rel_168_ImplicitlyInstantiatedLibraryType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitlyInstantiatedLibraryType("android.os.Bundle") :- 
   isType("android.os.Bundle").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType(\"android.os.Bundle\") :- \n   isType(\"android.os.Bundle\").;)",profile);
if (!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({78});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(78)});
if (!(rel_168_ImplicitlyInstantiatedLibraryType->insert(tuple,READ_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType('android.os.Bundle') :-     isType('android.os.Bundle').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1430:1-1433:17];ImplicitlyInstantiatedLibraryType(\"android.os.Bundle\") :- \n   isType(\"android.os.Bundle\").;)" <<  rel_168_ImplicitlyInstantiatedLibraryType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1247:1-0:0];)" <<  rel_168_ImplicitlyInstantiatedLibraryType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1271:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReifiedLibraryObject(?type,cat("<android library object ",cat(?type,">"))) :- 
   ImplicitlyInstantiatedLibraryType(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];ReifiedLibraryObject(?type,cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_168_ImplicitlyInstantiatedLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_168_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_169_ReifiedLibraryObject_op_ctxt,rel_169_ReifiedLibraryObject->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_169_ReifiedLibraryObject->insert(tuple,READ_OP_CONTEXT(rel_169_ReifiedLibraryObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];ReifiedLibraryObject(?type,cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];ReifiedLibraryObject(?type,cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_169_ReifiedLibraryObject->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1271:1-0:0];)" <<  rel_169_ReifiedLibraryObject->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1248:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AndroidLibraryType(?type) :- 
   isType(?type),
   "^android.*" match ?type.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1438:1-1440:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1438:1-1440:30];AndroidLibraryType(?type) :- \n   isType(?type),\n   \"^android.*\" match ?type.;)",profile);
if (!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_149_isType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt,rel_170_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( regex_wrapper(symTable.resolve((size_t)80),symTable.resolve((size_t)env0[0]))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_170_AndroidLibraryType->insert(tuple,READ_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1438:1-1440:30];AndroidLibraryType(?type) :-     isType(?type),    '^android.*' match ?type.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1438:1-1440:30];AndroidLibraryType(?type) :- \n   isType(?type),\n   \"^android.*\" match ?type.;)" <<  rel_170_AndroidLibraryType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AndroidLibraryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1248:1-0:0];)" <<  rel_170_AndroidLibraryType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1249:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AndroidApplicationClass(?class) :- 
   _ApplicationClass(?class),
   !AndroidLibraryType(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1441:1-1443:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1441:1-1443:31];AndroidApplicationClass(?class) :- \n   _ApplicationClass(?class),\n   !AndroidLibraryType(?class).;)",profile);
if (!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_117_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_171_AndroidApplicationClass_op_ctxt,rel_171_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt,rel_170_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_170_AndroidLibraryType->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_171_AndroidApplicationClass->insert(tuple,READ_OP_CONTEXT(rel_171_AndroidApplicationClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1441:1-1443:31];AndroidApplicationClass(?class) :-     _ApplicationClass(?class),    !AndroidLibraryType(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1441:1-1443:31];AndroidApplicationClass(?class) :- \n   _ApplicationClass(?class),\n   !AndroidLibraryType(?class).;)" <<  rel_171_AndroidApplicationClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1249:1-0:0];)" <<  rel_171_AndroidApplicationClass->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1251:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AndroidLibraryListenerType(?type) :- 
   AndroidLibraryType(?type),
   isType(?type),
   "Listener" contains ?type.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Listener\" contains ?type.;)",profile);
if (!rel_170_AndroidLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_170_AndroidLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_172_AndroidLibraryListenerType_op_ctxt,rel_172_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt,rel_170_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( (std::string(symTable.resolve((size_t)env0[0])).find(symTable.resolve((size_t)83))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_172_AndroidLibraryListenerType->insert(tuple,READ_OP_CONTEXT(rel_172_AndroidLibraryListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :-     AndroidLibraryType(?type),    isType(?type),    'Listener' contains ?type.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Listener\" contains ?type.;)" <<  rel_172_AndroidLibraryListenerType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AndroidLibraryListenerType(?type) :- 
   AndroidLibraryType(?type),
   isType(?type),
   "Callback" contains ?type.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Callback\" contains ?type.;)",profile);
if (!rel_170_AndroidLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_170_AndroidLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_172_AndroidLibraryListenerType_op_ctxt,rel_172_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt,rel_170_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( (std::string(symTable.resolve((size_t)env0[0])).find(symTable.resolve((size_t)84))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_172_AndroidLibraryListenerType->insert(tuple,READ_OP_CONTEXT(rel_172_AndroidLibraryListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :-     AndroidLibraryType(?type),    isType(?type),    'Callback' contains ?type.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1450:1-1454:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Callback\" contains ?type.;)" <<  rel_172_AndroidLibraryListenerType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1251:1-0:0];)" <<  rel_172_AndroidLibraryListenerType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1245:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReifiedComponent(?type,cat("<android component object ",cat(?type,">"))) :- 
   AndroidAppComponent(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];ReifiedComponent(?type,cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_173_ReifiedComponent_op_ctxt,rel_173_ReifiedComponent->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_173_ReifiedComponent->insert(tuple,READ_OP_CONTEXT(rel_173_ReifiedComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];ReifiedComponent(?type,cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];ReifiedComponent(?type,cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_173_ReifiedComponent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReifiedComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1245:1-0:0];)" <<  rel_173_ReifiedComponent->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1274:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ViewRetrievalByArg0MethodInvocation(?invo) :- 
   Method_SimpleName(?method,"inflate"),
   Method_ReturnType(?method,"android.view.View"),
   isType("android.view.View"),
   MethodInvocation_Method(?invo,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"inflate\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_91_MethodInvocation_Method->empty()&&!rel_77_Method_ReturnType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt,rel_77_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_174_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,2> key({0,86});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_77_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_174_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'inflate'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"inflate\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_174_ViewRetrievalByArg0MethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ViewRetrievalByArg0MethodInvocation(?invo) :- 
   Method_SimpleName(?method,"getView"),
   Method_ReturnType(?method,"android.view.View"),
   isType("android.view.View"),
   MethodInvocation_Method(?invo,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"getView\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_91_MethodInvocation_Method->empty()&&!rel_77_Method_ReturnType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt,rel_77_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_174_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,2> key({0,87});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_77_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_174_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'getView'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"getView\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_174_ViewRetrievalByArg0MethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ViewRetrievalByArg0MethodInvocation(?invo) :- 
   Method_SimpleName(?method,"findViewById"),
   Method_ReturnType(?method,"android.view.View"),
   isType("android.view.View"),
   MethodInvocation_Method(?invo,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"findViewById\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_91_MethodInvocation_Method->empty()&&!rel_77_Method_ReturnType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt,rel_77_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_174_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,2> key({0,88});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_77_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_77_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_174_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'findViewById'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1577:1-1585:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"findViewById\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_174_ViewRetrievalByArg0MethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1274:1-0:0];)" <<  rel_174_ViewRetrievalByArg0MethodInvocation->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_77_Method_ReturnType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_byte;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [30:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_byte("byte").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_byte;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];Type_byte(\"byte\").;)",profile);
rel_175_Type_byte->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_byte;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];Type_byte(\"byte\").;)" <<  rel_175_Type_byte->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_byte;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [30:1-0:0];)" <<  rel_175_Type_byte->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_char;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [31:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_char("char").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_char;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];Type_char(\"char\").;)",profile);
rel_176_Type_char->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_char;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];Type_char(\"char\").;)" <<  rel_176_Type_char->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_char;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [31:1-0:0];)" <<  rel_176_Type_char->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_double;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [36:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_double("double").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_double;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];Type_double(\"double\").;)",profile);
rel_177_Type_double->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_double;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];Type_double(\"double\").;)" <<  rel_177_Type_double->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_double;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [36:1-0:0];)" <<  rel_177_Type_double->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_float;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [35:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_float("float").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_float;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];Type_float(\"float\").;)",profile);
rel_178_Type_float->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_float;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];Type_float(\"float\").;)" <<  rel_178_Type_float->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_float;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [35:1-0:0];)" <<  rel_178_Type_float->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_int;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [33:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_int("int").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_int;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];Type_int(\"int\").;)",profile);
rel_179_Type_int->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_int;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];Type_int(\"int\").;)" <<  rel_179_Type_int->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_int;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [33:1-0:0];)" <<  rel_179_Type_int->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_long;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [34:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_long("long").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_long;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];Type_long(\"long\").;)",profile);
rel_180_Type_long->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_long;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];Type_long(\"long\").;)" <<  rel_180_Type_long->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_long;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [34:1-0:0];)" <<  rel_180_Type_long->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_short;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [32:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Type_short("short").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_short;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];Type_short(\"short\").;)",profile);
rel_181_Type_short->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Type_short;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];Type_short(\"short\").;)" <<  rel_181_Type_short->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Type_short;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [32:1-0:0];)" <<  rel_181_Type_short->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [18:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isPrimitiveType("boolean").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69];isPrimitiveType(\"boolean\").;)",profile);
rel_182_isPrimitiveType->insert(8);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [868:1-868:69];isPrimitiveType(\"boolean\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("byte").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];isPrimitiveType(\"byte\").;)",profile);
rel_182_isPrimitiveType->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [869:1-869:63];isPrimitiveType(\"byte\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("char").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];isPrimitiveType(\"char\").;)",profile);
rel_182_isPrimitiveType->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [870:1-870:63];isPrimitiveType(\"char\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("short").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];isPrimitiveType(\"short\").;)",profile);
rel_182_isPrimitiveType->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [871:1-871:65];isPrimitiveType(\"short\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("int").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];isPrimitiveType(\"int\").;)",profile);
rel_182_isPrimitiveType->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [872:1-872:61];isPrimitiveType(\"int\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("long").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];isPrimitiveType(\"long\").;)",profile);
rel_182_isPrimitiveType->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [873:1-873:63];isPrimitiveType(\"long\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("float").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];isPrimitiveType(\"float\").;)",profile);
rel_182_isPrimitiveType->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [874:1-874:65];isPrimitiveType(\"float\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("double").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];isPrimitiveType(\"double\").;)",profile);
rel_182_isPrimitiveType->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [875:1-875:67];isPrimitiveType(\"double\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isPrimitiveType("void").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63];isPrimitiveType(\"void\").;)",profile);
rel_182_isPrimitiveType->insert(16);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [876:1-876:63];isPrimitiveType(\"void\").;)" <<  rel_182_isPrimitiveType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isPrimitiveType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [18:1-0:0];)" <<  rel_182_isPrimitiveType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1087:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?s) :- 
   isClassType(?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1157:1-1158:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1157:1-1158:21];SubtypeOf(?s,?s) :- \n   isClassType(?s).;)",profile);
if (!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1157:1-1158:21];SubtypeOf(?s,?s) :-     isClassType(?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1157:1-1158:21];SubtypeOf(?s,?s) :- \n   isClassType(?s).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Subclass(?t,?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1159:1-1160:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1159:1-1160:22];SubtypeOf(?s,?t) :- \n   Subclass(?t,?s).;)",profile);
if (!rel_129_Subclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_129_Subclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_129_Subclass_op_ctxt,rel_129_Subclass->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1159:1-1160:22];SubtypeOf(?s,?t) :-     Subclass(?t,?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1159:1-1160:22];SubtypeOf(?s,?t) :- \n   Subclass(?t,?s).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   isClassType(?s),
   Superinterface(?t,?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1161:1-1163:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1161:1-1163:28];SubtypeOf(?s,?t) :- \n   isClassType(?s),\n   Superinterface(?t,?s).;)",profile);
if (!rel_140_Superinterface->empty()&&!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_140_Superinterface_op_ctxt,rel_140_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_140_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_140_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1161:1-1163:28];SubtypeOf(?s,?t) :-     isClassType(?s),    Superinterface(?t,?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1161:1-1163:28];SubtypeOf(?s,?t) :- \n   isClassType(?s),\n   Superinterface(?t,?s).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,"java.lang.Object") :- 
   isInterfaceType(?s),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1164:1-1167:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1164:1-1167:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isInterfaceType(?s),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_144_isInterfaceType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_144_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(18)});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1164:1-1167:29];SubtypeOf(?s,'java.lang.Object') :-     isInterfaceType(?s),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1164:1-1167:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isInterfaceType(?s),\n   isType(\"java.lang.Object\").;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?s) :- 
   isInterfaceType(?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1168:1-1169:25])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1168:1-1169:25];SubtypeOf(?s,?s) :- \n   isInterfaceType(?s).;)",profile);
if (!rel_144_isInterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_144_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1168:1-1169:25];SubtypeOf(?s,?s) :-     isInterfaceType(?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1168:1-1169:25];SubtypeOf(?s,?s) :- \n   isInterfaceType(?s).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   isInterfaceType(?s),
   Superinterface(?t,?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1170:1-1172:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1170:1-1172:28];SubtypeOf(?s,?t) :- \n   isInterfaceType(?s),\n   Superinterface(?t,?s).;)",profile);
if (!rel_140_Superinterface->empty()&&!rel_144_isInterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_144_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_140_Superinterface_op_ctxt,rel_140_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_140_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_140_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1170:1-1172:28];SubtypeOf(?s,?t) :-     isInterfaceType(?s),    Superinterface(?t,?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1170:1-1172:28];SubtypeOf(?s,?t) :- \n   isInterfaceType(?s),\n   Superinterface(?t,?s).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,"java.lang.Object") :- 
   isArrayType(?s),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1173:1-1176:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1173:1-1176:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isArrayType(?s),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_126_isArrayType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(18)});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1173:1-1176:29];SubtypeOf(?s,'java.lang.Object') :-     isArrayType(?s),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1173:1-1176:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isArrayType(?s),\n   isType(\"java.lang.Object\").;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   isArrayType(?s),
   isArrayType(?t),
   _ComponentType(?s,?sc),
   _ComponentType(?t,?sc),
   isPrimitiveType(?sc).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1177:1-1182:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1177:1-1182:26];SubtypeOf(?s,?t) :- \n   isArrayType(?s),\n   isArrayType(?t),\n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?sc),\n   isPrimitiveType(?sc).;)",profile);
if (!rel_125_ComponentType->empty()&&!rel_126_isArrayType->empty()&&!rel_182_isPrimitiveType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_182_isPrimitiveType_op_ctxt,rel_182_isPrimitiveType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_126_isArrayType) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_125_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],env2[1]});
auto range = rel_125_ComponentType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_182_isPrimitiveType->equalRange<0>(key,READ_OP_CONTEXT(rel_182_isPrimitiveType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1177:1-1182:26];SubtypeOf(?s,?t) :-     isArrayType(?s),    isArrayType(?t),    _ComponentType(?s,?sc),    _ComponentType(?t,?sc),    isPrimitiveType(?sc).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1177:1-1182:26];SubtypeOf(?s,?t) :- \n   isArrayType(?s),\n   isArrayType(?t),\n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?sc),\n   isPrimitiveType(?sc).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,"java.lang.Cloneable") :- 
   isArrayType(?s),
   isInterfaceType("java.lang.Cloneable"),
   isType("java.lang.Cloneable").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1189:1-1193:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1189:1-1193:32];SubtypeOf(?s,\"java.lang.Cloneable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.lang.Cloneable\"),\n   isType(\"java.lang.Cloneable\").;)",profile);
if (!rel_126_isArrayType->empty()&&!rel_144_isInterfaceType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({63});
auto range = rel_144_isInterfaceType->equalRange<0>(key,READ_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({63});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(63)});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1189:1-1193:32];SubtypeOf(?s,'java.lang.Cloneable') :-     isArrayType(?s),    isInterfaceType('java.lang.Cloneable'),    isType('java.lang.Cloneable').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1189:1-1193:32];SubtypeOf(?s,\"java.lang.Cloneable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.lang.Cloneable\"),\n   isType(\"java.lang.Cloneable\").;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,"java.io.Serializable") :- 
   isArrayType(?s),
   isInterfaceType("java.io.Serializable"),
   isType("java.io.Serializable").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1194:1-1198:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1194:1-1198:33];SubtypeOf(?s,\"java.io.Serializable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.io.Serializable\"),\n   isType(\"java.io.Serializable\").;)",profile);
if (!rel_126_isArrayType->empty()&&!rel_144_isInterfaceType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt,rel_144_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({64});
auto range = rel_144_isInterfaceType->equalRange<0>(key,READ_OP_CONTEXT(rel_144_isInterfaceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({64});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(64)});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1194:1-1198:33];SubtypeOf(?s,'java.io.Serializable') :-     isArrayType(?s),    isInterfaceType('java.io.Serializable'),    isType('java.io.Serializable').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1194:1-1198:33];SubtypeOf(?s,\"java.io.Serializable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.io.Serializable\"),\n   isType(\"java.io.Serializable\").;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_null(?s),
   isReferenceType(?t),
   ?t != ?s.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1199:1-1202:14])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1199:1-1202:14];SubtypeOf(?s,?t) :- \n   Type_null(?s),\n   isReferenceType(?t),\n   ?t != ?s.;)",profile);
if (!rel_103_Type_null->empty()&&!rel_145_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_103_Type_null_op_ctxt,rel_103_Type_null->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_145_isReferenceType) {
if( ((env1[0]) != (env0[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1199:1-1202:14];SubtypeOf(?s,?t) :-     Type_null(?s),    isReferenceType(?t),    ?t != ?s.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1199:1-1202:14];SubtypeOf(?s,?t) :- \n   Type_null(?s),\n   isReferenceType(?t),\n   ?t != ?s.;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_float(?s),
   Type_double(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1203:1-1205:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1203:1-1205:21];SubtypeOf(?s,?t) :- \n   Type_float(?s),\n   Type_double(?t).;)",profile);
if (!rel_177_Type_double->empty()&&!rel_178_Type_float->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_178_Type_float->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_177_Type_double_op_ctxt,rel_177_Type_double->createContext());
CREATE_OP_CONTEXT(rel_178_Type_float_op_ctxt,rel_178_Type_float->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_177_Type_double) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1203:1-1205:21];SubtypeOf(?s,?t) :-     Type_float(?s),    Type_double(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1203:1-1205:21];SubtypeOf(?s,?t) :- \n   Type_float(?s),\n   Type_double(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_long(?s),
   Type_float(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1206:1-1208:20])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1206:1-1208:20];SubtypeOf(?s,?t) :- \n   Type_long(?s),\n   Type_float(?t).;)",profile);
if (!rel_178_Type_float->empty()&&!rel_180_Type_long->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_180_Type_long->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_178_Type_float_op_ctxt,rel_178_Type_float->createContext());
CREATE_OP_CONTEXT(rel_180_Type_long_op_ctxt,rel_180_Type_long->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_178_Type_float) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1206:1-1208:20];SubtypeOf(?s,?t) :-     Type_long(?s),    Type_float(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1206:1-1208:20];SubtypeOf(?s,?t) :- \n   Type_long(?s),\n   Type_float(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_int(?s),
   Type_long(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1209:1-1211:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1209:1-1211:19];SubtypeOf(?s,?t) :- \n   Type_int(?s),\n   Type_long(?t).;)",profile);
if (!rel_179_Type_int->empty()&&!rel_180_Type_long->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_179_Type_int->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_180_Type_long_op_ctxt,rel_180_Type_long->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_180_Type_long) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1209:1-1211:19];SubtypeOf(?s,?t) :-     Type_int(?s),    Type_long(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1209:1-1211:19];SubtypeOf(?s,?t) :- \n   Type_int(?s),\n   Type_long(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_char(?s),
   Type_int(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1212:1-1214:18])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1212:1-1214:18];SubtypeOf(?s,?t) :- \n   Type_char(?s),\n   Type_int(?t).;)",profile);
if (!rel_176_Type_char->empty()&&!rel_179_Type_int->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_176_Type_char->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_176_Type_char_op_ctxt,rel_176_Type_char->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1212:1-1214:18];SubtypeOf(?s,?t) :-     Type_char(?s),    Type_int(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1212:1-1214:18];SubtypeOf(?s,?t) :- \n   Type_char(?s),\n   Type_int(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_short(?s),
   Type_int(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1215:1-1217:18])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1215:1-1217:18];SubtypeOf(?s,?t) :- \n   Type_short(?s),\n   Type_int(?t).;)",profile);
if (!rel_179_Type_int->empty()&&!rel_181_Type_short->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_181_Type_short->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_181_Type_short_op_ctxt,rel_181_Type_short->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1215:1-1217:18];SubtypeOf(?s,?t) :-     Type_short(?s),    Type_int(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1215:1-1217:18];SubtypeOf(?s,?t) :- \n   Type_short(?s),\n   Type_int(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   Type_byte(?s),
   Type_short(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1218:1-1220:20])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1218:1-1220:20];SubtypeOf(?s,?t) :- \n   Type_byte(?s),\n   Type_short(?t).;)",profile);
if (!rel_175_Type_byte->empty()&&!rel_181_Type_short->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_175_Type_byte->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_175_Type_byte_op_ctxt,rel_175_Type_byte->createContext());
CREATE_OP_CONTEXT(rel_181_Type_short_op_ctxt,rel_181_Type_short->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_181_Type_short) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1218:1-1220:20];SubtypeOf(?s,?t) :-     Type_byte(?s),    Type_short(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1218:1-1220:20];SubtypeOf(?s,?t) :- \n   Type_byte(?s),\n   Type_short(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(SubtypeOf(?t,?t) :- 
   isType(?t).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1221:1-1222:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1221:1-1222:16];SubtypeOf(?t,?t) :- \n   isType(?t).;)",profile);
if (!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_149_isType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_183_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1221:1-1222:16];SubtypeOf(?t,?t) :-     isType(?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1221:1-1222:16];SubtypeOf(?t,?t) :- \n   isType(?t).;)" <<  rel_183_SubtypeOf->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1087:1-0:0];)" <<  rel_183_SubtypeOf->size() << std::endl;
}rel_184_delta_SubtypeOf->insertAll(*rel_183_SubtypeOf);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1087:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SubtypeOf(?s,?t) :- 
   _ComponentType(?s,?sc),
   _ComponentType(?t,?tc),
   isReferenceType(?sc),
   isReferenceType(?tc),
   SubtypeOf(?sc,?tc).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1183:1-1188:25])_");
{
	RamLogger logger(R"(@t-recursive-rule;SubtypeOf;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1183:1-1188:25];SubtypeOf(?s,?t) :- \n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?tc),\n   isReferenceType(?sc),\n   isReferenceType(?tc),\n   SubtypeOf(?sc,?tc).;)",profile);
if (!rel_184_delta_SubtypeOf->empty()&&!rel_125_ComponentType->empty()&&!rel_145_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_184_delta_SubtypeOf_op_ctxt,rel_184_delta_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_185_new_SubtypeOf_op_ctxt,rel_185_new_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_125_ComponentType) {
if( !rel_183_SubtypeOf->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_145_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_145_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[1],env1[1]});
auto range = rel_184_delta_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_184_delta_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_185_new_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_185_new_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1183:1-1188:25];@new_SubtypeOf(?s,?t) :-     _ComponentType(?s,?sc),    _ComponentType(?t,?tc),    isReferenceType(?sc),    isReferenceType(?tc),    @delta_SubtypeOf(?sc,?tc),    !SubtypeOf(?s,?t).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;SubtypeOf;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1183:1-1188:25];SubtypeOf(?s,?t) :- \n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?tc),\n   isReferenceType(?sc),\n   isReferenceType(?tc),\n   SubtypeOf(?sc,?tc).;)" <<  rel_185_new_SubtypeOf->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1087:1-0:0];)" <<  rel_185_new_SubtypeOf->size() << std::endl;
}if(rel_185_new_SubtypeOf->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1087:1-0:0];)",profile);
rel_183_SubtypeOf->insertAll(*rel_185_new_SubtypeOf);
{
auto rel_0 = rel_184_delta_SubtypeOf;
rel_184_delta_SubtypeOf = rel_185_new_SubtypeOf;
rel_185_new_SubtypeOf = rel_0;
}
rel_185_new_SubtypeOf->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_184_delta_SubtypeOf->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_185_new_SubtypeOf->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_144_isInterfaceType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_175_Type_byte->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_176_Type_char->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_181_Type_short->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_180_Type_long->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_178_Type_float->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_177_Type_double->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_103_Type_null->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_129_Subclass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_140_Superinterface->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1934:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionType(?type) :- 
   isType("java.lang.Throwable"),
   SubtypeOf(?type,"java.lang.Throwable").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1935:1-1938:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1935:1-1938:28];ExceptionType(?type) :- \n   isType(\"java.lang.Throwable\"),\n   SubtypeOf(?type,\"java.lang.Throwable\").;)",profile);
if (!rel_183_SubtypeOf->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_186_ExceptionType_op_ctxt,rel_186_ExceptionType->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({141});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,141});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_186_ExceptionType->insert(tuple,READ_OP_CONTEXT(rel_186_ExceptionType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1935:1-1938:28];ExceptionType(?type) :-     isType('java.lang.Throwable'),    SubtypeOf(?type,'java.lang.Throwable').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1935:1-1938:28];ExceptionType(?type) :- \n   isType(\"java.lang.Throwable\"),\n   SubtypeOf(?type,\"java.lang.Throwable\").;)" <<  rel_186_ExceptionType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1934:1-0:0];)" <<  rel_186_ExceptionType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2141:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionTypeToHeap(?heap,?heaptype) :- 
   AssignHeapAllocation(?heap,_,_),
   HeapAllocation_Type(?heap,?heaptype),
   ExceptionType(?heaptype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2142:1-2145:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2142:1-2145:28];ExceptionTypeToHeap(?heap,?heaptype) :- \n   AssignHeapAllocation(?heap,_,_),\n   HeapAllocation_Type(?heap,?heaptype),\n   ExceptionType(?heaptype).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()&&!rel_186_ExceptionType->empty()&&!rel_113_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_186_ExceptionType_op_ctxt,rel_186_ExceptionType->createContext());
CREATE_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt,rel_187_ExceptionTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_186_ExceptionType->equalRange<0>(key,READ_OP_CONTEXT(rel_186_ExceptionType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_187_ExceptionTypeToHeap->insert(tuple,READ_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2142:1-2145:28];ExceptionTypeToHeap(?heap,?heaptype) :-     AssignHeapAllocation(?heap,_,_),    HeapAllocation_Type(?heap,?heaptype),    ExceptionType(?heaptype).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2142:1-2145:28];ExceptionTypeToHeap(?heap,?heaptype) :- \n   AssignHeapAllocation(?heap,_,_),\n   HeapAllocation_Type(?heap,?heaptype),\n   ExceptionType(?heaptype).;)" <<  rel_187_ExceptionTypeToHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2141:1-0:0];)" <<  rel_187_ExceptionTypeToHeap->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_186_ExceptionType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2146:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :- 
   ExceptionTypeToHeap(_,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2147:1-2149:79])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2147:1-2149:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :- \n   ExceptionTypeToHeap(_,?type).;)",profile);
if (!rel_187_ExceptionTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_187_ExceptionTypeToHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_188_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt,rel_188_ExceptionHeapTypeRepresentativeOrdinal->createContext());
CREATE_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt,rel_187_ExceptionTypeToHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_187_ExceptionTypeToHeap->equalRange<1>(key,READ_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_188_ExceptionHeapTypeRepresentativeOrdinal->insert(tuple,READ_OP_CONTEXT(rel_188_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2147:1-2149:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :-     ExceptionTypeToHeap(_,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2147:1-2149:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :- \n   ExceptionTypeToHeap(_,?type).;)" <<  rel_188_ExceptionHeapTypeRepresentativeOrdinal->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2146:1-0:0];)" <<  rel_188_ExceptionHeapTypeRepresentativeOrdinal->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SupertypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1088:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SupertypeOf(?s,?t) :- 
   SubtypeOf(?t,?s).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1155:1-1156:23])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SupertypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1155:1-1156:23];SupertypeOf(?s,?t) :- \n   SubtypeOf(?t,?s).;)",profile);
if (!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_183_SubtypeOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_189_SupertypeOf->insert(tuple,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SupertypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1155:1-1156:23];SupertypeOf(?s,?t) :-     SubtypeOf(?t,?s).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SupertypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1155:1-1156:23];SupertypeOf(?s,?t) :- \n   SubtypeOf(?t,?s).;)" <<  rel_189_SupertypeOf->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SupertypeOf;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1088:1-0:0];)" <<  rel_189_SupertypeOf->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1257:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AppMethodOverridesAndroidLibraryMethod(?meth) :- 
   Method_DeclaringType(?meth,?type),
   AndroidApplicationClass(?type),
   Method_Descriptor(?meth,?descriptor),
   Method_SimpleName(?meth,?simplename),
   SupertypeOf(?libraryType,?type),
   AndroidLibraryType(?libraryType),
   MethodLookup(?simplename,?descriptor,?libraryType,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1478:1-1485:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1478:1-1485:59];AppMethodOverridesAndroidLibraryMethod(?meth) :- \n   Method_DeclaringType(?meth,?type),\n   AndroidApplicationClass(?type),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   SupertypeOf(?libraryType,?type),\n   AndroidLibraryType(?libraryType),\n   MethodLookup(?simplename,?descriptor,?libraryType,_).;)",profile);
if (!rel_171_AndroidApplicationClass->empty()&&!rel_170_AndroidLibraryType->empty()&&!rel_153_MethodLookup->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_189_SupertypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_74_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_171_AndroidApplicationClass_op_ctxt,rel_171_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt,rel_170_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_190_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_171_AndroidApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_171_AndroidApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_75_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_189_SupertypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,1> key({env4[0]});
auto range = rel_170_AndroidLibraryType->equalRange<0>(key,READ_OP_CONTEXT(rel_170_AndroidLibraryType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({env3[1],env2[1],env4[0],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_190_AppMethodOverridesAndroidLibraryMethod->insert(tuple,READ_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1478:1-1485:59];AppMethodOverridesAndroidLibraryMethod(?meth) :-     Method_DeclaringType(?meth,?type),    AndroidApplicationClass(?type),    Method_Descriptor(?meth,?descriptor),    Method_SimpleName(?meth,?simplename),    SupertypeOf(?libraryType,?type),    AndroidLibraryType(?libraryType),    MethodLookup(?simplename,?descriptor,?libraryType,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1478:1-1485:59];AppMethodOverridesAndroidLibraryMethod(?meth) :- \n   Method_DeclaringType(?meth,?type),\n   AndroidApplicationClass(?type),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   SupertypeOf(?libraryType,?type),\n   AndroidLibraryType(?libraryType),\n   MethodLookup(?simplename,?descriptor,?libraryType,_).;)" <<  rel_190_AppMethodOverridesAndroidLibraryMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1257:1-0:0];)" <<  rel_190_AppMethodOverridesAndroidLibraryMethod->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_170_AndroidLibraryType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1258:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OverridingProtectedMethodOfComponent(?meth) :- 
   ProtectedMethodOfComponent(?meth),
   AppMethodOverridesAndroidLibraryMethod(?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1486:1-1488:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1486:1-1488:49];OverridingProtectedMethodOfComponent(?meth) :- \n   ProtectedMethodOfComponent(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_190_AppMethodOverridesAndroidLibraryMethod->empty()&&!rel_162_ProtectedMethodOfComponent->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_162_ProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_190_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_191_OverridingProtectedMethodOfComponent_op_ctxt,rel_191_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_162_ProtectedMethodOfComponent_op_ctxt,rel_162_ProtectedMethodOfComponent->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_190_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_191_OverridingProtectedMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_191_OverridingProtectedMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1486:1-1488:49];OverridingProtectedMethodOfComponent(?meth) :-     ProtectedMethodOfComponent(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1486:1-1488:49];OverridingProtectedMethodOfComponent(?meth) :- \n   ProtectedMethodOfComponent(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_191_OverridingProtectedMethodOfComponent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1258:1-0:0];)" <<  rel_191_OverridingProtectedMethodOfComponent->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_162_ProtectedMethodOfComponent->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1252:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ListenerType(?type) :- 
   AndroidLibraryListenerType(?listenerType),
   SubtypeOf(?type,?listenerType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1455:1-1457:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1455:1-1457:35];ListenerType(?type) :- \n   AndroidLibraryListenerType(?listenerType),\n   SubtypeOf(?type,?listenerType).;)",profile);
if (!rel_172_AndroidLibraryListenerType->empty()&&!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_172_AndroidLibraryListenerType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_172_AndroidLibraryListenerType_op_ctxt,rel_172_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_192_ListenerType_op_ctxt,rel_192_ListenerType->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_192_ListenerType->insert(tuple,READ_OP_CONTEXT(rel_192_ListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1455:1-1457:35];ListenerType(?type) :-     AndroidLibraryListenerType(?listenerType),    SubtypeOf(?type,?listenerType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1455:1-1457:35];ListenerType(?type) :- \n   AndroidLibraryListenerType(?listenerType),\n   SubtypeOf(?type,?listenerType).;)" <<  rel_192_ListenerType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1252:1-0:0];)" <<  rel_192_ListenerType->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_172_AndroidLibraryListenerType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1253:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AndroidApplicationListenerClass(?class) :- 
   AndroidApplicationClass(?class),
   ListenerType(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1458:1-1460:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1458:1-1460:24];AndroidApplicationListenerClass(?class) :- \n   AndroidApplicationClass(?class),\n   ListenerType(?class).;)",profile);
if (!rel_171_AndroidApplicationClass->empty()&&!rel_192_ListenerType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_171_AndroidApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_171_AndroidApplicationClass_op_ctxt,rel_171_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_193_AndroidApplicationListenerClass_op_ctxt,rel_193_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_192_ListenerType_op_ctxt,rel_192_ListenerType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_192_ListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_192_ListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_193_AndroidApplicationListenerClass->insert(tuple,READ_OP_CONTEXT(rel_193_AndroidApplicationListenerClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1458:1-1460:24];AndroidApplicationListenerClass(?class) :-     AndroidApplicationClass(?class),    ListenerType(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1458:1-1460:24];AndroidApplicationListenerClass(?class) :- \n   AndroidApplicationClass(?class),\n   ListenerType(?class).;)" <<  rel_193_AndroidApplicationListenerClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1253:1-0:0];)" <<  rel_193_AndroidApplicationListenerClass->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_171_AndroidApplicationClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_192_ListenerType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2125:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StringFactoryType("java.lang.StringBuffer").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37];StringFactoryType(\"java.lang.StringBuffer\").;)",profile);
rel_194_StringFactoryType->insert(30);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37];StringFactoryType(\"java.lang.StringBuffer\").;)" <<  rel_194_StringFactoryType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StringFactoryType("java.lang.StringBuilder").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37];StringFactoryType(\"java.lang.StringBuilder\").;)",profile);
rel_194_StringFactoryType->insert(32);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2127:1-2129:37];StringFactoryType(\"java.lang.StringBuilder\").;)" <<  rel_194_StringFactoryType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StringFactoryType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2125:1-0:0];)" <<  rel_194_StringFactoryType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StringFactoryHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2126:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StringFactoryHeap(?heap) :- 
   HeapAllocation_Type(?heap,?heaptype),
   StringFactoryType(?heaptype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2130:1-2132:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2130:1-2132:32];StringFactoryHeap(?heap) :- \n   HeapAllocation_Type(?heap,?heaptype),\n   StringFactoryType(?heaptype).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()&&!rel_194_StringFactoryType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_113_HeapAllocation_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_195_StringFactoryHeap_op_ctxt,rel_195_StringFactoryHeap->createContext());
CREATE_OP_CONTEXT(rel_194_StringFactoryType_op_ctxt,rel_194_StringFactoryType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_194_StringFactoryType->equalRange<0>(key,READ_OP_CONTEXT(rel_194_StringFactoryType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_195_StringFactoryHeap->insert(tuple,READ_OP_CONTEXT(rel_195_StringFactoryHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StringFactoryHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2130:1-2132:32];StringFactoryHeap(?heap) :-     HeapAllocation_Type(?heap,?heaptype),    StringFactoryType(?heaptype).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StringFactoryHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2130:1-2132:32];StringFactoryHeap(?heap) :- \n   HeapAllocation_Type(?heap,?heaptype),\n   StringFactoryType(?heaptype).;)" <<  rel_195_StringFactoryHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StringFactoryHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2126:1-0:0];)" <<  rel_195_StringFactoryHeap->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_194_StringFactoryType->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EmptyArray.facts"},{"name","_EmptyArray"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_196_EmptyArray);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1947:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodAndTypeToHeap(?heap,?heaptype,?meth) :- 
   AssignHeapAllocation(?heap,_,?meth),
   HeapAllocation_Type(?heap,?heaptype),
   !isStringConstant(?heap),
   !StringFactoryHeap(?heap),
   !_EmptyArray(?heap),
   !ObjectMultipleAllocated(?heap),
   !HeapAllocation_Keep(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1948:1-1955:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1948:1-1955:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :- \n   AssignHeapAllocation(?heap,_,?meth),\n   HeapAllocation_Type(?heap,?heaptype),\n   !isStringConstant(?heap),\n   !StringFactoryHeap(?heap),\n   !_EmptyArray(?heap),\n   !ObjectMultipleAllocated(?heap),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()&&!rel_113_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt,rel_197_MethodAndTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_152_ObjectMultipleAllocated_op_ctxt,rel_152_ObjectMultipleAllocated->createContext());
CREATE_OP_CONTEXT(rel_195_StringFactoryHeap_op_ctxt,rel_195_StringFactoryHeap->createContext());
CREATE_OP_CONTEXT(rel_196_EmptyArray_op_ctxt,rel_196_EmptyArray->createContext());
CREATE_OP_CONTEXT(rel_115_isStringConstant_op_ctxt,rel_115_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((((((((!rel_115_isStringConstant->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_115_isStringConstant_op_ctxt))) && (!rel_195_StringFactoryHeap->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_195_StringFactoryHeap_op_ctxt))))) && (!rel_196_EmptyArray->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_196_EmptyArray_op_ctxt))))) && (!rel_152_ObjectMultipleAllocated->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_152_ObjectMultipleAllocated_op_ctxt))))) && (!rel_108_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt))))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env0[2])});
if (!(rel_197_MethodAndTypeToHeap->insert(tuple,READ_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1948:1-1955:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :-     AssignHeapAllocation(?heap,_,?meth),    HeapAllocation_Type(?heap,?heaptype),    !isStringConstant(?heap),    !StringFactoryHeap(?heap),    !_EmptyArray(?heap),    !ObjectMultipleAllocated(?heap),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1948:1-1955:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :- \n   AssignHeapAllocation(?heap,_,?meth),\n   HeapAllocation_Type(?heap,?heaptype),\n   !isStringConstant(?heap),\n   !StringFactoryHeap(?heap),\n   !_EmptyArray(?heap),\n   !ObjectMultipleAllocated(?heap),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_197_MethodAndTypeToHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1947:1-0:0];)" <<  rel_197_MethodAndTypeToHeap->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_152_ObjectMultipleAllocated->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_195_StringFactoryHeap->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1956:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :- 
   MethodAndTypeToHeap(_,?type,?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1957:1-1959:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1957:1-1959:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :- \n   MethodAndTypeToHeap(_,?type,?meth).;)",profile);
if (!rel_197_MethodAndTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_197_MethodAndTypeToHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_198_AllocationsPerMethodAndType_op_ctxt,rel_198_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt,rel_197_MethodAndTypeToHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,3> env1;
RamDomain res = 0;
const ram::Tuple<RamDomain,3> key({0,env0[1],env0[2]});
auto range = rel_197_MethodAndTypeToHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt));
for(const auto& cur : range) {
++res
;}
env1[0] = res;
{
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[0])});
if (!(rel_198_AllocationsPerMethodAndType->insert(tuple,READ_OP_CONTEXT(rel_198_AllocationsPerMethodAndType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1957:1-1959:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :-     MethodAndTypeToHeap(_,?type,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1957:1-1959:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :- \n   MethodAndTypeToHeap(_,?type,?meth).;)" <<  rel_198_AllocationsPerMethodAndType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1956:1-0:0];)" <<  rel_198_AllocationsPerMethodAndType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1932:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodAllocationMergeThreshold(50).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1933:1-1933:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1933:1-1933:36];MethodAllocationMergeThreshold(50).;)",profile);
rel_199_MethodAllocationMergeThreshold->insert(50);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1933:1-1933:36];MethodAllocationMergeThreshold(50).;)" <<  rel_199_MethodAllocationMergeThreshold->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1932:1-0:0];)" <<  rel_199_MethodAllocationMergeThreshold->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1960:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- 
   AllocationsPerMethodAndType(?heaptype,?meth,?n),
   MethodAllocationMergeThreshold(?t),
   ?n > ?t.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1961:1-1964:11])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1961:1-1964:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   MethodAllocationMergeThreshold(?t),\n   ?n > ?t.;)",profile);
if (!rel_198_AllocationsPerMethodAndType->empty()&&!rel_199_MethodAllocationMergeThreshold->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_198_AllocationsPerMethodAndType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_200_AllocationShouldBeMergedPerMethod_op_ctxt,rel_200_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_198_AllocationsPerMethodAndType_op_ctxt,rel_198_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_199_MethodAllocationMergeThreshold_op_ctxt,rel_199_MethodAllocationMergeThreshold->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_199_MethodAllocationMergeThreshold) {
if( ((env0[2]) > (env1[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_200_AllocationShouldBeMergedPerMethod->insert(tuple,READ_OP_CONTEXT(rel_200_AllocationShouldBeMergedPerMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1961:1-1964:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :-     AllocationsPerMethodAndType(?heaptype,?meth,?n),    MethodAllocationMergeThreshold(?t),    ?n > ?t.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1961:1-1964:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   MethodAllocationMergeThreshold(?t),\n   ?n > ?t.;)" <<  rel_200_AllocationShouldBeMergedPerMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- 
   AllocationsPerMethodAndType(?heaptype,?meth,?n),
   Method_DeclaringType(?meth,?class),
   SpecialLibraryClass(?class),
   ?n > 1.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2120:1-2124:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2120:1-2124:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   Method_DeclaringType(?meth,?class),\n   SpecialLibraryClass(?class),\n   ?n > 1.;)",profile);
if (!rel_198_AllocationsPerMethodAndType->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_165_SpecialLibraryClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_198_AllocationsPerMethodAndType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_200_AllocationShouldBeMergedPerMethod_op_ctxt,rel_200_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_198_AllocationsPerMethodAndType_op_ctxt,rel_198_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt,rel_165_SpecialLibraryClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((env0[2]) > (1))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_165_SpecialLibraryClass->equalRange<0>(key,READ_OP_CONTEXT(rel_165_SpecialLibraryClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_200_AllocationShouldBeMergedPerMethod->insert(tuple,READ_OP_CONTEXT(rel_200_AllocationShouldBeMergedPerMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2120:1-2124:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :-     AllocationsPerMethodAndType(?heaptype,?meth,?n),    Method_DeclaringType(?meth,?class),    SpecialLibraryClass(?class),    ?n > 1.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2120:1-2124:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   Method_DeclaringType(?meth,?class),\n   SpecialLibraryClass(?class),\n   ?n > 1.;)" <<  rel_200_AllocationShouldBeMergedPerMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1960:1-0:0];)" <<  rel_200_AllocationShouldBeMergedPerMethod->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_199_MethodAllocationMergeThreshold->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_198_AllocationsPerMethodAndType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_165_SpecialLibraryClass->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1965:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :- 
   AllocationShouldBeMergedPerMethod(?heaptype,?meth),
   MethodAndTypeToHeap(?heap,?heaptype,?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1966:1-1968:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1966:1-1968:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :- \n   AllocationShouldBeMergedPerMethod(?heaptype,?meth),\n   MethodAndTypeToHeap(?heap,?heaptype,?meth).;)",profile);
if (!rel_200_AllocationShouldBeMergedPerMethod->empty()&&!rel_197_MethodAndTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_200_AllocationShouldBeMergedPerMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_200_AllocationShouldBeMergedPerMethod_op_ctxt,rel_200_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt,rel_197_MethodAndTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt,rel_201_MethodAndTypeToMergedHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],env0[1]});
auto range = rel_197_MethodAndTypeToHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_197_MethodAndTypeToHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_201_MethodAndTypeToMergedHeap->insert(tuple,READ_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1966:1-1968:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :-     AllocationShouldBeMergedPerMethod(?heaptype,?meth),    MethodAndTypeToHeap(?heap,?heaptype,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1966:1-1968:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :- \n   AllocationShouldBeMergedPerMethod(?heaptype,?meth),\n   MethodAndTypeToHeap(?heap,?heaptype,?meth).;)" <<  rel_201_MethodAndTypeToMergedHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1965:1-0:0];)" <<  rel_201_MethodAndTypeToMergedHeap->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_197_MethodAndTypeToHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_200_AllocationShouldBeMergedPerMethod->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1969:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :- 
   MethodAndTypeToMergedHeap(_,?type,?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1971:1-1973:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1971:1-1973:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :- \n   MethodAndTypeToMergedHeap(_,?type,?meth).;)",profile);
if (!rel_201_MethodAndTypeToMergedHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_201_MethodAndTypeToMergedHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt,rel_201_MethodAndTypeToMergedHeap->createContext());
CREATE_OP_CONTEXT(rel_202_MinHeapOrdinalPerMethodAndType_op_ctxt,rel_202_MinHeapOrdinalPerMethodAndType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,3> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,3> key({0,env0[1],env0[2]});
auto range = rel_201_MethodAndTypeToMergedHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_202_MinHeapOrdinalPerMethodAndType->insert(tuple,READ_OP_CONTEXT(rel_202_MinHeapOrdinalPerMethodAndType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1971:1-1973:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :-     MethodAndTypeToMergedHeap(_,?type,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1971:1-1973:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :- \n   MethodAndTypeToMergedHeap(_,?type,?meth).;)" <<  rel_202_MinHeapOrdinalPerMethodAndType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1969:1-0:0];)" <<  rel_202_MinHeapOrdinalPerMethodAndType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1970:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :- 
   isHeapAllocation(?representativeHeap),
   MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),
    _tmp_0 = ord(?representativeHeap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1974:1-1977:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1974:1-1977:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :- \n   isHeapAllocation(?representativeHeap),\n   MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),\n    _tmp_0 = ord(?representativeHeap).;)",profile);
if (!rel_202_MinHeapOrdinalPerMethodAndType->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_112_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_203_MethodAndTypeToRepresentative_op_ctxt,rel_203_MethodAndTypeToRepresentative->createContext());
CREATE_OP_CONTEXT(rel_202_MinHeapOrdinalPerMethodAndType_op_ctxt,rel_202_MinHeapOrdinalPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_202_MinHeapOrdinalPerMethodAndType->equalRange<0>(key,READ_OP_CONTEXT(rel_202_MinHeapOrdinalPerMethodAndType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_203_MethodAndTypeToRepresentative->insert(tuple,READ_OP_CONTEXT(rel_203_MethodAndTypeToRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1974:1-1977:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :-     isHeapAllocation(?representativeHeap),    MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),     _tmp_0 = ord(?representativeHeap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1974:1-1977:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :- \n   isHeapAllocation(?representativeHeap),\n   MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),\n    _tmp_0 = ord(?representativeHeap).;)" <<  rel_203_MethodAndTypeToRepresentative->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1970:1-0:0];)" <<  rel_203_MethodAndTypeToRepresentative->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_202_MinHeapOrdinalPerMethodAndType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1844:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapRepresentative("<<string-constant>>",?heap) :- 
   isStringConstant(?heap),
   isHeapAllocation("<<string-constant>>"),
   !HeapAllocation_Keep(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1876:1-1880:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1876:1-1880:31];HeapRepresentative(\"<<string-constant>>\",?heap) :- \n   isStringConstant(?heap),\n   isHeapAllocation(\"<<string-constant>>\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_112_isHeapAllocation->empty()&&!rel_115_isStringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_115_isStringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_115_isStringConstant_op_ctxt,rel_115_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_108_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt))) {
const Tuple<RamDomain,1> key({27});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(27),(RamDomain)(env0[0])});
if (!(rel_204_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1876:1-1880:31];HeapRepresentative('<<string-constant>>',?heap) :-     isStringConstant(?heap),    isHeapAllocation('<<string-constant>>'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1876:1-1880:31];HeapRepresentative(\"<<string-constant>>\",?heap) :- \n   isStringConstant(?heap),\n   isHeapAllocation(\"<<string-constant>>\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_204_HeapRepresentative->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapRepresentative(?representativeHeap,?heap) :- 
   MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),
   MethodAndTypeToMergedHeap(?heap,?type,?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1978:1-1980:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1978:1-1980:50];HeapRepresentative(?representativeHeap,?heap) :- \n   MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),\n   MethodAndTypeToMergedHeap(?heap,?type,?meth).;)",profile);
if (!rel_201_MethodAndTypeToMergedHeap->empty()&&!rel_203_MethodAndTypeToRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_203_MethodAndTypeToRepresentative->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt,rel_201_MethodAndTypeToMergedHeap->createContext());
CREATE_OP_CONTEXT(rel_203_MethodAndTypeToRepresentative_op_ctxt,rel_203_MethodAndTypeToRepresentative->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],env0[1]});
auto range = rel_201_MethodAndTypeToMergedHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_201_MethodAndTypeToMergedHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env1[0])});
if (!(rel_204_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1978:1-1980:50];HeapRepresentative(?representativeHeap,?heap) :-     MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),    MethodAndTypeToMergedHeap(?heap,?type,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1978:1-1980:50];HeapRepresentative(?representativeHeap,?heap) :- \n   MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),\n   MethodAndTypeToMergedHeap(?heap,?type,?meth).;)" <<  rel_204_HeapRepresentative->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapRepresentative("<<string-buffer>>",?heap) :- 
   HeapAllocation_Type(?heap,"java.lang.StringBuffer"),
   !HeapAllocation_Keep(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2135:1-2137:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2135:1-2137:31];HeapRepresentative(\"<<string-buffer>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuffer\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({0,30});
auto range = rel_113_HeapAllocation_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( !rel_108_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(29),(RamDomain)(env0[0])});
if (!(rel_204_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2135:1-2137:31];HeapRepresentative('<<string-buffer>>',?heap) :-     HeapAllocation_Type(?heap,'java.lang.StringBuffer'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2135:1-2137:31];HeapRepresentative(\"<<string-buffer>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuffer\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_204_HeapRepresentative->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapRepresentative("<<string-builder>>",?heap) :- 
   HeapAllocation_Type(?heap,"java.lang.StringBuilder"),
   !HeapAllocation_Keep(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2138:1-2140:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2138:1-2140:31];HeapRepresentative(\"<<string-builder>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuilder\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({0,32});
auto range = rel_113_HeapAllocation_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( !rel_108_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(31),(RamDomain)(env0[0])});
if (!(rel_204_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2138:1-2140:31];HeapRepresentative('<<string-builder>>',?heap) :-     HeapAllocation_Type(?heap,'java.lang.StringBuilder'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2138:1-2140:31];HeapRepresentative(\"<<string-builder>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuilder\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_204_HeapRepresentative->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapRepresentative(?representativeHeap,?heap) :- 
   ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),
   ExceptionTypeToHeap(?heap,?heaptype),
   isHeapAllocation(?representativeHeap),
    _tmp_0 = ord(?representativeHeap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2150:1-2154:41])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2150:1-2154:41];HeapRepresentative(?representativeHeap,?heap) :- \n   ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),\n   ExceptionTypeToHeap(?heap,?heaptype),\n   isHeapAllocation(?representativeHeap),\n    _tmp_0 = ord(?representativeHeap).;)",profile);
if (!rel_188_ExceptionHeapTypeRepresentativeOrdinal->empty()&&!rel_187_ExceptionTypeToHeap->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_188_ExceptionHeapTypeRepresentativeOrdinal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_188_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt,rel_188_ExceptionHeapTypeRepresentativeOrdinal->createContext());
CREATE_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt,rel_187_ExceptionTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_187_ExceptionTypeToHeap->equalRange<1>(key,READ_OP_CONTEXT(rel_187_ExceptionTypeToHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_112_isHeapAllocation) {
if( ((env0[1]) == (env2[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0])});
if (!(rel_204_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2150:1-2154:41];HeapRepresentative(?representativeHeap,?heap) :-     ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),    ExceptionTypeToHeap(?heap,?heaptype),    isHeapAllocation(?representativeHeap),     _tmp_0 = ord(?representativeHeap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2150:1-2154:41];HeapRepresentative(?representativeHeap,?heap) :- \n   ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),\n   ExceptionTypeToHeap(?heap,?heaptype),\n   isHeapAllocation(?representativeHeap),\n    _tmp_0 = ord(?representativeHeap).;)" <<  rel_204_HeapRepresentative->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapRepresentative;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1844:1-0:0];)" <<  rel_204_HeapRepresentative->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_201_MethodAndTypeToMergedHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_203_MethodAndTypeToRepresentative->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_187_ExceptionTypeToHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_188_ExceptionHeapTypeRepresentativeOrdinal->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapIsMergedString;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1845:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapIsMergedString(?heap) :- 
   HeapRepresentative("<<string-constant>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1846:1-1847:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedString;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1846:1-1847:52];HeapIsMergedString(?heap) :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_205_HeapIsMergedString_op_ctxt,rel_205_HeapIsMergedString->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({27,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_205_HeapIsMergedString->insert(tuple,READ_OP_CONTEXT(rel_205_HeapIsMergedString_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapIsMergedString;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1846:1-1847:52];HeapIsMergedString(?heap) :-     HeapRepresentative('<<string-constant>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapIsMergedString;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1846:1-1847:52];HeapIsMergedString(?heap) :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)" <<  rel_205_HeapIsMergedString->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapIsMergedString;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1845:1-0:0];)" <<  rel_205_HeapIsMergedString->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1851:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapIsMergedStringFactory(?heap) :- 
   HeapRepresentative("<<string-buffer>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt,rel_206_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({29,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_206_HeapIsMergedStringFactory->insert(tuple,READ_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :-     HeapRepresentative('<<string-buffer>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)" <<  rel_206_HeapIsMergedStringFactory->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapIsMergedStringFactory(?heap) :- 
   HeapRepresentative("<<string-builder>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt,rel_206_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({31,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_206_HeapIsMergedStringFactory->insert(tuple,READ_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :-     HeapRepresentative('<<string-builder>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1852:1-1854:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)" <<  rel_206_HeapIsMergedStringFactory->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1851:1-0:0];)" <<  rel_206_HeapIsMergedStringFactory->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1860:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(RepresentativesToPickFrom(?heapRepr,?heap) :- 
   HeapRepresentative(?heapRepr,?heap),
   !HeapIsMergedString(?heap),
   !HeapIsMergedStringFactory(?heap),
   !HeapAllocation_Keep(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1861:1-1865:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1861:1-1865:31];RepresentativesToPickFrom(?heapRepr,?heap) :- \n   HeapRepresentative(?heapRepr,?heap),\n   !HeapIsMergedString(?heap),\n   !HeapIsMergedStringFactory(?heap),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_204_HeapRepresentative->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt,rel_108_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_205_HeapIsMergedString_op_ctxt,rel_205_HeapIsMergedString->createContext());
CREATE_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt,rel_206_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_207_RepresentativesToPickFrom_op_ctxt,rel_207_RepresentativesToPickFrom->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((((!rel_205_HeapIsMergedString->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_205_HeapIsMergedString_op_ctxt))) && (!rel_206_HeapIsMergedStringFactory->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_206_HeapIsMergedStringFactory_op_ctxt))))) && (!rel_108_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_108_HeapAllocation_Keep_op_ctxt))))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_207_RepresentativesToPickFrom->insert(tuple,READ_OP_CONTEXT(rel_207_RepresentativesToPickFrom_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1861:1-1865:31];RepresentativesToPickFrom(?heapRepr,?heap) :-     HeapRepresentative(?heapRepr,?heap),    !HeapIsMergedString(?heap),    !HeapIsMergedStringFactory(?heap),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1861:1-1865:31];RepresentativesToPickFrom(?heapRepr,?heap) :- \n   HeapRepresentative(?heapRepr,?heap),\n   !HeapIsMergedString(?heap),\n   !HeapIsMergedStringFactory(?heap),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_207_RepresentativesToPickFrom->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1860:1-0:0];)" <<  rel_207_RepresentativesToPickFrom->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_108_HeapAllocation_Keep->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_205_HeapIsMergedString->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_206_HeapIsMergedStringFactory->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1866:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :- 
   RepresentativesToPickFrom(_,?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1867:1-1869:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1867:1-1869:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :- \n   RepresentativesToPickFrom(_,?heap).;)",profile);
if (!rel_207_RepresentativesToPickFrom->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_207_RepresentativesToPickFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_208_MinRepresentativeHeapToPickFromOrdinal_op_ctxt,rel_208_MinRepresentativeHeapToPickFromOrdinal->createContext());
CREATE_OP_CONTEXT(rel_207_RepresentativesToPickFrom_op_ctxt,rel_207_RepresentativesToPickFrom->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_207_RepresentativesToPickFrom->equalRange<1>(key,READ_OP_CONTEXT(rel_207_RepresentativesToPickFrom_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_208_MinRepresentativeHeapToPickFromOrdinal->insert(tuple,READ_OP_CONTEXT(rel_208_MinRepresentativeHeapToPickFromOrdinal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1867:1-1869:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :-     RepresentativesToPickFrom(_,?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1867:1-1869:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :- \n   RepresentativesToPickFrom(_,?heap).;)" <<  rel_208_MinRepresentativeHeapToPickFromOrdinal->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1866:1-0:0];)" <<  rel_208_MinRepresentativeHeapToPickFromOrdinal->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_207_RepresentativesToPickFrom->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1832:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_Merge(?heap,"<<string-constant>>") :- 
   HeapRepresentative("<<string-constant>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1848:1-1850:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1848:1-1850:40];HeapAllocation_Merge(?heap,\"<<string-constant>>\") :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({27,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(27)});
if (!(rel_209_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1848:1-1850:40];HeapAllocation_Merge(?heap,'<<string-constant>>') :-     HeapRepresentative('<<string-constant>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1848:1-1850:40];HeapAllocation_Merge(?heap,\"<<string-constant>>\") :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)" <<  rel_209_HeapAllocation_Merge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Merge(?heap,"<<string-buffer>>") :- 
   HeapRepresentative("<<string-buffer>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,\"<<string-buffer>>\") :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({29,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(29)});
if (!(rel_209_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,'<<string-buffer>>') :-     HeapRepresentative('<<string-buffer>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,\"<<string-buffer>>\") :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)" <<  rel_209_HeapAllocation_Merge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Merge(?heap,"<<string-builder>>") :- 
   HeapRepresentative("<<string-builder>>",?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,\"<<string-builder>>\") :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)",profile);
if (!rel_204_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({31,0});
auto range = rel_204_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(31)});
if (!(rel_209_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,'<<string-builder>>') :-     HeapRepresentative('<<string-builder>>',?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1855:1-1859:42];HeapAllocation_Merge(?heap,\"<<string-builder>>\") :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)" <<  rel_209_HeapAllocation_Merge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Merge(?heap,?mergeHeap) :- 
   isHeapAllocation(?mergeHeap),
   MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),
    _tmp_0 = ord(?mergeHeap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1870:1-1873:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1870:1-1873:66];HeapAllocation_Merge(?heap,?mergeHeap) :- \n   isHeapAllocation(?mergeHeap),\n   MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),\n    _tmp_0 = ord(?mergeHeap).;)",profile);
if (!rel_208_MinRepresentativeHeapToPickFromOrdinal->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_112_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_208_MinRepresentativeHeapToPickFromOrdinal_op_ctxt,rel_208_MinRepresentativeHeapToPickFromOrdinal->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_208_MinRepresentativeHeapToPickFromOrdinal->equalRange<0>(key,READ_OP_CONTEXT(rel_208_MinRepresentativeHeapToPickFromOrdinal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_209_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1870:1-1873:66];HeapAllocation_Merge(?heap,?mergeHeap) :-     isHeapAllocation(?mergeHeap),    MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),     _tmp_0 = ord(?mergeHeap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1870:1-1873:66];HeapAllocation_Merge(?heap,?mergeHeap) :- \n   isHeapAllocation(?mergeHeap),\n   MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),\n    _tmp_0 = ord(?mergeHeap).;)" <<  rel_209_HeapAllocation_Merge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1832:1-0:0];)" <<  rel_209_HeapAllocation_Merge->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_208_MinRepresentativeHeapToPickFromOrdinal->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1831:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_ContextInsensitive(?heap) :- 
   isStringConstant(?heap),
   !HeapRepresentative(_,?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1881:1-1883:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1881:1-1883:33];HeapAllocation_ContextInsensitive(?heap) :- \n   isStringConstant(?heap),\n   !HeapRepresentative(_,?heap).;)",profile);
if (!rel_115_isStringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_115_isStringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_115_isStringConstant_op_ctxt,rel_115_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_204_HeapRepresentative->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_210_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1881:1-1883:33];HeapAllocation_ContextInsensitive(?heap) :-     isStringConstant(?heap),    !HeapRepresentative(_,?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1881:1-1883:33];HeapAllocation_ContextInsensitive(?heap) :- \n   isStringConstant(?heap),\n   !HeapRepresentative(_,?heap).;)" <<  rel_210_HeapAllocation_ContextInsensitive->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_ContextInsensitive(?heap) :- 
   isClassHeap(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1930:1-1931:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1930:1-1931:22];HeapAllocation_ContextInsensitive(?heap) :- \n   isClassHeap(?heap).;)",profile);
if (!rel_106_isClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_106_isClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_106_isClassHeap_op_ctxt,rel_106_isClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_210_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1930:1-1931:22];HeapAllocation_ContextInsensitive(?heap) :-     isClassHeap(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1930:1-1931:22];HeapAllocation_ContextInsensitive(?heap) :- \n   isClassHeap(?heap).;)" <<  rel_210_HeapAllocation_ContextInsensitive->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_ContextInsensitive(?heap) :- 
   SpecialLibraryObject(?heap),
   !HeapRepresentative(_,?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2117:1-2119:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2117:1-2119:33];HeapAllocation_ContextInsensitive(?heap) :- \n   SpecialLibraryObject(?heap),\n   !HeapRepresentative(_,?heap).;)",profile);
if (!rel_167_SpecialLibraryObject->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_167_SpecialLibraryObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt,rel_204_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_167_SpecialLibraryObject_op_ctxt,rel_167_SpecialLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_204_HeapRepresentative->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_204_HeapRepresentative_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_210_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2117:1-2119:33];HeapAllocation_ContextInsensitive(?heap) :-     SpecialLibraryObject(?heap),    !HeapRepresentative(_,?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2117:1-2119:33];HeapAllocation_ContextInsensitive(?heap) :- \n   SpecialLibraryObject(?heap),\n   !HeapRepresentative(_,?heap).;)" <<  rel_210_HeapAllocation_ContextInsensitive->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_ContextInsensitive(?heap) :- 
   HeapAllocation_Type(?heap,?type),
   isArrayType(?type),
   _ComponentType(?type,?componentType),
   isPrimitiveType(?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2155:1-2159:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2155:1-2159:35];HeapAllocation_ContextInsensitive(?heap) :- \n   HeapAllocation_Type(?heap,?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   isPrimitiveType(?componentType).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()&&!rel_125_ComponentType->empty()&&!rel_126_isArrayType->empty()&&!rel_182_isPrimitiveType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_113_HeapAllocation_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_182_isPrimitiveType_op_ctxt,rel_182_isPrimitiveType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_126_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_126_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_125_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_182_isPrimitiveType->equalRange<0>(key,READ_OP_CONTEXT(rel_182_isPrimitiveType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_210_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2155:1-2159:35];HeapAllocation_ContextInsensitive(?heap) :-     HeapAllocation_Type(?heap,?type),    isArrayType(?type),    _ComponentType(?type,?componentType),    isPrimitiveType(?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2155:1-2159:35];HeapAllocation_ContextInsensitive(?heap) :- \n   HeapAllocation_Type(?heap,?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   isPrimitiveType(?componentType).;)" <<  rel_210_HeapAllocation_ContextInsensitive->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1831:1-0:0];)" <<  rel_210_HeapAllocation_ContextInsensitive->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_182_isPrimitiveType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_115_isStringConstant->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_106_isClassHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_204_HeapRepresentative->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_167_SpecialLibraryObject->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1362:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :- 
   AssignHeapAllocation(?heap,?var,?inmethod),
   HeapAllocation_Merge(?heap,?mergeHeap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1837:1-1839:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1837:1-1839:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_Merge(?heap,?mergeHeap).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()&&!rel_209_HeapAllocation_Merge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_211_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_209_HeapAllocation_Merge->equalRange<0>(key,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_211_AssignContextInsensitiveHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1837:1-1839:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    HeapAllocation_Merge(?heap,?mergeHeap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1837:1-1839:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_Merge(?heap,?mergeHeap).;)" <<  rel_211_AssignContextInsensitiveHeapAllocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :- 
   AssignHeapAllocation(?heap,?var,?inmethod),
   HeapAllocation_ContextInsensitive(?heap),
   !HeapAllocation_Merge(?heap,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1840:1-1843:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1840:1-1843:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_ContextInsensitive(?heap),\n   !HeapAllocation_Merge(?heap,_).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()&&!rel_210_HeapAllocation_ContextInsensitive->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_211_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_209_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_210_HeapAllocation_ContextInsensitive->equalRange<0>(key,READ_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_211_AssignContextInsensitiveHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1840:1-1843:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    HeapAllocation_ContextInsensitive(?heap),    !HeapAllocation_Merge(?heap,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1840:1-1843:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_ContextInsensitive(?heap),\n   !HeapAllocation_Merge(?heap,_).;)" <<  rel_211_AssignContextInsensitiveHeapAllocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1362:1-0:0];)" <<  rel_211_AssignContextInsensitiveHeapAllocation->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1826:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HeapAllocation_Special(?heap) :- 
   HeapAllocation_ContextInsensitive(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1827:1-1828:44])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1827:1-1828:44];HeapAllocation_Special(?heap) :- \n   HeapAllocation_ContextInsensitive(?heap).;)",profile);
if (!rel_210_HeapAllocation_ContextInsensitive->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_210_HeapAllocation_ContextInsensitive->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_210_HeapAllocation_ContextInsensitive_op_ctxt,rel_210_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt,rel_212_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_212_HeapAllocation_Special->insert(tuple,READ_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1827:1-1828:44];HeapAllocation_Special(?heap) :-     HeapAllocation_ContextInsensitive(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1827:1-1828:44];HeapAllocation_Special(?heap) :- \n   HeapAllocation_ContextInsensitive(?heap).;)" <<  rel_212_HeapAllocation_Special->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(HeapAllocation_Special(?heap) :- 
   HeapAllocation_Merge(?heap,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1829:1-1830:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1829:1-1830:34];HeapAllocation_Special(?heap) :- \n   HeapAllocation_Merge(?heap,_).;)",profile);
if (!rel_209_HeapAllocation_Merge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_209_HeapAllocation_Merge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt,rel_212_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_212_HeapAllocation_Special->insert(tuple,READ_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1829:1-1830:34];HeapAllocation_Special(?heap) :-     HeapAllocation_Merge(?heap,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1829:1-1830:34];HeapAllocation_Special(?heap) :- \n   HeapAllocation_Merge(?heap,_).;)" <<  rel_212_HeapAllocation_Special->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1826:1-0:0];)" <<  rel_212_HeapAllocation_Special->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_210_HeapAllocation_ContextInsensitive->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1360:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignNormalHeapAllocation(?heap,?var,?inmethod) :- 
   AssignHeapAllocation(?heap,?var,?inmethod),
   !HeapAllocation_Special(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1834:1-1836:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1834:1-1836:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   !HeapAllocation_Special(?heap).;)",profile);
if (!rel_150_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_150_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt,rel_212_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_212_HeapAllocation_Special->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_212_HeapAllocation_Special_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_213_AssignNormalHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1834:1-1836:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    !HeapAllocation_Special(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1834:1-1836:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   !HeapAllocation_Special(?heap).;)" <<  rel_213_AssignNormalHeapAllocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1360:1-0:0];)" <<  rel_213_AssignNormalHeapAllocation->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_212_HeapAllocation_Special->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field.facts"},{"name","_Field"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_214_Field);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Field_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [43:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Field_DeclaringType(?signature,?declaringType) :- 
   _Field(?signature,?declaringType,?simplename,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Field_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)",profile);
if (!rel_214_Field->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_Field->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_214_Field_op_ctxt,rel_214_Field->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_215_Field_DeclaringType->insert(tuple,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Field_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :-     _Field(?signature,?declaringType,?simplename,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Field_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)" <<  rel_215_Field_DeclaringType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Field_DeclaringType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [43:1-0:0];)" <<  rel_215_Field_DeclaringType->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignReturnValue.facts"},{"name","_AssignReturnValue"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_216_AssignReturnValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [211:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignReturnValue(?invocation,?to) :- 
   _AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_216_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_216_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_216_AssignReturnValue_op_ctxt,rel_216_AssignReturnValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignReturnValue(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>")),?return) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   ReturnVar(?return,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];AssignReturnValue(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?return) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];AssignReturnValue(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),?return) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];AssignReturnValue(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?return) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),?return) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>")),?return) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),?return) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignReturnValue(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>")),?return) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_217_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_217_AssignReturnValue->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignReturnValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [211:1-0:0];)" <<  rel_217_AssignReturnValue->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Tamiflex.facts"},{"name","_Tamiflex_ReflectionData"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 0}), symTable, ioDirectives, 0)->readAll(*rel_218_Tamiflex_ReflectionData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1045:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("Class","java.lang.Class").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1046:1-1046:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1046:1-1046:52];_Tamiflex_ToDoopFormat(\"Class\",\"java.lang.Class\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(45,1);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1046:1-1046:52];_Tamiflex_ToDoopFormat(\"Class\",\"java.lang.Class\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("Constructor","java.lang.reflect.Constructor").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1047:1-1047:72])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1047:1-1047:72];_Tamiflex_ToDoopFormat(\"Constructor\",\"java.lang.reflect.Constructor\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(46,47);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1047:1-1047:72];_Tamiflex_ToDoopFormat(\"Constructor\",\"java.lang.reflect.Constructor\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("Field","java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1048:1-1048:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1048:1-1048:60];_Tamiflex_ToDoopFormat(\"Field\",\"java.lang.reflect.Field\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(48,49);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1048:1-1048:60];_Tamiflex_ToDoopFormat(\"Field\",\"java.lang.reflect.Field\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("Method","java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1049:1-1049:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1049:1-1049:62];_Tamiflex_ToDoopFormat(\"Method\",\"java.lang.reflect.Method\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(50,51);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1049:1-1049:62];_Tamiflex_ToDoopFormat(\"Method\",\"java.lang.reflect.Method\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("Array","java.lang.reflect.Array").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1050:1-1050:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1050:1-1050:60];_Tamiflex_ToDoopFormat(\"Array\",\"java.lang.reflect.Array\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(52,53);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1050:1-1050:60];_Tamiflex_ToDoopFormat(\"Array\",\"java.lang.reflect.Array\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("get*","get").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1051:1-1051:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1051:1-1051:39];_Tamiflex_ToDoopFormat(\"get*\",\"get\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(54,55);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1051:1-1051:39];_Tamiflex_ToDoopFormat(\"get*\",\"get\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(_Tamiflex_ToDoopFormat("set*","set").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1052:1-1052:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1052:1-1052:39];_Tamiflex_ToDoopFormat(\"set*\",\"set\").;)",profile);
rel_219_Tamiflex_ToDoopFormat->insert(56,57);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1052:1-1052:39];_Tamiflex_ToDoopFormat(\"set*\",\"set\").;)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1045:1-0:0];)" <<  rel_219_Tamiflex_ToDoopFormat->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1042:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- 
   _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),
   _Tamiflex_ToDoopFormat(?classStr0,?classStr),
   _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr),\n   _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;)",profile);
if (!rel_218_Tamiflex_ReflectionData->empty()&&!rel_219_Tamiflex_ToDoopFormat->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_218_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt,rel_220_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_218_Tamiflex_ReflectionData_op_ctxt,rel_218_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_219_Tamiflex_ToDoopFormat_op_ctxt,rel_219_Tamiflex_ToDoopFormat->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_219_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_219_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_219_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,6> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3]),(RamDomain)(env0[4]),(RamDomain)(env0[5])});
if (!(rel_220_Tamiflex_ReflectionData->insert(tuple,READ_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :-     _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),    _Tamiflex_ToDoopFormat(?classStr0,?classStr),    _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr),\n   _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;)" <<  rel_220_Tamiflex_ReflectionData->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- 
   _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),
   _Tamiflex_ToDoopFormat(?classStr0,?classStr).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr).;)",profile);
if (!rel_218_Tamiflex_ReflectionData->empty()&&!rel_219_Tamiflex_ToDoopFormat->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_218_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt,rel_220_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_218_Tamiflex_ReflectionData_op_ctxt,rel_218_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_219_Tamiflex_ToDoopFormat_op_ctxt,rel_219_Tamiflex_ToDoopFormat->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_219_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,6> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3]),(RamDomain)(env0[4]),(RamDomain)(env0[5])});
if (!(rel_220_Tamiflex_ReflectionData->insert(tuple,READ_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :-     _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),    _Tamiflex_ToDoopFormat(?classStr0,?classStr).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr).;)" <<  rel_220_Tamiflex_ReflectionData->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1042:1-0:0];)" <<  rel_220_Tamiflex_ReflectionData->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_219_Tamiflex_ToDoopFormat->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_218_Tamiflex_ReflectionData->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodInvocation-Line.facts"},{"name","_MethodInvocation_Line"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0}), symTable, ioDirectives, 0)->readAll(*rel_221_MethodInvocation_Line);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1044:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReflectionMap(?mapped,?invocation) :- 
   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),
   isClassType(?class),
   Method_SimpleName(?method,?methodStr),
   Method_DeclaringType(?method,?class),
   isClassType(?inClass),
   Method_SimpleName(?inMethod,?inMethodStr),
   Method_DeclaringType(?inMethod,?inClass),
   _MethodInvocation_Line(?invocation,?line),
   MethodInvocation_Method(?invocation,?method),
   Instruction_Method(?invocation,?inMethod),
   ?line > 0.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   _MethodInvocation_Line(?invocation,?line),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod),\n   ?line > 0.;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_220_Tamiflex_ReflectionData->empty()&&!rel_221_MethodInvocation_Line->empty()&&!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt,rel_220_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_221_MethodInvocation_Line_op_ctxt,rel_221_MethodInvocation_Line->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((env0[5]) > (0))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_132_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],env0[0]});
auto range = rel_74_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_132_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[4]});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env0[3]});
auto range = rel_74_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[5]});
auto range = rel_221_MethodInvocation_Line->equalRange<1>(key,READ_OP_CONTEXT(rel_221_MethodInvocation_Line_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env7 : range) {
const Tuple<RamDomain,2> key({env7[0],env2[0]});
auto range = rel_91_MethodInvocation_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env7[0],env5[0]});
auto range = rel_85_Instruction_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env7[0])});
if (!(rel_222_Tamiflex_ReflectionMap->insert(tuple,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :-     Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),    isClassType(?class),    Method_SimpleName(?method,?methodStr),    Method_DeclaringType(?method,?class),    isClassType(?inClass),    Method_SimpleName(?inMethod,?inMethodStr),    Method_DeclaringType(?inMethod,?inClass),    _MethodInvocation_Line(?invocation,?line),    MethodInvocation_Method(?invocation,?method),    Instruction_Method(?invocation,?inMethod),    ?line > 0.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   _MethodInvocation_Line(?invocation,?line),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod),\n   ?line > 0.;)" <<  rel_222_Tamiflex_ReflectionMap->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReflectionMap(?mapped,?invocation) :- 
   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),
   isClassType(?class),
   Method_SimpleName(?method,?methodStr),
   Method_DeclaringType(?method,?class),
   isClassType(?inClass),
   Method_SimpleName(?inMethod,?inMethodStr),
   Method_DeclaringType(?inMethod,?inClass),
   MethodInvocation_Method(?invocation,?method),
   Instruction_Method(?invocation,?inMethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_220_Tamiflex_ReflectionData->empty()&&!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt,rel_220_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
const Tuple<RamDomain,6> key({0,0,0,0,0,0});
auto range = rel_220_Tamiflex_ReflectionData->equalRange<5>(key,READ_OP_CONTEXT(rel_220_Tamiflex_ReflectionData_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_132_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],env0[0]});
auto range = rel_74_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_132_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_132_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[4]});
auto range = rel_76_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env0[3]});
auto range = rel_74_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env7 : range) {
const Tuple<RamDomain,2> key({env7[0],env5[0]});
auto range = rel_85_Instruction_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env7[0])});
if (!(rel_222_Tamiflex_ReflectionMap->insert(tuple,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :-     Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),    isClassType(?class),    Method_SimpleName(?method,?methodStr),    Method_DeclaringType(?method,?class),    isClassType(?inClass),    Method_SimpleName(?inMethod,?inMethodStr),    Method_DeclaringType(?inMethod,?inClass),    MethodInvocation_Method(?invocation,?method),    Instruction_Method(?invocation,?inMethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod).;)" <<  rel_222_Tamiflex_ReflectionMap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1044:1-0:0];)" <<  rel_222_Tamiflex_ReflectionMap->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_220_Tamiflex_ReflectionData->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2673:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedFieldArray(?type,cat(cat("<(Tamiflex) ",?type),"/Field[]>"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt,rel_223_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(env1[0])});
if (!(rel_223_Tamiflex_ReifiedFieldArray->insert(tuple,READ_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat('<(Tamiflex) ',?type),'/Field[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_223_Tamiflex_ReifiedFieldArray->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedFieldArray(?type,cat(cat("<(Tamiflex) ",?type),"/Field[]>"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt,rel_223_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(env1[0])});
if (!(rel_223_Tamiflex_ReifiedFieldArray->insert(tuple,READ_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat('<(Tamiflex) ',?type),'/Field[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_223_Tamiflex_ReifiedFieldArray->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2673:1-0:0];)" <<  rel_223_Tamiflex_ReifiedFieldArray->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2674:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedMethod(?method,cat(cat("<(Tamiflex) ",?method),">"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt,rel_224_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_224_Tamiflex_ReifiedMethod->insert(tuple,READ_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat('<(Tamiflex) ',?method),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_224_Tamiflex_ReifiedMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedMethod(?method,cat(cat("<(Tamiflex) ",?method),">"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt,rel_224_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_224_Tamiflex_ReifiedMethod->insert(tuple,READ_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat('<(Tamiflex) ',?method),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_224_Tamiflex_ReifiedMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2674:1-0:0];)" <<  rel_224_Tamiflex_ReifiedMethod->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2675:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedMethodArray(?type,cat(cat("<(Tamiflex) ",?type),"/Method[]>"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt,rel_225_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(env1[0])});
if (!(rel_225_Tamiflex_ReifiedMethodArray->insert(tuple,READ_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat('<(Tamiflex) ',?type),'/Method[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_225_Tamiflex_ReifiedMethodArray->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedMethodArray(?type,cat(cat("<(Tamiflex) ",?type),"/Method[]>"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt,rel_225_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(env1[0])});
if (!(rel_225_Tamiflex_ReifiedMethodArray->insert(tuple,READ_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat('<(Tamiflex) ',?type),'/Method[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_225_Tamiflex_ReifiedMethodArray->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2675:1-0:0];)" <<  rel_225_Tamiflex_ReifiedMethodArray->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field-Modifier.facts"},{"name","_Field_Modifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_226_Field_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [42:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isField(?field) :- 
   _Field_Modifier(?modifier,?field).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [322:1-325:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [322:1-325:38];isField(?field) :- \n   _Field_Modifier(?modifier,?field).;)",profile);
if (!rel_226_Field_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_226_Field_Modifier->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt,rel_226_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_227_isField->insert(tuple,READ_OP_CONTEXT(rel_227_isField_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [322:1-325:38];isField(?field) :-     _Field_Modifier(?modifier,?field).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [322:1-325:38];isField(?field) :- \n   _Field_Modifier(?modifier,?field).;)" <<  rel_227_isField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isField(?signature) :- 
   _Field(?signature,?declaringType,?simplename,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];isField(?signature) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)",profile);
if (!rel_214_Field->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_Field->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_Field_op_ctxt,rel_214_Field->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_227_isField->insert(tuple,READ_OP_CONTEXT(rel_227_isField_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];isField(?signature) :-     _Field(?signature,?declaringType,?simplename,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [558:1-562:58];isField(?signature) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)" <<  rel_227_isField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [42:1-0:0];)" <<  rel_227_isField->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_214_Field->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [249:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadStaticField(?sig,?to,?inmethod) :- 
   isLoadStaticField_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   FieldInstruction_Signature(?insn,?sig),
   LoadStaticField_To(?insn,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [896:1-900:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :- \n   isLoadStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadStaticField_To(?insn,?to).;)",profile);
if (!rel_61_FieldInstruction_Signature->empty()&&!rel_85_Instruction_Method->empty()&&!rel_44_LoadStaticField_To->empty()&&!rel_45_isLoadStaticField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_45_isLoadStaticField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt,rel_228_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_44_LoadStaticField_To_op_ctxt,rel_44_LoadStaticField_To->createContext());
CREATE_OP_CONTEXT(rel_45_isLoadStaticField_Insn_op_ctxt,rel_45_isLoadStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_61_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_44_LoadStaticField_To->equalRange<0>(key,READ_OP_CONTEXT(rel_44_LoadStaticField_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_228_LoadStaticField->insert(tuple,READ_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :-     isLoadStaticField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    FieldInstruction_Signature(?insn,?sig),    LoadStaticField_To(?insn,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :- \n   isLoadStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadStaticField_To(?insn,?to).;)" <<  rel_228_LoadStaticField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadStaticField(?fld,?to,?inmethod) :- 
   isMethod("<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",?inmethod),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   _Field_Modifier("static",?fld),
   AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2697:1-2704:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2697:1-2704:39];LoadStaticField(?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_226_Field_Modifier->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt,rel_228_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt,rel_226_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({154});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,154,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env2[0]});
auto range = rel_226_Field_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env5[1]),(RamDomain)(env1[2])});
if (!(rel_228_LoadStaticField->insert(tuple,READ_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2697:1-2704:39];LoadStaticField(?fld,?to,?inmethod) :-     isMethod('<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _Field_Modifier('static',?fld),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2697:1-2704:39];LoadStaticField(?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_228_LoadStaticField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [249:1-0:0];)" <<  rel_228_LoadStaticField->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_45_isLoadStaticField_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_44_LoadStaticField_To->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2672:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedField(?fld,cat(cat("<(Tamiflex) ",?fld),">"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt,rel_229_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_229_Tamiflex_ReifiedField->insert(tuple,READ_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat('<(Tamiflex) ',?fld),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_229_Tamiflex_ReifiedField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Tamiflex_ReifiedField(?fld,cat(cat("<(Tamiflex) ",?fld),">"),?invocation) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt,rel_229_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_229_Tamiflex_ReifiedField->insert(tuple,READ_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat('<(Tamiflex) ',?fld),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_229_Tamiflex_ReifiedField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2672:1-0:0];)" <<  rel_229_Tamiflex_ReifiedField->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [28:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainClass("Harness").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2895:1-2895:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2895:1-2895:22];MainClass(\"Harness\").;)",profile);
rel_230_MainClass->insert(176);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2895:1-2895:22];MainClass(\"Harness\").;)" <<  rel_230_MainClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [28:1-0:0];)" <<  rel_230_MainClass->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1091:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainMethodDeclaration(?method) :- 
   MainClass(?type),
   Method_DeclaringType(?method,?type),
   Method_SimpleName(?method,"main"),
   Method_Descriptor(?method,"void(java.lang.String[])"),
   _Method_Modifier("public",?method),
   _Method_Modifier("static",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1237:1-1243:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1237:1-1243:39];MainMethodDeclaration(?method) :- \n   MainClass(?type),\n   Method_DeclaringType(?method,?type),\n   Method_SimpleName(?method,\"main\"),\n   Method_Descriptor(?method,\"void(java.lang.String[])\"),\n   _Method_Modifier(\"public\",?method),\n   _Method_Modifier(\"static\",?method).;)",profile);
if (!rel_230_MainClass->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_75_Method_Descriptor->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_230_MainClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_230_MainClass_op_ctxt,rel_230_MainClass->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt,rel_75_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_74_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],67});
auto range = rel_76_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],68});
auto range = rel_75_Method_Descriptor->equalRange<0,1>(key,READ_OP_CONTEXT(rel_75_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({4,env1[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env1[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_231_MainMethodDeclaration->insert(tuple,READ_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1237:1-1243:39];MainMethodDeclaration(?method) :-     MainClass(?type),    Method_DeclaringType(?method,?type),    Method_SimpleName(?method,'main'),    Method_Descriptor(?method,'void(java.lang.String[])'),    _Method_Modifier('public',?method),    _Method_Modifier('static',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1237:1-1243:39];MainMethodDeclaration(?method) :- \n   MainClass(?type),\n   Method_DeclaringType(?method,?type),\n   Method_SimpleName(?method,\"main\"),\n   Method_Descriptor(?method,\"void(java.lang.String[])\"),\n   _Method_Modifier(\"public\",?method),\n   _Method_Modifier(\"static\",?method).;)" <<  rel_231_MainMethodDeclaration->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1091:1-0:0];)" <<  rel_231_MainMethodDeclaration->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_230_MainClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_75_Method_Descriptor->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ActualParam.facts"},{"name","_ActualParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_232_ActualParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [248:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreInstanceField(?from,?base,?sig,?inmethod) :- 
   isStoreInstanceField_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   StoreInstanceField_From(?insn,?from),
   StoreInstanceField_Base(?insn,?base),
   FieldInstruction_Signature(?insn,?sig).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [890:1-895:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :- \n   isStoreInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreInstanceField_From(?insn,?from),\n   StoreInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig).;)",profile);
if (!rel_61_FieldInstruction_Signature->empty()&&!rel_85_Instruction_Method->empty()&&!rel_57_StoreInstanceField_Base->empty()&&!rel_58_StoreInstanceField_From->empty()&&!rel_59_isStoreInstanceField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_59_isStoreInstanceField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_233_StoreInstanceField_op_ctxt,rel_233_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_57_StoreInstanceField_Base_op_ctxt,rel_57_StoreInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_58_StoreInstanceField_From_op_ctxt,rel_58_StoreInstanceField_From->createContext());
CREATE_OP_CONTEXT(rel_59_isStoreInstanceField_Insn_op_ctxt,rel_59_isStoreInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_58_StoreInstanceField_From->equalRange<0>(key,READ_OP_CONTEXT(rel_58_StoreInstanceField_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_57_StoreInstanceField_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_57_StoreInstanceField_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_61_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env4[1]),(RamDomain)(env1[1])});
if (!(rel_233_StoreInstanceField->insert(tuple,READ_OP_CONTEXT(rel_233_StoreInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :-     isStoreInstanceField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreInstanceField_From(?insn,?from),    StoreInstanceField_Base(?insn,?base),    FieldInstruction_Signature(?insn,?sig).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :- \n   isStoreInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreInstanceField_From(?insn,?from),\n   StoreInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig).;)" <<  rel_233_StoreInstanceField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreInstanceField(?from,?base,?fld,?inmethod) :- 
   isMethod("<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>",?inmethod),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   _ActualParam(0,?invocation,?base),
   _ActualParam(1,?invocation,?from),
   !_Field_Modifier("static",?fld).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2705:1-2713:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2705:1-2713:38];StoreInstanceField(?from,?base,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(1,?invocation,?from),\n   !_Field_Modifier(\"static\",?fld).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_233_StoreInstanceField_op_ctxt,rel_233_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt,rel_226_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({155});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,155,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_226_Field_Modifier->contains(Tuple<RamDomain,2>({7,env2[0]}),READ_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,3> key({1,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[2]),(RamDomain)(env4[2]),(RamDomain)(env2[0]),(RamDomain)(env1[2])});
if (!(rel_233_StoreInstanceField->insert(tuple,READ_OP_CONTEXT(rel_233_StoreInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2705:1-2713:38];StoreInstanceField(?from,?base,?fld,?inmethod) :-     isMethod('<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _ActualParam(0,?invocation,?base),    _ActualParam(1,?invocation,?from),    !_Field_Modifier('static',?fld).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2705:1-2713:38];StoreInstanceField(?from,?base,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(1,?invocation,?from),\n   !_Field_Modifier(\"static\",?fld).;)" <<  rel_233_StoreInstanceField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [248:1-0:0];)" <<  rel_233_StoreInstanceField->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_59_isStoreInstanceField_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_58_StoreInstanceField_From->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_57_StoreInstanceField_Base->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [247:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadInstanceField(?base,?sig,?to,?inmethod) :- 
   isLoadInstanceField_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   LoadInstanceField_Base(?insn,?base),
   FieldInstruction_Signature(?insn,?sig),
   LoadInstanceField_To(?insn,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [884:1-889:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :- \n   isLoadInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadInstanceField_To(?insn,?to).;)",profile);
if (!rel_61_FieldInstruction_Signature->empty()&&!rel_85_Instruction_Method->empty()&&!rel_40_LoadInstanceField_Base->empty()&&!rel_41_LoadInstanceField_To->empty()&&!rel_42_isLoadInstanceField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_42_isLoadInstanceField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_234_LoadInstanceField_op_ctxt,rel_234_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_40_LoadInstanceField_Base_op_ctxt,rel_40_LoadInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_41_LoadInstanceField_To_op_ctxt,rel_41_LoadInstanceField_To->createContext());
CREATE_OP_CONTEXT(rel_42_isLoadInstanceField_Insn_op_ctxt,rel_42_isLoadInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_40_LoadInstanceField_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_40_LoadInstanceField_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_61_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_41_LoadInstanceField_To->equalRange<0>(key,READ_OP_CONTEXT(rel_41_LoadInstanceField_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env4[1]),(RamDomain)(env1[1])});
if (!(rel_234_LoadInstanceField->insert(tuple,READ_OP_CONTEXT(rel_234_LoadInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :-     isLoadInstanceField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    LoadInstanceField_Base(?insn,?base),    FieldInstruction_Signature(?insn,?sig),    LoadInstanceField_To(?insn,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :- \n   isLoadInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadInstanceField_To(?insn,?to).;)" <<  rel_234_LoadInstanceField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadInstanceField(?base,?fld,?to,?inmethod) :- 
   isMethod("<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",?inmethod),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   _ActualParam(0,?invocation,?base),
   AssignReturnValue(?invocation,?to),
   !_Field_Modifier("static",?fld).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2688:1-2696:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2688:1-2696:39];LoadInstanceField(?base,?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to),\n   !_Field_Modifier(\"static\",?fld).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_234_LoadInstanceField_op_ctxt,rel_234_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt,rel_226_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({154});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,154,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_226_Field_Modifier->contains(Tuple<RamDomain,2>({7,env2[0]}),READ_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[2]),(RamDomain)(env2[0]),(RamDomain)(env5[1]),(RamDomain)(env1[2])});
if (!(rel_234_LoadInstanceField->insert(tuple,READ_OP_CONTEXT(rel_234_LoadInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2688:1-2696:39];LoadInstanceField(?base,?fld,?to,?inmethod) :-     isMethod('<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to),    !_Field_Modifier('static',?fld).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2688:1-2696:39];LoadInstanceField(?base,?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to),\n   !_Field_Modifier(\"static\",?fld).;)" <<  rel_234_LoadInstanceField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [247:1-0:0];)" <<  rel_234_LoadInstanceField->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_42_isLoadInstanceField_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_40_LoadInstanceField_Base->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_41_LoadInstanceField_To->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1275:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VarsAtInvocationRetrievingView(?ret,?var) :- 
   ViewRetrievalByArg0MethodInvocation(?invo),
   AssignReturnValue(?invo,?ret),
   _ActualParam(0,?invo,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1586:1-1589:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1586:1-1589:31];VarsAtInvocationRetrievingView(?ret,?var) :- \n   ViewRetrievalByArg0MethodInvocation(?invo),\n   AssignReturnValue(?invo,?ret),\n   _ActualParam(0,?invo,?var).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_174_ViewRetrievalByArg0MethodInvocation->empty()&&!rel_232_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_174_ViewRetrievalByArg0MethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_235_VarsAtInvocationRetrievingView_op_ctxt,rel_235_VarsAtInvocationRetrievingView->createContext());
CREATE_OP_CONTEXT(rel_174_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_174_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[2])});
if (!(rel_235_VarsAtInvocationRetrievingView->insert(tuple,READ_OP_CONTEXT(rel_235_VarsAtInvocationRetrievingView_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1586:1-1589:31];VarsAtInvocationRetrievingView(?ret,?var) :-     ViewRetrievalByArg0MethodInvocation(?invo),    AssignReturnValue(?invo,?ret),    _ActualParam(0,?invo,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1586:1-1589:31];VarsAtInvocationRetrievingView(?ret,?var) :- \n   ViewRetrievalByArg0MethodInvocation(?invo),\n   AssignReturnValue(?invo,?ret),\n   _ActualParam(0,?invo,?var).;)" <<  rel_235_VarsAtInvocationRetrievingView->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1275:1-0:0];)" <<  rel_235_VarsAtInvocationRetrievingView->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_174_ViewRetrievalByArg0MethodInvocation->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BootstrapParam.facts"},{"name","_BootstrapParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_236_BootstrapParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [160:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?invocation) :- 
   _ActualParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isMethodInvocation(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_232_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_232_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isMethodInvocation(?invocation) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isMethodInvocation(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?invocation) :- 
   _BootstrapParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isMethodInvocation(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_236_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_236_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_236_BootstrapParam_op_ctxt,rel_236_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isMethodInvocation(?invocation) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isMethodInvocation(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?invocation) :- 
   _AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isMethodInvocation(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_216_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_216_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_216_AssignReturnValue_op_ctxt,rel_216_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isMethodInvocation(?invocation) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isMethodInvocation(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?instruction) :- 
   _MethodInvocation_Line(?instruction,?line).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [583:1-585:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [583:1-585:47];isMethodInvocation(?instruction) :- \n   _MethodInvocation_Line(?instruction,?line).;)",profile);
if (!rel_221_MethodInvocation_Line->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_221_MethodInvocation_Line->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_221_MethodInvocation_Line_op_ctxt,rel_221_MethodInvocation_Line->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [583:1-585:47];isMethodInvocation(?instruction) :-     _MethodInvocation_Line(?instruction,?line).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [583:1-585:47];isMethodInvocation(?instruction) :- \n   _MethodInvocation_Line(?instruction,?line).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?instruction) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethodInvocation(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethodInvocation(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isMethodInvocation(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?instruction) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethodInvocation(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethodInvocation(?instruction) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isMethodInvocation(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?instruction) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethodInvocation(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethodInvocation(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isMethodInvocation(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(?instruction) :- 
   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isMethodInvocation(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_29_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_29_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_DynamicMethodInvocation_op_ctxt,rel_29_DynamicMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isMethodInvocation(?instruction) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isMethodInvocation(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isMethodInvocation(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>"))) :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isMethodInvocation(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isMethodInvocation(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>'))) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isMethodInvocation(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>"))) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>"))) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   ReturnVar(?return,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isMethodInvocation(cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_237_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isMethodInvocation(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_237_isMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [160:1-0:0];)" <<  rel_237_isMethodInvocation->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_221_MethodInvocation_Line->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [63:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _ActualParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isVar(?var) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_232_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_232_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isVar(?var) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isVar(?var) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _BootstrapParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isVar(?var) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_236_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_236_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_236_BootstrapParam_op_ctxt,rel_236_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isVar(?var) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isVar(?var) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _FormalParam(?index,?method,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isVar(?var) :- \n   _FormalParam(?index,?method,?var).;)",profile);
if (!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_32_FormalParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isVar(?var) :-     _FormalParam(?index,?method,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [332:1-335:39];isVar(?var) :- \n   _FormalParam(?index,?method,?var).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _NativeReturnVar(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isVar(?var) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_26_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_26_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_26_NativeReturnVar_op_ctxt,rel_26_NativeReturnVar->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isVar(?var) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [351:1-354:35];isVar(?var) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _Var_Type(?var,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isVar(?var) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_148_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_148_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_148_Var_Type_op_ctxt,rel_148_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isVar(?var) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];isVar(?var) :- \n   _Var_Type(?var,?type).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _Var_DeclaringMethod(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isVar(?var) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_83_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_83_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_Var_DeclaringMethod_op_ctxt,rel_83_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isVar(?var) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];isVar(?var) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?var) :- 
   _ThisVar(?method,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isVar(?var) :- \n   _ThisVar(?method,?var).;)",profile);
if (!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_82_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isVar(?var) :-     _ThisVar(?method,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [375:1-378:27];isVar(?var) :- \n   _ThisVar(?method,?var).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(?to) :- 
   _AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isVar(?to) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_216_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_216_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_216_AssignReturnValue_op_ctxt,rel_216_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isVar(?to) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isVar(?to) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(cat(?invocation,"/@tmp-arraycopy")) :- 
   isMethod("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",?inmethod),
   _ActualParam(0,?invocation,?src),
   _ActualParam(2,?invocation,?dest),
   isMethodInvocation(?invocation),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];isVar(cat(?invocation,\"/@tmp-arraycopy\")) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()&&!rel_237_isMethodInvocation->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_237_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str()))});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];isVar(cat(?invocation,'/@tmp-arraycopy')) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];isVar(cat(?invocation,\"/@tmp-arraycopy\")) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_238_isVar->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isVar(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>","/@native-array-element")) :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isType("java.lang.String"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];isVar(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\")) :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str()))});
if (!(rel_238_isVar->insert(tuple,READ_OP_CONTEXT(rel_238_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];isVar(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element')) :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];isVar(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\")) :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_238_isVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [63:1-0:0];)" <<  rel_238_isVar->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_26_NativeReturnVar->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [250:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreStaticField(?from,?sig,?inmethod) :- 
   isStoreStaticField_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   StoreStaticField_From(?insn,?from),
   FieldInstruction_Signature(?insn,?sig).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [901:1-905:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :- \n   isStoreStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreStaticField_From(?insn,?from),\n   FieldInstruction_Signature(?insn,?sig).;)",profile);
if (!rel_61_FieldInstruction_Signature->empty()&&!rel_85_Instruction_Method->empty()&&!rel_62_StoreStaticField_From->empty()&&!rel_63_isStoreStaticField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_63_isStoreStaticField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt,rel_61_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_62_StoreStaticField_From_op_ctxt,rel_62_StoreStaticField_From->createContext());
CREATE_OP_CONTEXT(rel_63_isStoreStaticField_Insn_op_ctxt,rel_63_isStoreStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_62_StoreStaticField_From->equalRange<0>(key,READ_OP_CONTEXT(rel_62_StoreStaticField_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_61_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_61_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_239_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :-     isStoreStaticField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreStaticField_From(?insn,?from),    FieldInstruction_Signature(?insn,?sig).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :- \n   isStoreStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreStaticField_From(?insn,?from),\n   FieldInstruction_Signature(?insn,?sig).;)" <<  rel_239_StoreStaticField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreStaticField("java.lang.System.setIn0/@param0","<java.lang.System: java.io.InputStream in>","<java.lang.System: void setIn0(java.io.InputStream)>") :- 
   isMethod("<java.lang.System: void setIn0(java.io.InputStream)>"),
   isVar("java.lang.System.setIn0/@param0"),
   isField("<java.lang.System: java.io.InputStream in>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1776:1-1776:320])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1776:1-1776:320];StoreStaticField(\"java.lang.System.setIn0/@param0\",\"<java.lang.System: java.io.InputStream in>\",\"<java.lang.System: void setIn0(java.io.InputStream)>\") :- \n   isMethod(\"<java.lang.System: void setIn0(java.io.InputStream)>\"),\n   isVar(\"java.lang.System.setIn0/@param0\"),\n   isField(\"<java.lang.System: java.io.InputStream in>\").;)",profile);
if (!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_238_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({108});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({106});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({107});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(106),(RamDomain)(107),(RamDomain)(108)});
if (!(rel_239_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1776:1-1776:320];StoreStaticField('java.lang.System.setIn0/@param0','<java.lang.System: java.io.InputStream in>','<java.lang.System: void setIn0(java.io.InputStream)>') :-     isMethod('<java.lang.System: void setIn0(java.io.InputStream)>'),    isVar('java.lang.System.setIn0/@param0'),    isField('<java.lang.System: java.io.InputStream in>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1776:1-1776:320];StoreStaticField(\"java.lang.System.setIn0/@param0\",\"<java.lang.System: java.io.InputStream in>\",\"<java.lang.System: void setIn0(java.io.InputStream)>\") :- \n   isMethod(\"<java.lang.System: void setIn0(java.io.InputStream)>\"),\n   isVar(\"java.lang.System.setIn0/@param0\"),\n   isField(\"<java.lang.System: java.io.InputStream in>\").;)" <<  rel_239_StoreStaticField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreStaticField("java.lang.System.setOut0/@param0","<java.lang.System: java.io.PrintStream out>","<java.lang.System: void setOut0(java.io.PrintStream)>") :- 
   isMethod("<java.lang.System: void setOut0(java.io.PrintStream)>"),
   isVar("java.lang.System.setOut0/@param0"),
   isField("<java.lang.System: java.io.PrintStream out>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1777:1-1777:326])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1777:1-1777:326];StoreStaticField(\"java.lang.System.setOut0/@param0\",\"<java.lang.System: java.io.PrintStream out>\",\"<java.lang.System: void setOut0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setOut0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setOut0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream out>\").;)",profile);
if (!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_238_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({111});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({109});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({110});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(109),(RamDomain)(110),(RamDomain)(111)});
if (!(rel_239_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1777:1-1777:326];StoreStaticField('java.lang.System.setOut0/@param0','<java.lang.System: java.io.PrintStream out>','<java.lang.System: void setOut0(java.io.PrintStream)>') :-     isMethod('<java.lang.System: void setOut0(java.io.PrintStream)>'),    isVar('java.lang.System.setOut0/@param0'),    isField('<java.lang.System: java.io.PrintStream out>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1777:1-1777:326];StoreStaticField(\"java.lang.System.setOut0/@param0\",\"<java.lang.System: java.io.PrintStream out>\",\"<java.lang.System: void setOut0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setOut0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setOut0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream out>\").;)" <<  rel_239_StoreStaticField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreStaticField("java.lang.System.setErr0/@param0","<java.lang.System: java.io.PrintStream err>","<java.lang.System: void setErr0(java.io.PrintStream)>") :- 
   isMethod("<java.lang.System: void setErr0(java.io.PrintStream)>"),
   isVar("java.lang.System.setErr0/@param0"),
   isField("<java.lang.System: java.io.PrintStream err>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1778:1-1778:326])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1778:1-1778:326];StoreStaticField(\"java.lang.System.setErr0/@param0\",\"<java.lang.System: java.io.PrintStream err>\",\"<java.lang.System: void setErr0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setErr0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setErr0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream err>\").;)",profile);
if (!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_238_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({114});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({112});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({113});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(112),(RamDomain)(113),(RamDomain)(114)});
if (!(rel_239_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1778:1-1778:326];StoreStaticField('java.lang.System.setErr0/@param0','<java.lang.System: java.io.PrintStream err>','<java.lang.System: void setErr0(java.io.PrintStream)>') :-     isMethod('<java.lang.System: void setErr0(java.io.PrintStream)>'),    isVar('java.lang.System.setErr0/@param0'),    isField('<java.lang.System: java.io.PrintStream err>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1778:1-1778:326];StoreStaticField(\"java.lang.System.setErr0/@param0\",\"<java.lang.System: java.io.PrintStream err>\",\"<java.lang.System: void setErr0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setErr0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setErr0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream err>\").;)" <<  rel_239_StoreStaticField->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreStaticField(?from,?fld,?inmethod) :- 
   isMethod("<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>",?inmethod),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   _Field_Modifier("static",?fld),
   _ActualParam(1,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2714:1-2721:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2714:1-2721:38];StoreStaticField(?from,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   _ActualParam(1,?invocation,?from).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_226_Field_Modifier->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt,rel_226_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({155});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,155,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env2[0]});
auto range = rel_226_Field_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_226_Field_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({1,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[2]),(RamDomain)(env2[0]),(RamDomain)(env1[2])});
if (!(rel_239_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2714:1-2721:38];StoreStaticField(?from,?fld,?inmethod) :-     isMethod('<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _Field_Modifier('static',?fld),    _ActualParam(1,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2714:1-2721:38];StoreStaticField(?from,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   _ActualParam(1,?invocation,?from).;)" <<  rel_239_StoreStaticField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreStaticField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [250:1-0:0];)" <<  rel_239_StoreStaticField->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_63_isStoreStaticField_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_61_FieldInstruction_Signature->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_62_StoreStaticField_From->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_226_Field_Modifier->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [254:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AssignLocal(?from,?to,?inmethod) :- 
   isAssignLocal_Insn(?insn),
   AssignInstruction_To(?insn,?to),
   Instruction_Method(?insn,?inmethod),
   AssignLocal_From(?insn,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [922:1-926:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :- \n   isAssignLocal_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod),\n   AssignLocal_From(?insn,?from).;)",profile);
if (!rel_22_AssignInstruction_To->empty()&&!rel_14_AssignLocal_From->empty()&&!rel_85_Instruction_Method->empty()&&!rel_15_isAssignLocal_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_15_isAssignLocal_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_240_AssignLocal_op_ctxt,rel_240_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_14_AssignLocal_From_op_ctxt,rel_14_AssignLocal_From->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_15_isAssignLocal_Insn_op_ctxt,rel_15_isAssignLocal_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_14_AssignLocal_From->equalRange<0>(key,READ_OP_CONTEXT(rel_14_AssignLocal_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[1]),(RamDomain)(env2[1])});
if (!(rel_240_AssignLocal->insert(tuple,READ_OP_CONTEXT(rel_240_AssignLocal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :-     isAssignLocal_Insn(?insn),    AssignInstruction_To(?insn,?to),    Instruction_Method(?insn,?inmethod),    AssignLocal_From(?insn,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :- \n   isAssignLocal_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod),\n   AssignLocal_From(?insn,?from).;)" <<  rel_240_AssignLocal->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AssignLocal("java.lang.Object.clone/@this","java.lang.Object.clone/@native-return","<java.lang.Object: java.lang.Object clone()>") :- 
   isVar("java.lang.Object.clone/@this"),
   isVar("java.lang.Object.clone/@native-return"),
   isMethod("<java.lang.Object: java.lang.Object clone()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1775:1-1775:281])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1775:1-1775:281];AssignLocal(\"java.lang.Object.clone/@this\",\"java.lang.Object.clone/@native-return\",\"<java.lang.Object: java.lang.Object clone()>\") :- \n   isVar(\"java.lang.Object.clone/@this\"),\n   isVar(\"java.lang.Object.clone/@native-return\"),\n   isMethod(\"<java.lang.Object: java.lang.Object clone()>\").;)",profile);
if (!rel_84_isMethod->empty()&&!rel_238_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_240_AssignLocal_op_ctxt,rel_240_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({103});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({104});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({105});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(103),(RamDomain)(104),(RamDomain)(105)});
if (!(rel_240_AssignLocal->insert(tuple,READ_OP_CONTEXT(rel_240_AssignLocal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1775:1-1775:281];AssignLocal('java.lang.Object.clone/@this','java.lang.Object.clone/@native-return','<java.lang.Object: java.lang.Object clone()>') :-     isVar('java.lang.Object.clone/@this'),    isVar('java.lang.Object.clone/@native-return'),    isMethod('<java.lang.Object: java.lang.Object clone()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1775:1-1775:281];AssignLocal(\"java.lang.Object.clone/@this\",\"java.lang.Object.clone/@native-return\",\"<java.lang.Object: java.lang.Object clone()>\") :- \n   isVar(\"java.lang.Object.clone/@this\"),\n   isVar(\"java.lang.Object.clone/@native-return\"),\n   isMethod(\"<java.lang.Object: java.lang.Object clone()>\").;)" <<  rel_240_AssignLocal->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AssignLocal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [254:1-0:0];)" <<  rel_240_AssignLocal->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_15_isAssignLocal_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_14_AssignLocal_From->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [64:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Var_Type(?var,?type) :- 
   _Var_Type(?var,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];Var_Type(?var,?type) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_148_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_148_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_148_Var_Type_op_ctxt,rel_148_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_241_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];Var_Type(?var,?type) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [357:1-360:26];Var_Type(?var,?type) :- \n   _Var_Type(?var,?type).;)" <<  rel_241_Var_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Var_Type(cat(?invocation,"/@tmp-arraycopy"),"java.lang.Object") :- 
   isMethod("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",?inmethod),
   _ActualParam(0,?invocation,?src),
   _ActualParam(2,?invocation,?dest),
   isMethodInvocation(?invocation),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_Type(cat(?invocation,\"/@tmp-arraycopy\"),\"java.lang.Object\") :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()&&!rel_237_isMethodInvocation->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_237_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(18)});
if (!(rel_241_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_Type(cat(?invocation,'/@tmp-arraycopy'),'java.lang.Object') :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_Type(cat(?invocation,\"/@tmp-arraycopy\"),\"java.lang.Object\") :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_241_Var_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Var_Type(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>","/@native-array-element"),"java.lang.String") :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isType("java.lang.String"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_Type(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"java.lang.String\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(0)});
if (!(rel_241_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_Type(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'java.lang.String') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_Type(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"java.lang.String\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_241_Var_Type->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Var_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [64:1-0:0];)" <<  rel_241_Var_Type->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_148_Var_Type->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ResolveInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1080:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ResolveInvocation(?type,?invocation,?tomethod) :- 
   VirtualMethodInvocation_SimpleName(?invocation,?simplename),
   VirtualMethodInvocation_Descriptor(?invocation,?descriptor),
   VirtualMethodInvocation_Base(?invocation,?base),
   Var_Type(?base,?basetype),
   SubtypeOf(?type,?basetype),
   MethodLookup(?simplename,?descriptor,?type,?tomethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1115:1-1121:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ResolveInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :- \n   VirtualMethodInvocation_SimpleName(?invocation,?simplename),\n   VirtualMethodInvocation_Descriptor(?invocation,?descriptor),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Var_Type(?base,?basetype),\n   SubtypeOf(?type,?basetype),\n   MethodLookup(?simplename,?descriptor,?type,?tomethod).;)",profile);
if (!rel_153_MethodLookup->empty()&&!rel_183_SubtypeOf->empty()&&!rel_241_Var_Type->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()&&!rel_100_VirtualMethodInvocation_Descriptor->empty()&&!rel_101_VirtualMethodInvocation_SimpleName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_101_VirtualMethodInvocation_SimpleName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_100_VirtualMethodInvocation_Descriptor_op_ctxt,rel_100_VirtualMethodInvocation_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_101_VirtualMethodInvocation_SimpleName_op_ctxt,rel_101_VirtualMethodInvocation_SimpleName->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_100_VirtualMethodInvocation_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_100_VirtualMethodInvocation_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,4> key({env0[1],env1[1],env4[0],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env5[3])});
if (!(rel_242_ResolveInvocation->insert(tuple,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ResolveInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :-     VirtualMethodInvocation_SimpleName(?invocation,?simplename),    VirtualMethodInvocation_Descriptor(?invocation,?descriptor),    VirtualMethodInvocation_Base(?invocation,?base),    Var_Type(?base,?basetype),    SubtypeOf(?type,?basetype),    MethodLookup(?simplename,?descriptor,?type,?tomethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ResolveInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :- \n   VirtualMethodInvocation_SimpleName(?invocation,?simplename),\n   VirtualMethodInvocation_Descriptor(?invocation,?descriptor),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Var_Type(?base,?basetype),\n   SubtypeOf(?type,?basetype),\n   MethodLookup(?simplename,?descriptor,?type,?tomethod).;)" <<  rel_242_ResolveInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ResolveInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1080:1-0:0];)" <<  rel_242_ResolveInvocation->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_101_VirtualMethodInvocation_SimpleName->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_100_VirtualMethodInvocation_Descriptor->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2498:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SiteShouldNotBeRefined(?invocation) :- 
   isMethodInvocation(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2499:1-2502:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2499:1-2502:30];SiteShouldNotBeRefined(?invocation) :- \n   isMethodInvocation(?invocation).;)",profile);
if (!rel_237_isMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_237_isMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_243_SiteShouldNotBeRefined->insert(tuple,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2499:1-2502:30];SiteShouldNotBeRefined(?invocation) :-     isMethodInvocation(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2499:1-2502:30];SiteShouldNotBeRefined(?invocation) :- \n   isMethodInvocation(?invocation).;)" <<  rel_243_SiteShouldNotBeRefined->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2498:1-0:0];)" <<  rel_243_SiteShouldNotBeRefined->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [252:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isStoreArrayIndex_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   StoreArrayIndex_From(?insn,?from),
   StoreArrayIndex_Base(?insn,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [911:1-915:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isStoreArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreArrayIndex_From(?insn,?from),\n   StoreArrayIndex_Base(?insn,?base).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_53_StoreArrayIndex_Base->empty()&&!rel_54_StoreArrayIndex_From->empty()&&!rel_55_isStoreArrayIndex_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_55_isStoreArrayIndex_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_53_StoreArrayIndex_Base_op_ctxt,rel_53_StoreArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_54_StoreArrayIndex_From_op_ctxt,rel_54_StoreArrayIndex_From->createContext());
CREATE_OP_CONTEXT(rel_55_isStoreArrayIndex_Insn_op_ctxt,rel_55_isStoreArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_54_StoreArrayIndex_From->equalRange<0>(key,READ_OP_CONTEXT(rel_54_StoreArrayIndex_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_53_StoreArrayIndex_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_53_StoreArrayIndex_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :-     isStoreArrayIndex_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreArrayIndex_From(?insn,?from),    StoreArrayIndex_Base(?insn,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isStoreArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreArrayIndex_From(?insn,?from),\n   StoreArrayIndex_Base(?insn,?base).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(cat(?invocation,"/@tmp-arraycopy"),?dest,?inmethod) :- 
   isMethod("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",?inmethod),
   _ActualParam(0,?invocation,?src),
   _ActualParam(2,?invocation,?dest),
   isMethodInvocation(?invocation),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];StoreArrayIndex(cat(?invocation,\"/@tmp-arraycopy\"),?dest,?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()&&!rel_237_isMethodInvocation->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_237_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env3[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];StoreArrayIndex(cat(?invocation,'/@tmp-arraycopy'),?dest,?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];StoreArrayIndex(cat(?invocation,\"/@tmp-arraycopy\"),?dest,?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   _ActualParam(3,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1790:1-1795:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1790:1-1795:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(3,?invocation,?from).;)",profile);
if (!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({117});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,117,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({3,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1790:1-1795:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(3,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1790:1-1795:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(3,?invocation,?from).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   _ActualParam(2,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({118});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,118,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   _ActualParam(2,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({119});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,119,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   _ActualParam(2,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({120});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,120,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?from,?base,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   _ActualParam(2,?invocation,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({121});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,121,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1796:1-1804:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>","/@native-array-element"),?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isType("java.lang.String"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];StoreArrayIndex(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(env1[0]),(RamDomain)(128)});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];StoreArrayIndex(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];StoreArrayIndex(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreArrayIndex(?value,?array,?inmethod) :- 
   isMethod("<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>",?inmethod),
   _ActualParam(0,?invocation,?array),
   _ActualParam(2,?invocation,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2682:1-2687:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2682:1-2687:39];StoreArrayIndex(?value,?array,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   _ActualParam(2,?invocation,?value).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({153});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,153,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_244_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2682:1-2687:39];StoreArrayIndex(?value,?array,?inmethod) :-     isMethod('<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?array),    _ActualParam(2,?invocation,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2682:1-2687:39];StoreArrayIndex(?value,?array,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   _ActualParam(2,?invocation,?value).;)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [252:1-0:0];)" <<  rel_244_StoreArrayIndex->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_55_isStoreArrayIndex_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_54_StoreArrayIndex_From->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_53_StoreArrayIndex_Base->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1354:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptStoreArrayIndex(?from,?base) :- 
   StoreArrayIndex(?from,?base,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2430:1-2431:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2430:1-2431:36];OptStoreArrayIndex(?from,?base) :- \n   StoreArrayIndex(?from,?base,_).;)",profile);
if (!rel_244_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_244_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt,rel_245_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_245_OptStoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2430:1-2431:36];OptStoreArrayIndex(?from,?base) :-     StoreArrayIndex(?from,?base,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2430:1-2431:36];OptStoreArrayIndex(?from,?base) :- \n   StoreArrayIndex(?from,?base,_).;)" <<  rel_245_OptStoreArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1354:1-0:0];)" <<  rel_245_OptStoreArrayIndex->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [251:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?base,?to,?inmethod) :- 
   isLoadArrayIndex_Insn(?insn),
   Instruction_Method(?insn,?inmethod),
   LoadArrayIndex_Base(?insn,?base),
   LoadArrayIndex_To(?insn,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [906:1-910:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :- \n   isLoadArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadArrayIndex_Base(?insn,?base),\n   LoadArrayIndex_To(?insn,?to).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_36_LoadArrayIndex_Base->empty()&&!rel_37_LoadArrayIndex_To->empty()&&!rel_38_isLoadArrayIndex_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_38_isLoadArrayIndex_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_36_LoadArrayIndex_Base_op_ctxt,rel_36_LoadArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_37_LoadArrayIndex_To_op_ctxt,rel_37_LoadArrayIndex_To->createContext());
CREATE_OP_CONTEXT(rel_38_isLoadArrayIndex_Insn_op_ctxt,rel_38_isLoadArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_36_LoadArrayIndex_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_36_LoadArrayIndex_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_37_LoadArrayIndex_To->equalRange<0>(key,READ_OP_CONTEXT(rel_37_LoadArrayIndex_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :-     isLoadArrayIndex_Insn(?insn),    Instruction_Method(?insn,?inmethod),    LoadArrayIndex_Base(?insn,?base),    LoadArrayIndex_To(?insn,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :- \n   isLoadArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadArrayIndex_Base(?insn,?base),\n   LoadArrayIndex_To(?insn,?to).;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?src,cat(?invocation,"/@tmp-arraycopy"),?inmethod) :- 
   isMethod("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",?inmethod),
   _ActualParam(0,?invocation,?src),
   _ActualParam(2,?invocation,?dest),
   isMethodInvocation(?invocation),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];LoadArrayIndex(?src,cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()&&!rel_237_isMethodInvocation->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_237_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env1[2])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];LoadArrayIndex(?src,cat(?invocation,'/@tmp-arraycopy'),?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];LoadArrayIndex(?src,cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?base,?to,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({122});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,122,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?base,?to,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({123});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,123,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?base,?to,?inmethod) :- 
   isMethod("<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>"),
   VirtualMethodInvocation(?invocation,"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>",?inmethod),
   _ActualParam(0,?invocation,?base),
   AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({124});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,124,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1805:1-1812:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadArrayIndex(?array,?value,?inmethod) :- 
   isMethod("<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>",?inmethod),
   _ActualParam(0,?invocation,?array),
   AssignReturnValue(?invocation,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2676:1-2681:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2676:1-2681:42];LoadArrayIndex(?array,?value,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   AssignReturnValue(?invocation,?value).;)",profile);
if (!rel_217_AssignReturnValue->empty()&&!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({152});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,152,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_246_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2676:1-2681:42];LoadArrayIndex(?array,?value,?inmethod) :-     isMethod('<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>',?inmethod),    _ActualParam(0,?invocation,?array),    AssignReturnValue(?invocation,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2676:1-2681:42];LoadArrayIndex(?array,?value,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   AssignReturnValue(?invocation,?value).;)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [251:1-0:0];)" <<  rel_246_LoadArrayIndex->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_38_isLoadArrayIndex_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_36_LoadArrayIndex_Base->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_37_LoadArrayIndex_To->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1353:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptLoadArrayIndex(?to,?base) :- 
   LoadArrayIndex(?base,?to,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2405:1-2406:33])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2405:1-2406:33];OptLoadArrayIndex(?to,?base) :- \n   LoadArrayIndex(?base,?to,_).;)",profile);
if (!rel_246_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_246_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt,rel_247_OptLoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_247_OptLoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2405:1-2406:33];OptLoadArrayIndex(?to,?base) :-     LoadArrayIndex(?base,?to,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2405:1-2406:33];OptLoadArrayIndex(?to,?base) :- \n   LoadArrayIndex(?base,?to,_).;)" <<  rel_247_OptLoadArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1353:1-0:0];)" <<  rel_247_OptLoadArrayIndex->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [65:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Var_DeclaringMethod(?var,?method) :- 
   _Var_DeclaringMethod(?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_83_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_83_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_83_Var_DeclaringMethod_op_ctxt,rel_83_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_248_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_248_Var_DeclaringMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Var_DeclaringMethod(cat(?invocation,"/@tmp-arraycopy"),?inmethod) :- 
   isMethod("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",?inmethod),
   _ActualParam(0,?invocation,?src),
   _ActualParam(2,?invocation,?dest),
   isMethodInvocation(?invocation),
   isType("java.lang.Object").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_DeclaringMethod(cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_232_ActualParam->empty()&&!rel_84_isMethod->empty()&&!rel_237_isMethodInvocation->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt,rel_237_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_237_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_237_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env1[2])});
if (!(rel_248_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_DeclaringMethod(cat(?invocation,'/@tmp-arraycopy'),?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1779:1-1789:21];Var_DeclaringMethod(cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_248_Var_DeclaringMethod->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Var_DeclaringMethod(cat("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>","/@native-array-element"),"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>") :- 
   isMethod("<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   ReturnVar(?base,"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"),
   isType("java.lang.String"),
   isHeapAllocation("java.io.UnixFileSystem.list/new java.lang.String").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_DeclaringMethod(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(128)});
if (!(rel_248_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_DeclaringMethod(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1814:391-1814:1499];Var_DeclaringMethod(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_248_Var_DeclaringMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [65:1-0:0];)" <<  rel_248_Var_DeclaringMethod->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_237_isMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_83_Var_DeclaringMethod->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ApplicationVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [66:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ApplicationVar(?var) :- 
   Var_DeclaringMethod(?var,?method),
   ApplicationMethod(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [965:1-967:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ApplicationVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [965:1-967:30];ApplicationVar(?var) :- \n   Var_DeclaringMethod(?var,?method),\n   ApplicationMethod(?method).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_248_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_248_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_249_ApplicationVar_op_ctxt,rel_249_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_118_ApplicationMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_249_ApplicationVar->insert(tuple,READ_OP_CONTEXT(rel_249_ApplicationVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ApplicationVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [965:1-967:30];ApplicationVar(?var) :-     Var_DeclaringMethod(?var,?method),    ApplicationMethod(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ApplicationVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [965:1-967:30];ApplicationVar(?var) :- \n   Var_DeclaringMethod(?var,?method),\n   ApplicationMethod(?method).;)" <<  rel_249_ApplicationVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ApplicationVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [66:1-0:0];)" <<  rel_249_ApplicationVar->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [86:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isInstruction(?invocation) :- 
   _ActualParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isInstruction(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_232_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_232_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isInstruction(?invocation) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [288:1-292:43];isInstruction(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?invocation) :- 
   _BootstrapParam(?index,?invocation,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isInstruction(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_236_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_236_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_236_BootstrapParam_op_ctxt,rel_236_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isInstruction(?invocation) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [295:1-300:46];isInstruction(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?invocation) :- 
   _AssignReturnValue(?invocation,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isInstruction(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_216_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_216_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_216_AssignReturnValue_op_ctxt,rel_216_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isInstruction(?invocation) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [387:1-391:40];isInstruction(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isInstruction(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_1_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AssignHeapAllocation_op_ctxt,rel_1_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isInstruction(?instruction) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [435:1-442:68];isInstruction(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignLocal(?instruction,?index,?from,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isInstruction(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_13_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_13_AssignLocal_op_ctxt,rel_13_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isInstruction(?instruction) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [449:1-457:59];isInstruction(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignBinop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];isInstruction(?instruction) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_4_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_4_AssignBinop_op_ctxt,rel_4_AssignBinop->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];isInstruction(?instruction) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [460:1-467:52];isInstruction(?instruction) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignUnop(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];isInstruction(?instruction) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_21_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_21_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_21_AssignUnop_op_ctxt,rel_21_AssignUnop->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];isInstruction(?instruction) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [470:1-477:51];isInstruction(?instruction) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignCast(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isInstruction(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_5_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AssignCast_op_ctxt,rel_5_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isInstruction(?instruction) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [492:1-500:65];isInstruction(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isInstruction(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_8_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AssignCastNumConstant_op_ctxt,rel_8_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isInstruction(?instruction) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [503:1-513:77];isInstruction(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignCastNull(?instruction,?index,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isInstruction(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_7_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_7_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_7_AssignCastNull_op_ctxt,rel_7_AssignCastNull->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isInstruction(?instruction) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [516:1-524:62];isInstruction(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignNumConstant(?instruction,?index,?const,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isInstruction(?instruction) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_18_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_18_AssignNumConstant_op_ctxt,rel_18_AssignNumConstant->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isInstruction(?instruction) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [527:1-535:66];isInstruction(?instruction) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignNull(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isInstruction(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_16_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_16_AssignNull_op_ctxt,rel_16_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isInstruction(?instruction) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [538:1-544:51];isInstruction(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];isInstruction(?instruction) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_12_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_12_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_12_AssignInstanceOf_op_ctxt,rel_12_AssignInstanceOf->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];isInstruction(?instruction) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [547:1-555:71];isInstruction(?instruction) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _EnterMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];isInstruction(?instruction) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_30_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_30_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_30_EnterMonitor_op_ctxt,rel_30_EnterMonitor->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];isInstruction(?instruction) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [565:1-571:54];isInstruction(?instruction) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _ExitMonitor(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];isInstruction(?instruction) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_31_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_31_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_31_ExitMonitor_op_ctxt,rel_31_ExitMonitor->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];isInstruction(?instruction) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [574:1-580:53];isInstruction(?instruction) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _StaticMethodInvocation(?instruction,?index,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isInstruction(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_50_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_StaticMethodInvocation_op_ctxt,rel_50_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isInstruction(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [588:1-595:70];isInstruction(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isInstruction(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_49_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_49_SpecialMethodInvocation_op_ctxt,rel_49_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isInstruction(?instruction) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [598:1-606:78];isInstruction(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isInstruction(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_71_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_71_VirtualMethodInvocation_op_ctxt,rel_71_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isInstruction(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [609:1-617:78];isInstruction(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isInstruction(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_29_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_29_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_DynamicMethodInvocation_op_ctxt,rel_29_DynamicMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isInstruction(?instruction) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [620:1-627:85];isInstruction(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _Throw(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isInstruction(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_65_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_65_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_65_Throw_op_ctxt,rel_65_Throw->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isInstruction(?instruction) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [630:1-636:47];isInstruction(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _ThrowNull(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isInstruction(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_67_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_67_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_67_ThrowNull_op_ctxt,rel_67_ThrowNull->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isInstruction(?instruction) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [639:1-644:45];isInstruction(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isInstruction(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_56_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_56_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_56_StoreInstanceField_op_ctxt,rel_56_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isInstruction(?instruction) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [668:1-676:80];isInstruction(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isInstruction(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_39_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_LoadInstanceField_op_ctxt,rel_39_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isInstruction(?instruction) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [679:1-687:77];isInstruction(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _StoreStaticField(?instruction,?index,?from,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isInstruction(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_60_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_60_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_60_StoreStaticField_op_ctxt,rel_60_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isInstruction(?instruction) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [690:1-697:71];isInstruction(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _LoadStaticField(?instruction,?index,?to,?signature,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isInstruction(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_43_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_43_LoadStaticField_op_ctxt,rel_43_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isInstruction(?instruction) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [700:1-707:68];isInstruction(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _StoreArrayIndex(?instruction,?index,?from,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isInstruction(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_52_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_52_StoreArrayIndex_op_ctxt,rel_52_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isInstruction(?instruction) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [710:1-717:65];isInstruction(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _LoadArrayIndex(?instruction,?index,?to,?base,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isInstruction(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_35_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_35_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_LoadArrayIndex_op_ctxt,rel_35_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isInstruction(?instruction) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [720:1-727:62];isInstruction(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _Goto(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];isInstruction(?instruction) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_33_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_33_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_33_Goto_op_ctxt,rel_33_Goto->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];isInstruction(?instruction) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [734:1-739:45];isInstruction(?instruction) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _If(?instruction,?index,?to,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];isInstruction(?instruction) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_34_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_34_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_34_If_op_ctxt,rel_34_If->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];isInstruction(?instruction) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [742:1-747:43];isInstruction(?instruction) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _TableSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];isInstruction(?instruction) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_64_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_64_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_64_TableSwitch_op_ctxt,rel_64_TableSwitch->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];isInstruction(?instruction) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [750:1-756:53];isInstruction(?instruction) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _LookupSwitch(?instruction,?index,?key,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];isInstruction(?instruction) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_46_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_46_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_46_LookupSwitch_op_ctxt,rel_46_LookupSwitch->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];isInstruction(?instruction) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [759:1-765:54];isInstruction(?instruction) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _Return(?instruction,?index,?var,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isInstruction(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_23_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_23_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_23_Return_op_ctxt,rel_23_Return->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isInstruction(?instruction) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [784:1-790:48];isInstruction(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _ReturnVoid(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];isInstruction(?instruction) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_48_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_48_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_48_ReturnVoid_op_ctxt,rel_48_ReturnVoid->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];isInstruction(?instruction) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [793:1-798:46];isInstruction(?instruction) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _AssignPhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];isInstruction(?instruction) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_27_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignPhantomInvoke_op_ctxt,rel_27_AssignPhantomInvoke->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];isInstruction(?instruction) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [801:1-806:55];isInstruction(?instruction) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _PhantomInvoke(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];isInstruction(?instruction) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_47_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_47_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_47_PhantomInvoke_op_ctxt,rel_47_PhantomInvoke->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];isInstruction(?instruction) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [809:1-814:49];isInstruction(?instruction) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _BreakpointStmt(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];isInstruction(?instruction) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_28_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_28_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_28_BreakpointStmt_op_ctxt,rel_28_BreakpointStmt->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];isInstruction(?instruction) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [817:1-822:50];isInstruction(?instruction) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(?instruction) :- 
   _UnsupportedInstruction(?instruction,?index,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];isInstruction(?instruction) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_70_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_70_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_70_UnsupportedInstruction_op_ctxt,rel_70_UnsupportedInstruction->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];isInstruction(?instruction) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [825:1-829:58];isInstruction(?instruction) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isInstruction(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1403:1-1407:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.io.FileSystem: java.io.FileSystem getFileSystem()>",cat("/native","<java.io.UnixFileSystem: void <init>()>"))) :- 
   isMethod("<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   ReturnVar(?return,"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"),
   isMethod("<java.io.UnixFileSystem: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isInstruction(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isInstruction(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>'))) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1813:388-1813:1754];isInstruction(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>"))) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",?base),
   isMethod("<java.lang.Object: void finalize()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isInstruction(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1-1815:1751];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",cat("/native ","<java.lang.Object: void finalize()>"))) :- 
   isMethod("<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"),
   ReturnVar(?return,"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isInstruction(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1815:1752-1815:2399];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:1-1816:2282];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1816:2283-1816:3118];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:1-1817:2702];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1817:2703-1817:3713];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:1-1818:2489];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1818:2490-1818:3397];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   _FormalParam(0,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",?base),
   isMethod("<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:1-1819:2909];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",cat("/native ","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"))) :- 
   isMethod("<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"),
   ReturnVar(?return,"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_88_ReturnVar->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1819:2910-1819:3992];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_250_isInstruction->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isInstruction(cat("<register-finalize ",cat(?val1,cat("/",cat(?val2,"  >"))))) :- 
   AllocatedObjectSupportsFinalize(?val2,?val1),
   isMethod(?val1),
   isHeapAllocation(?val2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_112_isHeapAllocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_157_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_250_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isInstruction(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2213:1-2217:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_250_isInstruction->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isInstruction;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [86:1-0:0];)" <<  rel_250_isInstruction->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_236_BootstrapParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_216_AssignReturnValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_1_AssignHeapAllocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_13_AssignLocal->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_4_AssignBinop->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_21_AssignUnop->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_5_AssignCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_8_AssignCastNumConstant->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_7_AssignCastNull->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_18_AssignNumConstant->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_16_AssignNull->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_12_AssignInstanceOf->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_30_EnterMonitor->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_31_ExitMonitor->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_50_StaticMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_49_SpecialMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_71_VirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_29_DynamicMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_65_Throw->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_67_ThrowNull->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_56_StoreInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_39_LoadInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_60_StoreStaticField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_43_LoadStaticField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_52_StoreArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_35_LoadArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_33_Goto->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_34_If->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_64_TableSwitch->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_46_LookupSwitch->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_23_Return->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_48_ReturnVoid->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_27_AssignPhantomInvoke->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_47_PhantomInvoke->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_28_BreakpointStmt->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_70_UnsupportedInstruction->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2669:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",_),
   Tamiflex_ReflectionMap(?constructor,?invocation),
   isInstruction(?invocation),
   isMethod(?constructor),
   Method_DeclaringType(?constructor,?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_251_Tamiflex_Constructor_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_251_Tamiflex_Constructor_NewInstance->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2669:1-0:0];)" <<  rel_251_Tamiflex_Constructor_NewInstance->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2670:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_252_Tamiflex_Array_NewInstance_op_ctxt,rel_252_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_252_Tamiflex_Array_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_252_Tamiflex_Array_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_252_Tamiflex_Array_NewInstance->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2670:1-0:0];)" <<  rel_252_Tamiflex_Array_NewInstance->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2668:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.Object newInstance()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_253_Tamiflex_Class_NewInstance_op_ctxt,rel_253_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_253_Tamiflex_Class_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_253_Tamiflex_Class_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_253_Tamiflex_Class_NewInstance->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2668:1-0:0];)" <<  rel_253_Tamiflex_Class_NewInstance->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassModifier.facts"},{"name","_ClassModifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_254_ClassModifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2518:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassHasPossibleEntryPoint(?class) :- 
   Method_DeclaringType(?method,?class),
   _Method_Modifier("public",?method),
   !_ClassModifier("private",?class),
   !_Method_Modifier("static",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];ClassHasPossibleEntryPoint(?class) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_74_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_255_ClassHasPossibleEntryPoint_op_ctxt,rel_255_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((!rel_254_ClassModifier->contains(Tuple<RamDomain,2>({5,env0[1]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) && (!rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[0]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_255_ClassHasPossibleEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_255_ClassHasPossibleEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];ClassHasPossibleEntryPoint(?class) :-     Method_DeclaringType(?method,?class),    _Method_Modifier('public',?method),    !_ClassModifier('private',?class),    !_Method_Modifier('static',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];ClassHasPossibleEntryPoint(?class) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)" <<  rel_255_ClassHasPossibleEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2518:1-0:0];)" <<  rel_255_ClassHasPossibleEntryPoint->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PrefixAbove;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2525:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :- 
   ClassHasPossibleEntryPoint(?classAbove),
   LastDot(?classAbove,?lastDotPos).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2527:1-2529:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;PrefixAbove;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2527:1-2529:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :- \n   ClassHasPossibleEntryPoint(?classAbove),\n   LastDot(?classAbove,?lastDotPos).;)",profile);
if (!rel_255_ClassHasPossibleEntryPoint->empty()&&!rel_138_LastDot->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_255_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_255_ClassHasPossibleEntryPoint_op_ctxt,rel_255_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_138_LastDot_op_ctxt,rel_138_LastDot->createContext());
CREATE_OP_CONTEXT(rel_256_PrefixAbove_op_ctxt,rel_256_PrefixAbove->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_138_LastDot->equalRange<0>(key,READ_OP_CONTEXT(rel_138_LastDot_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[0]),(0),((env1[1]) + (1))).c_str()))),(RamDomain)((env1[1]) + (1))});
if (!(rel_256_PrefixAbove->insert(tuple,READ_OP_CONTEXT(rel_256_PrefixAbove_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;PrefixAbove;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2527:1-2529:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :-     ClassHasPossibleEntryPoint(?classAbove),    LastDot(?classAbove,?lastDotPos).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;PrefixAbove;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2527:1-2529:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :- \n   ClassHasPossibleEntryPoint(?classAbove),\n   LastDot(?classAbove,?lastDotPos).;)" <<  rel_256_PrefixAbove->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;PrefixAbove;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2525:1-0:0];)" <<  rel_256_PrefixAbove->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PrefixBelow;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2526:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :- 
   ClassHasPossibleEntryPoint(?classBelow),
   LastDot(?classBelow,?lastDotPos).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2530:1-2532:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;PrefixBelow;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2530:1-2532:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :- \n   ClassHasPossibleEntryPoint(?classBelow),\n   LastDot(?classBelow,?lastDotPos).;)",profile);
if (!rel_255_ClassHasPossibleEntryPoint->empty()&&!rel_138_LastDot->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_255_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_255_ClassHasPossibleEntryPoint_op_ctxt,rel_255_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_138_LastDot_op_ctxt,rel_138_LastDot->createContext());
CREATE_OP_CONTEXT(rel_257_PrefixBelow_op_ctxt,rel_257_PrefixBelow->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_138_LastDot->equalRange<0>(key,READ_OP_CONTEXT(rel_138_LastDot_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[0]),(0),(env1[1])).c_str())))});
if (!(rel_257_PrefixBelow->insert(tuple,READ_OP_CONTEXT(rel_257_PrefixBelow_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;PrefixBelow;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2530:1-2532:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :-     ClassHasPossibleEntryPoint(?classBelow),    LastDot(?classBelow,?lastDotPos).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;PrefixBelow;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2530:1-2532:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :- \n   ClassHasPossibleEntryPoint(?classBelow),\n   LastDot(?classBelow,?lastDotPos).;)" <<  rel_257_PrefixBelow->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;PrefixBelow;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2526:1-0:0];)" <<  rel_257_PrefixBelow->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_138_LastDot->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2533:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :- 
   PrefixAbove(?classAbove, _tmp_0,?prefixLen),
   PrefixBelow(?classBelow,?prefixBelow),
    _tmp_0 = substr(?prefixBelow,0,?prefixLen).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2534:1-2537:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2534:1-2537:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :- \n   PrefixAbove(?classAbove, _tmp_0,?prefixLen),\n   PrefixBelow(?classBelow,?prefixBelow),\n    _tmp_0 = substr(?prefixBelow,0,?prefixLen).;)",profile);
if (!rel_256_PrefixAbove->empty()&&!rel_257_PrefixBelow->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_256_PrefixAbove->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_ClassIsAboveOtherInNamingHierarchy_op_ctxt,rel_258_ClassIsAboveOtherInNamingHierarchy->createContext());
CREATE_OP_CONTEXT(rel_256_PrefixAbove_op_ctxt,rel_256_PrefixAbove->createContext());
CREATE_OP_CONTEXT(rel_257_PrefixBelow_op_ctxt,rel_257_PrefixBelow->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_257_PrefixBelow) {
if( ((env0[1]) == ((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env1[1]),(0),(env0[2])).c_str()))))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_258_ClassIsAboveOtherInNamingHierarchy->insert(tuple,READ_OP_CONTEXT(rel_258_ClassIsAboveOtherInNamingHierarchy_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2534:1-2537:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :-     PrefixAbove(?classAbove, _tmp_0,?prefixLen),    PrefixBelow(?classBelow,?prefixBelow),     _tmp_0 = substr(?prefixBelow,0,?prefixLen).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2534:1-2537:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :- \n   PrefixAbove(?classAbove, _tmp_0,?prefixLen),\n   PrefixBelow(?classBelow,?prefixBelow),\n    _tmp_0 = substr(?prefixBelow,0,?prefixLen).;)" <<  rel_258_ClassIsAboveOtherInNamingHierarchy->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2533:1-0:0];)" <<  rel_258_ClassIsAboveOtherInNamingHierarchy->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_256_PrefixAbove->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_257_PrefixBelow->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2538:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ClassWithTopLevelEntryPoint(?class) :- 
   ClassHasPossibleEntryPoint(?class),
   !ClassIsAboveOtherInNamingHierarchy(_,?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2540:1-2542:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2540:1-2542:50];ClassWithTopLevelEntryPoint(?class) :- \n   ClassHasPossibleEntryPoint(?class),\n   !ClassIsAboveOtherInNamingHierarchy(_,?class).;)",profile);
if (!rel_255_ClassHasPossibleEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_255_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_255_ClassHasPossibleEntryPoint_op_ctxt,rel_255_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_258_ClassIsAboveOtherInNamingHierarchy_op_ctxt,rel_258_ClassIsAboveOtherInNamingHierarchy->createContext());
CREATE_OP_CONTEXT(rel_259_ClassWithTopLevelEntryPoint_op_ctxt,rel_259_ClassWithTopLevelEntryPoint->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_258_ClassIsAboveOtherInNamingHierarchy->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_258_ClassIsAboveOtherInNamingHierarchy_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_259_ClassWithTopLevelEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_259_ClassWithTopLevelEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2540:1-2542:50];ClassWithTopLevelEntryPoint(?class) :-     ClassHasPossibleEntryPoint(?class),    !ClassIsAboveOtherInNamingHierarchy(_,?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2540:1-2542:50];ClassWithTopLevelEntryPoint(?class) :- \n   ClassHasPossibleEntryPoint(?class),\n   !ClassIsAboveOtherInNamingHierarchy(_,?class).;)" <<  rel_259_ClassWithTopLevelEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2538:1-0:0];)" <<  rel_259_ClassWithTopLevelEntryPoint->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_255_ClassHasPossibleEntryPoint->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_258_ClassIsAboveOtherInNamingHierarchy->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2517:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PossibleEntryPoint(?method) :- 
   Method_DeclaringType(?method,?class),
   _Method_Modifier("public",?method),
   !_ClassModifier("private",?class),
   !_Method_Modifier("static",?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];PossibleEntryPoint(?method) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_74_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_260_PossibleEntryPoint_op_ctxt,rel_260_PossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((!rel_254_ClassModifier->contains(Tuple<RamDomain,2>({5,env0[1]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) && (!rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[0]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_260_PossibleEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_260_PossibleEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];PossibleEntryPoint(?method) :-     Method_DeclaringType(?method,?class),    _Method_Modifier('public',?method),    !_ClassModifier('private',?class),    !_Method_Modifier('static',?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2519:1-2524:39];PossibleEntryPoint(?method) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)" <<  rel_260_PossibleEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2517:1-0:0];)" <<  rel_260_PossibleEntryPoint->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2539:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TopLevelEntryPoint(?method) :- 
   PossibleEntryPoint(?method),
   Method_DeclaringType(?method,?class),
   _ApplicationClass(?class),
   ClassWithTopLevelEntryPoint(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2543:1-2547:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2543:1-2547:39];TopLevelEntryPoint(?method) :- \n   PossibleEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class),\n   ClassWithTopLevelEntryPoint(?class).;)",profile);
if (!rel_259_ClassWithTopLevelEntryPoint->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_260_PossibleEntryPoint->empty()&&!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_260_PossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_259_ClassWithTopLevelEntryPoint_op_ctxt,rel_259_ClassWithTopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_260_PossibleEntryPoint_op_ctxt,rel_260_PossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt,rel_261_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_117_ApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_259_ClassWithTopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_259_ClassWithTopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_261_TopLevelEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2543:1-2547:39];TopLevelEntryPoint(?method) :-     PossibleEntryPoint(?method),    Method_DeclaringType(?method,?class),    _ApplicationClass(?class),    ClassWithTopLevelEntryPoint(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2543:1-2547:39];TopLevelEntryPoint(?method) :- \n   PossibleEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class),\n   ClassWithTopLevelEntryPoint(?class).;)" <<  rel_261_TopLevelEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2539:1-0:0];)" <<  rel_261_TopLevelEntryPoint->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_260_PossibleEntryPoint->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_259_ClassWithTopLevelEntryPoint->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2591:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(FormalsForEntryPoints(?method,?formal) :- 
   TopLevelEntryPoint(?method),
   _FormalParam(_,?method,?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2592:1-2594:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2592:1-2594:36];FormalsForEntryPoints(?method,?formal) :- \n   TopLevelEntryPoint(?method),\n   _FormalParam(_,?method,?formal).;)",profile);
if (!rel_261_TopLevelEntryPoint->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_261_TopLevelEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_262_FormalsForEntryPoints_op_ctxt,rel_262_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt,rel_261_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],0});
auto range = rel_32_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_262_FormalsForEntryPoints->insert(tuple,READ_OP_CONTEXT(rel_262_FormalsForEntryPoints_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2592:1-2594:36];FormalsForEntryPoints(?method,?formal) :-     TopLevelEntryPoint(?method),    _FormalParam(_,?method,?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2592:1-2594:36];FormalsForEntryPoints(?method,?formal) :- \n   TopLevelEntryPoint(?method),\n   _FormalParam(_,?method,?formal).;)" <<  rel_262_FormalsForEntryPoints->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2591:1-0:0];)" <<  rel_262_FormalsForEntryPoints->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2550:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AllConcreteImplementations(?class,?staticType) :- 
   isClassType(?class),
   SubtypeOf(?class,?staticType),
   !_ClassModifier("abstract",?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2552:1-2555:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2552:1-2555:38];AllConcreteImplementations(?class,?staticType) :- \n   isClassType(?class),\n   SubtypeOf(?class,?staticType),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_183_SubtypeOf->empty()&&!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt,rel_263_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_254_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_183_SubtypeOf->equalRange<0>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_263_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2552:1-2555:38];AllConcreteImplementations(?class,?staticType) :-     isClassType(?class),    SubtypeOf(?class,?staticType),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2552:1-2555:38];AllConcreteImplementations(?class,?staticType) :- \n   isClassType(?class),\n   SubtypeOf(?class,?staticType),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_263_AllConcreteImplementations->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AllConcreteImplementations(?class,?class) :- 
   isClassType(?class),
   !_ClassModifier("abstract",?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2556:1-2558:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2556:1-2558:38];AllConcreteImplementations(?class,?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt,rel_263_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_254_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_263_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2556:1-2558:38];AllConcreteImplementations(?class,?class) :-     isClassType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2556:1-2558:38];AllConcreteImplementations(?class,?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_263_AllConcreteImplementations->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(AllConcreteImplementations(?type,?type) :- 
   isArrayType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2559:1-2560:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2559:1-2560:22];AllConcreteImplementations(?type,?type) :- \n   isArrayType(?type).;)",profile);
if (!rel_126_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_126_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt,rel_263_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_263_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2559:1-2560:22];AllConcreteImplementations(?type,?type) :-     isArrayType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2559:1-2560:22];AllConcreteImplementations(?type,?type) :- \n   isArrayType(?type).;)" <<  rel_263_AllConcreteImplementations->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2550:1-0:0];)" <<  rel_263_AllConcreteImplementations->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2632:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :- 
   AllConcreteImplementations(_,?staticType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2634:1-2638:6])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2634:1-2638:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :- \n   AllConcreteImplementations(_,?staticType).;)",profile);
if (!rel_263_AllConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_263_AllConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt,rel_263_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_264_TypeToConcreteImplementationOrd_op_ctxt,rel_264_TypeToConcreteImplementationOrd->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_263_AllConcreteImplementations->equalRange<1>(key,READ_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_264_TypeToConcreteImplementationOrd->insert(tuple,READ_OP_CONTEXT(rel_264_TypeToConcreteImplementationOrd_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2634:1-2638:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :-     AllConcreteImplementations(_,?staticType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2634:1-2638:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :- \n   AllConcreteImplementations(_,?staticType).;)" <<  rel_264_TypeToConcreteImplementationOrd->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2632:1-0:0];)" <<  rel_264_TypeToConcreteImplementationOrd->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2633:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ConcreteImplementations(?staticType,?class) :- 
   TypeToConcreteImplementationOrd(?staticType, _tmp_0),
   isType(?class),
    _tmp_0 = ord(?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2639:1-2642:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2639:1-2642:27];ConcreteImplementations(?staticType,?class) :- \n   TypeToConcreteImplementationOrd(?staticType, _tmp_0),\n   isType(?class),\n    _tmp_0 = ord(?class).;)",profile);
if (!rel_264_TypeToConcreteImplementationOrd->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_264_TypeToConcreteImplementationOrd->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_265_ConcreteImplementations_op_ctxt,rel_265_ConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_264_TypeToConcreteImplementationOrd_op_ctxt,rel_264_TypeToConcreteImplementationOrd->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_149_isType) {
if( ((env0[1]) == (env1[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_265_ConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_265_ConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2639:1-2642:27];ConcreteImplementations(?staticType,?class) :-     TypeToConcreteImplementationOrd(?staticType, _tmp_0),    isType(?class),     _tmp_0 = ord(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2639:1-2642:27];ConcreteImplementations(?staticType,?class) :- \n   TypeToConcreteImplementationOrd(?staticType, _tmp_0),\n   isType(?class),\n    _tmp_0 = ord(?class).;)" <<  rel_265_ConcreteImplementations->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ConcreteImplementations;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2633:1-0:0];)" <<  rel_265_ConcreteImplementations->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_264_TypeToConcreteImplementationOrd->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2551:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ConcreteType(?type) :- 
   AllConcreteImplementations(?type,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2561:1-2562:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2561:1-2562:40];ConcreteType(?type) :- \n   AllConcreteImplementations(?type,_).;)",profile);
if (!rel_263_AllConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_263_AllConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_263_AllConcreteImplementations_op_ctxt,rel_263_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_266_ConcreteType_op_ctxt,rel_266_ConcreteType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_266_ConcreteType->insert(tuple,READ_OP_CONTEXT(rel_266_ConcreteType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ConcreteType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2561:1-2562:40];ConcreteType(?type) :-     AllConcreteImplementations(?type,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ConcreteType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2561:1-2562:40];ConcreteType(?type) :- \n   AllConcreteImplementations(?type,_).;)" <<  rel_266_ConcreteType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ConcreteType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2551:1-0:0];)" <<  rel_266_ConcreteType->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_263_AllConcreteImplementations->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2643:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StaticToActualType(?class,?staticType) :- 
   ConcreteImplementations(?staticType,?class),
   !ConcreteType(?staticType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2644:1-2646:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2644:1-2646:30];StaticToActualType(?class,?staticType) :- \n   ConcreteImplementations(?staticType,?class),\n   !ConcreteType(?staticType).;)",profile);
if (!rel_265_ConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_265_ConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_265_ConcreteImplementations_op_ctxt,rel_265_ConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_266_ConcreteType_op_ctxt,rel_266_ConcreteType->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_266_ConcreteType->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_266_ConcreteType_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_267_StaticToActualType->insert(tuple,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2644:1-2646:30];StaticToActualType(?class,?staticType) :-     ConcreteImplementations(?staticType,?class),    !ConcreteType(?staticType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2644:1-2646:30];StaticToActualType(?class,?staticType) :- \n   ConcreteImplementations(?staticType,?class),\n   !ConcreteType(?staticType).;)" <<  rel_267_StaticToActualType->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StaticToActualType(?type,?type) :- 
   ConcreteType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2647:1-2648:23])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2647:1-2648:23];StaticToActualType(?type,?type) :- \n   ConcreteType(?type).;)",profile);
if (!rel_266_ConcreteType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_266_ConcreteType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_266_ConcreteType_op_ctxt,rel_266_ConcreteType->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_267_StaticToActualType->insert(tuple,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2647:1-2648:23];StaticToActualType(?type,?type) :-     ConcreteType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2647:1-2648:23];StaticToActualType(?type,?type) :- \n   ConcreteType(?type).;)" <<  rel_267_StaticToActualType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StaticToActualType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2643:1-0:0];)" <<  rel_267_StaticToActualType->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_266_ConcreteType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_265_ConcreteImplementations->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2563:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ObjToMock(?class) :- 
   TopLevelEntryPoint(?method),
   Method_DeclaringType(?method,?class),
   isReferenceType(?class),
   !_ClassModifier("abstract",?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2566:1-2571:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2566:1-2571:38];ObjToMock(?class) :- \n   TopLevelEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   isReferenceType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_261_TopLevelEntryPoint->empty()&&!rel_145_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_261_TopLevelEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt,rel_261_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_145_isReferenceType_op_ctxt,rel_145_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_254_ClassModifier->contains(Tuple<RamDomain,2>({3,env1[1]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_145_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_145_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_268_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_268_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2566:1-2571:38];ObjToMock(?class) :-     TopLevelEntryPoint(?method),    Method_DeclaringType(?method,?class),    isReferenceType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2566:1-2571:38];ObjToMock(?class) :- \n   TopLevelEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   isReferenceType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_268_ObjToMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ObjToMock(?subtype) :- 
   FormalsForEntryPoints(?method,?formal),
   Var_Type(?formal,?staticType),
   StaticToActualType(?subtype,?staticType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];ObjToMock(?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)",profile);
if (!rel_262_FormalsForEntryPoints->empty()&&!rel_267_StaticToActualType->empty()&&!rel_241_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_262_FormalsForEntryPoints->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_262_FormalsForEntryPoints_op_ctxt,rel_262_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_267_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_268_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_268_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];ObjToMock(?subtype) :-     FormalsForEntryPoints(?method,?formal),    Var_Type(?formal,?staticType),    StaticToActualType(?subtype,?staticType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];ObjToMock(?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)" <<  rel_268_ObjToMock->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2563:1-0:0];)" <<  rel_268_ObjToMock->size() << std::endl;
}rel_269_delta_ObjToMock->insertAll(*rel_268_ObjToMock);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2563:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ObjToMock(?class) :- 
   ObjToMock(?type),
   isArrayType(?type),
   _ComponentType(?type,?componentType),
   StaticToActualType(?class,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2572:1-2577:46])_");
{
	RamLogger logger(R"(@t-recursive-rule;ObjToMock;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2572:1-2577:46];ObjToMock(?class) :- \n   ObjToMock(?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   StaticToActualType(?class,?componentType).;)",profile);
if (!rel_269_delta_ObjToMock->empty()&&!rel_267_StaticToActualType->empty()&&!rel_125_ComponentType->empty()&&!rel_126_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_269_delta_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_269_delta_ObjToMock_op_ctxt,rel_269_delta_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_270_new_ObjToMock_op_ctxt,rel_270_new_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_126_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_126_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_125_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_267_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_268_ObjToMock->contains(Tuple<RamDomain,1>({env3[0]}),READ_OP_CONTEXT(rel_268_ObjToMock_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_270_new_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_270_new_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2572:1-2577:46];@new_ObjToMock(?class) :-     @delta_ObjToMock(?type),    isArrayType(?type),    _ComponentType(?type,?componentType),    StaticToActualType(?class,?componentType),    !ObjToMock(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ObjToMock;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2572:1-2577:46];ObjToMock(?class) :- \n   ObjToMock(?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   StaticToActualType(?class,?componentType).;)" <<  rel_270_new_ObjToMock->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2563:1-0:0];)" <<  rel_270_new_ObjToMock->size() << std::endl;
}if(rel_270_new_ObjToMock->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2563:1-0:0];)",profile);
rel_268_ObjToMock->insertAll(*rel_270_new_ObjToMock);
{
auto rel_0 = rel_269_delta_ObjToMock;
rel_269_delta_ObjToMock = rel_270_new_ObjToMock;
rel_270_new_ObjToMock = rel_0;
}
rel_270_new_ObjToMock->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_269_delta_ObjToMock->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_270_new_ObjToMock->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_145_isReferenceType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2607:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MockObject(cat(?class,"::: (Mock)"),?class) :- 
   ObjToMock(?class),
   !MainMethodDeclaration(_),
   !AndroidAppComponent(_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];MockObject(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_268_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_268_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_271_MockObject_op_ctxt,rel_271_MockObject->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((rel_231_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt)).empty()) && (rel_147_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str())),(RamDomain)(env0[0])});
if (!(rel_271_MockObject->insert(tuple,READ_OP_CONTEXT(rel_271_MockObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];MockObject(cat(?class,'::: (Mock)'),?class) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];MockObject(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_271_MockObject->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MockObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2607:1-0:0];)" <<  rel_271_MockObject->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectForType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2579:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MockObjectForType(?value,?staticType) :- 
   MockObject(?value,?class),
   StaticToActualType(?class,?staticType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2580:1-2582:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectForType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2580:1-2582:43];MockObjectForType(?value,?staticType) :- \n   MockObject(?value,?class),\n   StaticToActualType(?class,?staticType).;)",profile);
if (!rel_271_MockObject->empty()&&!rel_267_StaticToActualType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_271_MockObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_271_MockObject_op_ctxt,rel_271_MockObject->createContext());
CREATE_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt,rel_272_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_267_StaticToActualType->equalRange<0>(key,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_272_MockObjectForType->insert(tuple,READ_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockObjectForType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2580:1-2582:43];MockObjectForType(?value,?staticType) :-     MockObject(?value,?class),    StaticToActualType(?class,?staticType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockObjectForType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2580:1-2582:43];MockObjectForType(?value,?staticType) :- \n   MockObject(?value,?class),\n   StaticToActualType(?class,?staticType).;)" <<  rel_272_MockObjectForType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MockObjectForType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2579:1-0:0];)" <<  rel_272_MockObjectForType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2583:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MockObjectForComponentType(?value,?arrayType) :- 
   _ComponentType(?arrayType,?componentType),
   MockObjectForType(?value,?componentType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2584:1-2586:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2584:1-2586:45];MockObjectForComponentType(?value,?arrayType) :- \n   _ComponentType(?arrayType,?componentType),\n   MockObjectForType(?value,?componentType).;)",profile);
if (!rel_272_MockObjectForType->empty()&&!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_273_MockObjectForComponentType_op_ctxt,rel_273_MockObjectForComponentType->createContext());
CREATE_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt,rel_272_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_272_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_273_MockObjectForComponentType->insert(tuple,READ_OP_CONTEXT(rel_273_MockObjectForComponentType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2584:1-2586:45];MockObjectForComponentType(?value,?arrayType) :-     _ComponentType(?arrayType,?componentType),    MockObjectForType(?value,?componentType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2584:1-2586:45];MockObjectForComponentType(?value,?arrayType) :- \n   _ComponentType(?arrayType,?componentType),\n   MockObjectForType(?value,?componentType).;)" <<  rel_273_MockObjectForComponentType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2583:1-0:0];)" <<  rel_273_MockObjectForComponentType->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TypeForFormals;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2596:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TypeForFormals(?formal,?method,?subtype) :- 
   FormalsForEntryPoints(?method,?formal),
   Var_Type(?formal,?staticType),
   StaticToActualType(?subtype,?staticType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;TypeForFormals;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];TypeForFormals(?formal,?method,?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)",profile);
if (!rel_262_FormalsForEntryPoints->empty()&&!rel_267_StaticToActualType->empty()&&!rel_241_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_262_FormalsForEntryPoints->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_262_FormalsForEntryPoints_op_ctxt,rel_262_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt,rel_267_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_274_TypeForFormals_op_ctxt,rel_274_TypeForFormals->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_267_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_267_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0]),(RamDomain)(env2[0])});
if (!(rel_274_TypeForFormals->insert(tuple,READ_OP_CONTEXT(rel_274_TypeForFormals_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;TypeForFormals;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];TypeForFormals(?formal,?method,?subtype) :-     FormalsForEntryPoints(?method,?formal),    Var_Type(?formal,?staticType),    StaticToActualType(?subtype,?staticType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;TypeForFormals;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2597:1-2602:45];TypeForFormals(?formal,?method,?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)" <<  rel_274_TypeForFormals->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;TypeForFormals;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2596:1-0:0];)" <<  rel_274_TypeForFormals->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_262_FormalsForEntryPoints->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_267_StaticToActualType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MockForFormal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2603:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MockForFormal(?value,?formal,?type,?method) :- 
   TypeForFormals(?formal,?method,?type),
   MockObject(?value,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2604:1-2606:29])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockForFormal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2604:1-2606:29];MockForFormal(?value,?formal,?type,?method) :- \n   TypeForFormals(?formal,?method,?type),\n   MockObject(?value,?type).;)",profile);
if (!rel_271_MockObject->empty()&&!rel_274_TypeForFormals->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_274_TypeForFormals->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_275_MockForFormal_op_ctxt,rel_275_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_271_MockObject_op_ctxt,rel_271_MockObject->createContext());
CREATE_OP_CONTEXT(rel_274_TypeForFormals_op_ctxt,rel_274_TypeForFormals->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_271_MockObject->equalRange<1>(key,READ_OP_CONTEXT(rel_271_MockObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[2]),(RamDomain)(env0[1])});
if (!(rel_275_MockForFormal->insert(tuple,READ_OP_CONTEXT(rel_275_MockForFormal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockForFormal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2604:1-2606:29];MockForFormal(?value,?formal,?type,?method) :-     TypeForFormals(?formal,?method,?type),    MockObject(?value,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockForFormal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2604:1-2606:29];MockForFormal(?value,?formal,?type,?method) :- \n   TypeForFormals(?formal,?method,?type),\n   MockObject(?value,?type).;)" <<  rel_275_MockForFormal->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MockForFormal;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2603:1-0:0];)" <<  rel_275_MockForFormal->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_274_TypeForFormals->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_271_MockObject->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [27:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ConcreteClass(?class) :- 
   isClassType(?class),
   !_ClassModifier("abstract",?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [968:1-970:38])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [968:1-970:38];ConcreteClass(?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_132_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_132_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt,rel_276_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_254_ClassModifier_op_ctxt,rel_254_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_132_isClassType_op_ctxt,rel_132_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_254_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_254_ClassModifier_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_276_ConcreteClass->insert(tuple,READ_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ConcreteClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [968:1-970:38];ConcreteClass(?class) :-     isClassType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ConcreteClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [968:1-970:38];ConcreteClass(?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_276_ConcreteClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ConcreteClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [27:1-0:0];)" <<  rel_276_ConcreteClass->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_132_isClassType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_254_ClassModifier->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;isImmutableHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1328:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isImmutableHContext(["<<immutable-hcontext>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isImmutableHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82];isImmutableHContext([\"<<immutable-hcontext>>\"]).;)",profile);
rel_277_isImmutableHContext->insert(pack(ram::Tuple<RamDomain,1>({43})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isImmutableHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82];isImmutableHContext([\"<<immutable-hcontext>>\"]).;)" <<  rel_277_isImmutableHContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isImmutableHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1328:1-0:0];)" <<  rel_277_isImmutableHContext->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2609:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ContextForEntryPoint([hctxValue,?value],?method) :- 
   _ThisVar(?method,?receiver),
   Method_DeclaringType(?method,?class),
   MockObjectForType(?value,?class),
   isImmutableHContext([hctxValue]),
   TopLevelEntryPoint(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ContextForEntryPoint([hctxValue,?value],?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_272_MockObjectForType->empty()&&!rel_261_TopLevelEntryPoint->empty()&&!rel_82_ThisVar->empty()&&!rel_277_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_82_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_278_ContextForEntryPoint_op_ctxt,rel_278_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt,rel_272_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt,rel_261_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_277_isImmutableHContext_op_ctxt,rel_277_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_272_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
for(const auto& env3 : *rel_277_isImmutableHContext) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_261_TopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env2[0]}))),(RamDomain)(env0[0])});
if (!(rel_278_ContextForEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_278_ContextForEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ContextForEntryPoint([hctxValue,?value],?method) :-     _ThisVar(?method,?receiver),    Method_DeclaringType(?method,?class),    MockObjectForType(?value,?class),    isImmutableHContext([hctxValue]),    TopLevelEntryPoint(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ContextForEntryPoint([hctxValue,?value],?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)" <<  rel_278_ContextForEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2609:1-0:0];)" <<  rel_278_ContextForEntryPoint->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2616:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :- 
   _ThisVar(?method,?receiver),
   Method_DeclaringType(?method,?class),
   MockObjectForType(?value,?class),
   isImmutableHContext([hctxValue]),
   TopLevelEntryPoint(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_272_MockObjectForType->empty()&&!rel_261_TopLevelEntryPoint->empty()&&!rel_82_ThisVar->empty()&&!rel_277_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_82_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt,rel_272_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_279_ReceiverPointsTo_op_ctxt,rel_279_ReceiverPointsTo->createContext());
CREATE_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt,rel_261_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_277_isImmutableHContext_op_ctxt,rel_277_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_272_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_272_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
for(const auto& env3 : *rel_277_isImmutableHContext) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_261_TopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_261_TopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env2[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env2[0]}))),(RamDomain)(env0[1]),(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_279_ReceiverPointsTo->insert(tuple,READ_OP_CONTEXT(rel_279_ReceiverPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :-     _ThisVar(?method,?receiver),    Method_DeclaringType(?method,?class),    MockObjectForType(?value,?class),    isImmutableHContext([hctxValue]),    TopLevelEntryPoint(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2622:1-2629:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)" <<  rel_279_ReceiverPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2616:1-0:0];)" <<  rel_279_ReceiverPointsTo->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_261_TopLevelEntryPoint->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_272_MockObjectForType->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2610:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HContextForEntryPoint([ctxValue2],?method) :- 
   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];HContextForEntryPoint([ctxValue2],?method) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_279_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_279_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt,rel_280_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_279_ReceiverPointsTo_op_ctxt,rel_279_ReceiverPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[4])});
if (!(rel_280_HContextForEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];HContextForEntryPoint([ctxValue2],?method) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];HContextForEntryPoint([ctxValue2],?method) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_280_HContextForEntryPoint->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2610:1-0:0];)" <<  rel_280_HContextForEntryPoint->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2608:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MockObjectContext(?hctx,?value,?class) :- 
   ContextForEntryPoint(?ctx,?method),
   HContextForEntryPoint(?hctx,?method),
   MockForFormal(?value,?formal,?class,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];MockObjectContext(?hctx,?value,?class) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)",profile);
if (!rel_278_ContextForEntryPoint->empty()&&!rel_280_HContextForEntryPoint->empty()&&!rel_275_MockForFormal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_278_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_278_ContextForEntryPoint_op_ctxt,rel_278_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt,rel_280_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_275_MockForFormal_op_ctxt,rel_275_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_281_MockObjectContext_op_ctxt,rel_281_MockObjectContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_280_HContextForEntryPoint->equalRange<1>(key,READ_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_275_MockForFormal->equalRange<3>(key,READ_OP_CONTEXT(rel_275_MockForFormal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[2])});
if (!(rel_281_MockObjectContext->insert(tuple,READ_OP_CONTEXT(rel_281_MockObjectContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];MockObjectContext(?hctx,?value,?class) :-     ContextForEntryPoint(?ctx,?method),    HContextForEntryPoint(?hctx,?method),    MockForFormal(?value,?formal,?class,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];MockObjectContext(?hctx,?value,?class) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)" <<  rel_281_MockObjectContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(MockObjectContext([ctxValue2],?value,?class) :- 
   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];MockObjectContext([ctxValue2],?value,?class) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_279_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_279_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_281_MockObjectContext_op_ctxt,rel_281_MockObjectContext->createContext());
CREATE_OP_CONTEXT(rel_279_ReceiverPointsTo_op_ctxt,rel_279_ReceiverPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,3> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_281_MockObjectContext->insert(tuple,READ_OP_CONTEXT(rel_281_MockObjectContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];MockObjectContext([ctxValue2],?value,?class) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];MockObjectContext([ctxValue2],?value,?class) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_281_MockObjectContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MockObjectContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2608:1-0:0];)" <<  rel_281_MockObjectContext->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AndroidEntryPoint.facts"},{"name","_AndroidEntryPoint"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_282_AndroidEntryPoint);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1307:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ImplicitReachable(sig) :- 
   _AndroidEntryPoint(sig).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1729:1-1730:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1729:1-1730:28];ImplicitReachable(sig) :- \n   _AndroidEntryPoint(sig).;)",profile);
if (!rel_282_AndroidEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_282_AndroidEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_282_AndroidEntryPoint_op_ctxt,rel_282_AndroidEntryPoint->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1729:1-1730:28];ImplicitReachable(sig) :-     _AndroidEntryPoint(sig).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1729:1-1730:28];ImplicitReachable(sig) :- \n   _AndroidEntryPoint(sig).;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.System: void initializeSystemClass()>") :- 
   isMethod("<java.lang.System: void initializeSystemClass()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1731:1-1733:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1731:1-1733:16];ImplicitReachable(\"<java.lang.System: void initializeSystemClass()>\") :- \n   isMethod(\"<java.lang.System: void initializeSystemClass()>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({91});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(91)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1731:1-1733:16];ImplicitReachable('<java.lang.System: void initializeSystemClass()>') :-     isMethod('<java.lang.System: void initializeSystemClass()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1731:1-1733:16];ImplicitReachable(\"<java.lang.System: void initializeSystemClass()>\") :- \n   isMethod(\"<java.lang.System: void initializeSystemClass()>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>") :- 
   isMethod("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1734:1-1736:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1734:1-1736:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({92});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(92)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1734:1-1736:16];ImplicitReachable('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>') :-     isMethod('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1734:1-1736:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>") :- 
   isMethod("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1737:1-1739:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1737:1-1739:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({93});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(93)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1737:1-1739:16];ImplicitReachable('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     isMethod('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1737:1-1739:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ThreadGroup: void <init>()>") :- 
   isMethod("<java.lang.ThreadGroup: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1740:1-1742:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1740:1-1742:16];ImplicitReachable(\"<java.lang.ThreadGroup: void <init>()>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void <init>()>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({94});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(94)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1740:1-1742:16];ImplicitReachable('<java.lang.ThreadGroup: void <init>()>') :-     isMethod('<java.lang.ThreadGroup: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1740:1-1742:16];ImplicitReachable(\"<java.lang.ThreadGroup: void <init>()>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void <init>()>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.Thread: void exit()>") :- 
   isMethod("<java.lang.Thread: void exit()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1743:1-1745:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1743:1-1745:16];ImplicitReachable(\"<java.lang.Thread: void exit()>\") :- \n   isMethod(\"<java.lang.Thread: void exit()>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({95});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(95)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1743:1-1745:16];ImplicitReachable('<java.lang.Thread: void exit()>') :-     isMethod('<java.lang.Thread: void exit()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1743:1-1745:16];ImplicitReachable(\"<java.lang.Thread: void exit()>\") :- \n   isMethod(\"<java.lang.Thread: void exit()>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>") :- 
   isMethod("<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1746:1-1748:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1746:1-1748:16];ImplicitReachable(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({96});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(96)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1746:1-1748:16];ImplicitReachable('<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>') :-     isMethod('<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1746:1-1748:16];ImplicitReachable(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ClassLoader: void <init>()>") :- 
   isMethod("<java.lang.ClassLoader: void <init>()>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1749:1-1751:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1749:1-1751:16];ImplicitReachable(\"<java.lang.ClassLoader: void <init>()>\") :- \n   isMethod(\"<java.lang.ClassLoader: void <init>()>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({97});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(97)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1749:1-1751:16];ImplicitReachable('<java.lang.ClassLoader: void <init>()>') :-     isMethod('<java.lang.ClassLoader: void <init>()>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1749:1-1751:16];ImplicitReachable(\"<java.lang.ClassLoader: void <init>()>\") :- \n   isMethod(\"<java.lang.ClassLoader: void <init>()>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>") :- 
   isMethod("<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1752:1-1754:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1752:1-1754:16];ImplicitReachable(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({98});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(98)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1752:1-1754:16];ImplicitReachable('<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>') :-     isMethod('<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1752:1-1754:16];ImplicitReachable(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>") :- 
   isMethod("<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1755:1-1757:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1755:1-1757:16];ImplicitReachable(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({99});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(99)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1755:1-1757:16];ImplicitReachable('<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>') :-     isMethod('<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1755:1-1757:16];ImplicitReachable(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ClassLoader: void addClass(java.lang.Class)>") :- 
   isMethod("<java.lang.ClassLoader: void addClass(java.lang.Class)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1758:1-1760:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1758:1-1760:16];ImplicitReachable(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({100});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(100)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1758:1-1760:16];ImplicitReachable('<java.lang.ClassLoader: void addClass(java.lang.Class)>') :-     isMethod('<java.lang.ClassLoader: void addClass(java.lang.Class)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1758:1-1760:16];ImplicitReachable(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>") :- 
   isMethod("<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1761:1-1763:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1761:1-1763:16];ImplicitReachable(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({101});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(101)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1761:1-1763:16];ImplicitReachable('<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>') :-     isMethod('<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1761:1-1763:16];ImplicitReachable(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ImplicitReachable("<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>") :- 
   isMethod("<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1764:1-1766:16])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1764:1-1766:16];ImplicitReachable(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\") :- \n   isMethod(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\").;)",profile);
if (!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({102});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(102)});
if (!(rel_283_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1764:1-1766:16];ImplicitReachable('<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>') :-     isMethod('<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1764:1-1766:16];ImplicitReachable(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\") :- \n   isMethod(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\").;)" <<  rel_283_ImplicitReachable->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ImplicitReachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1307:1-0:0];)" <<  rel_283_ImplicitReachable->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_282_AndroidEntryPoint->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1329:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isJVMStartupHContext(["<<jvm-startup-hcontext>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85];isJVMStartupHContext([\"<<jvm-startup-hcontext>>\"]).;)",profile);
rel_284_isJVMStartupHContext->insert(pack(ram::Tuple<RamDomain,1>({40})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85];isJVMStartupHContext([\"<<jvm-startup-hcontext>>\"]).;)" <<  rel_284_isJVMStartupHContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1329:1-0:0];)" <<  rel_284_isJVMStartupHContext->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LayoutControl.facts"},{"name","_LayoutControl"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_285_LayoutControl);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;LayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [242:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LayoutControl(?id,?type,?parent) :- 
   _LayoutControl(?id,?type,?parent),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [989:1-991:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;LayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :- \n   _LayoutControl(?id,?type,?parent),\n   isType(?type).;)",profile);
if (!rel_285_LayoutControl->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_285_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_285_LayoutControl_op_ctxt,rel_285_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_286_LayoutControl->insert(tuple,READ_OP_CONTEXT(rel_286_LayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;LayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :-     _LayoutControl(?id,?type,?parent),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;LayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :- \n   _LayoutControl(?id,?type,?parent),\n   isType(?type).;)" <<  rel_286_LayoutControl->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;LayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [242:1-0:0];)" <<  rel_286_LayoutControl->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_285_LayoutControl->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1261:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ProtectedOnMethodOfLayoutControl(?meth) :- 
   MethodDeclaredOrInherited(?meth,?type),
   LayoutControl(_,?type,_),
   Method_SimpleName(?meth,?simplename),
   _Method_Modifier("protected",?meth),
   "^on.*" match ?simplename.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1501:1-1506:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1501:1-1506:39];ProtectedOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_159_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_287_ProtectedOnMethodOfLayoutControl_op_ctxt,rel_287_ProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_286_LayoutControl->equalRange<1>(key,READ_OP_CONTEXT(rel_286_LayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({61,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_287_ProtectedOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_287_ProtectedOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1501:1-1506:39];ProtectedOnMethodOfLayoutControl(?meth) :-     MethodDeclaredOrInherited(?meth,?type),    LayoutControl(_,?type,_),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('protected',?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1501:1-1506:39];ProtectedOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_287_ProtectedOnMethodOfLayoutControl->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1261:1-0:0];)" <<  rel_287_ProtectedOnMethodOfLayoutControl->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1262:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OverridingProtectedOnMethodOfLayoutControl(?meth) :- 
   ProtectedOnMethodOfLayoutControl(?meth),
   AppMethodOverridesAndroidLibraryMethod(?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1507:1-1509:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1507:1-1509:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :- \n   ProtectedOnMethodOfLayoutControl(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_190_AppMethodOverridesAndroidLibraryMethod->empty()&&!rel_287_ProtectedOnMethodOfLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_287_ProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_190_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_288_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_288_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_287_ProtectedOnMethodOfLayoutControl_op_ctxt,rel_287_ProtectedOnMethodOfLayoutControl->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_190_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_288_OverridingProtectedOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_288_OverridingProtectedOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1507:1-1509:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :-     ProtectedOnMethodOfLayoutControl(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1507:1-1509:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :- \n   ProtectedOnMethodOfLayoutControl(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_288_OverridingProtectedOnMethodOfLayoutControl->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1262:1-0:0];)" <<  rel_288_OverridingProtectedOnMethodOfLayoutControl->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_287_ProtectedOnMethodOfLayoutControl->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1315:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Value_isMock(cat("<android component object ",cat(?type,">"))) :- 
   AndroidAppComponent(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_isMock(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_isMock(cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_isMock(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat("<layout control object ",cat(?id,cat(" of type ",cat(?type,">"))))) :- 
   LayoutControl(?id,?type,_),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_isMock(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_isMock(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_isMock(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat("<android library object ",cat(?type,">"))) :- 
   ImplicitlyInstantiatedLibraryType(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_isMock(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_168_ImplicitlyInstantiatedLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_168_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_isMock(cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_isMock(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(?class,"::: (Mock)")) :- 
   ObjToMock(?class),
   !MainMethodDeclaration(_),
   !AndroidAppComponent(_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_isMock(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_268_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_268_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((rel_231_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt)).empty()) && (rel_147_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_isMock(cat(?class,'::: (Mock)')) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_isMock(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.Object newInstance()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",_),
   Tamiflex_ReflectionMap(?constructor,?invocation),
   isInstruction(?invocation),
   isMethod(?constructor),
   Method_DeclaringType(?constructor,?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?fld),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?fld),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?type),"/Field[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?type),"/Field[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?method),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?method),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?type),"/Method[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isMock(cat(cat("<(Tamiflex) ",?type),"/Method[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_289_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_289_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_289_Value_isMock->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Value_isMock;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1315:1-0:0];)" <<  rel_289_Value_isMock->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1260:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PublicOnMethodOfLayoutControl(?meth) :- 
   MethodDeclaredOrInherited(?meth,?type),
   LayoutControl(_,?type,_),
   Method_SimpleName(?meth,?simplename),
   _Method_Modifier("public",?meth),
   "^on.*" match ?simplename.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1495:1-1500:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1495:1-1500:36];PublicOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_159_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_290_PublicOnMethodOfLayoutControl_op_ctxt,rel_290_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_286_LayoutControl->equalRange<1>(key,READ_OP_CONTEXT(rel_286_LayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_290_PublicOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_290_PublicOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1495:1-1500:36];PublicOnMethodOfLayoutControl(?meth) :-     MethodDeclaredOrInherited(?meth,?type),    LayoutControl(_,?type,_),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('public',?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1495:1-1500:36];PublicOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_290_PublicOnMethodOfLayoutControl->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1260:1-0:0];)" <<  rel_290_PublicOnMethodOfLayoutControl->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1246:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReifiedLayoutControl(?type,?id,cat("<layout control object ",cat(?id,cat(" of type ",cat(?type,">"))))) :- 
   LayoutControl(?id,?type,_),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];ReifiedLayoutControl(?type,?id,cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_291_ReifiedLayoutControl_op_ctxt,rel_291_ReifiedLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_291_ReifiedLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_291_ReifiedLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];ReifiedLayoutControl(?type,?id,cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];ReifiedLayoutControl(?type,?id,cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_291_ReifiedLayoutControl->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1246:1-0:0];)" <<  rel_291_ReifiedLayoutControl->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1270:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReifiedAndroidObjectValue(?value,?type) :- 
   ReifiedComponent(?type,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedComponent(?type,?value).;)",profile);
if (!rel_173_ReifiedComponent->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_173_ReifiedComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_173_ReifiedComponent_op_ctxt,rel_173_ReifiedComponent->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_292_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedComponent(?type,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedComponent(?type,?value).;)" <<  rel_292_ReifiedAndroidObjectValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReifiedAndroidObjectValue(?value,?type) :- 
   ReifiedLayoutControl(?type,_,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLayoutControl(?type,_,?value).;)",profile);
if (!rel_291_ReifiedLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_291_ReifiedLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_291_ReifiedLayoutControl_op_ctxt,rel_291_ReifiedLayoutControl->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[0])});
if (!(rel_292_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedLayoutControl(?type,_,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLayoutControl(?type,_,?value).;)" <<  rel_292_ReifiedAndroidObjectValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReifiedAndroidObjectValue(?value,?type) :- 
   ReifiedLibraryObject(?type,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLibraryObject(?type,?value).;)",profile);
if (!rel_169_ReifiedLibraryObject->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_169_ReifiedLibraryObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_169_ReifiedLibraryObject_op_ctxt,rel_169_ReifiedLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_292_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedLibraryObject(?type,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1543:1-1546:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLibraryObject(?type,?value).;)" <<  rel_292_ReifiedAndroidObjectValue->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1270:1-0:0];)" <<  rel_292_ReifiedAndroidObjectValue->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_173_ReifiedComponent->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_169_ReifiedLibraryObject->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1276:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ViewObjectValueFromId(?viewValue,?numId) :- 
   LayoutControl(?numId,?type,_),
   ReifiedLayoutControl(?type,?numId,?viewValue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1590:1-1592:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1590:1-1592:51];ViewObjectValueFromId(?viewValue,?numId) :- \n   LayoutControl(?numId,?type,_),\n   ReifiedLayoutControl(?type,?numId,?viewValue).;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_291_ReifiedLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_291_ReifiedLayoutControl_op_ctxt,rel_291_ReifiedLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_293_ViewObjectValueFromId_op_ctxt,rel_293_ViewObjectValueFromId->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[1],env0[0],0});
auto range = rel_291_ReifiedLayoutControl->equalRange<0,1>(key,READ_OP_CONTEXT(rel_291_ReifiedLayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_293_ViewObjectValueFromId->insert(tuple,READ_OP_CONTEXT(rel_293_ViewObjectValueFromId_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1590:1-1592:51];ViewObjectValueFromId(?viewValue,?numId) :-     LayoutControl(?numId,?type,_),    ReifiedLayoutControl(?type,?numId,?viewValue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1590:1-1592:51];ViewObjectValueFromId(?viewValue,?numId) :- \n   LayoutControl(?numId,?type,_),\n   ReifiedLayoutControl(?type,?numId,?viewValue).;)" <<  rel_293_ViewObjectValueFromId->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1276:1-0:0];)" <<  rel_293_ViewObjectValueFromId->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_291_ReifiedLayoutControl->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FieldInitialValue.facts"},{"name","_FieldInitialValue"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_294_FieldInitialValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1313:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isValue(cat("<android component object ",cat(?type,">"))) :- 
   AndroidAppComponent(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];isValue(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];isValue(cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];isValue(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat("<layout control object ",cat(?id,cat(" of type ",cat(?type,">"))))) :- 
   LayoutControl(?id,?type,_),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];isValue(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];isValue(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];isValue(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat("<android library object ",cat(?type,">"))) :- 
   ImplicitlyInstantiatedLibraryType(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];isValue(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_168_ImplicitlyInstantiatedLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_168_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];isValue(cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];isValue(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(?heapValue) :- 
   isHeapAllocation(?heapValue),
   HeapAllocation_Type(?heapValue,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];isValue(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_112_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];isValue(?heapValue) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];isValue(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat("num-constant-",?const)) :- 
   isNumConstant(?const),
   AssignNumConstant_Id(?insn,?const),
   Instruction_Method(?insn,?meth),
   Method_SimpleName(?meth,"<clinit>"),
   Method_DeclaringType(?meth,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_19_AssignNumConstant_Id->empty()&&!rel_85_Instruction_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_179_Type_int->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_19_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_76_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_179_Type_int) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];isValue(cat('num-constant-',?const)) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat("num-constant-",?const)) :- 
   isNumConstant(?const),
   _FieldInitialValue(?fld,?const),
   Field_DeclaringType(?fld,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_215_Field_DeclaringType->empty()&&!rel_179_Type_int->empty()&&!rel_294_FieldInitialValue->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt,rel_294_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_294_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_215_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_179_Type_int) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];isValue(cat('num-constant-',?const)) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(?class,"::: (Mock)")) :- 
   ObjToMock(?class),
   !MainMethodDeclaration(_),
   !AndroidAppComponent(_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];isValue(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_268_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_268_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((rel_231_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt)).empty()) && (rel_147_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];isValue(cat(?class,'::: (Mock)')) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];isValue(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.Object newInstance()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",_),
   Tamiflex_ReflectionMap(?constructor,?invocation),
   isInstruction(?invocation),
   isMethod(?constructor),
   Method_DeclaringType(?constructor,?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">")) :- 
   isMethod("<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?fld),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?fld),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?type),"/Field[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?type),"/Field[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?method),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?method),">")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?type),"/Method[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_295_isValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isValue(cat(cat("<(Tamiflex) ",?type),"/Method[]>")) :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_295_isValue->insert(tuple,READ_OP_CONTEXT(rel_295_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_295_isValue->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1313:1-0:0];)" <<  rel_295_isValue->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1365:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainThread(?hctx,"<<main-thread>>") :- 
   isJVMStartupHContext(?hctx),
   isValue("<<main-thread>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2294:1-2297:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2294:1-2297:19];MainThread(?hctx,\"<<main-thread>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread>>\").;)",profile);
if (!rel_284_isJVMStartupHContext->empty()&&!rel_295_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_284_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_284_isJVMStartupHContext_op_ctxt,rel_284_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({36});
auto range = rel_295_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_295_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(36)});
if (!(rel_296_MainThread->insert(tuple,READ_OP_CONTEXT(rel_296_MainThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MainThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2294:1-2297:19];MainThread(?hctx,'<<main-thread>>') :-     isJVMStartupHContext(?hctx),    isValue('<<main-thread>>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2294:1-2297:19];MainThread(?hctx,\"<<main-thread>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread>>\").;)" <<  rel_296_MainThread->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1365:1-0:0];)" <<  rel_296_MainThread->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1364:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainThreadGroup(?hctx,"<<main-thread-group>>") :- 
   isJVMStartupHContext(?hctx),
   isValue("<<main-thread-group>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2290:1-2293:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2290:1-2293:19];MainThreadGroup(?hctx,\"<<main-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread-group>>\").;)",profile);
if (!rel_284_isJVMStartupHContext->empty()&&!rel_295_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_284_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_284_isJVMStartupHContext_op_ctxt,rel_284_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({34});
auto range = rel_295_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_295_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(34)});
if (!(rel_297_MainThreadGroup->insert(tuple,READ_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;MainThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2290:1-2293:19];MainThreadGroup(?hctx,'<<main-thread-group>>') :-     isJVMStartupHContext(?hctx),    isValue('<<main-thread-group>>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2290:1-2293:19];MainThreadGroup(?hctx,\"<<main-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread-group>>\").;)" <<  rel_297_MainThreadGroup->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1364:1-0:0];)" <<  rel_297_MainThreadGroup->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SystemThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1363:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(SystemThreadGroup(?hctx,"<<system-thread-group>>") :- 
   isJVMStartupHContext(?hctx),
   isValue("<<system-thread-group>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2286:1-2289:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;SystemThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2286:1-2289:19];SystemThreadGroup(?hctx,\"<<system-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<system-thread-group>>\").;)",profile);
if (!rel_284_isJVMStartupHContext->empty()&&!rel_295_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_284_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_284_isJVMStartupHContext_op_ctxt,rel_284_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({33});
auto range = rel_295_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_295_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(33)});
if (!(rel_298_SystemThreadGroup->insert(tuple,READ_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;SystemThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2286:1-2289:19];SystemThreadGroup(?hctx,'<<system-thread-group>>') :-     isJVMStartupHContext(?hctx),    isValue('<<system-thread-group>>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;SystemThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2286:1-2289:19];SystemThreadGroup(?hctx,\"<<system-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<system-thread-group>>\").;)" <<  rel_298_SystemThreadGroup->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;SystemThreadGroup;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1363:1-0:0];)" <<  rel_298_SystemThreadGroup->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_284_isJVMStartupHContext->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2482:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ObjectShouldNotBeRefined(?heap) :- 
   isValue(?heap).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2486:1-2489:25])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2486:1-2489:25];ObjectShouldNotBeRefined(?heap) :- \n   isValue(?heap).;)",profile);
if (!rel_295_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_295_isValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt,rel_299_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_295_isValue_op_ctxt,rel_295_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_299_ObjectShouldNotBeRefined->insert(tuple,READ_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2486:1-2489:25];ObjectShouldNotBeRefined(?heap) :-     isValue(?heap).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2486:1-2489:25];ObjectShouldNotBeRefined(?heap) :- \n   isValue(?heap).;)" <<  rel_299_ObjectShouldNotBeRefined->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2482:1-0:0];)" <<  rel_299_ObjectShouldNotBeRefined->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_295_isValue->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1319:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Value_Type(cat("<android component object ",cat(?type,">")),?type) :- 
   AndroidAppComponent(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_Type(cat(\"<android component object \",cat(?type,\">\")),?type) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_147_AndroidAppComponent->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_147_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())),(RamDomain)(env0[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_Type(cat('<android component object ',cat(?type,'>')),?type) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1422:1-1425:17];Value_Type(cat(\"<android component object \",cat(?type,\">\")),?type) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat("<layout control object ",cat(?id,cat(" of type ",cat(?type,">")))),?type) :- 
   LayoutControl(?id,?type,_),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_Type(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\")))),?type) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_286_LayoutControl->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_LayoutControl_op_ctxt,rel_286_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str())),(RamDomain)(env0[1])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_Type(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>')))),?type) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1426:1-1429:17];Value_Type(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\")))),?type) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat("<android library object ",cat(?type,">")),?type) :- 
   ImplicitlyInstantiatedLibraryType(?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_Type(cat(\"<android library object \",cat(?type,\">\")),?type) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_168_ImplicitlyInstantiatedLibraryType->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_168_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_168_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())),(RamDomain)(env0[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_Type(cat('<android library object ',cat(?type,'>')),?type) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1434:1-1437:17];Value_Type(cat(\"<android library object \",cat(?type,\">\")),?type) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(?heapValue,?type) :- 
   isHeapAllocation(?heapValue),
   HeapAllocation_Type(?heapValue,?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_Type(?heapValue,?type) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_113_HeapAllocation_Type->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_112_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_Type(?heapValue,?type) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2220:1-2224:42];Value_Type(?heapValue,?type) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat("num-constant-",?const),?type) :- 
   isNumConstant(?const),
   AssignNumConstant_Id(?insn,?const),
   Instruction_Method(?insn,?meth),
   Method_SimpleName(?meth,"<clinit>"),
   Method_DeclaringType(?meth,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_19_AssignNumConstant_Id->empty()&&!rel_85_Instruction_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_179_Type_int->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_19_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_76_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env6[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Type(cat('num-constant-',?const),?type) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat("num-constant-",?const),?type) :- 
   isNumConstant(?const),
   _FieldInitialValue(?fld,?const),
   Field_DeclaringType(?fld,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_215_Field_DeclaringType->empty()&&!rel_179_Type_int->empty()&&!rel_294_FieldInitialValue->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt,rel_294_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_294_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_215_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env4[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Type(cat('num-constant-',?const),?type) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(?class,"::: (Mock)"),?class) :- 
   ObjToMock(?class),
   !MainMethodDeclaration(_),
   !AndroidAppComponent(_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_Type(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_268_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_268_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt,rel_147_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_268_ObjToMock_op_ctxt,rel_268_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((rel_231_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt)).empty()) && (rel_147_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_147_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str())),(RamDomain)(env0[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_Type(cat(?class,'::: (Mock)'),?class) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2649:1-2654:21];Value_Type(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">"),?type) :- 
   isMethod("<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.Object newInstance()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env2[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2734:1-2741:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">"),?type) :- 
   isMethod("<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>",_),
   Tamiflex_ReflectionMap(?constructor,?invocation),
   isInstruction(?invocation),
   isMethod(?constructor),
   Method_DeclaringType(?constructor,?type),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_74_Method_DeclaringType->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env5[1])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2742:1-2751:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat(cat(cat("<(Tamiflex) ",?invocation),"/"),?type),">"),?type) :- 
   isMethod("<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation(?invocation,"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isInstruction(?invocation),
   isType(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_92_StaticMethodInvocation->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_250_isInstruction->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_250_isInstruction_op_ctxt,rel_250_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_250_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_250_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env2[0])});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2752:1-2759:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?fld),">"),"java.lang.reflect.Field") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(49)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat('<(Tamiflex) ',?fld),'>'),'java.lang.reflect.Field') :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?fld),">"),"java.lang.reflect.Field") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",_),
   Tamiflex_ReflectionMap(?fld,?invocation),
   isField(?fld),
   isType("java.lang.reflect.Field").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_227_isField->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(49)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat('<(Tamiflex) ',?fld),'>'),'java.lang.reflect.Field') :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2760:1-2769:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?type),"/Field[]>"),"java.lang.reflect.Field[]") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(165)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Field[]>'),'java.lang.reflect.Field[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?type),"/Field[]>"),"java.lang.reflect.Field[]") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Field[] getFields()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Field[] getFields()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Field[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(165)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Field[]>'),'java.lang.reflect.Field[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2770:1-2779:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?method),">"),"java.lang.reflect.Method") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(51)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat('<(Tamiflex) ',?method),'>'),'java.lang.reflect.Method') :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?method),">"),"java.lang.reflect.Method") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   isType("java.lang.reflect.Method").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(51)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat('<(Tamiflex) ',?method),'>'),'java.lang.reflect.Method') :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2780:1-2789:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?type),"/Method[]>"),"java.lang.reflect.Method[]") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(171)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Method[]>'),'java.lang.reflect.Method[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_300_Value_Type->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Type(cat(cat("<(Tamiflex) ",?type),"/Method[]>"),"java.lang.reflect.Method[]") :- 
   isMethod("<java.lang.Class: java.lang.reflect.Method[] getMethods()>"),
   VirtualMethodInvocation(?invocation,"<java.lang.Class: java.lang.reflect.Method[] getMethods()>",_),
   Tamiflex_ReflectionMap(?type,?invocation),
   isType(?type),
   isType("java.lang.reflect.Method[]").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(171)});
if (!(rel_300_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Method[]>'),'java.lang.reflect.Method[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2790:1-2799:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_300_Value_Type->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Value_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1319:1-0:0];)" <<  rel_300_Value_Type->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Value_Type.csv"},{"name","Value_Type"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_300_Value_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_250_isInstruction->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_286_LayoutControl->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_147_AndroidAppComponent->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_168_ImplicitlyInstantiatedLibraryType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_268_ObjToMock->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1316:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Value_Num(cat("num-constant-",?const),?const) :- 
   isNumConstant(?const),
   AssignNumConstant_Id(?insn,?const),
   Instruction_Method(?insn,?meth),
   Method_SimpleName(?meth,"<clinit>"),
   Method_DeclaringType(?meth,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_19_AssignNumConstant_Id->empty()&&!rel_85_Instruction_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_179_Type_int->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_19_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_76_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env0[0])});
if (!(rel_301_Value_Num->insert(tuple,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Num(cat('num-constant-',?const),?const) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2225:1-2235:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_301_Value_Num->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_Num(cat("num-constant-",?const),?const) :- 
   isNumConstant(?const),
   _FieldInitialValue(?fld,?const),
   Field_DeclaringType(?fld,?className),
   isType(?className),
   Type_int(?type),
   ".R$" contains ?className.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_215_Field_DeclaringType->empty()&&!rel_179_Type_int->empty()&&!rel_294_FieldInitialValue->empty()&&!rel_20_isNumConstant->empty()&&!rel_149_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_20_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_179_Type_int_op_ctxt,rel_179_Type_int->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt,rel_294_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_20_isNumConstant_op_ctxt,rel_20_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_149_isType_op_ctxt,rel_149_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_294_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_215_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_149_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_149_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_179_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env0[0])});
if (!(rel_301_Value_Num->insert(tuple,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Num(cat('num-constant-',?const),?const) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2236:1-2244:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_301_Value_Num->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Value_Num;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1316:1-0:0];)" <<  rel_301_Value_Num->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_20_isNumConstant->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_149_isType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_179_Type_int->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1317:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Value_isNonHeap(?value) :- 
   Value_isMock(?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :- \n   Value_isMock(?value).;)",profile);
if (!rel_289_Value_isMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_289_Value_isMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_302_Value_isNonHeap_op_ctxt,rel_302_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_302_Value_isNonHeap->insert(tuple,READ_OP_CONTEXT(rel_302_Value_isNonHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :-     Value_isMock(?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :- \n   Value_isMock(?value).;)" <<  rel_302_Value_isNonHeap->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Value_isNonHeap(?value) :- 
   Value_Num(?value,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :- \n   Value_Num(?value,_).;)",profile);
if (!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_301_Value_Num->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_302_Value_isNonHeap_op_ctxt,rel_302_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_302_Value_isNonHeap->insert(tuple,READ_OP_CONTEXT(rel_302_Value_isNonHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :-     Value_Num(?value,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2245:1-2247:24];Value_isNonHeap(?value) :- \n   Value_Num(?value,_).;)" <<  rel_302_Value_isNonHeap->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Value_isNonHeap;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1317:1-0:0];)" <<  rel_302_Value_isNonHeap->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2395:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(NotEmptyArrayValue(?heapValue) :- 
   Value_isHeap(?heapValue),
   !_EmptyArray(?heapValue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2396:1-2398:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2396:1-2398:42];NotEmptyArrayValue(?heapValue) :- \n   Value_isHeap(?heapValue),\n   !_EmptyArray(?heapValue).;)",profile);
if (!rel_114_Value_isHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_114_Value_isHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt,rel_303_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_114_Value_isHeap_op_ctxt,rel_114_Value_isHeap->createContext());
CREATE_OP_CONTEXT(rel_196_EmptyArray_op_ctxt,rel_196_EmptyArray->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_196_EmptyArray->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_196_EmptyArray_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_303_NotEmptyArrayValue->insert(tuple,READ_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2396:1-2398:42];NotEmptyArrayValue(?heapValue) :-     Value_isHeap(?heapValue),    !_EmptyArray(?heapValue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2396:1-2398:42];NotEmptyArrayValue(?heapValue) :- \n   Value_isHeap(?heapValue),\n   !_EmptyArray(?heapValue).;)" <<  rel_303_NotEmptyArrayValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(NotEmptyArrayValue(?value) :- 
   Value_isNonHeap(?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2399:1-2400:27])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2399:1-2400:27];NotEmptyArrayValue(?value) :- \n   Value_isNonHeap(?value).;)",profile);
if (!rel_302_Value_isNonHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_302_Value_isNonHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt,rel_303_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_302_Value_isNonHeap_op_ctxt,rel_302_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_303_NotEmptyArrayValue->insert(tuple,READ_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2399:1-2400:27];NotEmptyArrayValue(?value) :-     Value_isNonHeap(?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2399:1-2400:27];NotEmptyArrayValue(?value) :- \n   Value_isNonHeap(?value).;)" <<  rel_303_NotEmptyArrayValue->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2395:1-0:0];)" <<  rel_303_NotEmptyArrayValue->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_196_EmptyArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_302_Value_isNonHeap->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1318:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(NotSpecialObject(?value) :- 
   Value_isHeap(?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_isHeap(?value).;)",profile);
if (!rel_114_Value_isHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_114_Value_isHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_114_Value_isHeap_op_ctxt,rel_114_Value_isHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_304_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :-     Value_isHeap(?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_isHeap(?value).;)" <<  rel_304_NotSpecialObject->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(NotSpecialObject(?value) :- 
   Value_isMock(?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_isMock(?value).;)",profile);
if (!rel_289_Value_isMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_289_Value_isMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_289_Value_isMock_op_ctxt,rel_289_Value_isMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_304_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :-     Value_isMock(?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_isMock(?value).;)" <<  rel_304_NotSpecialObject->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(NotSpecialObject(?value) :- 
   Value_Num(?value,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_Num(?value,_).;)",profile);
if (!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_301_Value_Num->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_304_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :-     Value_Num(?value,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2266:1-2269:24];NotSpecialObject(?value) :- \n   Value_Num(?value,_).;)" <<  rel_304_NotSpecialObject->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;NotSpecialObject;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1318:1-0:0];)" <<  rel_304_NotSpecialObject->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_114_Value_isHeap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_289_Value_isMock->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodArgArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [81:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainMethodArgArray("<<main method array>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodArgArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];MainMethodArgArray(\"<<main method array>>\").;)",profile);
rel_305_MainMethodArgArray->insert(20);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainMethodArgArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [954:1-957:32];MainMethodArgArray(\"<<main method array>>\").;)" <<  rel_305_MainMethodArgArray->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainMethodArgArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [81:1-0:0];)" <<  rel_305_MainMethodArgArray->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [82:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(MainMethodArgArrayContent("<<main method array content>>").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];MainMethodArgArrayContent(\"<<main method array content>>\").;)",profile);
rel_306_MainMethodArgArrayContent->insert(22);
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [958:1-961:30];MainMethodArgArrayContent(\"<<main method array content>>\").;)" <<  rel_306_MainMethodArgArrayContent->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [82:1-0:0];)" <<  rel_306_MainMethodArgArrayContent->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler.facts"},{"name","_ExceptionHandler"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 0, 1, 1, 0, 0}), symTable, ioDirectives, 0)->readAll(*rel_307_ExceptionHandler);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [229:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_FormalParam(?handler,?var) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_308_ExceptionHandler_FormalParam_op_ctxt,rel_308_ExceptionHandler_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_308_ExceptionHandler_FormalParam->insert(tuple,READ_OP_CONTEXT(rel_308_ExceptionHandler_FormalParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_308_ExceptionHandler_FormalParam->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [229:1-0:0];)" <<  rel_308_ExceptionHandler_FormalParam->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [230:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Begin(?handler,?begin) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_309_ExceptionHandler_Begin_op_ctxt,rel_309_ExceptionHandler_Begin->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_309_ExceptionHandler_Begin->insert(tuple,READ_OP_CONTEXT(rel_309_ExceptionHandler_Begin_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_309_ExceptionHandler_Begin->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [230:1-0:0];)" <<  rel_309_ExceptionHandler_Begin->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [231:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_End(?handler,?end) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_310_ExceptionHandler_End_op_ctxt,rel_310_ExceptionHandler_End->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[6])});
if (!(rel_310_ExceptionHandler_End->insert(tuple,READ_OP_CONTEXT(rel_310_ExceptionHandler_End_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_310_ExceptionHandler_End->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [231:1-0:0];)" <<  rel_310_ExceptionHandler_End->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [226:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Method(?handler,?method) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_311_ExceptionHandler_Method_op_ctxt,rel_311_ExceptionHandler_Method->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_311_ExceptionHandler_Method->insert(tuple,READ_OP_CONTEXT(rel_311_ExceptionHandler_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_311_ExceptionHandler_Method->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [226:1-0:0];)" <<  rel_311_ExceptionHandler_Method->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1298:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_InRange(?handler,?instruction) :- 
   ExceptionHandler_Method(?handler,?method),
   Instruction_Method(?instruction,?method),
   Instruction_Index(?instruction,?index),
   ExceptionHandler_Begin(?handler,?beginIndex),
   ExceptionHandler_End(?handler,?endIndex),
   ?beginIndex <= ?index,
   ?endIndex > ?index.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1684:1-1691:22])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1684:1-1691:22];ExceptionHandler_InRange(?handler,?instruction) :- \n   ExceptionHandler_Method(?handler,?method),\n   Instruction_Method(?instruction,?method),\n   Instruction_Index(?instruction,?index),\n   ExceptionHandler_Begin(?handler,?beginIndex),\n   ExceptionHandler_End(?handler,?endIndex),\n   ?beginIndex <= ?index,\n   ?endIndex > ?index.;)",profile);
if (!rel_309_ExceptionHandler_Begin->empty()&&!rel_310_ExceptionHandler_End->empty()&&!rel_311_ExceptionHandler_Method->empty()&&!rel_95_Instruction_Index->empty()&&!rel_85_Instruction_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_311_ExceptionHandler_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_309_ExceptionHandler_Begin_op_ctxt,rel_309_ExceptionHandler_Begin->createContext());
CREATE_OP_CONTEXT(rel_310_ExceptionHandler_End_op_ctxt,rel_310_ExceptionHandler_End->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_311_ExceptionHandler_Method_op_ctxt,rel_311_ExceptionHandler_Method->createContext());
CREATE_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt,rel_95_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_95_Instruction_Index->equalRange<0>(key,READ_OP_CONTEXT(rel_95_Instruction_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_309_ExceptionHandler_Begin->equalRange<0>(key,READ_OP_CONTEXT(rel_309_ExceptionHandler_Begin_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((env3[1]) <= (env2[1]))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_310_ExceptionHandler_End->equalRange<0>(key,READ_OP_CONTEXT(rel_310_ExceptionHandler_End_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((env4[1]) > (env2[1]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_312_ExceptionHandler_InRange->insert(tuple,READ_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1684:1-1691:22];ExceptionHandler_InRange(?handler,?instruction) :-     ExceptionHandler_Method(?handler,?method),    Instruction_Method(?instruction,?method),    Instruction_Index(?instruction,?index),    ExceptionHandler_Begin(?handler,?beginIndex),    ExceptionHandler_End(?handler,?endIndex),    ?beginIndex <= ?index,    ?endIndex > ?index.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1684:1-1691:22];ExceptionHandler_InRange(?handler,?instruction) :- \n   ExceptionHandler_Method(?handler,?method),\n   Instruction_Method(?instruction,?method),\n   Instruction_Index(?instruction,?index),\n   ExceptionHandler_Begin(?handler,?beginIndex),\n   ExceptionHandler_End(?handler,?endIndex),\n   ?beginIndex <= ?index,\n   ?endIndex > ?index.;)" <<  rel_312_ExceptionHandler_InRange->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1298:1-0:0];)" <<  rel_312_ExceptionHandler_InRange->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_95_Instruction_Index->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_311_ExceptionHandler_Method->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_309_ExceptionHandler_Begin->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_310_ExceptionHandler_End->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [228:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Type(?handler,?type) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt,rel_313_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_313_ExceptionHandler_Type->insert(tuple,READ_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_313_ExceptionHandler_Type->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [228:1-0:0];)" <<  rel_313_ExceptionHandler_Type->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [227:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Index(?handler,?index) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_314_ExceptionHandler_Index_op_ctxt,rel_314_ExceptionHandler_Index->createContext());
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_314_ExceptionHandler_Index->insert(tuple,READ_OP_CONTEXT(rel_314_ExceptionHandler_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_314_ExceptionHandler_Index->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [227:1-0:0];)" <<  rel_314_ExceptionHandler_Index->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler-Previous.facts"},{"name","_ExceptionHandler_Previous"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_315_ExceptionHandler_Previous);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1299:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Before(?previous,?handler) :- 
   _ExceptionHandler_Previous(?handler,?previous).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1692:1-1693:50])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1692:1-1693:50];ExceptionHandler_Before(?previous,?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_315_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_315_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt,rel_316_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_315_ExceptionHandler_Previous_op_ctxt,rel_315_ExceptionHandler_Previous->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_316_ExceptionHandler_Before->insert(tuple,READ_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1692:1-1693:50];ExceptionHandler_Before(?previous,?handler) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1692:1-1693:50];ExceptionHandler_Before(?previous,?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_316_ExceptionHandler_Before->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1299:1-0:0];)" <<  rel_316_ExceptionHandler_Before->size() << std::endl;
}rel_317_delta_ExceptionHandler_Before->insertAll(*rel_316_ExceptionHandler_Before);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1299:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Before(?before,?handler) :- 
   ExceptionHandler_Before(?middle,?handler),
   _ExceptionHandler_Previous(?middle,?before).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1694:1-1696:47])_");
{
	RamLogger logger(R"(@t-recursive-rule;ExceptionHandler_Before;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1694:1-1696:47];ExceptionHandler_Before(?before,?handler) :- \n   ExceptionHandler_Before(?middle,?handler),\n   _ExceptionHandler_Previous(?middle,?before).;)",profile);
if (!rel_317_delta_ExceptionHandler_Before->empty()&&!rel_315_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_317_delta_ExceptionHandler_Before->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_317_delta_ExceptionHandler_Before_op_ctxt,rel_317_delta_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_318_new_ExceptionHandler_Before_op_ctxt,rel_318_new_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt,rel_316_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_315_ExceptionHandler_Previous_op_ctxt,rel_315_ExceptionHandler_Previous->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_315_ExceptionHandler_Previous->equalRange<0>(key,READ_OP_CONTEXT(rel_315_ExceptionHandler_Previous_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_316_ExceptionHandler_Before->contains(Tuple<RamDomain,2>({env1[1],env0[1]}),READ_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1])});
if (!(rel_318_new_ExceptionHandler_Before->insert(tuple,READ_OP_CONTEXT(rel_318_new_ExceptionHandler_Before_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1694:1-1696:47];@new_ExceptionHandler_Before(?before,?handler) :-     @delta_ExceptionHandler_Before(?middle,?handler),    _ExceptionHandler_Previous(?middle,?before),    !ExceptionHandler_Before(?before,?handler).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ExceptionHandler_Before;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1694:1-1696:47];ExceptionHandler_Before(?before,?handler) :- \n   ExceptionHandler_Before(?middle,?handler),\n   _ExceptionHandler_Previous(?middle,?before).;)" <<  rel_318_new_ExceptionHandler_Before->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1299:1-0:0];)" <<  rel_318_new_ExceptionHandler_Before->size() << std::endl;
}if(rel_318_new_ExceptionHandler_Before->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1299:1-0:0];)",profile);
rel_316_ExceptionHandler_Before->insertAll(*rel_318_new_ExceptionHandler_Before);
{
auto rel_0 = rel_317_delta_ExceptionHandler_Before;
rel_317_delta_ExceptionHandler_Before = rel_318_new_ExceptionHandler_Before;
rel_318_new_ExceptionHandler_Before = rel_0;
}
rel_318_new_ExceptionHandler_Before->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_317_delta_ExceptionHandler_Before->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_318_new_ExceptionHandler_Before->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1306:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_Impossible(?type,?h2,?insn) :- 
   ExceptionHandler_InRange(?h1,?insn),
   ExceptionHandler_InRange(?h2,?insn),
   ExceptionHandler_Before(?h1,?h2),
   ExceptionHandler_Type(?h1,?h1Type),
   ExceptionHandler_Type(?h2,?h2Type),
   SubtypeOf(?type,?h1Type),
   SubtypeOf(?type,?h2Type),
   ConcreteClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1675:1-1683:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1675:1-1683:24];ExceptionHandler_Impossible(?type,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Type(?h1,?h1Type),\n   ExceptionHandler_Type(?h2,?h2Type),\n   SubtypeOf(?type,?h1Type),\n   SubtypeOf(?type,?h2Type),\n   ConcreteClass(?type).;)",profile);
if (!rel_276_ConcreteClass->empty()&&!rel_316_ExceptionHandler_Before->empty()&&!rel_312_ExceptionHandler_InRange->empty()&&!rel_313_ExceptionHandler_Type->empty()&&!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_312_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt,rel_276_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt,rel_316_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_319_ExceptionHandler_Impossible_op_ctxt,rel_319_ExceptionHandler_Impossible->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt,rel_313_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_312_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_316_ExceptionHandler_Before->equalRange<0,1>(key,READ_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_313_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_313_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env4[1]});
auto range = rel_183_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env5[0]});
auto range = rel_276_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[0]),(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_319_ExceptionHandler_Impossible->insert(tuple,READ_OP_CONTEXT(rel_319_ExceptionHandler_Impossible_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1675:1-1683:24];ExceptionHandler_Impossible(?type,?h2,?insn) :-     ExceptionHandler_InRange(?h1,?insn),    ExceptionHandler_InRange(?h2,?insn),    ExceptionHandler_Before(?h1,?h2),    ExceptionHandler_Type(?h1,?h1Type),    ExceptionHandler_Type(?h2,?h2Type),    SubtypeOf(?type,?h1Type),    SubtypeOf(?type,?h2Type),    ConcreteClass(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1675:1-1683:24];ExceptionHandler_Impossible(?type,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Type(?h1,?h1Type),\n   ExceptionHandler_Type(?h2,?h2Type),\n   SubtypeOf(?type,?h1Type),\n   SubtypeOf(?type,?h2Type),\n   ConcreteClass(?type).;)" <<  rel_319_ExceptionHandler_Impossible->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1306:1-0:0];)" <<  rel_319_ExceptionHandler_Impossible->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1304:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :- 
   ExceptionHandler_Before(?h1,?h2),
   ExceptionHandler_Index(?h1,?h2Index),
   ExceptionHandler_Index(?h2,?h2Index).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1704:1-1708:23])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1704:1-1708:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :- \n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Index(?h1,?h2Index),\n   ExceptionHandler_Index(?h2,?h2Index).;)",profile);
if (!rel_316_ExceptionHandler_Before->empty()&&!rel_314_ExceptionHandler_Index->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_316_ExceptionHandler_Before->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt,rel_316_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_314_ExceptionHandler_Index_op_ctxt,rel_314_ExceptionHandler_Index->createContext());
CREATE_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_320_ExceptionHandler_SameBlock_PartialOrder->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_314_ExceptionHandler_Index->equalRange<0>(key,READ_OP_CONTEXT(rel_314_ExceptionHandler_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[1],env1[1]});
auto range = rel_314_ExceptionHandler_Index->equalRange<0,1>(key,READ_OP_CONTEXT(rel_314_ExceptionHandler_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_320_ExceptionHandler_SameBlock_PartialOrder->insert(tuple,READ_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1704:1-1708:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :-     ExceptionHandler_Before(?h1,?h2),    ExceptionHandler_Index(?h1,?h2Index),    ExceptionHandler_Index(?h2,?h2Index).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1704:1-1708:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :- \n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Index(?h1,?h2Index),\n   ExceptionHandler_Index(?h2,?h2Index).;)" <<  rel_320_ExceptionHandler_SameBlock_PartialOrder->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1304:1-0:0];)" <<  rel_320_ExceptionHandler_SameBlock_PartialOrder->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_314_ExceptionHandler_Index->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1302:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :- 
   ExceptionHandler_InRange(?h1,?insn),
   ExceptionHandler_InRange(?h2,?insn),
   ExceptionHandler_Before(?h1,?h2).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1697:1-1700:37])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1697:1-1700:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2).;)",profile);
if (!rel_316_ExceptionHandler_Before->empty()&&!rel_312_ExceptionHandler_InRange->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_312_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt,rel_316_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_321_ExceptionHandler_SameInsn_PartialOrder_op_ctxt,rel_321_ExceptionHandler_SameInsn_PartialOrder->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_312_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_316_ExceptionHandler_Before->equalRange<0,1>(key,READ_OP_CONTEXT(rel_316_ExceptionHandler_Before_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_321_ExceptionHandler_SameInsn_PartialOrder->insert(tuple,READ_OP_CONTEXT(rel_321_ExceptionHandler_SameInsn_PartialOrder_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1697:1-1700:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :-     ExceptionHandler_InRange(?h1,?insn),    ExceptionHandler_InRange(?h2,?insn),    ExceptionHandler_Before(?h1,?h2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1697:1-1700:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2).;)" <<  rel_321_ExceptionHandler_SameInsn_PartialOrder->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1302:1-0:0];)" <<  rel_321_ExceptionHandler_SameInsn_PartialOrder->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_316_ExceptionHandler_Before->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1301:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_SameInsn_Repr(?insn,?handler) :- 
   ExceptionHandler_InRange(?handler,?insn),
   !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1701:1-1703:63])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1701:1-1703:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;)",profile);
if (!rel_312_ExceptionHandler_InRange->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_312_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_321_ExceptionHandler_SameInsn_PartialOrder_op_ctxt,rel_321_ExceptionHandler_SameInsn_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_322_ExceptionHandler_SameInsn_Repr->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_321_ExceptionHandler_SameInsn_PartialOrder->equalRange<1,2>(Tuple<RamDomain,3>({0,env0[0],env0[1]}),READ_OP_CONTEXT(rel_321_ExceptionHandler_SameInsn_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_322_ExceptionHandler_SameInsn_Repr->insert(tuple,READ_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1701:1-1703:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :-     ExceptionHandler_InRange(?handler,?insn),    !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1701:1-1703:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;)" <<  rel_322_ExceptionHandler_SameInsn_Repr->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1301:1-0:0];)" <<  rel_322_ExceptionHandler_SameInsn_Repr->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_321_ExceptionHandler_SameInsn_PartialOrder->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [225:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isExceptionHandler(?handler) :- 
   _ExceptionHandler_Previous(?handler,?previous).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_315_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_315_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_315_ExceptionHandler_Previous_op_ctxt,rel_315_ExceptionHandler_Previous->createContext());
CREATE_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt,rel_323_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_323_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?handler) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_323_isExceptionHandler->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isExceptionHandler(?previous) :- 
   _ExceptionHandler_Previous(?handler,?previous).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?previous) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_315_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_315_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_315_ExceptionHandler_Previous_op_ctxt,rel_315_ExceptionHandler_Previous->createContext());
CREATE_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt,rel_323_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_323_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?previous) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [381:1-384:51];isExceptionHandler(?previous) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_323_isExceptionHandler->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isExceptionHandler(?handler) :- 
   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];isExceptionHandler(?handler) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_307_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_307_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_307_ExceptionHandler_op_ctxt,rel_307_ExceptionHandler->createContext());
CREATE_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt,rel_323_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_323_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];isExceptionHandler(?handler) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [647:1-654:75];isExceptionHandler(?handler) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_323_isExceptionHandler->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isExceptionHandler;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [225:1-0:0];)" <<  rel_323_isExceptionHandler->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_315_ExceptionHandler_Previous->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_307_ExceptionHandler->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1303:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_SameBlock_Repr(?handler,?handler) :- 
   isExceptionHandler(?handler),
   !ExceptionHandler_SameBlock_PartialOrder(_,?handler).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1709:1-1711:57])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1709:1-1711:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :- \n   isExceptionHandler(?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;)",profile);
if (!rel_323_isExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_323_isExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_320_ExceptionHandler_SameBlock_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_324_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_323_isExceptionHandler_op_ctxt,rel_323_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_320_ExceptionHandler_SameBlock_PartialOrder->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_324_ExceptionHandler_SameBlock_Repr->insert(tuple,READ_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1709:1-1711:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :-     isExceptionHandler(?handler),    !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1709:1-1711:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :- \n   isExceptionHandler(?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;)" <<  rel_324_ExceptionHandler_SameBlock_Repr->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ExceptionHandler_SameBlock_Repr(?handler,?repr) :- 
   ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),
   !ExceptionHandler_SameBlock_PartialOrder(_,?repr).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1712:1-1714:54])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1712:1-1714:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :- \n   ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;)",profile);
if (!rel_320_ExceptionHandler_SameBlock_PartialOrder->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_320_ExceptionHandler_SameBlock_PartialOrder->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_320_ExceptionHandler_SameBlock_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_324_ExceptionHandler_SameBlock_Repr->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_320_ExceptionHandler_SameBlock_PartialOrder->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_320_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_324_ExceptionHandler_SameBlock_Repr->insert(tuple,READ_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1712:1-1714:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :-     ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),    !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1712:1-1714:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :- \n   ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;)" <<  rel_324_ExceptionHandler_SameBlock_Repr->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1303:1-0:0];)" <<  rel_324_ExceptionHandler_SameBlock_Repr->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_323_isExceptionHandler->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_320_ExceptionHandler_SameBlock_PartialOrder->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1305:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ExceptionHandler_TypeIsCaught(?type,?block) :- 
   ExceptionHandler_InRange(?handler,?insn),
   ExceptionHandler_SameInsn_Repr(?insn,?repr),
   ExceptionHandler_SameBlock_Repr(?repr,?block),
   ExceptionHandler_Type(?handler,?handlerType),
   SubtypeOf(?type,?handlerType),
   ConcreteClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1668:1-1674:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1668:1-1674:24];ExceptionHandler_TypeIsCaught(?type,?block) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?type,?handlerType),\n   ConcreteClass(?type).;)",profile);
if (!rel_276_ConcreteClass->empty()&&!rel_312_ExceptionHandler_InRange->empty()&&!rel_324_ExceptionHandler_SameBlock_Repr->empty()&&!rel_322_ExceptionHandler_SameInsn_Repr->empty()&&!rel_313_ExceptionHandler_Type->empty()&&!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_312_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt,rel_276_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_324_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_322_ExceptionHandler_SameInsn_Repr->createContext());
CREATE_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt,rel_313_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_325_ExceptionHandler_TypeIsCaught_op_ctxt,rel_325_ExceptionHandler_TypeIsCaught->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_322_ExceptionHandler_SameInsn_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_324_ExceptionHandler_SameBlock_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_313_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,1> key({env4[0]});
auto range = rel_276_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env4[0]),(RamDomain)(env2[1])});
if (!(rel_325_ExceptionHandler_TypeIsCaught->insert(tuple,READ_OP_CONTEXT(rel_325_ExceptionHandler_TypeIsCaught_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1668:1-1674:24];ExceptionHandler_TypeIsCaught(?type,?block) :-     ExceptionHandler_InRange(?handler,?insn),    ExceptionHandler_SameInsn_Repr(?insn,?repr),    ExceptionHandler_SameBlock_Repr(?repr,?block),    ExceptionHandler_Type(?handler,?handlerType),    SubtypeOf(?type,?handlerType),    ConcreteClass(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1668:1-1674:24];ExceptionHandler_TypeIsCaught(?type,?block) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?type,?handlerType),\n   ConcreteClass(?type).;)" <<  rel_325_ExceptionHandler_TypeIsCaught->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1305:1-0:0];)" <<  rel_325_ExceptionHandler_TypeIsCaught->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isImmutableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1324:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isImmutableContext(["<<immutable-context>>","<<immutable-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isImmutableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101];isImmutableContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)",profile);
rel_326_isImmutableContext->insert(pack(ram::Tuple<RamDomain,2>({42,42})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isImmutableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101];isImmutableContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)" <<  rel_326_isImmutableContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isImmutableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1324:1-0:0];)" <<  rel_326_isImmutableContext->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./replace_tpt.csv"},{"name","_replace_tpt"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_327_replace_tpt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./replace_cge.csv"},{"name","_replace_cge"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_328_replace_cge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;HasItsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1290:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(HasItsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m) :- 
   _replace_cge(_,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),
   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1291:1-1293:87])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;HasItsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1291:1-1293:87];HasItsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m) :- \n   _replace_cge(_,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),\n   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;)",profile);
if (!rel_328_replace_cge->empty()&&!rel_327_replace_tpt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_328_replace_cge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_329_HasItsc_op_ctxt,rel_329_HasItsc->createContext());
CREATE_OP_CONTEXT(rel_328_replace_cge_op_ctxt,rel_328_replace_cge->createContext());
CREATE_OP_CONTEXT(rel_327_replace_tpt_op_ctxt,rel_327_replace_tpt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,6> key({env0[1],env0[2],env0[3],0,0,0});
auto range = rel_327_replace_tpt->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_327_replace_tpt_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,7> tuple({(RamDomain)(env0[4]),(RamDomain)(env0[5]),(RamDomain)(env0[6]),(RamDomain)(env0[7]),(RamDomain)(env1[3]),(RamDomain)(env1[4]),(RamDomain)(env1[5])});
if (!(rel_329_HasItsc->insert(tuple,READ_OP_CONTEXT(rel_329_HasItsc_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;HasItsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1291:1-1293:87];HasItsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m) :-     _replace_cge(_,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),    _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;HasItsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1291:1-1293:87];HasItsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m) :- \n   _replace_cge(_,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),\n   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;)" <<  rel_329_HasItsc->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;HasItsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1290:1-0:0];)" <<  rel_329_HasItsc->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Itsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1294:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Itsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m,?con_inv) :- 
   _replace_cge(?con_inv,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),
   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1295:1-1297:87])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Itsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1295:1-1297:87];Itsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m,?con_inv) :- \n   _replace_cge(?con_inv,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),\n   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;)",profile);
if (!rel_328_replace_cge->empty()&&!rel_327_replace_tpt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_328_replace_cge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_330_Itsc_op_ctxt,rel_330_Itsc->createContext());
CREATE_OP_CONTEXT(rel_328_replace_cge_op_ctxt,rel_328_replace_cge->createContext());
CREATE_OP_CONTEXT(rel_327_replace_tpt_op_ctxt,rel_327_replace_tpt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,6> key({env0[1],env0[2],env0[3],0,0,0});
auto range = rel_327_replace_tpt->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_327_replace_tpt_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,8> tuple({(RamDomain)(env0[4]),(RamDomain)(env0[5]),(RamDomain)(env0[6]),(RamDomain)(env0[7]),(RamDomain)(env1[3]),(RamDomain)(env1[4]),(RamDomain)(env1[5]),(RamDomain)(env0[0])});
if (!(rel_330_Itsc->insert(tuple,READ_OP_CONTEXT(rel_330_Itsc_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Itsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1295:1-1297:87];Itsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m,?con_inv) :-     _replace_cge(?con_inv,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),    _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Itsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1295:1-1297:87];Itsc(?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m,?con_inv) :- \n   _replace_cge(?con_inv,?con_ctx1,?con_ctx2,?con_m,?abs_cge_inv,?abs_cge_ctx1,?abs_cge_ctx2,?abs_cge_m),\n   _replace_tpt(?con_ctx1,?con_ctx2,?con_m,?abs_tpt_ctx1,?abs_tpt_ctx2,?abs_tpt_m).;)" <<  rel_330_Itsc->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Itsc;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1294:1-0:0];)" <<  rel_330_Itsc->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isClinitContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1327:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isClinitContext(["<<clinit-context>>","<<clinit-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClinitContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92];isClinitContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)",profile);
rel_331_isClinitContext->insert(pack(ram::Tuple<RamDomain,2>({41,41})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isClinitContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92];isClinitContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)" <<  rel_331_isClinitContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isClinitContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1327:1-0:0];)" <<  rel_331_isClinitContext->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isInitialContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1325:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isInitialContext(["<<initial-context>>","<<initial-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInitialContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95];isInitialContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)",profile);
rel_332_isInitialContext->insert(pack(ram::Tuple<RamDomain,2>({38,38})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isInitialContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95];isInitialContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)" <<  rel_332_isInitialContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isInitialContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1325:1-0:0];)" <<  rel_332_isInitialContext->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isJVMStartupContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1326:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isJVMStartupContext(["<<jvm-startup-context>>","<<jvm-startup-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isJVMStartupContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106];isJVMStartupContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)",profile);
rel_333_isJVMStartupContext->insert(pack(ram::Tuple<RamDomain,2>({39,39})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isJVMStartupContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106];isJVMStartupContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)" <<  rel_333_isJVMStartupContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isJVMStartupContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1326:1-0:0];)" <<  rel_333_isJVMStartupContext->size() << std::endl;
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1259:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   PublicMethodOfComponent(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_163_PublicMethodOfComponent->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_163_PublicMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_163_PublicMethodOfComponent_op_ctxt,rel_163_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_334_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :-     PublicMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   OverridingProtectedMethodOfComponent(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_191_OverridingProtectedMethodOfComponent->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_191_OverridingProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_191_OverridingProtectedMethodOfComponent_op_ctxt,rel_191_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_334_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :-     OverridingProtectedMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   _CallbackMethod(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_72_CallbackMethod->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_72_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_72_CallbackMethod_op_ctxt,rel_72_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_334_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :-     _CallbackMethod(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   PublicOnMethodOfLayoutControl(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_290_PublicOnMethodOfLayoutControl->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_290_PublicOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_290_PublicOnMethodOfLayoutControl_op_ctxt,rel_290_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_334_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :-     PublicOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   OverridingProtectedOnMethodOfLayoutControl(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_288_OverridingProtectedOnMethodOfLayoutControl->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_288_OverridingProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_288_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_288_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_334_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :-     OverridingProtectedOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1259:1-0:0];)" <<  rel_334_ForcedReachableAndroidContext->size() << std::endl;
}rel_335_delta_ForcedReachableAndroidContext->insertAll(*rel_334_ForcedReachableAndroidContext);
rel_338_delta_ReachableApplicationObjectOfType->insertAll(*rel_337_ReachableApplicationObjectOfType);
rel_341_delta_ApplicationObjectFlowingToLibrary->insertAll(*rel_340_ApplicationObjectFlowingToLibrary);
rel_344_delta_PublicOnMethodOfReachableListener->insertAll(*rel_343_PublicOnMethodOfReachableListener);
rel_347_delta_LibraryReachableAppListenerType->insertAll(*rel_346_LibraryReachableAppListenerType);
rel_350_delta_ProtectedOnMethodOfReachableListener->insertAll(*rel_349_ProtectedOnMethodOfReachableListener);
rel_353_delta_OverridingProtectedOnMethodOfReachableListener->insertAll(*rel_352_OverridingProtectedOnMethodOfReachableListener);
rel_356_delta_FormalOfForcedReachableContext->insertAll(*rel_355_FormalOfForcedReachableContext);
rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->insertAll(*rel_358_ApplicationObjectFlowingToLibraryStaticType);
{
	RamLogger logger(R"(@t-nonrecursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1278:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(InitializedClass(?class) :- 
   MainMethodDeclaration(?method),
   Method_DeclaringType(?method,?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1606:1-1608:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1606:1-1608:42];InitializedClass(?class) :- \n   MainMethodDeclaration(?method),\n   Method_DeclaringType(?method,?class).;)",profile);
if (!rel_231_MainMethodDeclaration->empty()&&!rel_74_Method_DeclaringType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_231_MainMethodDeclaration->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_361_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1606:1-1608:42];InitializedClass(?class) :-     MainMethodDeclaration(?method),    Method_DeclaringType(?method,?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1606:1-1608:42];InitializedClass(?class) :- \n   MainMethodDeclaration(?method),\n   Method_DeclaringType(?method,?class).;)" <<  rel_361_InitializedClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1278:1-0:0];)" <<  rel_361_InitializedClass->size() << std::endl;
}rel_362_delta_InitializedClass->insertAll(*rel_361_InitializedClass);
rel_365_delta_Instruction_Throws->insertAll(*rel_364_Instruction_Throws);
rel_368_delta_ThrowPointsTo->insertAll(*rel_367_ThrowPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1308:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(RunningThread(?hctx,?value) :- 
   MainThread(?hctx,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2160:1-2161:31])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2160:1-2161:31];RunningThread(?hctx,?value) :- \n   MainThread(?hctx,?value).;)",profile);
if (!rel_296_MainThread->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_296_MainThread->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_370_RunningThread_op_ctxt,rel_370_RunningThread->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_370_RunningThread->insert(tuple,READ_OP_CONTEXT(rel_370_RunningThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2160:1-2161:31];RunningThread(?hctx,?value) :-     MainThread(?hctx,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2160:1-2161:31];RunningThread(?hctx,?value) :- \n   MainThread(?hctx,?value).;)" <<  rel_370_RunningThread->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1308:1-0:0];)" <<  rel_370_RunningThread->size() << std::endl;
}rel_371_delta_RunningThread->insertAll(*rel_370_RunningThread);
rel_374_delta_ReachableCurrentThreadInvocation->insertAll(*rel_373_ReachableCurrentThreadInvocation);
{
	RamLogger logger(R"(@t-nonrecursive-relation;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1322:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>()>",?this),
   SystemThreadGroup([hctxValue],?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_298_SystemThreadGroup->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_298_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_376_isContext->insert(tuple,READ_OP_CONTEXT(rel_376_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThreadGroup([hctxValue],?value),
   _FormalParam(0,"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   SystemThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_297_MainThreadGroup->empty()&&!rel_298_SystemThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_297_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_298_SystemThreadGroup) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_376_isContext->insert(tuple,READ_OP_CONTEXT(rel_376_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   _ThisVar("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThread([hctxValue],?value),
   _FormalParam(0,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   MainThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_296_MainThread->empty()&&!rel_297_MainThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_296_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_297_MainThreadGroup) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_376_isContext->insert(tuple,READ_OP_CONTEXT(rel_376_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext(["<<immutable-context>>","<<immutable-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101];isContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)",profile);
rel_376_isContext->insert(pack(ram::Tuple<RamDomain,2>({42,42})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2270:1-2270:101];isContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext(["<<initial-context>>","<<initial-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95];isContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)",profile);
rel_376_isContext->insert(pack(ram::Tuple<RamDomain,2>({38,38})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2271:1-2271:95];isContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext(["<<jvm-startup-context>>","<<jvm-startup-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106];isContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)",profile);
rel_376_isContext->insert(pack(ram::Tuple<RamDomain,2>({39,39})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2272:1-2272:106];isContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)" <<  rel_376_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext(["<<clinit-context>>","<<clinit-context>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92];isContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)",profile);
rel_376_isContext->insert(pack(ram::Tuple<RamDomain,2>({41,41})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2273:1-2273:92];isContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)" <<  rel_376_isContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1322:1-0:0];)" <<  rel_376_isContext->size() << std::endl;
}rel_377_delta_isContext->insertAll(*rel_376_isContext);
{
	RamLogger logger(R"(@t-nonrecursive-relation;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1323:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isHContext(["<<immutable-hcontext>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82];isHContext([\"<<immutable-hcontext>>\"]).;)",profile);
rel_379_isHContext->insert(pack(ram::Tuple<RamDomain,1>({43})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2284:1-2284:82];isHContext([\"<<immutable-hcontext>>\"]).;)" <<  rel_379_isHContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHContext(["<<jvm-startup-hcontext>>"]).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85];isHContext([\"<<jvm-startup-hcontext>>\"]).;)",profile);
rel_379_isHContext->insert(pack(ram::Tuple<RamDomain,1>({40})));
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2285:1-2285:85];isHContext([\"<<jvm-startup-hcontext>>\"]).;)" <<  rel_379_isHContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1323:1-0:0];)" <<  rel_379_isHContext->size() << std::endl;
}rel_380_delta_isHContext->insertAll(*rel_379_isHContext);
rel_383_delta_ImmutableContextFromHContext->insertAll(*rel_382_ImmutableContextFromHContext);
rel_386_delta_ImmutableHContextFromContext->insertAll(*rel_385_ImmutableHContextFromContext);
rel_389_delta_ImmutableContextFromContext->insertAll(*rel_388_ImmutableContextFromContext);
{
	RamLogger logger(R"(@t-nonrecursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1337:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>()>",?this),
   SystemThreadGroup([hctxValue],?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_298_SystemThreadGroup->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_298_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThreadGroup([hctxValue],?value),
   _FormalParam(0,"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   SystemThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_297_MainThreadGroup->empty()&&!rel_298_SystemThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_297_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_298_SystemThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThreadGroup([hctxValue],?value),
   _FormalParam(0,"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   SystemThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_297_MainThreadGroup->empty()&&!rel_298_SystemThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_297_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_298_SystemThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[0]),(RamDomain)(env4[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env3[2])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   _ThisVar("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThread([hctxValue],?value),
   _FormalParam(0,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   MainThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_296_MainThread->empty()&&!rel_297_MainThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_296_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_297_MainThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- 
   _ThisVar("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThread([hctxValue],?value),
   _FormalParam(0,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   MainThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_296_MainThread->empty()&&!rel_297_MainThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_296_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_297_MainThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[0]),(RamDomain)(env4[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env3[2])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?formal) :- 
   ContextForEntryPoint(?ctx,?method),
   HContextForEntryPoint(?hctx,?method),
   MockForFormal(?value,?formal,?class,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)",profile);
if (!rel_278_ContextForEntryPoint->empty()&&!rel_280_HContextForEntryPoint->empty()&&!rel_275_MockForFormal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_278_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_278_ContextForEntryPoint_op_ctxt,rel_278_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt,rel_280_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_275_MockForFormal_op_ctxt,rel_275_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_280_HContextForEntryPoint->equalRange<1>(key,READ_OP_CONTEXT(rel_280_HContextForEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_275_MockForFormal->equalRange<3>(key,READ_OP_CONTEXT(rel_275_MockForFormal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];VarPointsTo(?hctx,?value,?ctx,?formal) :-     ContextForEntryPoint(?ctx,?method),    HContextForEntryPoint(?hctx,?method),    MockForFormal(?value,?formal,?class,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2611:1-2615:51];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :- 
   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_279_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_279_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_279_ReceiverPointsTo_op_ctxt,rel_279_ReceiverPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env1[0],env1[1]}))),(RamDomain)(env0[2])});
if (!(rel_391_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2617:1-2621:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_391_VarPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1337:1-0:0];)" <<  rel_391_VarPointsTo->size() << std::endl;
}rel_392_delta_VarPointsTo->insertAll(*rel_391_VarPointsTo);
rel_395_delta_InstanceFieldPointsTo->insertAll(*rel_394_InstanceFieldPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1339:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StaticFieldPointsTo(?hctx,?value,?signature) :- 
   _FieldInitialValue(?signature,?const),
   Value_Num(?value,?const),
   isImmutableHContext(?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2373:1-2376:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2373:1-2376:30];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   _FieldInitialValue(?signature,?const),\n   Value_Num(?value,?const),\n   isImmutableHContext(?hctx).;)",profile);
if (!rel_301_Value_Num->empty()&&!rel_294_FieldInitialValue->empty()&&!rel_277_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_294_FieldInitialValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_294_FieldInitialValue_op_ctxt,rel_294_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_277_isImmutableHContext_op_ctxt,rel_277_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_301_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_277_isImmutableHContext) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_397_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2373:1-2376:30];StaticFieldPointsTo(?hctx,?value,?signature) :-     _FieldInitialValue(?signature,?const),    Value_Num(?value,?const),    isImmutableHContext(?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2373:1-2376:30];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   _FieldInitialValue(?signature,?const),\n   Value_Num(?value,?const),\n   isImmutableHContext(?hctx).;)" <<  rel_397_StaticFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1339:1-0:0];)" <<  rel_397_StaticFieldPointsTo->size() << std::endl;
}rel_398_delta_StaticFieldPointsTo->insertAll(*rel_397_StaticFieldPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1340:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :- 
   MockObjectContext(?hctx,?arrayValue,?arrayType),
   isArrayType(?arrayType),
   MockObjectForComponentType(?componentValue,?arrayType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2587:1-2590:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2587:1-2590:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :- \n   MockObjectContext(?hctx,?arrayValue,?arrayType),\n   isArrayType(?arrayType),\n   MockObjectForComponentType(?componentValue,?arrayType).;)",profile);
if (!rel_281_MockObjectContext->empty()&&!rel_273_MockObjectForComponentType->empty()&&!rel_126_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_281_MockObjectContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_281_MockObjectContext_op_ctxt,rel_281_MockObjectContext->createContext());
CREATE_OP_CONTEXT(rel_273_MockObjectForComponentType_op_ctxt,rel_273_MockObjectForComponentType->createContext());
CREATE_OP_CONTEXT(rel_126_isArrayType_op_ctxt,rel_126_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[2]});
auto range = rel_126_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_126_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_273_MockObjectForComponentType->equalRange<1>(key,READ_OP_CONTEXT(rel_273_MockObjectForComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_400_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2587:1-2590:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :-     MockObjectContext(?hctx,?arrayValue,?arrayType),    isArrayType(?arrayType),    MockObjectForComponentType(?componentValue,?arrayType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2587:1-2590:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :- \n   MockObjectContext(?hctx,?arrayValue,?arrayType),\n   isArrayType(?arrayType),\n   MockObjectForComponentType(?componentValue,?arrayType).;)" <<  rel_400_ArrayIndexPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1340:1-0:0];)" <<  rel_400_ArrayIndexPointsTo->size() << std::endl;
}rel_401_delta_ArrayIndexPointsTo->insertAll(*rel_400_ArrayIndexPointsTo);
rel_404_delta_CallGraphEdge->insertAll(*rel_403_CallGraphEdge);
rel_407_delta_Reachable->insertAll(*rel_406_Reachable);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1345:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   PublicMethodOfComponent(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_163_PublicMethodOfComponent->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_163_PublicMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_163_PublicMethodOfComponent_op_ctxt,rel_163_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :-     PublicMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   OverridingProtectedMethodOfComponent(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_191_OverridingProtectedMethodOfComponent->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_191_OverridingProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_191_OverridingProtectedMethodOfComponent_op_ctxt,rel_191_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :-     OverridingProtectedMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   _CallbackMethod(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_72_CallbackMethod->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_72_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_72_CallbackMethod_op_ctxt,rel_72_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :-     _CallbackMethod(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1489:1-1494:28];ReachableContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   PublicOnMethodOfLayoutControl(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_290_PublicOnMethodOfLayoutControl->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_290_PublicOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_290_PublicOnMethodOfLayoutControl_op_ctxt,rel_290_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :-     PublicOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   OverridingProtectedOnMethodOfLayoutControl(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_288_OverridingProtectedOnMethodOfLayoutControl->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_288_OverridingProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_288_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_288_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :-     OverridingProtectedOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1510:1-1514:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext([hctxValue,?value],"<java.lang.ThreadGroup: void <init>()>") :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>()>",?this),
   SystemThreadGroup([hctxValue],?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>()>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_298_SystemThreadGroup->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_298_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(94)});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];ReachableContext([hctxValue,?value],'<java.lang.ThreadGroup: void <init>()>') :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2184:1-2190:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>()>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext([hctxValue,?value],"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>") :- 
   _ThisVar("<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThreadGroup([hctxValue],?value),
   _FormalParam(0,"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   SystemThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_297_MainThreadGroup->empty()&&!rel_298_SystemThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_298_SystemThreadGroup_op_ctxt,rel_298_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_297_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_298_SystemThreadGroup) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(147)});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];ReachableContext([hctxValue,?value],'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2191:1-2201:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext([hctxValue,?value],"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>") :- 
   _ThisVar("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?this),
   MainThread([hctxValue],?value),
   _FormalParam(0,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>",?groupParam),
   MainThreadGroup(?groupHCtx,?group).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];ReachableContext([hctxValue,?value],\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_296_MainThread->empty()&&!rel_297_MainThreadGroup->empty()&&!rel_32_FormalParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_MainThread_op_ctxt,rel_296_MainThread->createContext());
CREATE_OP_CONTEXT(rel_297_MainThreadGroup_op_ctxt,rel_297_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_296_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_297_MainThreadGroup) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(93)});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];ReachableContext([hctxValue,?value],'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2202:1-2212:59];ReachableContext([hctxValue,?value],\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?initialContext,?method) :- 
   isInitialContext(?initialContext),
   MainMethodDeclaration(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2274:1-2276:34])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2274:1-2276:34];ReachableContext(?initialContext,?method) :- \n   isInitialContext(?initialContext),\n   MainMethodDeclaration(?method).;)",profile);
if (!rel_231_MainMethodDeclaration->empty()&&!rel_332_isInitialContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_332_isInitialContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_332_isInitialContext_op_ctxt,rel_332_isInitialContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_231_MainMethodDeclaration) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2274:1-2276:34];ReachableContext(?initialContext,?method) :-     isInitialContext(?initialContext),    MainMethodDeclaration(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2274:1-2276:34];ReachableContext(?initialContext,?method) :- \n   isInitialContext(?initialContext),\n   MainMethodDeclaration(?method).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?jvmStartUpContext,?method) :- 
   isJVMStartupContext(?jvmStartUpContext),
   ImplicitReachable(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2277:1-2279:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2277:1-2279:30];ReachableContext(?jvmStartUpContext,?method) :- \n   isJVMStartupContext(?jvmStartUpContext),\n   ImplicitReachable(?method).;)",profile);
if (!rel_283_ImplicitReachable->empty()&&!rel_333_isJVMStartupContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_333_isJVMStartupContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_ImplicitReachable_op_ctxt,rel_283_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_333_isJVMStartupContext_op_ctxt,rel_333_isJVMStartupContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_283_ImplicitReachable) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2277:1-2279:30];ReachableContext(?jvmStartUpContext,?method) :-     isJVMStartupContext(?jvmStartUpContext),    ImplicitReachable(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2277:1-2279:30];ReachableContext(?jvmStartUpContext,?method) :- \n   isJVMStartupContext(?jvmStartUpContext),\n   ImplicitReachable(?method).;)" <<  rel_409_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?method) :- 
   ContextForEntryPoint(?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2630:1-2631:39])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2630:1-2631:39];ReachableContext(?ctx,?method) :- \n   ContextForEntryPoint(?ctx,?method).;)",profile);
if (!rel_278_ContextForEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_278_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_278_ContextForEntryPoint_op_ctxt,rel_278_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_409_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2630:1-2631:39];ReachableContext(?ctx,?method) :-     ContextForEntryPoint(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2630:1-2631:39];ReachableContext(?ctx,?method) :- \n   ContextForEntryPoint(?ctx,?method).;)" <<  rel_409_ReachableContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1345:1-0:0];)" <<  rel_409_ReachableContext->size() << std::endl;
}rel_410_delta_ReachableContext->insertAll(*rel_409_ReachableContext);
rel_413_delta_OptInterproceduralAssign->insertAll(*rel_412_OptInterproceduralAssign);
rel_416_delta_OptStoreIntoArray->insertAll(*rel_415_OptStoreIntoArray);
rel_419_delta_LoadHeapInstanceField->insertAll(*rel_418_LoadHeapInstanceField);
rel_422_delta_StoreHeapInstanceField->insertAll(*rel_421_StoreHeapInstanceField);
rel_425_delta_LoadHeapArrayIndex->insertAll(*rel_424_LoadHeapArrayIndex);
rel_428_delta_StoreHeapArrayIndex->insertAll(*rel_427_StoreHeapArrayIndex);
rel_431_delta_AbstractCallGraphEdge->insertAll(*rel_430_AbstractCallGraphEdge);
rel_434_delta_AbstractThrowPointsTo->insertAll(*rel_433_AbstractThrowPointsTo);
rel_437_delta_OptAssignCast->insertAll(*rel_436_OptAssignCast);
rel_440_delta_ReachableStoreStaticFieldFrom->insertAll(*rel_439_ReachableStoreStaticFieldFrom);
rel_443_delta_OptLoadHeapArrayIndex->insertAll(*rel_442_OptLoadHeapArrayIndex);
rel_446_delta_Temp1->insertAll(*rel_445_Temp1);
rel_449_delta_Temp2->insertAll(*rel_448_Temp2);
rel_452_delta_ReachableLoadArrayIndexBase->insertAll(*rel_451_ReachableLoadArrayIndexBase);
rel_455_delta_ReachableStoreArrayIndexBase->insertAll(*rel_454_ReachableStoreArrayIndexBase);
rel_458_delta_OptVirtualMethodInvocationBase->insertAll(*rel_457_OptVirtualMethodInvocationBase);
rel_461_delta_OptSpecialMethodInvocationBase->insertAll(*rel_460_OptSpecialMethodInvocationBase);
rel_464_delta_Tamiflex_Invoke->insertAll(*rel_463_Tamiflex_Invoke);
rel_467_delta_TamiflexCallGraphEdge->insertAll(*rel_466_TamiflexCallGraphEdge);
rel_470_delta_TamiflexConstructorCallGraphEdge->insertAll(*rel_469_TamiflexConstructorCallGraphEdge);
rel_473_delta_TamiflexInvocationFirstParam->insertAll(*rel_472_TamiflexInvocationFirstParam);
rel_476_delta_TamiflexInvocationArgumentArrayValue->insertAll(*rel_475_TamiflexInvocationArgumentArrayValue);
for(;;) {
SECTIONS_START;
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1259:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   PublicOnMethodOfReachableListener(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_344_delta_PublicOnMethodOfReachableListener->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_344_delta_PublicOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_344_delta_PublicOnMethodOfReachableListener_op_ctxt,rel_344_delta_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_336_new_ForcedReachableAndroidContext_op_ctxt,rel_336_new_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
if( !rel_334_ForcedReachableAndroidContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_336_new_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_336_new_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];@new_ForcedReachableAndroidContext(?ctx,?meth) :-     @delta_PublicOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ForcedReachableAndroidContext(?ctx,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_336_new_ForcedReachableAndroidContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ForcedReachableAndroidContext(?ctx,?meth) :- 
   OverridingProtectedOnMethodOfReachableListener(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_353_delta_OverridingProtectedOnMethodOfReachableListener->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_353_delta_OverridingProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_353_delta_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_353_delta_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_336_new_ForcedReachableAndroidContext_op_ctxt,rel_336_new_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
if( !rel_334_ForcedReachableAndroidContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_336_new_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_336_new_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];@new_ForcedReachableAndroidContext(?ctx,?meth) :-     @delta_OverridingProtectedOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ForcedReachableAndroidContext(?ctx,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_336_new_ForcedReachableAndroidContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1259:1-0:0];)" <<  rel_336_new_ForcedReachableAndroidContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1263:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableApplicationObjectOfType(?hctx,?value,?ofType) :- 
   _ApplicationClass(?ofType),
   Value_Type(?value,?ofType),
   VarPointsTo(?hctx,?value,_,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1515:1-1518:36])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableApplicationObjectOfType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1515:1-1518:36];ReachableApplicationObjectOfType(?hctx,?value,?ofType) :- \n   _ApplicationClass(?ofType),\n   Value_Type(?value,?ofType),\n   VarPointsTo(?hctx,?value,_,_).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_300_Value_Type->empty()&&!rel_117_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_117_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_339_new_ReachableApplicationObjectOfType_op_ctxt,rel_339_new_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_337_ReachableApplicationObjectOfType_op_ctxt,rel_337_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_117_ApplicationClass_op_ctxt,rel_117_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_300_Value_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,env1[0],0,0});
auto range = rel_392_delta_VarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_337_ReachableApplicationObjectOfType->contains(Tuple<RamDomain,3>({env2[0],env1[0],env0[0]}),READ_OP_CONTEXT(rel_337_ReachableApplicationObjectOfType_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_339_new_ReachableApplicationObjectOfType->insert(tuple,READ_OP_CONTEXT(rel_339_new_ReachableApplicationObjectOfType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1515:1-1518:36];@new_ReachableApplicationObjectOfType(?hctx,?value,?ofType) :-     _ApplicationClass(?ofType),    Value_Type(?value,?ofType),    @delta_VarPointsTo(?hctx,?value, _unnamed_var1, _unnamed_var2),    !ReachableApplicationObjectOfType(?hctx,?value,?ofType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableApplicationObjectOfType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1515:1-1518:36];ReachableApplicationObjectOfType(?hctx,?value,?ofType) :- \n   _ApplicationClass(?ofType),\n   Value_Type(?value,?ofType),\n   VarPointsTo(?hctx,?value,_,_).;)" <<  rel_339_new_ReachableApplicationObjectOfType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1263:1-0:0];)" <<  rel_339_new_ReachableApplicationObjectOfType->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1264:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :- 
   ReachableApplicationObjectOfType(?hctx,?value,?ofType),
   AndroidApplicationListenerClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42])_");
{
	RamLogger logger(R"(@t-recursive-rule;ApplicationObjectFlowingToLibrary;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)",profile);
if (!rel_338_delta_ReachableApplicationObjectOfType->empty()&&!rel_193_AndroidApplicationListenerClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_338_delta_ReachableApplicationObjectOfType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_338_delta_ReachableApplicationObjectOfType_op_ctxt,rel_338_delta_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_342_new_ApplicationObjectFlowingToLibrary_op_ctxt,rel_342_new_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_193_AndroidApplicationListenerClass_op_ctxt,rel_193_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_340_ApplicationObjectFlowingToLibrary_op_ctxt,rel_340_ApplicationObjectFlowingToLibrary->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_340_ApplicationObjectFlowingToLibrary->contains(Tuple<RamDomain,3>({env0[0],env0[1],env0[2]}),READ_OP_CONTEXT(rel_340_ApplicationObjectFlowingToLibrary_op_ctxt))) {
for(const auto& env1 : *rel_193_AndroidApplicationListenerClass) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_342_new_ApplicationObjectFlowingToLibrary->insert(tuple,READ_OP_CONTEXT(rel_342_new_ApplicationObjectFlowingToLibrary_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];@new_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :-     @delta_ReachableApplicationObjectOfType(?hctx,?value,?ofType),    AndroidApplicationListenerClass(?type),    !ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ApplicationObjectFlowingToLibrary;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)" <<  rel_342_new_ApplicationObjectFlowingToLibrary->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1264:1-0:0];)" <<  rel_342_new_ApplicationObjectFlowingToLibrary->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1265:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(PublicOnMethodOfReachableListener(?meth) :- 
   MethodDeclaredOrInherited(?meth,?class),
   LibraryReachableAppListenerType(?class),
   Method_SimpleName(?meth,?simplename),
   _Method_Modifier("public",?meth),
   "^on.*" match ?simplename.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1523:1-1528:36])_");
{
	RamLogger logger(R"(@t-recursive-rule;PublicOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1523:1-1528:36];PublicOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_347_delta_LibraryReachableAppListenerType->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_159_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_347_delta_LibraryReachableAppListenerType_op_ctxt,rel_347_delta_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_345_new_PublicOnMethodOfReachableListener_op_ctxt,rel_345_new_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_343_PublicOnMethodOfReachableListener_op_ctxt,rel_343_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_343_PublicOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_343_PublicOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_347_delta_LibraryReachableAppListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_347_delta_LibraryReachableAppListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_345_new_PublicOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_345_new_PublicOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1523:1-1528:36];@new_PublicOnMethodOfReachableListener(?meth) :-     MethodDeclaredOrInherited(?meth,?class),    @delta_LibraryReachableAppListenerType(?class),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('public',?meth),    !PublicOnMethodOfReachableListener(?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;PublicOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1523:1-1528:36];PublicOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_345_new_PublicOnMethodOfReachableListener->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1265:1-0:0];)" <<  rel_345_new_PublicOnMethodOfReachableListener->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1267:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LibraryReachableAppListenerType(?type) :- 
   ReachableApplicationObjectOfType(?hctx,?value,?ofType),
   AndroidApplicationListenerClass(?type).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42])_");
{
	RamLogger logger(R"(@t-recursive-rule;LibraryReachableAppListenerType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];LibraryReachableAppListenerType(?type) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)",profile);
if (!rel_338_delta_ReachableApplicationObjectOfType->empty()&&!rel_193_AndroidApplicationListenerClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_338_delta_ReachableApplicationObjectOfType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_338_delta_ReachableApplicationObjectOfType_op_ctxt,rel_338_delta_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_348_new_LibraryReachableAppListenerType_op_ctxt,rel_348_new_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_193_AndroidApplicationListenerClass_op_ctxt,rel_193_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_346_LibraryReachableAppListenerType_op_ctxt,rel_346_LibraryReachableAppListenerType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_193_AndroidApplicationListenerClass) {
if( !rel_346_LibraryReachableAppListenerType->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_346_LibraryReachableAppListenerType_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_348_new_LibraryReachableAppListenerType->insert(tuple,READ_OP_CONTEXT(rel_348_new_LibraryReachableAppListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];@new_LibraryReachableAppListenerType(?type) :-     @delta_ReachableApplicationObjectOfType(?hctx,?value,?ofType),    AndroidApplicationListenerClass(?type),    !LibraryReachableAppListenerType(?type).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;LibraryReachableAppListenerType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1519:1-1522:42];LibraryReachableAppListenerType(?type) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)" <<  rel_348_new_LibraryReachableAppListenerType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1267:1-0:0];)" <<  rel_348_new_LibraryReachableAppListenerType->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1268:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ProtectedOnMethodOfReachableListener(?meth) :- 
   MethodDeclaredOrInherited(?meth,?class),
   LibraryReachableAppListenerType(?class),
   Method_SimpleName(?meth,?simplename),
   _Method_Modifier("protected",?meth),
   "^on.*" match ?simplename.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1529:1-1534:39])_");
{
	RamLogger logger(R"(@t-recursive-rule;ProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1529:1-1534:39];ProtectedOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_347_delta_LibraryReachableAppListenerType->empty()&&!rel_159_MethodDeclaredOrInherited->empty()&&!rel_76_Method_SimpleName->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_159_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_347_delta_LibraryReachableAppListenerType_op_ctxt,rel_347_delta_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_351_new_ProtectedOnMethodOfReachableListener_op_ctxt,rel_351_new_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_159_MethodDeclaredOrInherited_op_ctxt,rel_159_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt,rel_76_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_349_ProtectedOnMethodOfReachableListener_op_ctxt,rel_349_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_349_ProtectedOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_349_ProtectedOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_347_delta_LibraryReachableAppListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_347_delta_LibraryReachableAppListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_76_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_76_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({61,env0[0]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_351_new_ProtectedOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_351_new_ProtectedOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1529:1-1534:39];@new_ProtectedOnMethodOfReachableListener(?meth) :-     MethodDeclaredOrInherited(?meth,?class),    @delta_LibraryReachableAppListenerType(?class),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('protected',?meth),    !ProtectedOnMethodOfReachableListener(?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1529:1-1534:39];ProtectedOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_351_new_ProtectedOnMethodOfReachableListener->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1268:1-0:0];)" <<  rel_351_new_ProtectedOnMethodOfReachableListener->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1269:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OverridingProtectedOnMethodOfReachableListener(?meth) :- 
   ProtectedOnMethodOfReachableListener(?meth),
   AppMethodOverridesAndroidLibraryMethod(?meth).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1535:1-1537:49])_");
{
	RamLogger logger(R"(@t-recursive-rule;OverridingProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1535:1-1537:49];OverridingProtectedOnMethodOfReachableListener(?meth) :- \n   ProtectedOnMethodOfReachableListener(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_350_delta_ProtectedOnMethodOfReachableListener->empty()&&!rel_190_AppMethodOverridesAndroidLibraryMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_350_delta_ProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_350_delta_ProtectedOnMethodOfReachableListener_op_ctxt,rel_350_delta_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_354_new_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_354_new_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_190_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_352_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_352_OverridingProtectedOnMethodOfReachableListener->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_352_OverridingProtectedOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_352_OverridingProtectedOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_190_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_190_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_354_new_OverridingProtectedOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_354_new_OverridingProtectedOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1535:1-1537:49];@new_OverridingProtectedOnMethodOfReachableListener(?meth) :-     @delta_ProtectedOnMethodOfReachableListener(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth),    !OverridingProtectedOnMethodOfReachableListener(?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OverridingProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1535:1-1537:49];OverridingProtectedOnMethodOfReachableListener(?meth) :- \n   ProtectedOnMethodOfReachableListener(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_354_new_OverridingProtectedOnMethodOfReachableListener->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1269:1-0:0];)" <<  rel_354_new_OverridingProtectedOnMethodOfReachableListener->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1272:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(FormalOfForcedReachableContext(?ctx,?formal,?formalType) :- 
   ForcedReachableAndroidContext(?ctx,?meth),
   _FormalParam(_,?meth,?formal),
   Var_Type(?formal,?formalType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1560:1-1563:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;FormalOfForcedReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1560:1-1563:34];FormalOfForcedReachableContext(?ctx,?formal,?formalType) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   _FormalParam(_,?meth,?formal),\n   Var_Type(?formal,?formalType).;)",profile);
if (!rel_335_delta_ForcedReachableAndroidContext->empty()&&!rel_241_Var_Type->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_335_delta_ForcedReachableAndroidContext_op_ctxt,rel_335_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_357_new_FormalOfForcedReachableContext_op_ctxt,rel_357_new_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt,rel_355_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_32_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[2],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_355_FormalOfForcedReachableContext->contains(Tuple<RamDomain,3>({env0[0],env1[2],env2[1]}),READ_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[2]),(RamDomain)(env2[1])});
if (!(rel_357_new_FormalOfForcedReachableContext->insert(tuple,READ_OP_CONTEXT(rel_357_new_FormalOfForcedReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1560:1-1563:34];@new_FormalOfForcedReachableContext(?ctx,?formal,?formalType) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    _FormalParam( _unnamed_var1,?meth,?formal),    Var_Type(?formal,?formalType),    !FormalOfForcedReachableContext(?ctx,?formal,?formalType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;FormalOfForcedReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1560:1-1563:34];FormalOfForcedReachableContext(?ctx,?formal,?formalType) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   _FormalParam(_,?meth,?formal),\n   Var_Type(?formal,?formalType).;)" <<  rel_357_new_FormalOfForcedReachableContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1272:1-0:0];)" <<  rel_357_new_FormalOfForcedReachableContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1273:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :- 
   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),
   SupertypeOf(?possibleType,?ofType).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1570:1-1572:39])_");
{
	RamLogger logger(R"(@t-recursive-rule;ApplicationObjectFlowingToLibraryStaticType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1570:1-1572:39];ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :- \n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   SupertypeOf(?possibleType,?ofType).;)",profile);
if (!rel_341_delta_ApplicationObjectFlowingToLibrary->empty()&&!rel_189_SupertypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_341_delta_ApplicationObjectFlowingToLibrary->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_341_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_341_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_360_new_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_360_new_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_358_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_358_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_189_SupertypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_358_ApplicationObjectFlowingToLibraryStaticType->contains(Tuple<RamDomain,3>({env0[0],env0[1],env1[0]}),READ_OP_CONTEXT(rel_358_ApplicationObjectFlowingToLibraryStaticType_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_360_new_ApplicationObjectFlowingToLibraryStaticType->insert(tuple,READ_OP_CONTEXT(rel_360_new_ApplicationObjectFlowingToLibraryStaticType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1570:1-1572:39];@new_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :-     @delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    SupertypeOf(?possibleType,?ofType),    !ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ApplicationObjectFlowingToLibraryStaticType;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1570:1-1572:39];ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :- \n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   SupertypeOf(?possibleType,?ofType).;)" <<  rel_360_new_ApplicationObjectFlowingToLibraryStaticType->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1273:1-0:0];)" <<  rel_360_new_ApplicationObjectFlowingToLibraryStaticType->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1278:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(InitializedClass(?superclass) :- 
   InitializedClass(?classOrInterface),
   _DirectSuperclass(?classOrInterface,?superclass).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1603:1-1605:53])_");
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1603:1-1605:53];InitializedClass(?superclass) :- \n   InitializedClass(?classOrInterface),\n   _DirectSuperclass(?classOrInterface,?superclass).;)",profile);
if (!rel_362_delta_InitializedClass->empty()&&!rel_128_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_362_delta_InitializedClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_362_delta_InitializedClass_op_ctxt,rel_362_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt,rel_363_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt,rel_128_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_128_DirectSuperclass->equalRange<0>(key,READ_OP_CONTEXT(rel_128_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_361_InitializedClass->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_363_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1603:1-1605:53];@new_InitializedClass(?superclass) :-     @delta_InitializedClass(?classOrInterface),    _DirectSuperclass(?classOrInterface,?superclass),    !InitializedClass(?superclass).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1603:1-1605:53];InitializedClass(?superclass) :- \n   InitializedClass(?classOrInterface),\n   _DirectSuperclass(?classOrInterface,?superclass).;)" <<  rel_363_new_InitializedClass->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(InitializedClass(?class) :- 
   Reachable(?inmethod),
   AssignHeapAllocation(?heap,_,?inmethod),
   HeapAllocation_Type(?heap,?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1609:1-1612:39])_");
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1609:1-1612:39];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_150_AssignHeapAllocation->empty()&&!rel_113_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt,rel_363_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt,rel_150_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_150_AssignHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_150_AssignHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_113_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_361_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_363_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1609:1-1612:39];@new_InitializedClass(?class) :-     @delta_Reachable(?inmethod),    AssignHeapAllocation(?heap, _unnamed_var1,?inmethod),    HeapAllocation_Type(?heap,?class),    !InitializedClass(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1609:1-1612:39];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class).;)" <<  rel_363_new_InitializedClass->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(InitializedClass(?class) :- 
   Reachable(?inmethod),
   Instruction_Method(?invocation,?inmethod),
   isStaticMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation,?signature),
   Method_DeclaringType(?signature,?class).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1613:1-1618:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1613:1-1618:45];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   isStaticMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_DeclaringType(?signature,?class).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_85_Instruction_Method->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_51_isStaticMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt,rel_363_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_51_isStaticMethodInvocation_Insn_op_ctxt,rel_51_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_51_isStaticMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_51_isStaticMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_361_InitializedClass->contains(Tuple<RamDomain,1>({env4[1]}),READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env4[1])});
if (!(rel_363_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1613:1-1618:45];@new_InitializedClass(?class) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    isStaticMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_DeclaringType(?signature,?class),    !InitializedClass(?class).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1613:1-1618:45];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   isStaticMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_DeclaringType(?signature,?class).;)" <<  rel_363_new_InitializedClass->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(InitializedClass(?classOrInterface) :- 
   Reachable(?inmethod),
   StoreStaticField(_,?signature,?inmethod),
   Field_DeclaringType(?signature,?classOrInterface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1619:1-1622:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1619:1-1622:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   StoreStaticField(_,?signature,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_215_Field_DeclaringType->empty()&&!rel_239_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt,rel_363_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_239_StoreStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_215_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_361_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_363_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1619:1-1622:55];@new_InitializedClass(?classOrInterface) :-     @delta_Reachable(?inmethod),    StoreStaticField( _unnamed_var1,?signature,?inmethod),    Field_DeclaringType(?signature,?classOrInterface),    !InitializedClass(?classOrInterface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1619:1-1622:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   StoreStaticField(_,?signature,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)" <<  rel_363_new_InitializedClass->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(InitializedClass(?classOrInterface) :- 
   Reachable(?inmethod),
   LoadStaticField(?signature,_,?inmethod),
   Field_DeclaringType(?signature,?classOrInterface).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1623:1-1626:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1623:1-1626:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   LoadStaticField(?signature,_,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_215_Field_DeclaringType->empty()&&!rel_228_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt,rel_363_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt,rel_215_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_361_InitializedClass_op_ctxt,rel_361_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt,rel_228_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_228_LoadStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_215_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_215_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_361_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_361_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_363_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_363_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1623:1-1626:55];@new_InitializedClass(?classOrInterface) :-     @delta_Reachable(?inmethod),    LoadStaticField(?signature, _unnamed_var1,?inmethod),    Field_DeclaringType(?signature,?classOrInterface),    !InitializedClass(?classOrInterface).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1623:1-1626:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   LoadStaticField(?signature,_,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)" <<  rel_363_new_InitializedClass->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1278:1-0:0];)" <<  rel_363_new_InitializedClass->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1279:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Instruction_Throws(?hctx,?value,?ctx,?insn) :- 
   Throw(?insn,?var),
   VarPointsTo(?hctx,?value,?ctx,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1627:1-1629:42])_");
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1627:1-1629:42];Instruction_Throws(?hctx,?value,?ctx,?insn) :- \n   Throw(?insn,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_69_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_69_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt,rel_366_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt,rel_364_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_69_Throw_op_ctxt,rel_69_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_364_Instruction_Throws->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_366_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1627:1-1629:42];@new_Instruction_Throws(?hctx,?value,?ctx,?insn) :-     Throw(?insn,?var),    @delta_VarPointsTo(?hctx,?value,?ctx,?var),    !Instruction_Throws(?hctx,?value,?ctx,?insn).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1627:1-1629:42];Instruction_Throws(?hctx,?value,?ctx,?insn) :- \n   Throw(?insn,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_366_new_Instruction_Throws->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- 
   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),
   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),
   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),
   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).

   .plan 1:(3,2,1,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164])_");
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),\n   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),\n   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),\n   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_431_delta_AbstractCallGraphEdge->empty()&&!rel_433_AbstractThrowPointsTo->empty()&&!rel_329_HasItsc->empty()&&!rel_330_Itsc->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_delta_AbstractCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_431_delta_AbstractCallGraphEdge_op_ctxt,rel_431_delta_AbstractCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_434_delta_AbstractThrowPointsTo_op_ctxt,rel_434_delta_AbstractThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt,rel_366_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_433_AbstractThrowPointsTo_op_ctxt,rel_433_AbstractThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_329_HasItsc_op_ctxt,rel_329_HasItsc->createContext());
CREATE_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt,rel_364_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_330_Itsc_op_ctxt,rel_330_Itsc->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,7> key({env0[1],env1[0],env1[1],env0[3],0,0,0});
auto range = rel_329_HasItsc->equalRange<0,1,2,3>(key,READ_OP_CONTEXT(rel_329_HasItsc_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env2[6]});
auto range = rel_433_AbstractThrowPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_433_AbstractThrowPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_434_delta_AbstractThrowPointsTo->contains(Tuple<RamDomain,4>({env3[0],env3[1],pack(ram::Tuple<RamDomain,2>({env2[4],env2[5]})),env2[6]}),READ_OP_CONTEXT(rel_434_delta_AbstractThrowPointsTo_op_ctxt))) {
auto ref = env3[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( ((((env2[4]) == (env4[0]))) && (((env2[5]) == (env4[1]))))) {
const Tuple<RamDomain,8> key({env0[1],env1[0],env1[1],env0[3],env2[4],env2[5],env2[6],0});
auto range = rel_330_Itsc->equalRange<0,1,2,3,4,5,6>(key,READ_OP_CONTEXT(rel_330_Itsc_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_364_Instruction_Throws->contains(Tuple<RamDomain,4>({env3[0],env3[1],env0[0],env5[7]}),READ_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[0]),(RamDomain)(env3[1]),(RamDomain)(env0[0]),(RamDomain)(env5[7])});
if (!(rel_366_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];@new_Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :-     @delta_AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),    HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),    AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),    Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation),    !Instruction_Throws(?hctx,?value,?callerCtx,?invocation),    !@delta_AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod).     .plan 1:(3,2,1,4);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),\n   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),\n   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),\n   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).\n\n   .plan 1:(3,2,1,4);)" <<  rel_366_new_Instruction_Throws->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- 
   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),
   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),
   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),
   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).

   .plan 1:(3,2,1,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164])_");
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),\n   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),\n   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),\n   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_434_delta_AbstractThrowPointsTo->empty()&&!rel_430_AbstractCallGraphEdge->empty()&&!rel_329_HasItsc->empty()&&!rel_330_Itsc->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_434_delta_AbstractThrowPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_434_delta_AbstractThrowPointsTo_op_ctxt,rel_434_delta_AbstractThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt,rel_366_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_430_AbstractCallGraphEdge_op_ctxt,rel_430_AbstractCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_329_HasItsc_op_ctxt,rel_329_HasItsc->createContext());
CREATE_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt,rel_364_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_330_Itsc_op_ctxt,rel_330_Itsc->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,7> key({0,0,0,0,env1[0],env1[1],env0[3]});
auto range = rel_329_HasItsc->equalRange<4,5,6>(key,READ_OP_CONTEXT(rel_329_HasItsc_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,env2[0],0,env2[3]});
auto range = rel_430_AbstractCallGraphEdge->equalRange<1,3>(key,READ_OP_CONTEXT(rel_430_AbstractCallGraphEdge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( ((((env2[1]) == (env4[0]))) && (((env2[2]) == (env4[1]))))) {
const Tuple<RamDomain,8> key({env2[0],env2[1],env2[2],env2[3],env1[0],env1[1],env0[3],0});
auto range = rel_330_Itsc->equalRange<0,1,2,3,4,5,6>(key,READ_OP_CONTEXT(rel_330_Itsc_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_364_Instruction_Throws->contains(Tuple<RamDomain,4>({env0[0],env0[1],env3[0],env5[7]}),READ_OP_CONTEXT(rel_364_Instruction_Throws_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env5[7])});
if (!(rel_366_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_366_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];@new_Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :-     @delta_AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),    HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),    AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),    Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation),    !Instruction_Throws(?hctx,?value,?callerCtx,?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Instruction_Throws;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1642:1-1646:164];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   AbstractCallGraphEdge(?callerCtx,?abs_cge_invocation,[?abs_cge_calleeCtx1,?abs_cge_calleeCtx2],?abs_cge_tomethod),\n   HasItsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod),\n   AbstractThrowPointsTo(?hctx,?value,[?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2],?abs_tpt_tomethod),\n   Itsc(?abs_cge_invocation,?abs_cge_calleeCtx1,?abs_cge_calleeCtx2,?abs_cge_tomethod,?abs_tpt_calleeCtx1,?abs_tpt_calleeCtx2,?abs_tpt_tomethod,?invocation).\n\n   .plan 1:(3,2,1,4);)" <<  rel_366_new_Instruction_Throws->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1279:1-0:0];)" <<  rel_366_new_Instruction_Throws->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1300:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ThrowPointsTo(?hctx,?value,?ctx,?method) :- 
   Instruction_Throws(?hctx,?value,?ctx,?insn),
   Instruction_Method(?insn,?method),
   !ExceptionHandler_InRange(_,?insn).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1648:1-1651:39])_");
{
	RamLogger logger(R"(@t-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1648:1-1651:39];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Instruction_Method(?insn,?method),\n   !ExceptionHandler_InRange(_,?insn).;)",profile);
if (!rel_365_delta_Instruction_Throws->empty()&&!rel_85_Instruction_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_365_delta_Instruction_Throws_op_ctxt,rel_365_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_369_new_ThrowPointsTo_op_ctxt,rel_369_new_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_367_ThrowPointsTo_op_ctxt,rel_367_ThrowPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_312_ExceptionHandler_InRange->equalRange<1>(Tuple<RamDomain,2>({0,env0[3]}),READ_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_367_ThrowPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env1[1]}),READ_OP_CONTEXT(rel_367_ThrowPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[1])});
if (!(rel_369_new_ThrowPointsTo->insert(tuple,READ_OP_CONTEXT(rel_369_new_ThrowPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1648:1-1651:39];@new_ThrowPointsTo(?hctx,?value,?ctx,?method) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Instruction_Method(?insn,?method),    !ExceptionHandler_InRange(_,?insn),    !ThrowPointsTo(?hctx,?value,?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1648:1-1651:39];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Instruction_Method(?insn,?method),\n   !ExceptionHandler_InRange(_,?insn).;)" <<  rel_369_new_ThrowPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ThrowPointsTo(?hctx,?value,?ctx,?method) :- 
   Instruction_Throws(?hctx,?value,?ctx,?insn),
   Value_Type(?value,?valueType),
   Instruction_Method(?insn,?method),
   ExceptionHandler_SameInsn_Repr(?insn,?repr),
   ExceptionHandler_SameBlock_Repr(?repr,?block),
   !ExceptionHandler_TypeIsCaught(?valueType,?block).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1652:1-1658:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1652:1-1658:54];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   Instruction_Method(?insn,?method),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   !ExceptionHandler_TypeIsCaught(?valueType,?block).;)",profile);
if (!rel_365_delta_Instruction_Throws->empty()&&!rel_324_ExceptionHandler_SameBlock_Repr->empty()&&!rel_322_ExceptionHandler_SameInsn_Repr->empty()&&!rel_85_Instruction_Method->empty()&&!rel_300_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_365_delta_Instruction_Throws_op_ctxt,rel_365_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_369_new_ThrowPointsTo_op_ctxt,rel_369_new_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_324_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_322_ExceptionHandler_SameInsn_Repr->createContext());
CREATE_OP_CONTEXT(rel_325_ExceptionHandler_TypeIsCaught_op_ctxt,rel_325_ExceptionHandler_TypeIsCaught->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_367_ThrowPointsTo_op_ctxt,rel_367_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_367_ThrowPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env2[1]}),READ_OP_CONTEXT(rel_367_ThrowPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_322_ExceptionHandler_SameInsn_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_322_ExceptionHandler_SameInsn_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[1],0});
auto range = rel_324_ExceptionHandler_SameBlock_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_324_ExceptionHandler_SameBlock_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_325_ExceptionHandler_TypeIsCaught->contains(Tuple<RamDomain,2>({env1[1],env4[1]}),READ_OP_CONTEXT(rel_325_ExceptionHandler_TypeIsCaught_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env2[1])});
if (!(rel_369_new_ThrowPointsTo->insert(tuple,READ_OP_CONTEXT(rel_369_new_ThrowPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1652:1-1658:54];@new_ThrowPointsTo(?hctx,?value,?ctx,?method) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Value_Type(?value,?valueType),    Instruction_Method(?insn,?method),    ExceptionHandler_SameInsn_Repr(?insn,?repr),    ExceptionHandler_SameBlock_Repr(?repr,?block),    !ExceptionHandler_TypeIsCaught(?valueType,?block),    !ThrowPointsTo(?hctx,?value,?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1652:1-1658:54];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   Instruction_Method(?insn,?method),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   !ExceptionHandler_TypeIsCaught(?valueType,?block).;)" <<  rel_369_new_ThrowPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1300:1-0:0];)" <<  rel_369_new_ThrowPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1308:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(RunningThread([hctxValue],?value) :- 
   _ThisVar("<java.lang.Thread: void start0()>",?startThis),
   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),
   Value_Type(?value,?valuetype),
   MethodLookup("run","void()",?valuetype,?run),
   _ThisVar(?run,?runThis).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59])_");
{
	RamLogger logger(R"(@t-recursive-rule;RunningThread;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];RunningThread([hctxValue],?value) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_153_MethodLookup->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_new_RunningThread_op_ctxt,rel_372_new_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_370_RunningThread_op_ctxt,rel_370_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_370_RunningThread->contains(Tuple<RamDomain,2>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1]}),READ_OP_CONTEXT(rel_370_RunningThread_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1])});
if (!(rel_372_new_RunningThread->insert(tuple,READ_OP_CONTEXT(rel_372_new_RunningThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];@new_RunningThread([hctxValue],?value) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !RunningThread([hctxValue],?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;RunningThread;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];RunningThread([hctxValue],?value) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_372_new_RunningThread->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1308:1-0:0];)" <<  rel_372_new_RunningThread->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1309:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableCurrentThreadInvocation(?callerCtx,?local) :- 
   StaticMethodInvocation(?invocation,"<java.lang.Thread: java.lang.Thread currentThread()>",?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?local).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2179:1-2183:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableCurrentThreadInvocation;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2179:1-2183:43];ReachableCurrentThreadInvocation(?callerCtx,?local) :- \n   StaticMethodInvocation(?invocation,\"<java.lang.Thread: java.lang.Thread currentThread()>\",?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?local).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_92_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_375_new_ReachableCurrentThreadInvocation_op_ctxt,rel_375_new_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_373_ReachableCurrentThreadInvocation_op_ctxt,rel_373_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
const Tuple<RamDomain,3> key({0,146,0});
auto range = rel_92_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_373_ReachableCurrentThreadInvocation->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_373_ReachableCurrentThreadInvocation_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_375_new_ReachableCurrentThreadInvocation->insert(tuple,READ_OP_CONTEXT(rel_375_new_ReachableCurrentThreadInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2179:1-2183:43];@new_ReachableCurrentThreadInvocation(?callerCtx,?local) :-     StaticMethodInvocation(?invocation,'<java.lang.Thread: java.lang.Thread currentThread()>',?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?local),    !ReachableCurrentThreadInvocation(?callerCtx,?local).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableCurrentThreadInvocation;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2179:1-2183:43];ReachableCurrentThreadInvocation(?callerCtx,?local) :- \n   StaticMethodInvocation(?invocation,\"<java.lang.Thread: java.lang.Thread currentThread()>\",?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?local).;)" <<  rel_375_new_ReachableCurrentThreadInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1309:1-0:0];)" <<  rel_375_new_ReachableCurrentThreadInvocation->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1322:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isContext([ctxValue2,?heapValue]) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal),
   !HeapAllocation_Merge(?heapValue,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_209_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_isContext([ctxValue2,?heapValue]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !isContext([ctxValue2,?heapValue]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([ctxValue2,?heapValue]) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   HeapAllocation_Merge(?heapValue,?heapValue),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_209_HeapAllocation_Merge->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_209_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_isContext([ctxValue2,?heapValue]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !isContext([ctxValue2,?heapValue]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   _ThisVar("<java.lang.Thread: void start0()>",?startThis),
   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),
   Value_Type(?value,?valuetype),
   MethodLookup("run","void()",?valuetype,?run),
   _ThisVar(?run,?runThis).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_153_MethodLookup->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];@new_isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_458_delta_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_458_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_458_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_isContext([hctxValue,?value]) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_457_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_457_OptVirtualMethodInvocationBase_op_ctxt,rel_457_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_isContext([hctxValue,?value]) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext(?callerCtx) :- 
   ReachableContext(?callerCtx,?inmethod),
   StaticMethodInvocation(?invocation,?tomethod,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];isContext(?callerCtx) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_92_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_92_StaticMethodInvocation->equalRange<2>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];@new_isContext(?callerCtx) :-     @delta_ReachableContext(?callerCtx,?inmethod),    StaticMethodInvocation(?invocation,?tomethod,?inmethod),    !isContext(?callerCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];isContext(?callerCtx) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_461_delta_OptSpecialMethodInvocationBase->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_461_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_461_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_461_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_isContext([hctxValue,?value]) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_378_new_isContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isContext([hctxValue,?value]) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_460_OptSpecialMethodInvocationBase->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_460_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_378_new_isContext_op_ctxt,rel_378_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_460_OptSpecialMethodInvocationBase_op_ctxt,rel_460_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_376_isContext_op_ctxt,rel_376_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_376_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))}),READ_OP_CONTEXT(rel_376_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})))});
if (!(rel_378_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_378_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_isContext([hctxValue,?value]) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_378_new_isContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1322:1-0:0];)" <<  rel_378_new_isContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1323:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(isHContext([ctxValue2]) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal),
   !HeapAllocation_Merge(?heapValue,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_381_new_isHContext_op_ctxt,rel_381_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_379_isHContext_op_ctxt,rel_379_isHContext->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_209_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_379_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env3[1]}))}),READ_OP_CONTEXT(rel_379_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env3[1]})))});
if (!(rel_381_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_381_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_isHContext([ctxValue2]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_381_new_isHContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHContext([ctxValue2]) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   HeapAllocation_Merge(?heapValue,?heapValue),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_209_HeapAllocation_Merge->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_381_new_isHContext_op_ctxt,rel_381_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_379_isHContext_op_ctxt,rel_379_isHContext->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_209_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_379_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env4[1]}))}),READ_OP_CONTEXT(rel_379_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[1]})))});
if (!(rel_381_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_381_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_isHContext([ctxValue2]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_381_new_isHContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(isHContext([ctxValue2]) :- 
   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   ObjectShouldNotBeRefined(?heapValue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40])_");
{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];isHContext([ctxValue2]) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_213_AssignNormalHeapAllocation->empty()&&!rel_299_ObjectShouldNotBeRefined->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_AssignNormalHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_381_new_isHContext_op_ctxt,rel_381_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt,rel_299_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_379_isHContext_op_ctxt,rel_379_isHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env2 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_379_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env2[1]}))}),READ_OP_CONTEXT(rel_379_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_299_ObjectShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[1]})))});
if (!(rel_381_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_381_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];@new_isHContext([ctxValue2]) :-     AssignNormalHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    ObjectShouldNotBeRefined(?heapValue),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];isHContext([ctxValue2]) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)" <<  rel_381_new_isHContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1323:1-0:0];)" <<  rel_381_new_isHContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1330:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ImmutableContextFromHContext(?hctx,?ctx) :- 
   isImmutableContext(?ctx),
   isHContext(?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1408:1-1410:21])_");
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableContextFromHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1408:1-1410:21];ImmutableContextFromHContext(?hctx,?ctx) :- \n   isImmutableContext(?ctx),\n   isHContext(?hctx).;)",profile);
if (!rel_380_delta_isHContext->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_326_isImmutableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_delta_isHContext_op_ctxt,rel_380_delta_isHContext->createContext());
CREATE_OP_CONTEXT(rel_384_new_ImmutableContextFromHContext_op_ctxt,rel_384_new_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt,rel_382_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_380_delta_isHContext) {
if( !rel_382_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_384_new_ImmutableContextFromHContext->insert(tuple,READ_OP_CONTEXT(rel_384_new_ImmutableContextFromHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1408:1-1410:21];@new_ImmutableContextFromHContext(?hctx,?ctx) :-     isImmutableContext(?ctx),    @delta_isHContext(?hctx),    !ImmutableContextFromHContext(?hctx,?ctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ImmutableContextFromHContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1408:1-1410:21];ImmutableContextFromHContext(?hctx,?ctx) :- \n   isImmutableContext(?ctx),\n   isHContext(?hctx).;)" <<  rel_384_new_ImmutableContextFromHContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1330:1-0:0];)" <<  rel_384_new_ImmutableContextFromHContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1331:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ImmutableHContextFromContext(?ctx,?hctx) :- 
   isImmutableHContext(?hctx),
   isContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1411:1-1413:19])_");
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableHContextFromContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1411:1-1413:19];ImmutableHContextFromContext(?ctx,?hctx) :- \n   isImmutableHContext(?hctx),\n   isContext(?ctx).;)",profile);
if (!rel_377_delta_isContext->empty()&&!rel_277_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_277_isImmutableHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_377_delta_isContext_op_ctxt,rel_377_delta_isContext->createContext());
CREATE_OP_CONTEXT(rel_387_new_ImmutableHContextFromContext_op_ctxt,rel_387_new_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_277_isImmutableHContext_op_ctxt,rel_277_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_377_delta_isContext) {
if( !rel_385_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_387_new_ImmutableHContextFromContext->insert(tuple,READ_OP_CONTEXT(rel_387_new_ImmutableHContextFromContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1411:1-1413:19];@new_ImmutableHContextFromContext(?ctx,?hctx) :-     isImmutableHContext(?hctx),    @delta_isContext(?ctx),    !ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ImmutableHContextFromContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1411:1-1413:19];ImmutableHContextFromContext(?ctx,?hctx) :- \n   isImmutableHContext(?hctx),\n   isContext(?ctx).;)" <<  rel_387_new_ImmutableHContextFromContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1331:1-0:0];)" <<  rel_387_new_ImmutableHContextFromContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1332:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ImmutableContextFromContext(?ctx1,?ctx2) :- 
   isImmutableContext(?ctx2),
   isContext(?ctx1).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1414:1-1416:20])_");
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableContextFromContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1414:1-1416:20];ImmutableContextFromContext(?ctx1,?ctx2) :- \n   isImmutableContext(?ctx2),\n   isContext(?ctx1).;)",profile);
if (!rel_377_delta_isContext->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_326_isImmutableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_377_delta_isContext_op_ctxt,rel_377_delta_isContext->createContext());
CREATE_OP_CONTEXT(rel_390_new_ImmutableContextFromContext_op_ctxt,rel_390_new_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_377_delta_isContext) {
if( !rel_388_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_390_new_ImmutableContextFromContext->insert(tuple,READ_OP_CONTEXT(rel_390_new_ImmutableContextFromContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1414:1-1416:20];@new_ImmutableContextFromContext(?ctx1,?ctx2) :-     isImmutableContext(?ctx2),    @delta_isContext(?ctx1),    !ImmutableContextFromContext(?ctx1,?ctx2).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ImmutableContextFromContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1414:1-1416:20];ImmutableContextFromContext(?ctx1,?ctx2) :- \n   isImmutableContext(?ctx2),\n   isContext(?ctx1).;)" <<  rel_390_new_ImmutableContextFromContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1332:1-0:0];)" <<  rel_390_new_ImmutableContextFromContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1337:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?this) :- 
   ForcedReachableAndroidContext(?ctx,?meth),
   ImmutableHContextFromContext(?ctx,?hctx),
   Method_DeclaringType(?meth,?class),
   ReifiedAndroidObjectValue(?value,?class),
   _ThisVar(?meth,?this).

   .plan 1:(2,1,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)",profile);
if (!rel_335_delta_ForcedReachableAndroidContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_292_ReifiedAndroidObjectValue->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_335_delta_ForcedReachableAndroidContext_op_ctxt,rel_335_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env1[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_292_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[1],env3[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    ImmutableHContextFromContext(?ctx,?hctx),    Method_DeclaringType(?meth,?class),    ReifiedAndroidObjectValue(?value,?class),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 1:(2,1,3,4,5);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?this) :- 
   ForcedReachableAndroidContext(?ctx,?meth),
   ImmutableHContextFromContext(?ctx,?hctx),
   Method_DeclaringType(?meth,?class),
   ReifiedAndroidObjectValue(?value,?class),
   _ThisVar(?meth,?this).

   .plan 1:(2,1,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_334_ForcedReachableAndroidContext->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_292_ReifiedAndroidObjectValue->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_334_ForcedReachableAndroidContext->equalRange<0>(key,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_292_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    ForcedReachableAndroidContext(?ctx,?meth),    Method_DeclaringType(?meth,?class),    ReifiedAndroidObjectValue(?value,?class),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1547:1-1552:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?this) :- 
   ForcedReachableAndroidContext(?ctx,?meth),
   Method_DeclaringType(?meth,?ofType),
   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),
   _ThisVar(?meth,?this).

   .plan 1:(3,2,1,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_335_delta_ForcedReachableAndroidContext->empty()&&!rel_340_ApplicationObjectFlowingToLibrary->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_341_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_341_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_335_delta_ForcedReachableAndroidContext_op_ctxt,rel_335_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_340_ApplicationObjectFlowingToLibrary_op_ctxt,rel_340_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_74_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,0,env1[1]});
auto range = rel_340_ApplicationObjectFlowingToLibrary->equalRange<2>(key,READ_OP_CONTEXT(rel_340_ApplicationObjectFlowingToLibrary_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_341_delta_ApplicationObjectFlowingToLibrary->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_341_delta_ApplicationObjectFlowingToLibrary_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    Method_DeclaringType(?meth,?ofType),    ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this),    !@delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType).     .plan 1:(3,2,1,4);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?this) :- 
   ForcedReachableAndroidContext(?ctx,?meth),
   Method_DeclaringType(?meth,?ofType),
   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),
   _ThisVar(?meth,?this).

   .plan 1:(3,2,1,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_341_delta_ApplicationObjectFlowingToLibrary->empty()&&!rel_334_ForcedReachableAndroidContext->empty()&&!rel_74_Method_DeclaringType->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_341_delta_ApplicationObjectFlowingToLibrary->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_341_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_341_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt,rel_334_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt,rel_74_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_74_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_74_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_334_ForcedReachableAndroidContext->equalRange<1>(key,READ_OP_CONTEXT(rel_334_ForcedReachableAndroidContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    Method_DeclaringType(?meth,?ofType),    ForcedReachableAndroidContext(?ctx,?meth),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1554:1-1558:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?formal) :- 
   FormalOfForcedReachableContext(?ctx,?formal,?formalType),
   ImmutableHContextFromContext(?ctx,?hctx),
   SubtypeOf(?type,?formalType),
   ReifiedAndroidObjectValue(?value,?type).

   .plan 1:(2,1,3,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)",profile);
if (!rel_356_delta_FormalOfForcedReachableContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_292_ReifiedAndroidObjectValue->empty()&&!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_356_delta_FormalOfForcedReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_356_delta_FormalOfForcedReachableContext_op_ctxt,rel_356_delta_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env1[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_292_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[1],env3[0],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_FormalOfForcedReachableContext(?ctx,?formal,?formalType),    ImmutableHContextFromContext(?ctx,?hctx),    SubtypeOf(?type,?formalType),    ReifiedAndroidObjectValue(?value,?type),    !VarPointsTo(?hctx,?value,?ctx,?formal),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 1:(2,1,3,4);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?formal) :- 
   FormalOfForcedReachableContext(?ctx,?formal,?formalType),
   ImmutableHContextFromContext(?ctx,?hctx),
   SubtypeOf(?type,?formalType),
   ReifiedAndroidObjectValue(?value,?type).

   .plan 1:(2,1,3,4)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_355_FormalOfForcedReachableContext->empty()&&!rel_292_ReifiedAndroidObjectValue->empty()&&!rel_183_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt,rel_355_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt,rel_292_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_355_FormalOfForcedReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[2]});
auto range = rel_183_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_292_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_292_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    FormalOfForcedReachableContext(?ctx,?formal,?formalType),    SubtypeOf(?type,?formalType),    ReifiedAndroidObjectValue(?value,?type),    !VarPointsTo(?hctx,?value,?ctx,?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1564:1-1568:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?formal) :- 
   FormalOfForcedReachableContext(?ctx,?formal,?formalType),
   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)",profile);
if (!rel_356_delta_FormalOfForcedReachableContext->empty()&&!rel_358_ApplicationObjectFlowingToLibraryStaticType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_356_delta_FormalOfForcedReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_359_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_356_delta_FormalOfForcedReachableContext_op_ctxt,rel_356_delta_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_358_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_358_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[2]});
auto range = rel_358_ApplicationObjectFlowingToLibraryStaticType->equalRange<2>(key,READ_OP_CONTEXT(rel_358_ApplicationObjectFlowingToLibraryStaticType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->contains(Tuple<RamDomain,3>({env1[0],env1[1],env0[2]}),READ_OP_CONTEXT(rel_359_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_FormalOfForcedReachableContext(?ctx,?formal,?formalType),    ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType),    !VarPointsTo(?hctx,?value,?ctx,?formal),    !@delta_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).     .plan 1:(2,1);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?formal) :- 
   FormalOfForcedReachableContext(?ctx,?formal,?formalType),
   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)",profile);
if (!rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->empty()&&!rel_355_FormalOfForcedReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_359_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt,rel_355_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[2]});
auto range = rel_355_FormalOfForcedReachableContext->equalRange<2>(key,READ_OP_CONTEXT(rel_355_FormalOfForcedReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType),    FormalOfForcedReachableContext(?ctx,?formal,?formalType),    !VarPointsTo(?hctx,?value,?ctx,?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1573:1-1575:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?viewValue,?ctx,?ret) :- 
   VarsAtInvocationRetrievingView(?ret,?var),
   VarPointsTo(?hctx,?value,?ctx,?var),
   Value_Num(?value,?numId),
   ViewObjectValueFromId(?viewValue,?numId).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1593:1-1597:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1593:1-1597:45];VarPointsTo(?hctx,?viewValue,?ctx,?ret) :- \n   VarsAtInvocationRetrievingView(?ret,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var),\n   Value_Num(?value,?numId),\n   ViewObjectValueFromId(?viewValue,?numId).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_301_Value_Num->empty()&&!rel_235_VarsAtInvocationRetrievingView->empty()&&!rel_293_ViewObjectValueFromId->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_235_VarsAtInvocationRetrievingView->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_235_VarsAtInvocationRetrievingView_op_ctxt,rel_235_VarsAtInvocationRetrievingView->createContext());
CREATE_OP_CONTEXT(rel_293_ViewObjectValueFromId_op_ctxt,rel_293_ViewObjectValueFromId->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_301_Value_Num->equalRange<0>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_293_ViewObjectValueFromId->equalRange<1>(key,READ_OP_CONTEXT(rel_293_ViewObjectValueFromId_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env3[0],env1[2],env0[0]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env3[0]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1593:1-1597:45];@new_VarPointsTo(?hctx,?viewValue,?ctx,?ret) :-     VarsAtInvocationRetrievingView(?ret,?var),    @delta_VarPointsTo(?hctx,?value,?ctx,?var),    Value_Num(?value,?numId),    ViewObjectValueFromId(?viewValue,?numId),    !VarPointsTo(?hctx,?viewValue,?ctx,?ret).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1593:1-1597:45];VarPointsTo(?hctx,?viewValue,?ctx,?ret) :- \n   VarsAtInvocationRetrievingView(?ret,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var),\n   Value_Num(?value,?numId),\n   ViewObjectValueFromId(?viewValue,?numId).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?param) :- 
   Instruction_Throws(?hctx,?value,?ctx,?insn),
   Value_Type(?value,?valueType),
   ExceptionHandler_InRange(?handler,?insn),
   ExceptionHandler_Type(?handler,?handlerType),
   SubtypeOf(?valueType,?handlerType),
   ConcreteClass(?valueType),
   ExceptionHandler_FormalParam(?handler,?param),
   !ExceptionHandler_Impossible(?valueType,?handler,?insn).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1659:1-1667:61])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1659:1-1667:61];VarPointsTo(?hctx,?value,?ctx,?param) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?valueType,?handlerType),\n   ConcreteClass(?valueType),\n   ExceptionHandler_FormalParam(?handler,?param),\n   !ExceptionHandler_Impossible(?valueType,?handler,?insn).;)",profile);
if (!rel_365_delta_Instruction_Throws->empty()&&!rel_276_ConcreteClass->empty()&&!rel_308_ExceptionHandler_FormalParam->empty()&&!rel_312_ExceptionHandler_InRange->empty()&&!rel_313_ExceptionHandler_Type->empty()&&!rel_183_SubtypeOf->empty()&&!rel_300_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_365_delta_Instruction_Throws_op_ctxt,rel_365_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt,rel_276_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_308_ExceptionHandler_FormalParam_op_ctxt,rel_308_ExceptionHandler_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_319_ExceptionHandler_Impossible_op_ctxt,rel_319_ExceptionHandler_Impossible->createContext());
CREATE_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt,rel_312_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt,rel_313_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt,rel_183_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_312_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_312_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_319_ExceptionHandler_Impossible->contains(Tuple<RamDomain,3>({env1[1],env2[0],env0[3]}),READ_OP_CONTEXT(rel_319_ExceptionHandler_Impossible_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_313_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_313_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[1],env3[1]});
auto range = rel_183_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_183_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_276_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_276_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_308_ExceptionHandler_FormalParam->equalRange<0>(key,READ_OP_CONTEXT(rel_308_ExceptionHandler_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env6[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1659:1-1667:61];@new_VarPointsTo(?hctx,?value,?ctx,?param) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Value_Type(?value,?valueType),    ExceptionHandler_InRange(?handler,?insn),    ExceptionHandler_Type(?handler,?handlerType),    SubtypeOf(?valueType,?handlerType),    ConcreteClass(?valueType),    ExceptionHandler_FormalParam(?handler,?param),    !ExceptionHandler_Impossible(?valueType,?handler,?insn),    !VarPointsTo(?hctx,?value,?ctx,?param).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1659:1-1667:61];VarPointsTo(?hctx,?value,?ctx,?param) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?valueType,?handlerType),\n   ConcreteClass(?valueType),\n   ExceptionHandler_FormalParam(?handler,?param),\n   !ExceptionHandler_Impossible(?valueType,?handler,?insn).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal),
   !HeapAllocation_Merge(?heapValue,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_209_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env3[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})),env5[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env3[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))),(RamDomain)(env5[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   HeapAllocation_Merge(?heapValue,?heapValue),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_209_HeapAllocation_Merge->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_209_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})),env6[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))),(RamDomain)(env6[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?argArray,?ctx,?args) :- 
   ImmutableHContextFromContext(?ctx,?hctx),
   MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx,?mainMethod),
   _FormalParam(0,?mainMethod,?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_305_MainMethodArgArray->empty()&&!rel_306_MainMethodArgArrayContent->empty()&&!rel_231_MainMethodDeclaration->empty()&&!rel_409_ReachableContext->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_305_MainMethodArgArray_op_ctxt,rel_305_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_306_MainMethodArgArrayContent_op_ctxt,rel_306_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_231_MainMethodDeclaration) {
if( !rel_410_delta_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_409_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_305_MainMethodArgArray) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
for(const auto& env5 : *rel_306_MainMethodArgArrayContent) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];@new_VarPointsTo(?hctx,?argArray,?ctx,?args) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !VarPointsTo(?hctx,?argArray,?ctx,?args),    !@delta_ReachableContext(?ctx,?mainMethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?argArray,?ctx,?args) :- 
   ImmutableHContextFromContext(?ctx,?hctx),
   MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx,?mainMethod),
   _FormalParam(0,?mainMethod,?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_305_MainMethodArgArray->empty()&&!rel_306_MainMethodArgArrayContent->empty()&&!rel_231_MainMethodDeclaration->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_385_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_305_MainMethodArgArray_op_ctxt,rel_305_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_306_MainMethodArgArrayContent_op_ctxt,rel_306_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_231_MainMethodDeclaration) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_410_delta_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_305_MainMethodArgArray) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
for(const auto& env5 : *rel_306_MainMethodArgArrayContent) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];@new_VarPointsTo(?hctx,?argArray,?ctx,?args) :-     ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    @delta_ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !VarPointsTo(?hctx,?argArray,?ctx,?args).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :- 
   _ThisVar("<java.lang.Thread: void start0()>",?startThis),
   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),
   Value_Type(?value,?valuetype),
   MethodLookup("run","void()",?valuetype,?run),
   _ThisVar(?run,?runThis).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_153_MethodLookup->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?callerCtx,?local) :- 
   ReachableCurrentThreadInvocation(?callerCtx,?local),
   RunningThread(?hctx,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)",profile);
if (!rel_374_delta_ReachableCurrentThreadInvocation->empty()&&!rel_370_RunningThread->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_374_delta_ReachableCurrentThreadInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_374_delta_ReachableCurrentThreadInvocation_op_ctxt,rel_374_delta_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_371_delta_RunningThread_op_ctxt,rel_371_delta_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_370_RunningThread_op_ctxt,rel_370_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_370_RunningThread) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_371_delta_RunningThread->contains(Tuple<RamDomain,2>({env1[0],env1[1]}),READ_OP_CONTEXT(rel_371_delta_RunningThread_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];@new_VarPointsTo(?hctx,?value,?callerCtx,?local) :-     @delta_ReachableCurrentThreadInvocation(?callerCtx,?local),    RunningThread(?hctx,?value),    !VarPointsTo(?hctx,?value,?callerCtx,?local),    !@delta_RunningThread(?hctx,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?callerCtx,?local) :- 
   ReachableCurrentThreadInvocation(?callerCtx,?local),
   RunningThread(?hctx,?value).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)",profile);
if (!rel_371_delta_RunningThread->empty()&&!rel_373_ReachableCurrentThreadInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_373_ReachableCurrentThreadInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_371_delta_RunningThread_op_ctxt,rel_371_delta_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_373_ReachableCurrentThreadInvocation_op_ctxt,rel_373_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_371_delta_RunningThread) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];@new_VarPointsTo(?hctx,?value,?callerCtx,?local) :-     ReachableCurrentThreadInvocation(?callerCtx,?local),    @delta_RunningThread(?hctx,?value),    !VarPointsTo(?hctx,?value,?callerCtx,?local).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2175:1-2178:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :- 
   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   ObjectShouldNotBeRefined(?heapValue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_213_AssignNormalHeapAllocation->empty()&&!rel_299_ObjectShouldNotBeRefined->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_AssignNormalHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt,rel_299_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env2 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env2[1]})),env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_299_ObjectShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_299_ObjectShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env2[1]}))),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :-     AssignNormalHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    ObjectShouldNotBeRefined(?heapValue),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2298:1-2303:40];VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?heapValue,?ctx,?var) :- 
   Reachable(?inmethod),
   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).

   .plan 2:(4,3,1,2)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_211_AssignContextInsensitiveHeapAllocation->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_211_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_211_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_410_delta_ReachableContext->contains(Tuple<RamDomain,2>({env2[0],env0[0]}),READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env1[0],env2[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     @delta_Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?heapValue,?ctx,?var),    !@delta_ReachableContext(?ctx,?inmethod),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 2:(4,3,1,2);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?heapValue,?ctx,?var) :- 
   Reachable(?inmethod),
   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).

   .plan 2:(4,3,1,2)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_211_AssignContextInsensitiveHeapAllocation->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_406_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_406_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_211_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_211_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env1[0],env2[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?heapValue,?ctx,?var),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 2:(4,3,1,2);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?heapValue,?ctx,?var) :- 
   Reachable(?inmethod),
   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).

   .plan 2:(4,3,1,2)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_211_AssignContextInsensitiveHeapAllocation->empty()&&!rel_406_Reachable->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_211_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_409_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_406_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_406_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,0,env1[1]});
auto range = rel_211_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_211_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    ReachableContext(?ctx,?inmethod),    Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    !VarPointsTo(?hctx,?heapValue,?ctx,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2309:1-2313:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?null,?toCtx,?to) :- 
   Reachable(?inmethod),
   AssignNull(?to,?inmethod),
   HeapAllocation_Null(?null),
   ReachableContext(?toCtx,?inmethod),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 2:(5,4,1,2,3)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_94_AssignNull->empty()&&!rel_104_HeapAllocation_Null->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_94_AssignNull_op_ctxt,rel_94_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_94_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_94_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_104_HeapAllocation_Null) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_410_delta_ReachableContext->contains(Tuple<RamDomain,2>({env3[0],env0[0]}),READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env2[0],env3[0],env1[0]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[0]),(RamDomain)(env3[0]),(RamDomain)(env1[0])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     @delta_Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    ReachableContext(?toCtx,?inmethod),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?null,?toCtx,?to),    !@delta_ReachableContext(?toCtx,?inmethod),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 2:(5,4,1,2,3);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?null,?toCtx,?to) :- 
   Reachable(?inmethod),
   AssignNull(?to,?inmethod),
   HeapAllocation_Null(?null),
   ReachableContext(?toCtx,?inmethod),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 2:(5,4,1,2,3)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_94_AssignNull->empty()&&!rel_104_HeapAllocation_Null->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_406_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_406_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_94_AssignNull_op_ctxt,rel_94_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_94_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_94_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_104_HeapAllocation_Null) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env2[0],env3[0],env1[0]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[0]),(RamDomain)(env3[0]),(RamDomain)(env1[0])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    @delta_ReachableContext(?toCtx,?inmethod),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?null,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 2:(5,4,1,2,3);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?null,?toCtx,?to) :- 
   Reachable(?inmethod),
   AssignNull(?to,?inmethod),
   HeapAllocation_Null(?null),
   ReachableContext(?toCtx,?inmethod),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 2:(5,4,1,2,3)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_94_AssignNull->empty()&&!rel_104_HeapAllocation_Null->empty()&&!rel_406_Reachable->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_94_AssignNull_op_ctxt,rel_94_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_409_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_406_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_406_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_94_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_94_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_104_HeapAllocation_Null) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[0]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[0])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    !VarPointsTo(?hctx,?null,?toCtx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2315:1-2320:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   ReachableContext(?toCtx,?inmethod),
   Instruction_Method(?insn,?inmethod),
   AssignNumConstant_Id(?insn,?const),
   AssignInstruction_To(?insn,?to),
   Value_Num(?value,?const),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 1:(6,1,2,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_19_AssignNumConstant_Id->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_19_AssignNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_301_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env4[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 1:(6,1,2,3,4,5);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   ReachableContext(?toCtx,?inmethod),
   Instruction_Method(?insn,?inmethod),
   AssignNumConstant_Id(?insn,?const),
   AssignInstruction_To(?insn,?to),
   Value_Num(?value,?const),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 1:(6,1,2,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_19_AssignNumConstant_Id->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt,rel_19_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_409_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_19_AssignNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_19_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_301_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   ReachableContext(?toCtx,?inmethod),
   Instruction_Method(?insn,?inmethod),
   AssignCastNumConstant_Id(?insn,?const),
   AssignInstruction_To(?insn,?to),
   Value_Num(?value,?const),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 1:(6,1,2,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_9_AssignCastNumConstant_Id->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt,rel_9_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_9_AssignCastNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_301_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env4[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignCastNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 1:(6,1,2,3,4,5);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   ReachableContext(?toCtx,?inmethod),
   Instruction_Method(?insn,?inmethod),
   AssignCastNumConstant_Id(?insn,?const),
   AssignInstruction_To(?insn,?to),
   Value_Num(?value,?const),
   ImmutableHContextFromContext(?toCtx,?hctx).

   .plan 1:(6,1,2,3,4,5)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_9_AssignCastNumConstant_Id->empty()&&!rel_22_AssignInstruction_To->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_301_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt,rel_9_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt,rel_22_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_301_Value_Num_op_ctxt,rel_301_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_409_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_9_AssignCastNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_9_AssignCastNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_22_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_22_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_301_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_301_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignCastNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2322:1-2329:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   VarPointsTo(?hctx,?value,?ctx,?from),
   AssignLocal(?from,?to,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2331:1-2333:30])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2331:1-2333:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   VarPointsTo(?hctx,?value,?ctx,?from),\n   AssignLocal(?from,?to,_).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_240_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_240_AssignLocal_op_ctxt,rel_240_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[3],0,0});
auto range = rel_240_AssignLocal->equalRange<0>(key,READ_OP_CONTEXT(rel_240_AssignLocal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2331:1-2333:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_VarPointsTo(?hctx,?value,?ctx,?from),    AssignLocal(?from,?to, _unnamed_var1),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2331:1-2333:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   VarPointsTo(?hctx,?value,?ctx,?from),\n   AssignLocal(?from,?to,_).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   OptAssignCast(?type,?to,?from),
   VarPointsTo(?hctx,?value,?ctx,?from),
   Value_Type(?value,?valuetype),
   SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_437_delta_OptAssignCast->empty()&&!rel_189_SupertypeOf->empty()&&!rel_300_Value_Type->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_437_delta_OptAssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_437_delta_OptAssignCast_op_ctxt,rel_437_delta_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[2]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[2]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],env2[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_OptAssignCast(?type,?to,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   OptAssignCast(?type,?to,?from),
   VarPointsTo(?hctx,?value,?ctx,?from),
   Value_Type(?value,?valuetype),
   SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_436_OptAssignCast->empty()&&!rel_189_SupertypeOf->empty()&&!rel_300_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_436_OptAssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_436_OptAssignCast_op_ctxt,rel_436_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[2]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],env2[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     OptAssignCast(?type,?to,?from),    @delta_VarPointsTo(?hctx,?value,?ctx,?from),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2338:1-2342:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),
   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)",profile);
if (!rel_419_delta_LoadHeapInstanceField->empty()&&!rel_394_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_419_delta_LoadHeapInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_395_delta_InstanceFieldPointsTo_op_ctxt,rel_395_delta_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_419_delta_LoadHeapInstanceField_op_ctxt,rel_419_delta_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,env0[2],env0[3],env0[4]});
auto range = rel_394_InstanceFieldPointsTo->equalRange<2,3,4>(key,READ_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_395_delta_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env1[0],env1[1],env0[2],env0[3],env0[4]}),READ_OP_CONTEXT(rel_395_delta_InstanceFieldPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),    InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).     .plan 1:(2,1);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),
   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)",profile);
if (!rel_395_delta_InstanceFieldPointsTo->empty()&&!rel_418_LoadHeapInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_delta_InstanceFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_395_delta_InstanceFieldPointsTo_op_ctxt,rel_395_delta_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_418_LoadHeapInstanceField_op_ctxt,rel_418_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,env0[2],env0[3],env0[4]});
auto range = rel_418_LoadHeapInstanceField->equalRange<2,3,4>(key,READ_OP_CONTEXT(rel_418_LoadHeapInstanceField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2343:1-2345:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   StaticFieldPointsTo(?hctx,?value,?sig),
   LoadStaticField(?sig,?to,?inmethod),
   ReachableContext(?ctx,?inmethod).

   .plan 1:(3,2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)",profile);
if (!rel_398_delta_StaticFieldPointsTo->empty()&&!rel_228_LoadStaticField->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_398_delta_StaticFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_398_delta_StaticFieldPointsTo_op_ctxt,rel_398_delta_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt,rel_228_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[2],0,0});
auto range = rel_228_LoadStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[2]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_410_delta_ReachableContext->contains(Tuple<RamDomain,2>({env2[0],env1[2]}),READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_StaticFieldPointsTo(?hctx,?value,?sig),    LoadStaticField(?sig,?to,?inmethod),    ReachableContext(?ctx,?inmethod),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_ReachableContext(?ctx,?inmethod).     .plan 1:(3,2,1);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   StaticFieldPointsTo(?hctx,?value,?sig),
   LoadStaticField(?sig,?to,?inmethod),
   ReachableContext(?ctx,?inmethod).

   .plan 1:(3,2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_228_LoadStaticField->empty()&&!rel_397_StaticFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt,rel_228_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_228_LoadStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_228_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,0,env1[0]});
auto range = rel_397_StaticFieldPointsTo->equalRange<2>(key,READ_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_ReachableContext(?ctx,?inmethod),    LoadStaticField(?sig,?to,?inmethod),    StaticFieldPointsTo(?hctx,?value,?sig),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2359:1-2363:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   Temp2(?ctx,?to,?basehctx,?basevalue),
   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)",profile);
if (!rel_449_delta_Temp2->empty()&&!rel_400_ArrayIndexPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_449_delta_Temp2->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt,rel_401_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_449_delta_Temp2_op_ctxt,rel_449_delta_Temp2->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_400_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_401_delta_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_Temp2(?ctx,?to,?basehctx,?basevalue),    ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?to) :- 
   Temp2(?ctx,?to,?basehctx,?basevalue),
   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)",profile);
if (!rel_401_delta_ArrayIndexPointsTo->empty()&&!rel_448_Temp2->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_448_Temp2->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt,rel_401_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_448_Temp2_op_ctxt,rel_448_Temp2->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_401_delta_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     Temp2(?ctx,?to,?basehctx,?basevalue),    @delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2392:1-2394:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),
   VarPointsTo(?hctx,?value,?fromCtx,?from).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)",profile);
if (!rel_413_delta_OptInterproceduralAssign->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_413_delta_OptInterproceduralAssign->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_413_delta_OptInterproceduralAssign_op_ctxt,rel_413_delta_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),    VarPointsTo(?hctx,?value,?fromCtx,?from),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_VarPointsTo(?hctx,?value,?fromCtx,?from).     .plan 1:(2,1);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?toCtx,?to) :- 
   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),
   VarPointsTo(?hctx,?value,?fromCtx,?from).

   .plan 1:(2,1)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_412_OptInterproceduralAssign->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt,rel_412_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_412_OptInterproceduralAssign->equalRange<2,3>(key,READ_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_VarPointsTo(?hctx,?value,?fromCtx,?from),    OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2440:1-2442:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_458_delta_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_458_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_458_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_457_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_457_OptVirtualMethodInvocationBase_op_ctxt,rel_457_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_461_delta_OptSpecialMethodInvocationBase->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_461_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_461_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_461_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[0]}))),(RamDomain)(env3[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_460_OptSpecialMethodInvocationBase->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_460_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_460_OptSpecialMethodInvocationBase_op_ctxt,rel_460_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[0]}))),(RamDomain)(env3[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- 
   _Dacapo(?classNameHeap,?dacapoMethod),
   MethodInvocation_Method(?invo,?dacapoMethod),
   VirtualMethodInvocation_Base(?invo,?base),
   Var_DeclaringMethod(?base,?method),
   ReachableContext(?ctx,?method),
   ImmutableHContextFromContext(?ctx,?hctx),
   _ActualParam(0,?invo,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_248_Var_DeclaringMethod->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()&&!rel_232_ActualParam->empty()&&!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_248_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env4[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[0],env4[0],env6[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[0]),(RamDomain)(env4[0]),(RamDomain)(env6[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];@new_VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :-     _Dacapo(?classNameHeap,?dacapoMethod),    MethodInvocation_Method(?invo,?dacapoMethod),    VirtualMethodInvocation_Base(?invo,?base),    Var_DeclaringMethod(?base,?method),    @delta_ReachableContext(?ctx,?method),    ImmutableHContextFromContext(?ctx,?hctx),    _ActualParam(0,?invo,?to),    !VarPointsTo(?hctx,?classNameHeap,?ctx,?to),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- 
   _Dacapo(?classNameHeap,?dacapoMethod),
   MethodInvocation_Method(?invo,?dacapoMethod),
   VirtualMethodInvocation_Base(?invo,?base),
   Var_DeclaringMethod(?base,?method),
   ReachableContext(?ctx,?method),
   ImmutableHContextFromContext(?ctx,?hctx),
   _ActualParam(0,?invo,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_248_Var_DeclaringMethod->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()&&!rel_232_ActualParam->empty()&&!rel_107_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_107_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_107_Dacapo_op_ctxt,rel_107_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_91_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_248_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[0],env4[0],env6[2]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[0]),(RamDomain)(env4[0]),(RamDomain)(env6[2])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];@new_VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :-     _Dacapo(?classNameHeap,?dacapoMethod),    MethodInvocation_Method(?invo,?dacapoMethod),    VirtualMethodInvocation_Base(?invo,?base),    Var_DeclaringMethod(?base,?method),    ReachableContext(?ctx,?method),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    _ActualParam(0,?invo,?to),    !VarPointsTo(?hctx,?classNameHeap,?ctx,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2660:1-2667:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,cat(cat("<class ",?class),">"),?ctx,?return) :- 
   OptForNameInvocation(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   Tamiflex_ReflectionMap(?class,?invocation),
   isHeapAllocation( _tmp_0),
   HeapAllocation_Type( _tmp_0,"java.lang.Class"),
   AssignReturnValue(?invocation,?return),
    _tmp_0 = cat(cat("<class ",?class),">").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_113_HeapAllocation_Type->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_93_OptForNameInvocation->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_93_OptForNameInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt,rel_93_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],1});
auto range = rel_113_HeapAllocation_Type->equalRange<0,1>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[1],(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()),env1[0],env6[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0]),(RamDomain)(env6[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];@new_VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return) :-     OptForNameInvocation(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    Tamiflex_ReflectionMap(?class,?invocation),    isHeapAllocation( _tmp_0),    HeapAllocation_Type( _tmp_0,'java.lang.Class'),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx),     _tmp_0 = cat(cat('<class ',?class),'>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,cat(cat("<class ",?class),">"),?ctx,?return) :- 
   OptForNameInvocation(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   Tamiflex_ReflectionMap(?class,?invocation),
   isHeapAllocation( _tmp_0),
   HeapAllocation_Type( _tmp_0,"java.lang.Class"),
   AssignReturnValue(?invocation,?return),
    _tmp_0 = cat(cat("<class ",?class),">").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_113_HeapAllocation_Type->empty()&&!rel_93_OptForNameInvocation->empty()&&!rel_409_ReachableContext->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_112_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_93_OptForNameInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt,rel_113_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_93_OptForNameInvocation_op_ctxt,rel_93_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt,rel_112_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())});
auto range = rel_112_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_112_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],1});
auto range = rel_113_HeapAllocation_Type->equalRange<0,1>(key,READ_OP_CONTEXT(rel_113_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[1],(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()),env1[0],env6[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0]),(RamDomain)(env6[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];@new_VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return) :-     OptForNameInvocation(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    Tamiflex_ReflectionMap(?class,?invocation),    isHeapAllocation( _tmp_0),    HeapAllocation_Type( _tmp_0,'java.lang.Class'),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return),     _tmp_0 = cat(cat('<class ',?class),'>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2810:1-2818:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_Class_NewInstance(?invocation,?value),
   Instruction_Method(?invocation,?inmethod),
   AssignReturnValue(?invocation,?return),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_253_Tamiflex_Class_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_253_Tamiflex_Class_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_253_Tamiflex_Class_NewInstance_op_ctxt,rel_253_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Class_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_Class_NewInstance(?invocation,?value),
   Instruction_Method(?invocation,?inmethod),
   AssignReturnValue(?invocation,?return),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_253_Tamiflex_Class_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_253_Tamiflex_Class_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_253_Tamiflex_Class_NewInstance_op_ctxt,rel_253_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Class_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_Array_NewInstance(?invocation,?value),
   Instruction_Method(?invocation,?inmethod),
   AssignReturnValue(?invocation,?return),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_252_Tamiflex_Array_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_252_Tamiflex_Array_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_252_Tamiflex_Array_NewInstance_op_ctxt,rel_252_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Array_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_Array_NewInstance(?invocation,?value),
   Instruction_Method(?invocation,?inmethod),
   AssignReturnValue(?invocation,?return),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_252_Tamiflex_Array_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_252_Tamiflex_Array_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_252_Tamiflex_Array_NewInstance_op_ctxt,rel_252_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Array_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2819:1-2825:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?callerCtx,?return) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?callerCtx,?return) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?callerCtx,?return) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_464_delta_Tamiflex_Invoke->empty()&&!rel_382_ImmutableContextFromHContext->empty()&&!rel_391_VarPointsTo->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_464_delta_Tamiflex_Invoke_op_ctxt,rel_464_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt,rel_382_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[2]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_382_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_383_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_382_ImmutableContextFromHContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt,rel_382_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_392_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_382_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_383_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    @delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?this) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_383_delta_ImmutableContextFromHContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_391_VarPointsTo->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_383_delta_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    @delta_ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- 
   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),
   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),
   Var_Type(?formal,?type),
   Value_Type(?value,?valuetype),
   SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_476_delta_TamiflexInvocationArgumentArrayValue->empty()&&!rel_400_ArrayIndexPointsTo->empty()&&!rel_189_SupertypeOf->empty()&&!rel_300_Value_Type->empty()&&!rel_241_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_476_delta_TamiflexInvocationArgumentArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt,rel_401_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_476_delta_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_476_delta_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_400_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) && (!rel_401_delta_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[1],env3[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];@new_VarPointsTo(?hctx,?value,?calleeCtx,?formal) :-     @delta_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    Var_Type(?formal,?type),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?calleeCtx,?formal),    !@delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- 
   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),
   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),
   Var_Type(?formal,?type),
   Value_Type(?value,?valuetype),
   SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_401_delta_ArrayIndexPointsTo->empty()&&!rel_189_SupertypeOf->empty()&&!rel_475_TamiflexInvocationArgumentArrayValue->empty()&&!rel_300_Value_Type->empty()&&!rel_241_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_475_TamiflexInvocationArgumentArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt,rel_401_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_475_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_475_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_401_delta_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_401_delta_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[1],env3[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];@new_VarPointsTo(?hctx,?value,?calleeCtx,?formal) :-     TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    @delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    Var_Type(?formal,?type),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?calleeCtx,?formal).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2880:1-2885:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedField(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_229_Tamiflex_ReifiedField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_229_Tamiflex_ReifiedField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt,rel_229_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedField( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedField(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_229_Tamiflex_ReifiedField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_229_Tamiflex_ReifiedField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_229_Tamiflex_ReifiedField_op_ctxt,rel_229_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedField( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedFieldArray(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_223_Tamiflex_ReifiedFieldArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_223_Tamiflex_ReifiedFieldArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt,rel_223_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedFieldArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedFieldArray(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_223_Tamiflex_ReifiedFieldArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_223_Tamiflex_ReifiedFieldArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_223_Tamiflex_ReifiedFieldArray_op_ctxt,rel_223_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedFieldArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedMethod(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_224_Tamiflex_ReifiedMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_224_Tamiflex_ReifiedMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt,rel_224_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethod( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedMethod(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_224_Tamiflex_ReifiedMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_224_Tamiflex_ReifiedMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_224_Tamiflex_ReifiedMethod_op_ctxt,rel_224_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethod( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedMethodArray(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_225_Tamiflex_ReifiedMethodArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_225_Tamiflex_ReifiedMethodArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt,rel_225_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethodArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(VarPointsTo(?hctx,?value,?ctx,?return) :- 
   Tamiflex_ReifiedMethodArray(_,?value,?invocation),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?ctx,?inmethod),
   ImmutableHContextFromContext(?ctx,?hctx),
   AssignReturnValue(?invocation,?return).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_225_Tamiflex_ReifiedMethodArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_225_Tamiflex_ReifiedMethodArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt,rel_393_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_225_Tamiflex_ReifiedMethodArray_op_ctxt,rel_225_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_391_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_393_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_393_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethodArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2886:1-2894:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1337:1-0:0];)" <<  rel_393_new_VarPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1338:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- 
   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),
   VarPointsTo(?hctx,?value,?ctx,?from),
   NotSpecialObject(?value),
   !HeapAllocation_Null(?basevalue).

   .plan 1:(2,1,3)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27])_");
{
	RamLogger logger(R"(@t-recursive-rule;InstanceFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)",profile);
if (!rel_422_delta_StoreHeapInstanceField->empty()&&!rel_304_NotSpecialObject->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_422_delta_StoreHeapInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_delta_StoreHeapInstanceField_op_ctxt,rel_422_delta_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_396_new_InstanceFieldPointsTo_op_ctxt,rel_396_new_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_104_HeapAllocation_Null->contains(Tuple<RamDomain,1>({env0[2]}),READ_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt))) {
const Tuple<RamDomain,4> key({0,0,env0[3],env0[4]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_394_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env1[0],env1[1],env0[0],env0[1],env0[2]}),READ_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[3],env0[4]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_304_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_396_new_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_396_new_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];@new_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :-     @delta_StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    NotSpecialObject(?value),    !HeapAllocation_Null(?basevalue),    !InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).     .plan 1:(2,1,3);;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InstanceFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)" <<  rel_396_new_InstanceFieldPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- 
   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),
   VarPointsTo(?hctx,?value,?ctx,?from),
   NotSpecialObject(?value),
   !HeapAllocation_Null(?basevalue).

   .plan 1:(2,1,3)
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27])_");
{
	RamLogger logger(R"(@t-recursive-rule;InstanceFieldPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_304_NotSpecialObject->empty()&&!rel_421_StoreHeapInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_396_new_InstanceFieldPointsTo_op_ctxt,rel_396_new_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_421_StoreHeapInstanceField_op_ctxt,rel_421_StoreHeapInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,0,env0[2],env0[3]});
auto range = rel_421_StoreHeapInstanceField->equalRange<3,4>(key,READ_OP_CONTEXT(rel_421_StoreHeapInstanceField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_104_HeapAllocation_Null->contains(Tuple<RamDomain,1>({env1[2]}),READ_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt))) && (!rel_394_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env0[0],env0[1],env1[0],env1[1],env1[2]}),READ_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_304_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2])});
if (!(rel_396_new_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_396_new_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];@new_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :-     @delta_VarPointsTo(?hctx,?value,?ctx,?from),    StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),    NotSpecialObject(?value),    !HeapAllocation_Null(?basevalue),    !InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;InstanceFieldPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2350:1-2354:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)" <<  rel_396_new_InstanceFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1338:1-0:0];)" <<  rel_396_new_InstanceFieldPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1339:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StaticFieldPointsTo(?hctx,?value,"<java.lang.ref.Reference: java.lang.ref.Reference pending>") :- 
   isField("<java.lang.ref.Reference: java.lang.ref.Reference pending>"),
   isVar("<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this"),
   VarPointsTo(?hctx,?value,_,"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this").
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1820:1-1825:41])_");
{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1820:1-1825:41];StaticFieldPointsTo(?hctx,?value,\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\") :- \n   isField(\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\"),\n   isVar(\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\"),\n   VarPointsTo(?hctx,?value,_,\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\").;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_227_isField->empty()&&!rel_238_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt,rel_399_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_227_isField_op_ctxt,rel_227_isField->createContext());
CREATE_OP_CONTEXT(rel_238_isVar_op_ctxt,rel_238_isVar->createContext());
const Tuple<RamDomain,1> key({138});
auto range = rel_227_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_227_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({139});
auto range = rel_238_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_238_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({0,0,0,139});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_397_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],138}),READ_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(138)});
if (!(rel_399_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1820:1-1825:41];@new_StaticFieldPointsTo(?hctx,?value,'<java.lang.ref.Reference: java.lang.ref.Reference pending>') :-     isField('<java.lang.ref.Reference: java.lang.ref.Reference pending>'),    isVar('<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this'),    @delta_VarPointsTo(?hctx,?value, _unnamed_var1,'<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this'),    !StaticFieldPointsTo(?hctx,?value,'<java.lang.ref.Reference: java.lang.ref.Reference pending>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1820:1-1825:41];StaticFieldPointsTo(?hctx,?value,\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\") :- \n   isField(\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\"),\n   isVar(\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\"),\n   VarPointsTo(?hctx,?value,_,\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\").;)" <<  rel_399_new_StaticFieldPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StaticFieldPointsTo(?hctx,?value,?signature) :- 
   ReachableStoreStaticFieldFrom(?from),
   StoreStaticField(?from,?signature,_),
   VarPointsTo(?hctx,?value,_,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40])_");
{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)",profile);
if (!rel_440_delta_ReachableStoreStaticFieldFrom->empty()&&!rel_239_StoreStaticField->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_440_delta_ReachableStoreStaticFieldFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_440_delta_ReachableStoreStaticFieldFrom_op_ctxt,rel_440_delta_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt,rel_399_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_239_StoreStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_397_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_399_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];@new_StaticFieldPointsTo(?hctx,?value,?signature) :-     @delta_ReachableStoreStaticFieldFrom(?from),    StoreStaticField(?from,?signature, _unnamed_var1),    VarPointsTo(?hctx,?value, _unnamed_var2,?from),    !StaticFieldPointsTo(?hctx,?value,?signature),    !@delta_VarPointsTo(?hctx,?value, _unnamed_var2,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)" <<  rel_399_new_StaticFieldPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StaticFieldPointsTo(?hctx,?value,?signature) :- 
   ReachableStoreStaticFieldFrom(?from),
   StoreStaticField(?from,?signature,_),
   VarPointsTo(?hctx,?value,_,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40])_");
{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_439_ReachableStoreStaticFieldFrom->empty()&&!rel_239_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_ReachableStoreStaticFieldFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt,rel_399_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_439_ReachableStoreStaticFieldFrom_op_ctxt,rel_439_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_239_StoreStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_397_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_399_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_399_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];@new_StaticFieldPointsTo(?hctx,?value,?signature) :-     ReachableStoreStaticFieldFrom(?from),    StoreStaticField(?from,?signature, _unnamed_var1),    @delta_VarPointsTo(?hctx,?value, _unnamed_var2,?from),    !StaticFieldPointsTo(?hctx,?value,?signature).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StaticFieldPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2365:1-2368:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)" <<  rel_399_new_StaticFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1339:1-0:0];)" <<  rel_399_new_StaticFieldPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1340:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- 
   ImmutableHContextFromContext(?ctx,?hctx),
   MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx,?mainMethod),
   _FormalParam(0,?mainMethod,?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_305_MainMethodArgArray->empty()&&!rel_306_MainMethodArgArrayContent->empty()&&!rel_231_MainMethodDeclaration->empty()&&!rel_409_ReachableContext->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt,rel_402_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_305_MainMethodArgArray_op_ctxt,rel_305_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_306_MainMethodArgArrayContent_op_ctxt,rel_306_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_231_MainMethodDeclaration) {
if( !rel_410_delta_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_409_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_305_MainMethodArgArray) {
for(const auto& env5 : *rel_306_MainMethodArgArrayContent) {
if( !rel_400_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[1],env4[0]}),READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[1]),(RamDomain)(env4[0])});
if (!(rel_402_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];@new_ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray),    !@delta_ReachableContext(?ctx,?mainMethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_402_new_ArrayIndexPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- 
   ImmutableHContextFromContext(?ctx,?hctx),
   MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx,?mainMethod),
   _FormalParam(0,?mainMethod,?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48])_");
{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_305_MainMethodArgArray->empty()&&!rel_306_MainMethodArgArrayContent->empty()&&!rel_231_MainMethodDeclaration->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_385_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt,rel_402_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_305_MainMethodArgArray_op_ctxt,rel_305_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_306_MainMethodArgArrayContent_op_ctxt,rel_306_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_231_MainMethodDeclaration_op_ctxt,rel_231_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_231_MainMethodDeclaration) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_410_delta_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_305_MainMethodArgArray) {
for(const auto& env5 : *rel_306_MainMethodArgArrayContent) {
if( !rel_400_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[1],env4[0]}),READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[1]),(RamDomain)(env4[0])});
if (!(rel_402_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];@new_ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :-     ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    @delta_ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1767:1-1774:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_402_new_ArrayIndexPointsTo->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :- 
   OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),
   NotSpecialObject(?value),
   NotEmptyArrayValue(?basevalue),
   Value_Type(?value,?valuetype),
   Value_Type(?basevalue,?basevaluetype),
   _ComponentType(?basevaluetype,?componenttype),
   SupertypeOf(?componenttype,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2414:1-2421:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2414:1-2421:43];ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :- \n   OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),\n   NotSpecialObject(?value),\n   NotEmptyArrayValue(?basevalue),\n   Value_Type(?value,?valuetype),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?componenttype),\n   SupertypeOf(?componenttype,?valuetype).;)",profile);
if (!rel_416_delta_OptStoreIntoArray->empty()&&!rel_303_NotEmptyArrayValue->empty()&&!rel_304_NotSpecialObject->empty()&&!rel_189_SupertypeOf->empty()&&!rel_300_Value_Type->empty()&&!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_delta_OptStoreIntoArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_416_delta_OptStoreIntoArray_op_ctxt,rel_416_delta_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt,rel_402_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt,rel_303_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt,rel_304_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_400_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[3],env0[1],env0[2]}),READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_304_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_304_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[2]});
auto range = rel_303_NotEmptyArrayValue->equalRange<0>(key,READ_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[1],0});
auto range = rel_125_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[1],env3[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_402_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_402_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2414:1-2421:43];@new_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :-     @delta_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),    NotSpecialObject(?value),    NotEmptyArrayValue(?basevalue),    Value_Type(?value,?valuetype),    Value_Type(?basevalue,?basevaluetype),    _ComponentType(?basevaluetype,?componenttype),    SupertypeOf(?componenttype,?valuetype),    !ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2414:1-2421:43];ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :- \n   OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),\n   NotSpecialObject(?value),\n   NotEmptyArrayValue(?basevalue),\n   Value_Type(?value,?valuetype),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?componenttype),\n   SupertypeOf(?componenttype,?valuetype).;)" <<  rel_402_new_ArrayIndexPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1340:1-0:0];)" <<  rel_402_new_ArrayIndexPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1342:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],"<java.lang.ref.Finalizer: void register(java.lang.Object)>") :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal),
   !HeapAllocation_Merge(?heapValue,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( rel_209_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,2>({env3[0],env3[1]})),env0[1],pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})),90}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[0],env3[1]}))),(RamDomain)(env0[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))),(RamDomain)(90)});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>') :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],"<java.lang.ref.Finalizer: void register(java.lang.Object)>") :- 
   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),
   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),
   HeapAllocation_Merge(?heapValue,?heapValue),
   ReachableContext([ctxValue1,ctxValue2],?inmethod),
   isMethod("<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
   _FormalParam(0,"<java.lang.ref.Finalizer: void register(java.lang.Object)>",?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_157_AllocatedObjectSupportsFinalize->empty()&&!rel_158_FakeInvocation_RegisterFinalize0->empty()&&!rel_209_HeapAllocation_Merge->empty()&&!rel_32_FormalParam->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_158_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt,rel_157_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_158_FakeInvocation_RegisterFinalize0_op_ctxt,rel_158_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt,rel_209_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_157_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_157_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_209_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_209_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,2>({env4[0],env4[1]})),env0[1],pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})),90}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env4[1]}))),(RamDomain)(env0[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))),(RamDomain)(90)});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];@new_CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>') :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>').;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1715:1-1728:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_458_delta_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_458_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_458_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({env1[2],env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[2]}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[2])});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- 
   OptVirtualMethodInvocationBase(?invocation,?base),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   Value_Type(?value,?valuetype),
   ResolveInvocation(?valuetype,?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_457_OptVirtualMethodInvocationBase->empty()&&!rel_242_ResolveInvocation->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_457_OptVirtualMethodInvocationBase_op_ctxt,rel_457_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt,rel_242_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_242_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_242_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({env1[2],env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[2]}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[2])});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2449:1-2458:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :- 
   ReachableContext(?callerCtx,?inmethod),
   StaticMethodInvocation(?invocation,?tomethod,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_92_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt,rel_92_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_92_StaticMethodInvocation->equalRange<2>(key,READ_OP_CONTEXT(rel_92_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env1[0],env0[0],env1[1]}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];@new_CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :-     @delta_ReachableContext(?callerCtx,?inmethod),    StaticMethodInvocation(?invocation,?tomethod,?inmethod),    !CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2459:1-2463:24];CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_461_delta_OptSpecialMethodInvocationBase->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_391_VarPointsTo->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_461_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_461_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_461_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({env3[2],env0[0],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env1[1]}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env1[1])});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- 
   OptSpecialMethodInvocationBase(?invocation,?base),
   MethodInvocation_Method(?invocation,?tomethod),
   _ThisVar(?tomethod,?this),
   VarPointsTo([hctxValue],?value,?callerCtx,?base),
   SiteShouldNotBeRefined(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54])_");
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_91_MethodInvocation_Method->empty()&&!rel_460_OptSpecialMethodInvocationBase->empty()&&!rel_243_SiteShouldNotBeRefined->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_460_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt,rel_405_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt,rel_91_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_460_OptSpecialMethodInvocationBase_op_ctxt,rel_460_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt,rel_243_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_91_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_403_CallGraphEdge->contains(Tuple<RamDomain,4>({env3[2],env0[0],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env1[1]}),READ_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_243_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_243_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env1[1])});
if (!(rel_405_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_405_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2469:1-2477:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1342:1-0:0];)" <<  rel_405_new_CallGraphEdge->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1343:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Reachable(?clinit) :- 
   InitializedClass(?class),
   ClassInitializer(?class,?clinit).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1598:1-1600:38])_");
{
	RamLogger logger(R"(@t-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1598:1-1600:38];Reachable(?clinit) :- \n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)",profile);
if (!rel_362_delta_InitializedClass->empty()&&!rel_81_ClassInitializer->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_362_delta_InitializedClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_362_delta_InitializedClass_op_ctxt,rel_362_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_408_new_Reachable_op_ctxt,rel_408_new_Reachable->createContext());
CREATE_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt,rel_81_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_81_ClassInitializer->equalRange<0>(key,READ_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_406_Reachable->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_406_Reachable_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_408_new_Reachable->insert(tuple,READ_OP_CONTEXT(rel_408_new_Reachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Reachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1598:1-1600:38];@new_Reachable(?clinit) :-     @delta_InitializedClass(?class),    ClassInitializer(?class,?clinit),    !Reachable(?clinit).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1598:1-1600:38];Reachable(?clinit) :- \n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)" <<  rel_408_new_Reachable->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Reachable(?method) :- 
   ReachableContext(_,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2480:1-2481:32])_");
{
	RamLogger logger(R"(@t-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2480:1-2481:32];Reachable(?method) :- \n   ReachableContext(_,?method).;)",profile);
if (!rel_410_delta_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_408_new_Reachable_op_ctxt,rel_408_new_Reachable->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_406_Reachable->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_406_Reachable_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_408_new_Reachable->insert(tuple,READ_OP_CONTEXT(rel_408_new_Reachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Reachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2480:1-2481:32];@new_Reachable(?method) :-     @delta_ReachableContext( _unnamed_var1,?method),    !Reachable(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2480:1-2481:32];Reachable(?method) :- \n   ReachableContext(_,?method).;)" <<  rel_408_new_Reachable->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1343:1-0:0];)" <<  rel_408_new_Reachable->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1345:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   PublicOnMethodOfReachableListener(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_344_delta_PublicOnMethodOfReachableListener->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_344_delta_PublicOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_344_delta_PublicOnMethodOfReachableListener_op_ctxt,rel_344_delta_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];@new_ReachableContext(?ctx,?meth) :-     @delta_PublicOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ReachableContext(?ctx,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?meth) :- 
   OverridingProtectedOnMethodOfReachableListener(?meth),
   isImmutableContext(?ctx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_353_delta_OverridingProtectedOnMethodOfReachableListener->empty()&&!rel_326_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_353_delta_OverridingProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_353_delta_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_353_delta_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_isImmutableContext_op_ctxt,rel_326_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_326_isImmutableContext) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];@new_ReachableContext(?ctx,?meth) :-     @delta_OverridingProtectedOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ReachableContext(?ctx,?meth).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1538:1-1542:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext([hctxValue,?value],?run) :- 
   _ThisVar("<java.lang.Thread: void start0()>",?startThis),
   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),
   Value_Type(?value,?valuetype),
   MethodLookup("run","void()",?valuetype,?run),
   _ThisVar(?run,?runThis).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];ReachableContext([hctxValue,?value],?run) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_153_MethodLookup->empty()&&!rel_300_Value_Type->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_153_MethodLookup_op_ctxt,rel_153_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_153_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_153_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[3]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[3])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];@new_ReachableContext([hctxValue,?value],?run) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !ReachableContext([hctxValue,?value],?run).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2162:1-2174:59];ReachableContext([hctxValue,?value],?run) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?clinitContext,?clinit) :- 
   isClinitContext(?clinitContext),
   InitializedClass(?class),
   ClassInitializer(?class,?clinit).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2280:1-2283:37])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2280:1-2283:37];ReachableContext(?clinitContext,?clinit) :- \n   isClinitContext(?clinitContext),\n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)",profile);
if (!rel_362_delta_InitializedClass->empty()&&!rel_81_ClassInitializer->empty()&&!rel_331_isClinitContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_331_isClinitContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_362_delta_InitializedClass_op_ctxt,rel_362_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt,rel_81_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_331_isClinitContext_op_ctxt,rel_331_isClinitContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
for(const auto& env1 : *rel_362_delta_InitializedClass) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_81_ClassInitializer->equalRange<0>(key,READ_OP_CONTEXT(rel_81_ClassInitializer_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env2[1]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2280:1-2283:37];@new_ReachableContext(?clinitContext,?clinit) :-     isClinitContext(?clinitContext),    @delta_InitializedClass(?class),    ClassInitializer(?class,?clinit),    !ReachableContext(?clinitContext,?clinit).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2280:1-2283:37];ReachableContext(?clinitContext,?clinit) :- \n   isClinitContext(?clinitContext),\n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?ctx,?method) :- 
   CallGraphEdge(_,_,?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2478:1-2479:38])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2478:1-2479:38];ReachableContext(?ctx,?method) :- \n   CallGraphEdge(_,_,?ctx,?method).;)",profile);
if (!rel_404_delta_CallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_404_delta_CallGraphEdge_op_ctxt,rel_404_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({env0[2],env0[3]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2478:1-2479:38];@new_ReachableContext(?ctx,?method) :-     @delta_CallGraphEdge( _unnamed_var1, _unnamed_var2,?ctx,?method),    !ReachableContext(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2478:1-2479:38];ReachableContext(?ctx,?method) :- \n   CallGraphEdge(_,_,?ctx,?method).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(ReachableContext(?calleeCtx,?callee) :- 
   TamiflexCallGraphEdge(_,_,?calleeCtx,?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2802:1-2803:52])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2802:1-2803:52];ReachableContext(?calleeCtx,?callee) :- \n   TamiflexCallGraphEdge(_,_,?calleeCtx,?callee).;)",profile);
if (!rel_467_delta_TamiflexCallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_467_delta_TamiflexCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_467_delta_TamiflexCallGraphEdge_op_ctxt,rel_467_delta_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt,rel_411_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_409_ReachableContext->contains(Tuple<RamDomain,2>({env0[2],env0[3]}),READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_411_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_411_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2802:1-2803:52];@new_ReachableContext(?calleeCtx,?callee) :-     @delta_TamiflexCallGraphEdge( _unnamed_var1, _unnamed_var2,?calleeCtx,?callee),    !ReachableContext(?calleeCtx,?callee).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2802:1-2803:52];ReachableContext(?calleeCtx,?callee) :- \n   TamiflexCallGraphEdge(_,_,?calleeCtx,?callee).;)" <<  rel_411_new_ReachableContext->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1345:1-0:0];)" <<  rel_411_new_ReachableContext->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1350:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :- 
   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),
   _ActualParam(?index,?invocation,?actual),
   _FormalParam(?index,?method,?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2432:1-2435:41])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2432:1-2435:41];OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   _ActualParam(?index,?invocation,?actual),\n   _FormalParam(?index,?method,?formal).;)",profile);
if (!rel_404_delta_CallGraphEdge->empty()&&!rel_232_ActualParam->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_404_delta_CallGraphEdge_op_ctxt,rel_404_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt,rel_414_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt,rel_412_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({env1[0],env0[3],0});
auto range = rel_32_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_412_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[2],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[2]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_414_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2432:1-2435:41];@new_OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :-     @delta_CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),    _ActualParam(?index,?invocation,?actual),    _FormalParam(?index,?method,?formal),    !OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2432:1-2435:41];OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   _ActualParam(?index,?invocation,?actual),\n   _FormalParam(?index,?method,?formal).;)" <<  rel_414_new_OptInterproceduralAssign->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- 
   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),
   AssignReturnValue(?invocation,?local),
   ReturnVar(?return,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2436:1-2439:31])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2436:1-2439:31];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?method).;)",profile);
if (!rel_404_delta_CallGraphEdge->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_88_ReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_404_delta_CallGraphEdge_op_ctxt,rel_404_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt,rel_414_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt,rel_412_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_412_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env0[2],env2[0]}),READ_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0])});
if (!(rel_414_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2436:1-2439:31];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     @delta_CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?method),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2436:1-2439:31];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?method).;)" <<  rel_414_new_OptInterproceduralAssign->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   AssignReturnValue(?invocation,?local),
   ReturnVar(?return,?callee),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_464_delta_Tamiflex_Invoke->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_88_ReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_464_delta_Tamiflex_Invoke_op_ctxt,rel_464_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt,rel_414_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt,rel_412_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_412_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env3[1],env2[0]}),READ_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env3[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env3[1]),(RamDomain)(env2[0])});
if (!(rel_414_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?callee),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_414_new_OptInterproceduralAssign->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   AssignReturnValue(?invocation,?local),
   ReturnVar(?return,?callee),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_88_ReturnVar->empty()&&!rel_463_Tamiflex_Invoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt,rel_414_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt,rel_412_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_88_ReturnVar_op_ctxt,rel_88_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_88_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_88_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_412_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env3[1],env2[0]}),READ_OP_CONTEXT(rel_412_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env3[1]),(RamDomain)(env2[0])});
if (!(rel_414_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_414_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?callee),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptInterproceduralAssign;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2859:1-2863:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_414_new_OptInterproceduralAssign->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1350:1-0:0];)" <<  rel_414_new_OptInterproceduralAssign->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1355:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- 
   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),
   VarPointsTo(?hctx,?value,?ctx,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptStoreIntoArray;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)",profile);
if (!rel_428_delta_StoreHeapArrayIndex->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_delta_StoreHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_428_delta_StoreHeapArrayIndex_op_ctxt,rel_428_delta_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_417_new_OptStoreIntoArray_op_ctxt,rel_417_new_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_415_OptStoreIntoArray_op_ctxt,rel_415_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_415_OptStoreIntoArray->contains(Tuple<RamDomain,4>({env1[0],env0[0],env0[1],env1[1]}),READ_OP_CONTEXT(rel_415_OptStoreIntoArray_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[1])});
if (!(rel_417_new_OptStoreIntoArray->insert(tuple,READ_OP_CONTEXT(rel_417_new_OptStoreIntoArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptStoreIntoArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];@new_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :-     @delta_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    !OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptStoreIntoArray;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)" <<  rel_417_new_OptStoreIntoArray->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- 
   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),
   VarPointsTo(?hctx,?value,?ctx,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptStoreIntoArray;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_427_StoreHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_StoreHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_417_new_OptStoreIntoArray_op_ctxt,rel_417_new_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_415_OptStoreIntoArray_op_ctxt,rel_415_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_427_StoreHeapArrayIndex_op_ctxt,rel_427_StoreHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_392_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_415_OptStoreIntoArray->contains(Tuple<RamDomain,4>({env1[0],env0[0],env0[1],env1[1]}),READ_OP_CONTEXT(rel_415_OptStoreIntoArray_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[1])});
if (!(rel_417_new_OptStoreIntoArray->insert(tuple,READ_OP_CONTEXT(rel_417_new_OptStoreIntoArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptStoreIntoArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];@new_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :-     StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    @delta_VarPointsTo(?hctx,?value,?ctx,?from),    !OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptStoreIntoArray;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2411:1-2413:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)" <<  rel_417_new_OptStoreIntoArray->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1355:1-0:0];)" <<  rel_417_new_OptStoreIntoArray->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1356:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :- 
   LoadInstanceField(?base,?sig,?to,_),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2347:1-2349:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapInstanceField;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2347:1-2349:51];LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :- \n   LoadInstanceField(?base,?sig,?to,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_234_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_234_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_420_new_LoadHeapInstanceField_op_ctxt,rel_420_new_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_418_LoadHeapInstanceField_op_ctxt,rel_418_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_234_LoadInstanceField_op_ctxt,rel_234_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_418_LoadHeapInstanceField->contains(Tuple<RamDomain,5>({env1[2],env0[2],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_418_LoadHeapInstanceField_op_ctxt))) {
Tuple<RamDomain,5> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[2]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_420_new_LoadHeapInstanceField->insert(tuple,READ_OP_CONTEXT(rel_420_new_LoadHeapInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2347:1-2349:51];@new_LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :-     LoadInstanceField(?base,?sig,?to, _unnamed_var1),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;LoadHeapInstanceField;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2347:1-2349:51];LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :- \n   LoadInstanceField(?base,?sig,?to,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_420_new_LoadHeapInstanceField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1356:1-0:0];)" <<  rel_420_new_LoadHeapInstanceField->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1357:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :- 
   StoreInstanceField(?from,?base,?signature,_),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2356:1-2358:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapInstanceField;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2356:1-2358:51];StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :- \n   StoreInstanceField(?from,?base,?signature,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_233_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_233_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_423_new_StoreHeapInstanceField_op_ctxt,rel_423_new_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_421_StoreHeapInstanceField_op_ctxt,rel_421_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_233_StoreInstanceField_op_ctxt,rel_233_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_421_StoreHeapInstanceField->contains(Tuple<RamDomain,5>({env0[2],env1[0],env1[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_421_StoreHeapInstanceField_op_ctxt))) {
Tuple<RamDomain,5> tuple({(RamDomain)(env0[2]),(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_423_new_StoreHeapInstanceField->insert(tuple,READ_OP_CONTEXT(rel_423_new_StoreHeapInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2356:1-2358:51];@new_StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :-     StoreInstanceField(?from,?base,?signature, _unnamed_var1),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StoreHeapInstanceField;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2356:1-2358:51];StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :- \n   StoreInstanceField(?from,?base,?signature,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_423_new_StoreHeapInstanceField->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1357:1-0:0];)" <<  rel_423_new_StoreHeapInstanceField->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1358:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- 
   ReachableLoadArrayIndexBase(?base),
   OptLoadArrayIndex(?to,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_452_delta_ReachableLoadArrayIndexBase->empty()&&!rel_247_OptLoadArrayIndex->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_delta_ReachableLoadArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_452_delta_ReachableLoadArrayIndexBase_op_ctxt,rel_452_delta_ReachableLoadArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_426_new_LoadHeapArrayIndex_op_ctxt,rel_426_new_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt,rel_424_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt,rel_247_OptLoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_247_OptLoadArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_424_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[2],env1[0],env2[0],env2[1]}),READ_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[2]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[1])});
if (!(rel_426_new_LoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_426_new_LoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];@new_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :-     @delta_ReachableLoadArrayIndexBase(?base),    OptLoadArrayIndex(?to,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;LoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_426_new_LoadHeapArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- 
   ReachableLoadArrayIndexBase(?base),
   OptLoadArrayIndex(?to,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_247_OptLoadArrayIndex->empty()&&!rel_451_ReachableLoadArrayIndexBase->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_451_ReachableLoadArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_426_new_LoadHeapArrayIndex_op_ctxt,rel_426_new_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt,rel_424_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt,rel_247_OptLoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_451_ReachableLoadArrayIndexBase_op_ctxt,rel_451_ReachableLoadArrayIndexBase->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_247_OptLoadArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_247_OptLoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_424_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[2],env1[0],env2[0],env2[1]}),READ_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[2]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[1])});
if (!(rel_426_new_LoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_426_new_LoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];@new_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :-     ReachableLoadArrayIndexBase(?base),    OptLoadArrayIndex(?to,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;LoadHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2401:1-2404:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_426_new_LoadHeapArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1358:1-0:0];)" <<  rel_426_new_LoadHeapArrayIndex->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1359:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- 
   ReachableStoreArrayIndexBase(?base),
   OptStoreArrayIndex(?from,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_455_delta_ReachableStoreArrayIndexBase->empty()&&!rel_245_OptStoreArrayIndex->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_455_delta_ReachableStoreArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_455_delta_ReachableStoreArrayIndexBase_op_ctxt,rel_455_delta_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_429_new_StoreHeapArrayIndex_op_ctxt,rel_429_new_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt,rel_245_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_427_StoreHeapArrayIndex_op_ctxt,rel_427_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_245_OptStoreArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_427_StoreHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env1[0]}),READ_OP_CONTEXT(rel_427_StoreHeapArrayIndex_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_429_new_StoreHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_429_new_StoreHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];@new_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :-     @delta_ReachableStoreArrayIndexBase(?base),    OptStoreArrayIndex(?from,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StoreHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_429_new_StoreHeapArrayIndex->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- 
   ReachableStoreArrayIndexBase(?base),
   OptStoreArrayIndex(?from,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_245_OptStoreArrayIndex->empty()&&!rel_454_ReachableStoreArrayIndexBase->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_454_ReachableStoreArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_429_new_StoreHeapArrayIndex_op_ctxt,rel_429_new_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt,rel_245_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_454_ReachableStoreArrayIndexBase_op_ctxt,rel_454_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_427_StoreHeapArrayIndex_op_ctxt,rel_427_StoreHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_245_OptStoreArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_245_OptStoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_392_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_427_StoreHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env1[0]}),READ_OP_CONTEXT(rel_427_StoreHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_429_new_StoreHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_429_new_StoreHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];@new_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :-     ReachableStoreArrayIndexBase(?base),    OptStoreArrayIndex(?from,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;StoreHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2422:1-2425:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_429_new_StoreHeapArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1359:1-0:0];)" <<  rel_429_new_StoreHeapArrayIndex->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;AbstractCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1634:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AbstractCallGraphEdge(?callerCtx,?abs_invocation,[?abs_calleeCtx1,?abs_calleeCtx2],?abs_method) :- 
   CallGraphEdge(?callerCtx,?invocation,[?calleeCtx1,?calleeCtx2],?method),
   _replace_cge(?invocation,?calleeCtx1,?calleeCtx2,?method,?abs_invocation,?abs_calleeCtx1,?abs_calleeCtx2,?abs_method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1636:1-1638:127])_");
{
	RamLogger logger(R"(@t-recursive-rule;AbstractCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1636:1-1638:127];AbstractCallGraphEdge(?callerCtx,?abs_invocation,[?abs_calleeCtx1,?abs_calleeCtx2],?abs_method) :- \n   CallGraphEdge(?callerCtx,?invocation,[?calleeCtx1,?calleeCtx2],?method),\n   _replace_cge(?invocation,?calleeCtx1,?calleeCtx2,?method,?abs_invocation,?abs_calleeCtx1,?abs_calleeCtx2,?abs_method).;)",profile);
if (!rel_404_delta_CallGraphEdge->empty()&&!rel_328_replace_cge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_404_delta_CallGraphEdge_op_ctxt,rel_404_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_432_new_AbstractCallGraphEdge_op_ctxt,rel_432_new_AbstractCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_430_AbstractCallGraphEdge_op_ctxt,rel_430_AbstractCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_328_replace_cge_op_ctxt,rel_328_replace_cge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,8> key({env0[1],env1[0],env1[1],env0[3],0,0,0,0});
auto range = rel_328_replace_cge->equalRange<0,1,2,3>(key,READ_OP_CONTEXT(rel_328_replace_cge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_430_AbstractCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env2[4],pack(ram::Tuple<RamDomain,2>({env2[5],env2[6]})),env2[7]}),READ_OP_CONTEXT(rel_430_AbstractCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[4]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[5],env2[6]}))),(RamDomain)(env2[7])});
if (!(rel_432_new_AbstractCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_432_new_AbstractCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_AbstractCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1636:1-1638:127];@new_AbstractCallGraphEdge(?callerCtx,?abs_invocation,[?abs_calleeCtx1,?abs_calleeCtx2],?abs_method) :-     @delta_CallGraphEdge(?callerCtx,?invocation,[?calleeCtx1,?calleeCtx2],?method),    _replace_cge(?invocation,?calleeCtx1,?calleeCtx2,?method,?abs_invocation,?abs_calleeCtx1,?abs_calleeCtx2,?abs_method),    !AbstractCallGraphEdge(?callerCtx,?abs_invocation,[?abs_calleeCtx1,?abs_calleeCtx2],?abs_method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;AbstractCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1636:1-1638:127];AbstractCallGraphEdge(?callerCtx,?abs_invocation,[?abs_calleeCtx1,?abs_calleeCtx2],?abs_method) :- \n   CallGraphEdge(?callerCtx,?invocation,[?calleeCtx1,?calleeCtx2],?method),\n   _replace_cge(?invocation,?calleeCtx1,?calleeCtx2,?method,?abs_invocation,?abs_calleeCtx1,?abs_calleeCtx2,?abs_method).;)" <<  rel_432_new_AbstractCallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;AbstractCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1634:1-0:0];)" <<  rel_432_new_AbstractCallGraphEdge->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;AbstractThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1635:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(AbstractThrowPointsTo(?hctx,?value,[?abs_ctx1,?abs_ctx2],?abs_method) :- 
   ThrowPointsTo(?hctx,?value,[?ctx1,?ctx2],?method),
   _replace_tpt(?ctx1,?ctx2,?method,?abs_ctx1,?abs_ctx2,?abs_method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1639:1-1641:73])_");
{
	RamLogger logger(R"(@t-recursive-rule;AbstractThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1639:1-1641:73];AbstractThrowPointsTo(?hctx,?value,[?abs_ctx1,?abs_ctx2],?abs_method) :- \n   ThrowPointsTo(?hctx,?value,[?ctx1,?ctx2],?method),\n   _replace_tpt(?ctx1,?ctx2,?method,?abs_ctx1,?abs_ctx2,?abs_method).;)",profile);
if (!rel_368_delta_ThrowPointsTo->empty()&&!rel_327_replace_tpt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_368_delta_ThrowPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_368_delta_ThrowPointsTo_op_ctxt,rel_368_delta_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_435_new_AbstractThrowPointsTo_op_ctxt,rel_435_new_AbstractThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_433_AbstractThrowPointsTo_op_ctxt,rel_433_AbstractThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_327_replace_tpt_op_ctxt,rel_327_replace_tpt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
auto ref = env0[2];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,6> key({env1[0],env1[1],env0[3],0,0,0});
auto range = rel_327_replace_tpt->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_327_replace_tpt_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_433_AbstractThrowPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],pack(ram::Tuple<RamDomain,2>({env2[3],env2[4]})),env2[5]}),READ_OP_CONTEXT(rel_433_AbstractThrowPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[3],env2[4]}))),(RamDomain)(env2[5])});
if (!(rel_435_new_AbstractThrowPointsTo->insert(tuple,READ_OP_CONTEXT(rel_435_new_AbstractThrowPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_AbstractThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1639:1-1641:73];@new_AbstractThrowPointsTo(?hctx,?value,[?abs_ctx1,?abs_ctx2],?abs_method) :-     @delta_ThrowPointsTo(?hctx,?value,[?ctx1,?ctx2],?method),    _replace_tpt(?ctx1,?ctx2,?method,?abs_ctx1,?abs_ctx2,?abs_method),    !AbstractThrowPointsTo(?hctx,?value,[?abs_ctx1,?abs_ctx2],?abs_method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;AbstractThrowPointsTo;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1639:1-1641:73];AbstractThrowPointsTo(?hctx,?value,[?abs_ctx1,?abs_ctx2],?abs_method) :- \n   ThrowPointsTo(?hctx,?value,[?ctx1,?ctx2],?method),\n   _replace_tpt(?ctx1,?ctx2,?method,?abs_ctx1,?abs_ctx2,?abs_method).;)" <<  rel_435_new_AbstractThrowPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;AbstractThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1635:1-0:0];)" <<  rel_435_new_AbstractThrowPointsTo->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2334:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptAssignCast(?type,?to,?from) :- 
   Reachable(?inmethod),
   AssignCast(?type,?from,?to,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2335:1-2337:44])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptAssignCast;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2335:1-2337:44];OptAssignCast(?type,?to,?from) :- \n   Reachable(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_96_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_438_new_OptAssignCast_op_ctxt,rel_438_new_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_96_AssignCast_op_ctxt,rel_96_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_436_OptAssignCast_op_ctxt,rel_436_OptAssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_96_AssignCast->equalRange<3>(key,READ_OP_CONTEXT(rel_96_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_436_OptAssignCast->contains(Tuple<RamDomain,3>({env1[0],env1[2],env1[1]}),READ_OP_CONTEXT(rel_436_OptAssignCast_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2]),(RamDomain)(env1[1])});
if (!(rel_438_new_OptAssignCast->insert(tuple,READ_OP_CONTEXT(rel_438_new_OptAssignCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptAssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2335:1-2337:44];@new_OptAssignCast(?type,?to,?from) :-     @delta_Reachable(?inmethod),    AssignCast(?type,?from,?to,?inmethod),    !OptAssignCast(?type,?to,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptAssignCast;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2335:1-2337:44];OptAssignCast(?type,?to,?from) :- \n   Reachable(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)" <<  rel_438_new_OptAssignCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2334:1-0:0];)" <<  rel_438_new_OptAssignCast->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2369:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableStoreStaticFieldFrom(?from) :- 
   Reachable(?inmethod),
   StoreStaticField(?from,_,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2370:1-2372:41])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableStoreStaticFieldFrom;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2370:1-2372:41];ReachableStoreStaticFieldFrom(?from) :- \n   Reachable(?inmethod),\n   StoreStaticField(?from,_,?inmethod).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_239_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_441_new_ReachableStoreStaticFieldFrom_op_ctxt,rel_441_new_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_439_ReachableStoreStaticFieldFrom_op_ctxt,rel_439_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt,rel_239_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_239_StoreStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_239_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_439_ReachableStoreStaticFieldFrom->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_439_ReachableStoreStaticFieldFrom_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_441_new_ReachableStoreStaticFieldFrom->insert(tuple,READ_OP_CONTEXT(rel_441_new_ReachableStoreStaticFieldFrom_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2370:1-2372:41];@new_ReachableStoreStaticFieldFrom(?from) :-     @delta_Reachable(?inmethod),    StoreStaticField(?from, _unnamed_var1,?inmethod),    !ReachableStoreStaticFieldFrom(?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableStoreStaticFieldFrom;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2370:1-2372:41];ReachableStoreStaticFieldFrom(?from) :- \n   Reachable(?inmethod),\n   StoreStaticField(?from,_,?inmethod).;)" <<  rel_441_new_ReachableStoreStaticFieldFrom->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2369:1-0:0];)" <<  rel_441_new_ReachableStoreStaticFieldFrom->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2377:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptLoadHeapArrayIndex(?to,?basevalue) :- 
   LoadHeapArrayIndex(_,?to,_,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2380:1-2381:45])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptLoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2380:1-2381:45];OptLoadHeapArrayIndex(?to,?basevalue) :- \n   LoadHeapArrayIndex(_,?to,_,?basevalue).;)",profile);
if (!rel_425_delta_LoadHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_425_delta_LoadHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_delta_LoadHeapArrayIndex_op_ctxt,rel_425_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_444_new_OptLoadHeapArrayIndex_op_ctxt,rel_444_new_OptLoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_442_OptLoadHeapArrayIndex_op_ctxt,rel_442_OptLoadHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_442_OptLoadHeapArrayIndex->contains(Tuple<RamDomain,2>({env0[1],env0[3]}),READ_OP_CONTEXT(rel_442_OptLoadHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_444_new_OptLoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_444_new_OptLoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2380:1-2381:45];@new_OptLoadHeapArrayIndex(?to,?basevalue) :-     @delta_LoadHeapArrayIndex( _unnamed_var1,?to, _unnamed_var2,?basevalue),    !OptLoadHeapArrayIndex(?to,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptLoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2380:1-2381:45];OptLoadHeapArrayIndex(?to,?basevalue) :- \n   LoadHeapArrayIndex(_,?to,_,?basevalue).;)" <<  rel_444_new_OptLoadHeapArrayIndex->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2377:1-0:0];)" <<  rel_444_new_OptLoadHeapArrayIndex->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2378:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Temp1(?basevalue,?to) :- 
   NotEmptyArrayValue(?basevalue),
   OptLoadHeapArrayIndex(?to,?basevalue),
   Value_Type(?basevalue,?basevaluetype),
   _ComponentType(?basevaluetype,?basecomponenttype),
   Var_Type(?to,?type),
   SupertypeOf(?type,?basecomponenttype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2382:1-2388:42])_");
{
	RamLogger logger(R"(@t-recursive-rule;Temp1;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2382:1-2388:42];Temp1(?basevalue,?to) :- \n   NotEmptyArrayValue(?basevalue),\n   OptLoadHeapArrayIndex(?to,?basevalue),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?basecomponenttype),\n   Var_Type(?to,?type),\n   SupertypeOf(?type,?basecomponenttype).;)",profile);
if (!rel_443_delta_OptLoadHeapArrayIndex->empty()&&!rel_303_NotEmptyArrayValue->empty()&&!rel_189_SupertypeOf->empty()&&!rel_300_Value_Type->empty()&&!rel_241_Var_Type->empty()&&!rel_125_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_303_NotEmptyArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_443_delta_OptLoadHeapArrayIndex_op_ctxt,rel_443_delta_OptLoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_447_new_Temp1_op_ctxt,rel_447_new_Temp1->createContext());
CREATE_OP_CONTEXT(rel_303_NotEmptyArrayValue_op_ctxt,rel_303_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_445_Temp1_op_ctxt,rel_445_Temp1->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_241_Var_Type_op_ctxt,rel_241_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_125_ComponentType_op_ctxt,rel_125_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_443_delta_OptLoadHeapArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_443_delta_OptLoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_445_Temp1->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_445_Temp1_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_125_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_125_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_241_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_241_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[1],env3[1]});
auto range = rel_189_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_447_new_Temp1->insert(tuple,READ_OP_CONTEXT(rel_447_new_Temp1_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Temp1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2382:1-2388:42];@new_Temp1(?basevalue,?to) :-     NotEmptyArrayValue(?basevalue),    @delta_OptLoadHeapArrayIndex(?to,?basevalue),    Value_Type(?basevalue,?basevaluetype),    _ComponentType(?basevaluetype,?basecomponenttype),    Var_Type(?to,?type),    SupertypeOf(?type,?basecomponenttype),    !Temp1(?basevalue,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Temp1;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2382:1-2388:42];Temp1(?basevalue,?to) :- \n   NotEmptyArrayValue(?basevalue),\n   OptLoadHeapArrayIndex(?to,?basevalue),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?basecomponenttype),\n   Var_Type(?to,?type),\n   SupertypeOf(?type,?basecomponenttype).;)" <<  rel_447_new_Temp1->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2378:1-0:0];)" <<  rel_447_new_Temp1->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2379:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Temp2(?ctx,?to,?basehctx,?basevalue) :- 
   Temp1(?basevalue,?to),
   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56])_");
{
	RamLogger logger(R"(@t-recursive-rule;Temp2;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)",profile);
if (!rel_446_delta_Temp1->empty()&&!rel_424_LoadHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_delta_Temp1->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_delta_LoadHeapArrayIndex_op_ctxt,rel_425_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_446_delta_Temp1_op_ctxt,rel_446_delta_Temp1->createContext());
CREATE_OP_CONTEXT(rel_450_new_Temp2_op_ctxt,rel_450_new_Temp2->createContext());
CREATE_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt,rel_424_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_448_Temp2_op_ctxt,rel_448_Temp2->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[1],0,env0[0]});
auto range = rel_424_LoadHeapArrayIndex->equalRange<1,3>(key,READ_OP_CONTEXT(rel_424_LoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_448_Temp2->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_448_Temp2_op_ctxt))) && (!rel_425_delta_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_425_delta_LoadHeapArrayIndex_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_450_new_Temp2->insert(tuple,READ_OP_CONTEXT(rel_450_new_Temp2_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Temp2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];@new_Temp2(?ctx,?to,?basehctx,?basevalue) :-     @delta_Temp1(?basevalue,?to),    LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !Temp2(?ctx,?to,?basehctx,?basevalue),    !@delta_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Temp2;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)" <<  rel_450_new_Temp2->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Temp2(?ctx,?to,?basehctx,?basevalue) :- 
   Temp1(?basevalue,?to),
   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56])_");
{
	RamLogger logger(R"(@t-recursive-rule;Temp2;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)",profile);
if (!rel_425_delta_LoadHeapArrayIndex->empty()&&!rel_445_Temp1->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_Temp1->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_delta_LoadHeapArrayIndex_op_ctxt,rel_425_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_450_new_Temp2_op_ctxt,rel_450_new_Temp2->createContext());
CREATE_OP_CONTEXT(rel_445_Temp1_op_ctxt,rel_445_Temp1->createContext());
CREATE_OP_CONTEXT(rel_448_Temp2_op_ctxt,rel_448_Temp2->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[1],0,env0[0]});
auto range = rel_425_delta_LoadHeapArrayIndex->equalRange<1,3>(key,READ_OP_CONTEXT(rel_425_delta_LoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_448_Temp2->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_448_Temp2_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_450_new_Temp2->insert(tuple,READ_OP_CONTEXT(rel_450_new_Temp2_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Temp2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];@new_Temp2(?ctx,?to,?basehctx,?basevalue) :-     Temp1(?basevalue,?to),    @delta_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !Temp2(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Temp2;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2389:1-2391:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)" <<  rel_450_new_Temp2->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2379:1-0:0];)" <<  rel_450_new_Temp2->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2407:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableLoadArrayIndexBase(?base) :- 
   Reachable(?inmethod),
   LoadArrayIndex(?base,_,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2408:1-2410:39])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableLoadArrayIndexBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2408:1-2410:39];ReachableLoadArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   LoadArrayIndex(?base,_,?inmethod).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_246_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_453_new_ReachableLoadArrayIndexBase_op_ctxt,rel_453_new_ReachableLoadArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt,rel_246_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_451_ReachableLoadArrayIndexBase_op_ctxt,rel_451_ReachableLoadArrayIndexBase->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_246_LoadArrayIndex->equalRange<2>(key,READ_OP_CONTEXT(rel_246_LoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_451_ReachableLoadArrayIndexBase->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_451_ReachableLoadArrayIndexBase_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_453_new_ReachableLoadArrayIndexBase->insert(tuple,READ_OP_CONTEXT(rel_453_new_ReachableLoadArrayIndexBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2408:1-2410:39];@new_ReachableLoadArrayIndexBase(?base) :-     @delta_Reachable(?inmethod),    LoadArrayIndex(?base, _unnamed_var1,?inmethod),    !ReachableLoadArrayIndexBase(?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableLoadArrayIndexBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2408:1-2410:39];ReachableLoadArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   LoadArrayIndex(?base,_,?inmethod).;)" <<  rel_453_new_ReachableLoadArrayIndexBase->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2407:1-0:0];)" <<  rel_453_new_ReachableLoadArrayIndexBase->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2426:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(ReachableStoreArrayIndexBase(?base) :- 
   Reachable(?inmethod),
   StoreArrayIndex(_,?base,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2427:1-2429:40])_");
{
	RamLogger logger(R"(@t-recursive-rule;ReachableStoreArrayIndexBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2427:1-2429:40];ReachableStoreArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   StoreArrayIndex(_,?base,?inmethod).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_244_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_456_new_ReachableStoreArrayIndexBase_op_ctxt,rel_456_new_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_454_ReachableStoreArrayIndexBase_op_ctxt,rel_454_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt,rel_244_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_244_StoreArrayIndex->equalRange<2>(key,READ_OP_CONTEXT(rel_244_StoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_454_ReachableStoreArrayIndexBase->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_454_ReachableStoreArrayIndexBase_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_456_new_ReachableStoreArrayIndexBase->insert(tuple,READ_OP_CONTEXT(rel_456_new_ReachableStoreArrayIndexBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2427:1-2429:40];@new_ReachableStoreArrayIndexBase(?base) :-     @delta_Reachable(?inmethod),    StoreArrayIndex( _unnamed_var1,?base,?inmethod),    !ReachableStoreArrayIndexBase(?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;ReachableStoreArrayIndexBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2427:1-2429:40];ReachableStoreArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   StoreArrayIndex(_,?base,?inmethod).;)" <<  rel_456_new_ReachableStoreArrayIndexBase->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2426:1-0:0];)" <<  rel_456_new_ReachableStoreArrayIndexBase->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2444:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptVirtualMethodInvocationBase(?invocation,?base) :- 
   Reachable(?inmethod),
   Instruction_Method(?invocation,?inmethod),
   VirtualMethodInvocation_Base(?invocation,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2445:1-2448:52])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptVirtualMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2445:1-2448:52];OptVirtualMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   VirtualMethodInvocation_Base(?invocation,?base).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_85_Instruction_Method->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_459_new_OptVirtualMethodInvocationBase_op_ctxt,rel_459_new_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_457_OptVirtualMethodInvocationBase_op_ctxt,rel_457_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_457_OptVirtualMethodInvocationBase->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_457_OptVirtualMethodInvocationBase_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_459_new_OptVirtualMethodInvocationBase->insert(tuple,READ_OP_CONTEXT(rel_459_new_OptVirtualMethodInvocationBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2445:1-2448:52];@new_OptVirtualMethodInvocationBase(?invocation,?base) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    VirtualMethodInvocation_Base(?invocation,?base),    !OptVirtualMethodInvocationBase(?invocation,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptVirtualMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2445:1-2448:52];OptVirtualMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   VirtualMethodInvocation_Base(?invocation,?base).;)" <<  rel_459_new_OptVirtualMethodInvocationBase->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2444:1-0:0];)" <<  rel_459_new_OptVirtualMethodInvocationBase->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2464:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(OptSpecialMethodInvocationBase(?invocation,?base) :- 
   Reachable(?inmethod),
   Instruction_Method(?invocation,?inmethod),
   SpecialMethodInvocation_Base(?invocation,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2465:1-2468:52])_");
{
	RamLogger logger(R"(@t-recursive-rule;OptSpecialMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2465:1-2468:52];OptSpecialMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   SpecialMethodInvocation_Base(?invocation,?base).;)",profile);
if (!rel_407_delta_Reachable->empty()&&!rel_85_Instruction_Method->empty()&&!rel_97_SpecialMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_delta_Reachable_op_ctxt,rel_407_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_462_new_OptSpecialMethodInvocationBase_op_ctxt,rel_462_new_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_460_OptSpecialMethodInvocationBase_op_ctxt,rel_460_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt,rel_97_SpecialMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_97_SpecialMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_97_SpecialMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_460_OptSpecialMethodInvocationBase->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_460_OptSpecialMethodInvocationBase_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_462_new_OptSpecialMethodInvocationBase->insert(tuple,READ_OP_CONTEXT(rel_462_new_OptSpecialMethodInvocationBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2465:1-2468:52];@new_OptSpecialMethodInvocationBase(?invocation,?base) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    SpecialMethodInvocation_Base(?invocation,?base),    !OptSpecialMethodInvocationBase(?invocation,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;OptSpecialMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2465:1-2468:52];OptSpecialMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   SpecialMethodInvocation_Base(?invocation,?base).;)" <<  rel_462_new_OptSpecialMethodInvocationBase->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2464:1-0:0];)" <<  rel_462_new_OptSpecialMethodInvocationBase->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2671:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Tamiflex_Invoke(?callerCtx,?invocation,?method) :- 
   isMethod("<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"),
   VirtualMethodInvocation(?invocation,"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",_),
   Tamiflex_ReflectionMap(?method,?invocation),
   isMethod(?method),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2839:1-2846:43])_");
{
	RamLogger logger(R"(@t-recursive-rule;Tamiflex_Invoke;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2839:1-2846:43];Tamiflex_Invoke(?callerCtx,?invocation,?method) :- \n   isMethod(\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_222_Tamiflex_ReflectionMap->empty()&&!rel_99_VirtualMethodInvocation->empty()&&!rel_84_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_465_new_Tamiflex_Invoke_op_ctxt,rel_465_new_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt,rel_222_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt,rel_99_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_84_isMethod_op_ctxt,rel_84_isMethod->createContext());
const Tuple<RamDomain,1> key({175});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,175,0});
auto range = rel_99_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_99_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_222_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_222_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_84_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_84_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env4[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_463_Tamiflex_Invoke->contains(Tuple<RamDomain,3>({env5[0],env1[0],env2[0]}),READ_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[0]),(RamDomain)(env1[0]),(RamDomain)(env2[0])});
if (!(rel_465_new_Tamiflex_Invoke->insert(tuple,READ_OP_CONTEXT(rel_465_new_Tamiflex_Invoke_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2839:1-2846:43];@new_Tamiflex_Invoke(?callerCtx,?invocation,?method) :-     isMethod('<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>', _unnamed_var1),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    !Tamiflex_Invoke(?callerCtx,?invocation,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;Tamiflex_Invoke;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2839:1-2846:43];Tamiflex_Invoke(?callerCtx,?invocation,?method) :- \n   isMethod(\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod).;)" <<  rel_465_new_Tamiflex_Invoke->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2671:1-0:0];)" <<  rel_465_new_Tamiflex_Invoke->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2800:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_464_delta_Tamiflex_Invoke->empty()&&!rel_382_ImmutableContextFromHContext->empty()&&!rel_391_VarPointsTo->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_464_delta_Tamiflex_Invoke_op_ctxt,rel_464_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt,rel_382_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[2]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_382_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) && (!rel_383_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_382_ImmutableContextFromHContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt,rel_382_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_392_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_382_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_382_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) && (!rel_383_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    @delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(0,?invocation,?base),
   VarPointsTo(?hctx,?value,?callerCtx,?base),
   _ThisVar(?callee,?this),
   ImmutableContextFromHContext(?hctx,?calleeCtx),
   !_Method_Modifier("static",?callee).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_383_delta_ImmutableContextFromHContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_391_VarPointsTo->empty()&&!rel_232_ActualParam->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt,rel_383_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_79_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_383_delta_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_383_delta_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    @delta_ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2847:1-2854:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _Method_Modifier("static",?callee),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_464_delta_Tamiflex_Invoke->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_464_delta_Tamiflex_Invoke_op_ctxt,rel_464_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({7,env0[2]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[1],env0[2]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env2[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _Method_Modifier('static',?callee),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _Method_Modifier("static",?callee),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_79_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt,rel_468_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt,rel_466_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt,rel_79_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({7,env0[2]});
auto range = rel_79_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_79_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_466_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[1],env0[2]}),READ_OP_CONTEXT(rel_466_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2])});
if (!(rel_468_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_468_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _Method_Modifier('static',?callee),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2855:1-2858:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2800:1-0:0];)" <<  rel_468_new_TamiflexCallGraphEdge->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2826:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_410_delta_ReachableContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt,rel_410_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_471_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt,rel_469_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_410_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_410_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_386_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_469_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_471_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_471_new_TamiflexConstructorCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_386_delta_ImmutableHContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt,rel_386_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_471_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt,rel_469_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_386_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_386_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_469_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_471_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_471_new_TamiflexConstructorCallGraphEdge->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- 
   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),
   Instruction_Method(?invocation,?inmethod),
   ReachableContext(?callerCtx,?inmethod),
   AssignReturnValue(?invocation,?return),
   _ThisVar(?constructor,?this),
   ImmutableHContextFromContext(?callerCtx,?hctx),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_217_AssignReturnValue->empty()&&!rel_385_ImmutableHContextFromContext->empty()&&!rel_85_Instruction_Method->empty()&&!rel_409_ReachableContext->empty()&&!rel_251_Tamiflex_Constructor_NewInstance->empty()&&!rel_82_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_471_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt,rel_217_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt,rel_385_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt,rel_469_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_251_Tamiflex_Constructor_NewInstance_op_ctxt,rel_251_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_82_ThisVar_op_ctxt,rel_82_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_85_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_217_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_217_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_82_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_82_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_385_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_385_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_469_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_469_TamiflexConstructorCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_471_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_471_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2828:1-2838:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_471_new_TamiflexConstructorCallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2826:1-0:0];)" <<  rel_471_new_TamiflexConstructorCallGraphEdge->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2864:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(1,?invocation,?argsParam),
   _FormalParam(_,?callee,?formal),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_464_delta_Tamiflex_Invoke->empty()&&!rel_388_ImmutableContextFromContext->empty()&&!rel_232_ActualParam->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_464_delta_Tamiflex_Invoke_op_ctxt,rel_464_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt,rel_474_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt,rel_388_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt,rel_472_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({1,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[2],0});
auto range = rel_32_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_388_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_388_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_472_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env3[1],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt))) && (!rel_389_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env3[1]}),READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_474_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(1,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_474_new_TamiflexInvocationFirstParam->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- 
   Tamiflex_Invoke(?callerCtx,?invocation,?callee),
   _ActualParam(1,?invocation,?argsParam),
   _FormalParam(_,?callee,?formal),
   ImmutableContextFromContext(?callerCtx,?calleeCtx).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_389_delta_ImmutableContextFromContext->empty()&&!rel_463_Tamiflex_Invoke->empty()&&!rel_232_ActualParam->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt,rel_389_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt,rel_474_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt,rel_472_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_463_Tamiflex_Invoke_op_ctxt,rel_463_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({1,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[2],0});
auto range = rel_32_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_389_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_389_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_472_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env3[1],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_474_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(1,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2866:1-2870:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_474_new_TamiflexInvocationFirstParam->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- 
   TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),
   _ActualParam(0,?invocation,?argsParam),
   _FormalParam(_,?callee,?formal).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2871:1-2874:36])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2871:1-2874:36];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),\n   _ActualParam(0,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal).;)",profile);
if (!rel_470_delta_TamiflexConstructorCallGraphEdge->empty()&&!rel_232_ActualParam->empty()&&!rel_32_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_470_delta_TamiflexConstructorCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_470_delta_TamiflexConstructorCallGraphEdge_op_ctxt,rel_470_delta_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt,rel_474_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt,rel_472_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_232_ActualParam_op_ctxt,rel_232_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_32_FormalParam_op_ctxt,rel_32_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_232_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_232_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[3],0});
auto range = rel_32_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_32_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_472_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env0[2],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[2]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_474_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_474_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2871:1-2874:36];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     @delta_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    _ActualParam(0,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2871:1-2874:36];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),\n   _ActualParam(0,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal).;)" <<  rel_474_new_TamiflexInvocationFirstParam->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2864:1-0:0];)" <<  rel_474_new_TamiflexInvocationFirstParam->size() << std::endl;
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2875:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- 
   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationArgumentArrayValue;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_473_delta_TamiflexInvocationFirstParam->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_473_delta_TamiflexInvocationFirstParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_473_delta_TamiflexInvocationFirstParam_op_ctxt,rel_473_delta_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_477_new_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_477_new_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_475_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_475_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_391_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_475_TamiflexInvocationArgumentArrayValue->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_475_TamiflexInvocationArgumentArrayValue_op_ctxt))) && (!rel_392_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_477_new_TamiflexInvocationArgumentArrayValue->insert(tuple,READ_OP_CONTEXT(rel_477_new_TamiflexInvocationArgumentArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];@new_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :-     @delta_TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexInvocationArgumentArrayValue;0;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_477_new_TamiflexInvocationArgumentArrayValue->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- 
   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),
   VarPointsTo(?basehctx,?basevalue,?ctx,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51])_");
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationArgumentArrayValue;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_392_delta_VarPointsTo->empty()&&!rel_472_TamiflexInvocationFirstParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_472_TamiflexInvocationFirstParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt,rel_392_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_477_new_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_477_new_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_475_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_475_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_472_TamiflexInvocationFirstParam_op_ctxt,rel_472_TamiflexInvocationFirstParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_392_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_392_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_475_TamiflexInvocationArgumentArrayValue->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_475_TamiflexInvocationArgumentArrayValue_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_477_new_TamiflexInvocationArgumentArrayValue->insert(tuple,READ_OP_CONTEXT(rel_477_new_TamiflexInvocationArgumentArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;@new_TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];@new_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :-     TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-rule;TamiflexInvocationArgumentArrayValue;1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2877:1-2879:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_477_new_TamiflexInvocationArgumentArrayValue->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2875:1-0:0];)" <<  rel_477_new_TamiflexInvocationArgumentArrayValue->size() << std::endl;
}SECTION_END
SECTIONS_END;
if(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((rel_336_new_ForcedReachableAndroidContext->empty()) && (rel_339_new_ReachableApplicationObjectOfType->empty()))) && (rel_342_new_ApplicationObjectFlowingToLibrary->empty()))) && (rel_345_new_PublicOnMethodOfReachableListener->empty()))) && (rel_348_new_LibraryReachableAppListenerType->empty()))) && (rel_351_new_ProtectedOnMethodOfReachableListener->empty()))) && (rel_354_new_OverridingProtectedOnMethodOfReachableListener->empty()))) && (rel_357_new_FormalOfForcedReachableContext->empty()))) && (rel_360_new_ApplicationObjectFlowingToLibraryStaticType->empty()))) && (rel_363_new_InitializedClass->empty()))) && (rel_366_new_Instruction_Throws->empty()))) && (rel_369_new_ThrowPointsTo->empty()))) && (rel_372_new_RunningThread->empty()))) && (rel_375_new_ReachableCurrentThreadInvocation->empty()))) && (rel_378_new_isContext->empty()))) && (rel_381_new_isHContext->empty()))) && (rel_384_new_ImmutableContextFromHContext->empty()))) && (rel_387_new_ImmutableHContextFromContext->empty()))) && (rel_390_new_ImmutableContextFromContext->empty()))) && (rel_393_new_VarPointsTo->empty()))) && (rel_396_new_InstanceFieldPointsTo->empty()))) && (rel_399_new_StaticFieldPointsTo->empty()))) && (rel_402_new_ArrayIndexPointsTo->empty()))) && (rel_405_new_CallGraphEdge->empty()))) && (rel_408_new_Reachable->empty()))) && (rel_411_new_ReachableContext->empty()))) && (rel_414_new_OptInterproceduralAssign->empty()))) && (rel_417_new_OptStoreIntoArray->empty()))) && (rel_420_new_LoadHeapInstanceField->empty()))) && (rel_423_new_StoreHeapInstanceField->empty()))) && (rel_426_new_LoadHeapArrayIndex->empty()))) && (rel_429_new_StoreHeapArrayIndex->empty()))) && (rel_432_new_AbstractCallGraphEdge->empty()))) && (rel_435_new_AbstractThrowPointsTo->empty()))) && (rel_438_new_OptAssignCast->empty()))) && (rel_441_new_ReachableStoreStaticFieldFrom->empty()))) && (rel_444_new_OptLoadHeapArrayIndex->empty()))) && (rel_447_new_Temp1->empty()))) && (rel_450_new_Temp2->empty()))) && (rel_453_new_ReachableLoadArrayIndexBase->empty()))) && (rel_456_new_ReachableStoreArrayIndexBase->empty()))) && (rel_459_new_OptVirtualMethodInvocationBase->empty()))) && (rel_462_new_OptSpecialMethodInvocationBase->empty()))) && (rel_465_new_Tamiflex_Invoke->empty()))) && (rel_468_new_TamiflexCallGraphEdge->empty()))) && (rel_471_new_TamiflexConstructorCallGraphEdge->empty()))) && (rel_474_new_TamiflexInvocationFirstParam->empty()))) && (rel_477_new_TamiflexInvocationArgumentArrayValue->empty()))) break;
{
	RamLogger logger(R"(@c-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1259:1-0:0];)",profile);
rel_334_ForcedReachableAndroidContext->insertAll(*rel_336_new_ForcedReachableAndroidContext);
{
auto rel_0 = rel_335_delta_ForcedReachableAndroidContext;
rel_335_delta_ForcedReachableAndroidContext = rel_336_new_ForcedReachableAndroidContext;
rel_336_new_ForcedReachableAndroidContext = rel_0;
}
rel_336_new_ForcedReachableAndroidContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1263:1-0:0];)",profile);
rel_337_ReachableApplicationObjectOfType->insertAll(*rel_339_new_ReachableApplicationObjectOfType);
{
auto rel_0 = rel_338_delta_ReachableApplicationObjectOfType;
rel_338_delta_ReachableApplicationObjectOfType = rel_339_new_ReachableApplicationObjectOfType;
rel_339_new_ReachableApplicationObjectOfType = rel_0;
}
rel_339_new_ReachableApplicationObjectOfType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1264:1-0:0];)",profile);
rel_340_ApplicationObjectFlowingToLibrary->insertAll(*rel_342_new_ApplicationObjectFlowingToLibrary);
{
auto rel_0 = rel_341_delta_ApplicationObjectFlowingToLibrary;
rel_341_delta_ApplicationObjectFlowingToLibrary = rel_342_new_ApplicationObjectFlowingToLibrary;
rel_342_new_ApplicationObjectFlowingToLibrary = rel_0;
}
rel_342_new_ApplicationObjectFlowingToLibrary->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1265:1-0:0];)",profile);
rel_343_PublicOnMethodOfReachableListener->insertAll(*rel_345_new_PublicOnMethodOfReachableListener);
{
auto rel_0 = rel_344_delta_PublicOnMethodOfReachableListener;
rel_344_delta_PublicOnMethodOfReachableListener = rel_345_new_PublicOnMethodOfReachableListener;
rel_345_new_PublicOnMethodOfReachableListener = rel_0;
}
rel_345_new_PublicOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1267:1-0:0];)",profile);
rel_346_LibraryReachableAppListenerType->insertAll(*rel_348_new_LibraryReachableAppListenerType);
{
auto rel_0 = rel_347_delta_LibraryReachableAppListenerType;
rel_347_delta_LibraryReachableAppListenerType = rel_348_new_LibraryReachableAppListenerType;
rel_348_new_LibraryReachableAppListenerType = rel_0;
}
rel_348_new_LibraryReachableAppListenerType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1268:1-0:0];)",profile);
rel_349_ProtectedOnMethodOfReachableListener->insertAll(*rel_351_new_ProtectedOnMethodOfReachableListener);
{
auto rel_0 = rel_350_delta_ProtectedOnMethodOfReachableListener;
rel_350_delta_ProtectedOnMethodOfReachableListener = rel_351_new_ProtectedOnMethodOfReachableListener;
rel_351_new_ProtectedOnMethodOfReachableListener = rel_0;
}
rel_351_new_ProtectedOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1269:1-0:0];)",profile);
rel_352_OverridingProtectedOnMethodOfReachableListener->insertAll(*rel_354_new_OverridingProtectedOnMethodOfReachableListener);
{
auto rel_0 = rel_353_delta_OverridingProtectedOnMethodOfReachableListener;
rel_353_delta_OverridingProtectedOnMethodOfReachableListener = rel_354_new_OverridingProtectedOnMethodOfReachableListener;
rel_354_new_OverridingProtectedOnMethodOfReachableListener = rel_0;
}
rel_354_new_OverridingProtectedOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1272:1-0:0];)",profile);
rel_355_FormalOfForcedReachableContext->insertAll(*rel_357_new_FormalOfForcedReachableContext);
{
auto rel_0 = rel_356_delta_FormalOfForcedReachableContext;
rel_356_delta_FormalOfForcedReachableContext = rel_357_new_FormalOfForcedReachableContext;
rel_357_new_FormalOfForcedReachableContext = rel_0;
}
rel_357_new_FormalOfForcedReachableContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1273:1-0:0];)",profile);
rel_358_ApplicationObjectFlowingToLibraryStaticType->insertAll(*rel_360_new_ApplicationObjectFlowingToLibraryStaticType);
{
auto rel_0 = rel_359_delta_ApplicationObjectFlowingToLibraryStaticType;
rel_359_delta_ApplicationObjectFlowingToLibraryStaticType = rel_360_new_ApplicationObjectFlowingToLibraryStaticType;
rel_360_new_ApplicationObjectFlowingToLibraryStaticType = rel_0;
}
rel_360_new_ApplicationObjectFlowingToLibraryStaticType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1278:1-0:0];)",profile);
rel_361_InitializedClass->insertAll(*rel_363_new_InitializedClass);
{
auto rel_0 = rel_362_delta_InitializedClass;
rel_362_delta_InitializedClass = rel_363_new_InitializedClass;
rel_363_new_InitializedClass = rel_0;
}
rel_363_new_InitializedClass->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1279:1-0:0];)",profile);
rel_364_Instruction_Throws->insertAll(*rel_366_new_Instruction_Throws);
{
auto rel_0 = rel_365_delta_Instruction_Throws;
rel_365_delta_Instruction_Throws = rel_366_new_Instruction_Throws;
rel_366_new_Instruction_Throws = rel_0;
}
rel_366_new_Instruction_Throws->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1300:1-0:0];)",profile);
rel_367_ThrowPointsTo->insertAll(*rel_369_new_ThrowPointsTo);
{
auto rel_0 = rel_368_delta_ThrowPointsTo;
rel_368_delta_ThrowPointsTo = rel_369_new_ThrowPointsTo;
rel_369_new_ThrowPointsTo = rel_0;
}
rel_369_new_ThrowPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1308:1-0:0];)",profile);
rel_370_RunningThread->insertAll(*rel_372_new_RunningThread);
{
auto rel_0 = rel_371_delta_RunningThread;
rel_371_delta_RunningThread = rel_372_new_RunningThread;
rel_372_new_RunningThread = rel_0;
}
rel_372_new_RunningThread->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1309:1-0:0];)",profile);
rel_373_ReachableCurrentThreadInvocation->insertAll(*rel_375_new_ReachableCurrentThreadInvocation);
{
auto rel_0 = rel_374_delta_ReachableCurrentThreadInvocation;
rel_374_delta_ReachableCurrentThreadInvocation = rel_375_new_ReachableCurrentThreadInvocation;
rel_375_new_ReachableCurrentThreadInvocation = rel_0;
}
rel_375_new_ReachableCurrentThreadInvocation->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1322:1-0:0];)",profile);
rel_376_isContext->insertAll(*rel_378_new_isContext);
{
auto rel_0 = rel_377_delta_isContext;
rel_377_delta_isContext = rel_378_new_isContext;
rel_378_new_isContext = rel_0;
}
rel_378_new_isContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1323:1-0:0];)",profile);
rel_379_isHContext->insertAll(*rel_381_new_isHContext);
{
auto rel_0 = rel_380_delta_isHContext;
rel_380_delta_isHContext = rel_381_new_isHContext;
rel_381_new_isHContext = rel_0;
}
rel_381_new_isHContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1330:1-0:0];)",profile);
rel_382_ImmutableContextFromHContext->insertAll(*rel_384_new_ImmutableContextFromHContext);
{
auto rel_0 = rel_383_delta_ImmutableContextFromHContext;
rel_383_delta_ImmutableContextFromHContext = rel_384_new_ImmutableContextFromHContext;
rel_384_new_ImmutableContextFromHContext = rel_0;
}
rel_384_new_ImmutableContextFromHContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1331:1-0:0];)",profile);
rel_385_ImmutableHContextFromContext->insertAll(*rel_387_new_ImmutableHContextFromContext);
{
auto rel_0 = rel_386_delta_ImmutableHContextFromContext;
rel_386_delta_ImmutableHContextFromContext = rel_387_new_ImmutableHContextFromContext;
rel_387_new_ImmutableHContextFromContext = rel_0;
}
rel_387_new_ImmutableHContextFromContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1332:1-0:0];)",profile);
rel_388_ImmutableContextFromContext->insertAll(*rel_390_new_ImmutableContextFromContext);
{
auto rel_0 = rel_389_delta_ImmutableContextFromContext;
rel_389_delta_ImmutableContextFromContext = rel_390_new_ImmutableContextFromContext;
rel_390_new_ImmutableContextFromContext = rel_0;
}
rel_390_new_ImmutableContextFromContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1337:1-0:0];)",profile);
rel_391_VarPointsTo->insertAll(*rel_393_new_VarPointsTo);
{
auto rel_0 = rel_392_delta_VarPointsTo;
rel_392_delta_VarPointsTo = rel_393_new_VarPointsTo;
rel_393_new_VarPointsTo = rel_0;
}
rel_393_new_VarPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1338:1-0:0];)",profile);
rel_394_InstanceFieldPointsTo->insertAll(*rel_396_new_InstanceFieldPointsTo);
{
auto rel_0 = rel_395_delta_InstanceFieldPointsTo;
rel_395_delta_InstanceFieldPointsTo = rel_396_new_InstanceFieldPointsTo;
rel_396_new_InstanceFieldPointsTo = rel_0;
}
rel_396_new_InstanceFieldPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1339:1-0:0];)",profile);
rel_397_StaticFieldPointsTo->insertAll(*rel_399_new_StaticFieldPointsTo);
{
auto rel_0 = rel_398_delta_StaticFieldPointsTo;
rel_398_delta_StaticFieldPointsTo = rel_399_new_StaticFieldPointsTo;
rel_399_new_StaticFieldPointsTo = rel_0;
}
rel_399_new_StaticFieldPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1340:1-0:0];)",profile);
rel_400_ArrayIndexPointsTo->insertAll(*rel_402_new_ArrayIndexPointsTo);
{
auto rel_0 = rel_401_delta_ArrayIndexPointsTo;
rel_401_delta_ArrayIndexPointsTo = rel_402_new_ArrayIndexPointsTo;
rel_402_new_ArrayIndexPointsTo = rel_0;
}
rel_402_new_ArrayIndexPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1342:1-0:0];)",profile);
rel_403_CallGraphEdge->insertAll(*rel_405_new_CallGraphEdge);
{
auto rel_0 = rel_404_delta_CallGraphEdge;
rel_404_delta_CallGraphEdge = rel_405_new_CallGraphEdge;
rel_405_new_CallGraphEdge = rel_0;
}
rel_405_new_CallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1343:1-0:0];)",profile);
rel_406_Reachable->insertAll(*rel_408_new_Reachable);
{
auto rel_0 = rel_407_delta_Reachable;
rel_407_delta_Reachable = rel_408_new_Reachable;
rel_408_new_Reachable = rel_0;
}
rel_408_new_Reachable->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1345:1-0:0];)",profile);
rel_409_ReachableContext->insertAll(*rel_411_new_ReachableContext);
{
auto rel_0 = rel_410_delta_ReachableContext;
rel_410_delta_ReachableContext = rel_411_new_ReachableContext;
rel_411_new_ReachableContext = rel_0;
}
rel_411_new_ReachableContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1350:1-0:0];)",profile);
rel_412_OptInterproceduralAssign->insertAll(*rel_414_new_OptInterproceduralAssign);
{
auto rel_0 = rel_413_delta_OptInterproceduralAssign;
rel_413_delta_OptInterproceduralAssign = rel_414_new_OptInterproceduralAssign;
rel_414_new_OptInterproceduralAssign = rel_0;
}
rel_414_new_OptInterproceduralAssign->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1355:1-0:0];)",profile);
rel_415_OptStoreIntoArray->insertAll(*rel_417_new_OptStoreIntoArray);
{
auto rel_0 = rel_416_delta_OptStoreIntoArray;
rel_416_delta_OptStoreIntoArray = rel_417_new_OptStoreIntoArray;
rel_417_new_OptStoreIntoArray = rel_0;
}
rel_417_new_OptStoreIntoArray->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1356:1-0:0];)",profile);
rel_418_LoadHeapInstanceField->insertAll(*rel_420_new_LoadHeapInstanceField);
{
auto rel_0 = rel_419_delta_LoadHeapInstanceField;
rel_419_delta_LoadHeapInstanceField = rel_420_new_LoadHeapInstanceField;
rel_420_new_LoadHeapInstanceField = rel_0;
}
rel_420_new_LoadHeapInstanceField->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1357:1-0:0];)",profile);
rel_421_StoreHeapInstanceField->insertAll(*rel_423_new_StoreHeapInstanceField);
{
auto rel_0 = rel_422_delta_StoreHeapInstanceField;
rel_422_delta_StoreHeapInstanceField = rel_423_new_StoreHeapInstanceField;
rel_423_new_StoreHeapInstanceField = rel_0;
}
rel_423_new_StoreHeapInstanceField->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1358:1-0:0];)",profile);
rel_424_LoadHeapArrayIndex->insertAll(*rel_426_new_LoadHeapArrayIndex);
{
auto rel_0 = rel_425_delta_LoadHeapArrayIndex;
rel_425_delta_LoadHeapArrayIndex = rel_426_new_LoadHeapArrayIndex;
rel_426_new_LoadHeapArrayIndex = rel_0;
}
rel_426_new_LoadHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1359:1-0:0];)",profile);
rel_427_StoreHeapArrayIndex->insertAll(*rel_429_new_StoreHeapArrayIndex);
{
auto rel_0 = rel_428_delta_StoreHeapArrayIndex;
rel_428_delta_StoreHeapArrayIndex = rel_429_new_StoreHeapArrayIndex;
rel_429_new_StoreHeapArrayIndex = rel_0;
}
rel_429_new_StoreHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;AbstractCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1634:1-0:0];)",profile);
rel_430_AbstractCallGraphEdge->insertAll(*rel_432_new_AbstractCallGraphEdge);
{
auto rel_0 = rel_431_delta_AbstractCallGraphEdge;
rel_431_delta_AbstractCallGraphEdge = rel_432_new_AbstractCallGraphEdge;
rel_432_new_AbstractCallGraphEdge = rel_0;
}
rel_432_new_AbstractCallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;AbstractThrowPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [1635:1-0:0];)",profile);
rel_433_AbstractThrowPointsTo->insertAll(*rel_435_new_AbstractThrowPointsTo);
{
auto rel_0 = rel_434_delta_AbstractThrowPointsTo;
rel_434_delta_AbstractThrowPointsTo = rel_435_new_AbstractThrowPointsTo;
rel_435_new_AbstractThrowPointsTo = rel_0;
}
rel_435_new_AbstractThrowPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2334:1-0:0];)",profile);
rel_436_OptAssignCast->insertAll(*rel_438_new_OptAssignCast);
{
auto rel_0 = rel_437_delta_OptAssignCast;
rel_437_delta_OptAssignCast = rel_438_new_OptAssignCast;
rel_438_new_OptAssignCast = rel_0;
}
rel_438_new_OptAssignCast->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2369:1-0:0];)",profile);
rel_439_ReachableStoreStaticFieldFrom->insertAll(*rel_441_new_ReachableStoreStaticFieldFrom);
{
auto rel_0 = rel_440_delta_ReachableStoreStaticFieldFrom;
rel_440_delta_ReachableStoreStaticFieldFrom = rel_441_new_ReachableStoreStaticFieldFrom;
rel_441_new_ReachableStoreStaticFieldFrom = rel_0;
}
rel_441_new_ReachableStoreStaticFieldFrom->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2377:1-0:0];)",profile);
rel_442_OptLoadHeapArrayIndex->insertAll(*rel_444_new_OptLoadHeapArrayIndex);
{
auto rel_0 = rel_443_delta_OptLoadHeapArrayIndex;
rel_443_delta_OptLoadHeapArrayIndex = rel_444_new_OptLoadHeapArrayIndex;
rel_444_new_OptLoadHeapArrayIndex = rel_0;
}
rel_444_new_OptLoadHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2378:1-0:0];)",profile);
rel_445_Temp1->insertAll(*rel_447_new_Temp1);
{
auto rel_0 = rel_446_delta_Temp1;
rel_446_delta_Temp1 = rel_447_new_Temp1;
rel_447_new_Temp1 = rel_0;
}
rel_447_new_Temp1->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2379:1-0:0];)",profile);
rel_448_Temp2->insertAll(*rel_450_new_Temp2);
{
auto rel_0 = rel_449_delta_Temp2;
rel_449_delta_Temp2 = rel_450_new_Temp2;
rel_450_new_Temp2 = rel_0;
}
rel_450_new_Temp2->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2407:1-0:0];)",profile);
rel_451_ReachableLoadArrayIndexBase->insertAll(*rel_453_new_ReachableLoadArrayIndexBase);
{
auto rel_0 = rel_452_delta_ReachableLoadArrayIndexBase;
rel_452_delta_ReachableLoadArrayIndexBase = rel_453_new_ReachableLoadArrayIndexBase;
rel_453_new_ReachableLoadArrayIndexBase = rel_0;
}
rel_453_new_ReachableLoadArrayIndexBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2426:1-0:0];)",profile);
rel_454_ReachableStoreArrayIndexBase->insertAll(*rel_456_new_ReachableStoreArrayIndexBase);
{
auto rel_0 = rel_455_delta_ReachableStoreArrayIndexBase;
rel_455_delta_ReachableStoreArrayIndexBase = rel_456_new_ReachableStoreArrayIndexBase;
rel_456_new_ReachableStoreArrayIndexBase = rel_0;
}
rel_456_new_ReachableStoreArrayIndexBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2444:1-0:0];)",profile);
rel_457_OptVirtualMethodInvocationBase->insertAll(*rel_459_new_OptVirtualMethodInvocationBase);
{
auto rel_0 = rel_458_delta_OptVirtualMethodInvocationBase;
rel_458_delta_OptVirtualMethodInvocationBase = rel_459_new_OptVirtualMethodInvocationBase;
rel_459_new_OptVirtualMethodInvocationBase = rel_0;
}
rel_459_new_OptVirtualMethodInvocationBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2464:1-0:0];)",profile);
rel_460_OptSpecialMethodInvocationBase->insertAll(*rel_462_new_OptSpecialMethodInvocationBase);
{
auto rel_0 = rel_461_delta_OptSpecialMethodInvocationBase;
rel_461_delta_OptSpecialMethodInvocationBase = rel_462_new_OptSpecialMethodInvocationBase;
rel_462_new_OptSpecialMethodInvocationBase = rel_0;
}
rel_462_new_OptSpecialMethodInvocationBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2671:1-0:0];)",profile);
rel_463_Tamiflex_Invoke->insertAll(*rel_465_new_Tamiflex_Invoke);
{
auto rel_0 = rel_464_delta_Tamiflex_Invoke;
rel_464_delta_Tamiflex_Invoke = rel_465_new_Tamiflex_Invoke;
rel_465_new_Tamiflex_Invoke = rel_0;
}
rel_465_new_Tamiflex_Invoke->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2800:1-0:0];)",profile);
rel_466_TamiflexCallGraphEdge->insertAll(*rel_468_new_TamiflexCallGraphEdge);
{
auto rel_0 = rel_467_delta_TamiflexCallGraphEdge;
rel_467_delta_TamiflexCallGraphEdge = rel_468_new_TamiflexCallGraphEdge;
rel_468_new_TamiflexCallGraphEdge = rel_0;
}
rel_468_new_TamiflexCallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2826:1-0:0];)",profile);
rel_469_TamiflexConstructorCallGraphEdge->insertAll(*rel_471_new_TamiflexConstructorCallGraphEdge);
{
auto rel_0 = rel_470_delta_TamiflexConstructorCallGraphEdge;
rel_470_delta_TamiflexConstructorCallGraphEdge = rel_471_new_TamiflexConstructorCallGraphEdge;
rel_471_new_TamiflexConstructorCallGraphEdge = rel_0;
}
rel_471_new_TamiflexConstructorCallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2864:1-0:0];)",profile);
rel_472_TamiflexInvocationFirstParam->insertAll(*rel_474_new_TamiflexInvocationFirstParam);
{
auto rel_0 = rel_473_delta_TamiflexInvocationFirstParam;
rel_473_delta_TamiflexInvocationFirstParam = rel_474_new_TamiflexInvocationFirstParam;
rel_474_new_TamiflexInvocationFirstParam = rel_0;
}
rel_474_new_TamiflexInvocationFirstParam->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2875:1-0:0];)",profile);
rel_475_TamiflexInvocationArgumentArrayValue->insertAll(*rel_477_new_TamiflexInvocationArgumentArrayValue);
{
auto rel_0 = rel_476_delta_TamiflexInvocationArgumentArrayValue;
rel_476_delta_TamiflexInvocationArgumentArrayValue = rel_477_new_TamiflexInvocationArgumentArrayValue;
rel_477_new_TamiflexInvocationArgumentArrayValue = rel_0;
}
rel_477_new_TamiflexInvocationArgumentArrayValue->purge();
}
}
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_335_delta_ForcedReachableAndroidContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_336_new_ForcedReachableAndroidContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_338_delta_ReachableApplicationObjectOfType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_339_new_ReachableApplicationObjectOfType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_341_delta_ApplicationObjectFlowingToLibrary->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_342_new_ApplicationObjectFlowingToLibrary->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_344_delta_PublicOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_345_new_PublicOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_347_delta_LibraryReachableAppListenerType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_348_new_LibraryReachableAppListenerType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_350_delta_ProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_351_new_ProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_353_delta_OverridingProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_354_new_OverridingProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_356_delta_FormalOfForcedReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_357_new_FormalOfForcedReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_360_new_ApplicationObjectFlowingToLibraryStaticType->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_362_delta_InitializedClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_363_new_InitializedClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_365_delta_Instruction_Throws->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_366_new_Instruction_Throws->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_368_delta_ThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_369_new_ThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_371_delta_RunningThread->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_372_new_RunningThread->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_374_delta_ReachableCurrentThreadInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_375_new_ReachableCurrentThreadInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_377_delta_isContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_378_new_isContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_380_delta_isHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_381_new_isHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_383_delta_ImmutableContextFromHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_384_new_ImmutableContextFromHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_386_delta_ImmutableHContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_387_new_ImmutableHContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_389_delta_ImmutableContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_390_new_ImmutableContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_392_delta_VarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_393_new_VarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_395_delta_InstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_396_new_InstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_398_delta_StaticFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_399_new_StaticFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_401_delta_ArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_402_new_ArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_404_delta_CallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_405_new_CallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_407_delta_Reachable->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_408_new_Reachable->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_410_delta_ReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_411_new_ReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_413_delta_OptInterproceduralAssign->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_414_new_OptInterproceduralAssign->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_416_delta_OptStoreIntoArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_417_new_OptStoreIntoArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_419_delta_LoadHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_420_new_LoadHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_422_delta_StoreHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_423_new_StoreHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_425_delta_LoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_426_new_LoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_428_delta_StoreHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_429_new_StoreHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_431_delta_AbstractCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_432_new_AbstractCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_434_delta_AbstractThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_435_new_AbstractThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_437_delta_OptAssignCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_438_new_OptAssignCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_440_delta_ReachableStoreStaticFieldFrom->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_441_new_ReachableStoreStaticFieldFrom->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_443_delta_OptLoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_444_new_OptLoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_446_delta_Temp1->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_447_new_Temp1->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_449_delta_Temp2->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_450_new_Temp2->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_452_delta_ReachableLoadArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_453_new_ReachableLoadArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_455_delta_ReachableStoreArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_456_new_ReachableStoreArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_458_delta_OptVirtualMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_459_new_OptVirtualMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_461_delta_OptSpecialMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_462_new_OptSpecialMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_464_delta_Tamiflex_Invoke->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_465_new_Tamiflex_Invoke->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_467_delta_TamiflexCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_468_new_TamiflexCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_470_delta_TamiflexConstructorCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_471_new_TamiflexConstructorCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_473_delta_TamiflexInvocationFirstParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_474_new_TamiflexInvocationFirstParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_476_delta_TamiflexInvocationArgumentArrayValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 1)) rel_477_new_TamiflexInvocationArgumentArrayValue->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Instruction_Throws.csv"},{"name","Instruction_Throws"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_364_Instruction_Throws);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./ThrowPointsTo.csv"},{"name","ThrowPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_367_ThrowPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./VarPointsTo.csv"},{"name","VarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_391_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./CallGraphEdge.csv"},{"name","CallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_403_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Reachable.csv"},{"name","Reachable"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_406_Reachable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./StoreHeapInstanceField.csv"},{"name","StoreHeapInstanceField"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_421_StoreHeapInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./OptVirtualMethodInvocationBase.csv"},{"name","OptVirtualMethodInvocationBase"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_457_OptVirtualMethodInvocationBase);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_126_isArrayType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_276_ConcreteClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_227_isField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_215_Field_DeclaringType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_84_isMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_74_Method_DeclaringType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_76_Method_SimpleName->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_238_isVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_241_Var_Type->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_112_isHeapAllocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_113_HeapAllocation_Type->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_305_MainMethodArgArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_306_MainMethodArgArrayContent->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_51_isStaticMethodInvocation_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_22_AssignInstruction_To->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_19_AssignNumConstant_Id->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_9_AssignCastNumConstant_Id->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_91_MethodInvocation_Method->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_217_AssignReturnValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_97_SpecialMethodInvocation_Base->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_313_ExceptionHandler_Type->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_308_ExceptionHandler_FormalParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_69_Throw->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_234_LoadInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_233_StoreInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_228_LoadStaticField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_239_StoreStaticField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_246_LoadArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_244_StoreArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_240_AssignLocal->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_94_AssignNull->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_150_AssignHeapAllocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_88_ReturnVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_99_VirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_92_StaticMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_125_ComponentType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_232_ActualParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_128_DirectSuperclass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_32_FormalParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_79_Method_Modifier->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_117_ApplicationClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_82_ThisVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_72_CallbackMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_294_FieldInitialValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_107_Dacapo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_222_Tamiflex_ReflectionMap->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_153_MethodLookup->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_157_AllocatedObjectSupportsFinalize->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_242_ResolveInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_183_SubtypeOf->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_231_MainMethodDeclaration->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_193_AndroidApplicationListenerClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_159_MethodDeclaredOrInherited->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_163_PublicMethodOfComponent->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_190_AppMethodOverridesAndroidLibraryMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_191_OverridingProtectedMethodOfComponent->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_334_ForcedReachableAndroidContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_290_PublicOnMethodOfLayoutControl->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_288_OverridingProtectedOnMethodOfLayoutControl->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_337_ReachableApplicationObjectOfType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_340_ApplicationObjectFlowingToLibrary->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_343_PublicOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_346_LibraryReachableAppListenerType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_349_ProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_352_OverridingProtectedOnMethodOfReachableListener->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_292_ReifiedAndroidObjectValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_355_FormalOfForcedReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_358_ApplicationObjectFlowingToLibraryStaticType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_235_VarsAtInvocationRetrievingView->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_293_ViewObjectValueFromId->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_81_ClassInitializer->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_361_InitializedClass->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_364_Instruction_Throws->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_328_replace_cge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_327_replace_tpt->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_329_HasItsc->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_330_Itsc->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_312_ExceptionHandler_InRange->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_367_ThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_322_ExceptionHandler_SameInsn_Repr->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_324_ExceptionHandler_SameBlock_Repr->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_325_ExceptionHandler_TypeIsCaught->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_319_ExceptionHandler_Impossible->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_283_ImplicitReachable->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_370_RunningThread->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_373_ReachableCurrentThreadInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_158_FakeInvocation_RegisterFinalize0->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_301_Value_Num->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_304_NotSpecialObject->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_376_isContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_379_isHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_326_isImmutableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_332_isInitialContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_333_isJVMStartupContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_331_isClinitContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_277_isImmutableHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_382_ImmutableContextFromHContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_385_ImmutableHContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_388_ImmutableContextFromContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_412_OptInterproceduralAssign->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_247_OptLoadArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_245_OptStoreArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_415_OptStoreIntoArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_418_LoadHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_421_StoreHeapInstanceField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_424_LoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_427_StoreHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_211_AssignContextInsensitiveHeapAllocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_298_SystemThreadGroup->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_297_MainThreadGroup->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_296_MainThread->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_430_AbstractCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_433_AbstractThrowPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_209_HeapAllocation_Merge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_436_OptAssignCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_439_ReachableStoreStaticFieldFrom->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_442_OptLoadHeapArrayIndex->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_445_Temp1->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_448_Temp2->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_303_NotEmptyArrayValue->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_451_ReachableLoadArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_454_ReachableStoreArrayIndexBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_457_OptVirtualMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_460_OptSpecialMethodInvocationBase->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_299_ObjectShouldNotBeRefined->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_243_SiteShouldNotBeRefined->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_273_MockObjectForComponentType->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_275_MockForFormal->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_281_MockObjectContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_278_ContextForEntryPoint->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_280_HContextForEntryPoint->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_279_ReceiverPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_253_Tamiflex_Class_NewInstance->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_251_Tamiflex_Constructor_NewInstance->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_252_Tamiflex_Array_NewInstance->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_463_Tamiflex_Invoke->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_229_Tamiflex_ReifiedField->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_223_Tamiflex_ReifiedFieldArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_224_Tamiflex_ReifiedMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_225_Tamiflex_ReifiedMethodArray->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_466_TamiflexCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_93_OptForNameInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_469_TamiflexConstructorCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_472_TamiflexInvocationFirstParam->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_475_TamiflexInvocationArgumentArrayValue->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2912:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :- 
   ApplicationMethod(?meth),
   AssignNormalHeapAllocation(?basevalue,_,?meth),
   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_400_ArrayIndexPointsTo->empty()&&!rel_213_AssignNormalHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_478_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt,rel_478_Stats_Simple_Application_ArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_213_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env1[0]});
auto range = rel_400_ArrayIndexPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_478_Stats_Simple_Application_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_478_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)" <<  rel_478_Stats_Simple_Application_ArrayIndexPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2912:1-0:0];)" <<  rel_478_Stats_Simple_Application_ArrayIndexPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_ArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_478_Stats_Simple_Application_ArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2926:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensReachableApplicationMethod(?method) :- 
   ApplicationMethod(?method),
   ReachableContext(?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_InsensReachableApplicationMethod(?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_479_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_479_Stats_Simple_InsensReachableApplicationMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_479_Stats_Simple_InsensReachableApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_479_Stats_Simple_InsensReachableApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_InsensReachableApplicationMethod(?method) :-     ApplicationMethod(?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_InsensReachableApplicationMethod(?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_479_Stats_Simple_InsensReachableApplicationMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2926:1-0:0];)" <<  rel_479_Stats_Simple_InsensReachableApplicationMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableApplicationMethod.csv"},{"name","Stats_Simple_InsensReachableApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_479_Stats_Simple_InsensReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2936:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :- 
   Stats_Simple_InsensReachableApplicationMethod(?method),
   Instruction_Method(?invocation,?method),
   isVirtualMethodInvocation_Insn(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3013:1-3016:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3013:1-3016:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_InsensReachableApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_479_Stats_Simple_InsensReachableApplicationMethod->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_479_Stats_Simple_InsensReachableApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_479_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_479_Stats_Simple_InsensReachableApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_98_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3013:1-3016:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :-     Stats_Simple_InsensReachableApplicationMethod(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3013:1-3016:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_InsensReachableApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2936:1-0:0];)" <<  rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_ReachableVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2932:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_NonReachableApplicationConcreteMethod(?method) :- 
   Stats_Simple_ApplicationConcreteMethod(?method),
   !Stats_Simple_InsensReachableApplicationMethod(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3006:1-3008:59])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3006:1-3008:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :- \n   Stats_Simple_ApplicationConcreteMethod(?method),\n   !Stats_Simple_InsensReachableApplicationMethod(?method).;)",profile);
if (!rel_121_Stats_Simple_ApplicationConcreteMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_121_Stats_Simple_ApplicationConcreteMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_121_Stats_Simple_ApplicationConcreteMethod_op_ctxt,rel_121_Stats_Simple_ApplicationConcreteMethod->createContext());
CREATE_OP_CONTEXT(rel_479_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_479_Stats_Simple_InsensReachableApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_481_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt,rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( !rel_479_Stats_Simple_InsensReachableApplicationMethod->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_479_Stats_Simple_InsensReachableApplicationMethod_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->insert(tuple,READ_OP_CONTEXT(rel_481_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3006:1-3008:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :-     Stats_Simple_ApplicationConcreteMethod(?method),    !Stats_Simple_InsensReachableApplicationMethod(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3006:1-3008:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :- \n   Stats_Simple_ApplicationConcreteMethod(?method),\n   !Stats_Simple_InsensReachableApplicationMethod(?method).;)" <<  rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2932:1-0:0];)" <<  rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NonReachableApplicationConcreteMethod.csv"},{"name","Stats_Simple_NonReachableApplicationConcreteMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_481_Stats_Simple_NonReachableApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_479_Stats_Simple_InsensReachableApplicationMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_121_Stats_Simple_ApplicationConcreteMethod->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2896:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensVarPointsTo(?value,?var) :- 
   VarPointsTo(_,?value,_,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2965:1-2966:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2965:1-2966:35];Stats_Simple_InsensVarPointsTo(?value,?var) :- \n   VarPointsTo(_,?value,_,?var).;)",profile);
if (!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_482_Stats_Simple_InsensVarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2965:1-2966:35];Stats_Simple_InsensVarPointsTo(?value,?var) :-     VarPointsTo(_,?value,_,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2965:1-2966:35];Stats_Simple_InsensVarPointsTo(?value,?var) :- \n   VarPointsTo(_,?value,_,?var).;)" <<  rel_482_Stats_Simple_InsensVarPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2896:1-0:0];)" <<  rel_482_Stats_Simple_InsensVarPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensVarPointsTo.csv"},{"name","Stats_Simple_InsensVarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_482_Stats_Simple_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2951:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :- 
   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation_Base(?invocation,?base),
   !Stats_Simple_InsensVarPointsTo(_,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3044:1-3047:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3044:1-3047:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)",profile);
if (!rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt,rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( rel_482_Stats_Simple_InsensVarPointsTo->equalRange<1>(Tuple<RamDomain,2>({0,env1[1]}),READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3044:1-3047:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :-     Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),    VirtualMethodInvocation_Base(?invocation,?base),    !Stats_Simple_InsensVarPointsTo(_,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3044:1-3047:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)" <<  rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2951:1-0:0];)" <<  rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_EmptyVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2949:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :- 
   HeapAllocation_Null(?null),
   Stats_Simple_InsensVarPointsTo(?null,?base),
   VirtualMethodInvocation_Base(?invocation,?base),
   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3039:1-3043:74])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3039:1-3043:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;)",profile);
if (!rel_104_HeapAllocation_Null->empty()&&!rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_482_Stats_Simple_InsensVarPointsTo->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_104_HeapAllocation_Null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_484_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt,rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_482_Stats_Simple_InsensVarPointsTo->equalRange<0>(key,READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<1>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_484_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3039:1-3043:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :-     HeapAllocation_Null(?null),    Stats_Simple_InsensVarPointsTo(?null,?base),    VirtualMethodInvocation_Base(?invocation,?base),    Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3039:1-3043:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;)" <<  rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2949:1-0:0];)" <<  rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_NullVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_484_Stats_Simple_Application_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2898:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_AssignedVariable(?var) :- 
   Stats_Simple_InsensVarPointsTo(_,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2967:1-2968:43])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2967:1-2968:43];Stats_Simple_AssignedVariable(?var) :- \n   Stats_Simple_InsensVarPointsTo(_,?var).;)",profile);
if (!rel_482_Stats_Simple_InsensVarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_482_Stats_Simple_InsensVarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_485_Stats_Simple_AssignedVariable_op_ctxt,rel_485_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_Stats_Simple_AssignedVariable->insert(tuple,READ_OP_CONTEXT(rel_485_Stats_Simple_AssignedVariable_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2967:1-2968:43];Stats_Simple_AssignedVariable(?var) :-     Stats_Simple_InsensVarPointsTo(_,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2967:1-2968:43];Stats_Simple_AssignedVariable(?var) :- \n   Stats_Simple_InsensVarPointsTo(_,?var).;)" <<  rel_485_Stats_Simple_AssignedVariable->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2898:1-0:0];)" <<  rel_485_Stats_Simple_AssignedVariable->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_AssignedVariable.csv"},{"name","Stats_Simple_AssignedVariable"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_485_Stats_Simple_AssignedVariable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2953:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :- 
   Stats_Simple_AssignedVariable(?from),
   AssignCast(?type,?from,?to,?inmethod),
   Reachable(?inmethod).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3048:1-3051:24])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3048:1-3051:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :- \n   Stats_Simple_AssignedVariable(?from),\n   AssignCast(?type,?from,?to,?inmethod),\n   Reachable(?inmethod).;)",profile);
if (!rel_96_AssignCast->empty()&&!rel_406_Reachable->empty()&&!rel_485_Stats_Simple_AssignedVariable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_485_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_96_AssignCast_op_ctxt,rel_96_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_485_Stats_Simple_AssignedVariable_op_ctxt,rel_485_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt,rel_486_Stats_Simple_ReachableCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[0],0,0});
auto range = rel_96_AssignCast->equalRange<1>(key,READ_OP_CONTEXT(rel_96_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[3]});
auto range = rel_406_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_406_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[3]),(RamDomain)(env1[0]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_486_Stats_Simple_ReachableCast->insert(tuple,READ_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3048:1-3051:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :-     Stats_Simple_AssignedVariable(?from),    AssignCast(?type,?from,?to,?inmethod),    Reachable(?inmethod).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3048:1-3051:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :- \n   Stats_Simple_AssignedVariable(?from),\n   AssignCast(?type,?from,?to,?inmethod),\n   Reachable(?inmethod).;)" <<  rel_486_Stats_Simple_ReachableCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2953:1-0:0];)" <<  rel_486_Stats_Simple_ReachableCast->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableCast.csv"},{"name","Stats_Simple_ReachableCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_486_Stats_Simple_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2959:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :- 
   ApplicationMethod(?inmethod),
   Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3060:1-3062:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3060:1-3062:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :- \n   ApplicationMethod(?inmethod),\n   Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_486_Stats_Simple_ReachableCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_487_Stats_Simple_Application_ReachableCast_op_ctxt,rel_487_Stats_Simple_Application_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt,rel_486_Stats_Simple_ReachableCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({env0[0],0,0,0});
auto range = rel_486_Stats_Simple_ReachableCast->equalRange<0>(key,READ_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env1[3])});
if (!(rel_487_Stats_Simple_Application_ReachableCast->insert(tuple,READ_OP_CONTEXT(rel_487_Stats_Simple_Application_ReachableCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3060:1-3062:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :-     ApplicationMethod(?inmethod),    Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3060:1-3062:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :- \n   ApplicationMethod(?inmethod),\n   Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;)" <<  rel_487_Stats_Simple_Application_ReachableCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2959:1-0:0];)" <<  rel_487_Stats_Simple_Application_ReachableCast->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableCast.csv"},{"name","Stats_Simple_Application_ReachableCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_487_Stats_Simple_Application_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2963:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :- 
   Stats_Simple_Application_ReachableCast(_,?type,?to,?from),
   Stats_Simple_InsensVarPointsTo(?value,?from),
   Value_Type(?value,?valuetype),
   !SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3066:1-3070:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3066:1-3070:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_Application_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_487_Stats_Simple_Application_ReachableCast->empty()&&!rel_482_Stats_Simple_InsensVarPointsTo->empty()&&!rel_300_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_Stats_Simple_Application_ReachableCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_488_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt,rel_488_Stats_Simple_Application_PotentiallyFailingCast->createContext());
CREATE_OP_CONTEXT(rel_487_Stats_Simple_Application_ReachableCast_op_ctxt,rel_487_Stats_Simple_Application_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_482_Stats_Simple_InsensVarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_189_SupertypeOf->contains(Tuple<RamDomain,2>({env0[1],env2[1]}),READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3]),(RamDomain)(env0[2])});
if (!(rel_488_Stats_Simple_Application_PotentiallyFailingCast->insert(tuple,READ_OP_CONTEXT(rel_488_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3066:1-3070:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :-     Stats_Simple_Application_ReachableCast(_,?type,?to,?from),    Stats_Simple_InsensVarPointsTo(?value,?from),    Value_Type(?value,?valuetype),    !SupertypeOf(?type,?valuetype).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3066:1-3070:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_Application_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)" <<  rel_488_Stats_Simple_Application_PotentiallyFailingCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2963:1-0:0];)" <<  rel_488_Stats_Simple_Application_PotentiallyFailingCast->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PotentiallyFailingCast.csv"},{"name","Stats_Simple_Application_PotentiallyFailingCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_488_Stats_Simple_Application_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2955:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :- 
   Stats_Simple_ReachableCast(_,?type,?to,?from),
   Stats_Simple_InsensVarPointsTo(?value,?from),
   Value_Type(?value,?valuetype),
   !SupertypeOf(?type,?valuetype).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3052:1-3056:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3052:1-3056:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_482_Stats_Simple_InsensVarPointsTo->empty()&&!rel_486_Stats_Simple_ReachableCast->empty()&&!rel_300_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_486_Stats_Simple_ReachableCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_489_Stats_Simple_PotentiallyFailingCast_op_ctxt,rel_489_Stats_Simple_PotentiallyFailingCast->createContext());
CREATE_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt,rel_486_Stats_Simple_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt,rel_189_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_300_Value_Type_op_ctxt,rel_300_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_482_Stats_Simple_InsensVarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_300_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_300_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_189_SupertypeOf->contains(Tuple<RamDomain,2>({env0[1],env2[1]}),READ_OP_CONTEXT(rel_189_SupertypeOf_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3]),(RamDomain)(env0[2])});
if (!(rel_489_Stats_Simple_PotentiallyFailingCast->insert(tuple,READ_OP_CONTEXT(rel_489_Stats_Simple_PotentiallyFailingCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3052:1-3056:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :-     Stats_Simple_ReachableCast(_,?type,?to,?from),    Stats_Simple_InsensVarPointsTo(?value,?from),    Value_Type(?value,?valuetype),    !SupertypeOf(?type,?valuetype).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3052:1-3056:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)" <<  rel_489_Stats_Simple_PotentiallyFailingCast->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2955:1-0:0];)" <<  rel_489_Stats_Simple_PotentiallyFailingCast->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PotentiallyFailingCast.csv"},{"name","Stats_Simple_PotentiallyFailingCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_489_Stats_Simple_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_189_SupertypeOf->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_300_Value_Type->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2904:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensReachableVar(?var) :- 
   Stats_Simple_AssignedVariable(?var),
   Var_DeclaringMethod(?var,?method),
   ReachableContext(?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_InsensReachableVar(?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_409_ReachableContext->empty()&&!rel_485_Stats_Simple_AssignedVariable->empty()&&!rel_248_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_485_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_485_Stats_Simple_AssignedVariable_op_ctxt,rel_485_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_490_Stats_Simple_InsensReachableVar_op_ctxt,rel_490_Stats_Simple_InsensReachableVar->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_248_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_490_Stats_Simple_InsensReachableVar->insert(tuple,READ_OP_CONTEXT(rel_490_Stats_Simple_InsensReachableVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_InsensReachableVar(?var) :-     Stats_Simple_AssignedVariable(?var),    Var_DeclaringMethod(?var,?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_InsensReachableVar(?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_490_Stats_Simple_InsensReachableVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2904:1-0:0];)" <<  rel_490_Stats_Simple_InsensReachableVar->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableVar.csv"},{"name","Stats_Simple_InsensReachableVar"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_490_Stats_Simple_InsensReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2906:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_ReachableVar(?ctx,?var) :- 
   Stats_Simple_AssignedVariable(?var),
   Var_DeclaringMethod(?var,?method),
   ReachableContext(?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_ReachableVar(?ctx,?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_409_ReachableContext->empty()&&!rel_485_Stats_Simple_AssignedVariable->empty()&&!rel_248_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_485_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_485_Stats_Simple_AssignedVariable_op_ctxt,rel_485_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_491_Stats_Simple_ReachableVar_op_ctxt,rel_491_Stats_Simple_ReachableVar->createContext());
CREATE_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt,rel_248_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_248_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_248_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0])});
if (!(rel_491_Stats_Simple_ReachableVar->insert(tuple,READ_OP_CONTEXT(rel_491_Stats_Simple_ReachableVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_ReachableVar(?ctx,?var) :-     Stats_Simple_AssignedVariable(?var),    Var_DeclaringMethod(?var,?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2973:1-2977:35];Stats_Simple_ReachableVar(?ctx,?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_491_Stats_Simple_ReachableVar->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2906:1-0:0];)" <<  rel_491_Stats_Simple_ReachableVar->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVar.csv"},{"name","Stats_Simple_ReachableVar"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_491_Stats_Simple_ReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_248_Var_DeclaringMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_485_Stats_Simple_AssignedVariable->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2910:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :- 
   ApplicationMethod(?meth),
   AssignNormalHeapAllocation(?basevalue,_,?meth),
   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_400_ArrayIndexPointsTo->empty()&&!rel_213_AssignNormalHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt,rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_213_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env1[0]});
auto range = rel_400_ArrayIndexPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[1]),(RamDomain)(env1[0])});
if (!(rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2980:1-2984:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)" <<  rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2910:1-0:0];)" <<  rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_InsensArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2918:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- 
   ApplicationMethod(?meth),
   AssignNormalHeapAllocation(?basevalue,_,?meth),
   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_213_AssignNormalHeapAllocation->empty()&&!rel_394_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt,rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_213_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,5> key({0,0,0,0,env1[0]});
auto range = rel_394_InstanceFieldPointsTo->equalRange<4>(key,READ_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)" <<  rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2918:1-0:0];)" <<  rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InsensInstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2900:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_InsensVarPointsTo(?value,?var) :- 
   ApplicationVar(?var),
   VarPointsTo(?hctx,?value,?ctx,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_249_ApplicationVar->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_249_ApplicationVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_249_ApplicationVar_op_ctxt,rel_249_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_494_Stats_Simple_Application_InsensVarPointsTo_op_ctxt,rel_494_Stats_Simple_Application_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_494_Stats_Simple_Application_InsensVarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_494_Stats_Simple_Application_InsensVarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :-     ApplicationVar(?var),    VarPointsTo(?hctx,?value,?ctx,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_494_Stats_Simple_Application_InsensVarPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2900:1-0:0];)" <<  rel_494_Stats_Simple_Application_InsensVarPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensVarPointsTo.csv"},{"name","Stats_Simple_Application_InsensVarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_494_Stats_Simple_Application_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2920:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :- 
   ApplicationMethod(?meth),
   AssignNormalHeapAllocation(?basevalue,_,?meth),
   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_213_AssignNormalHeapAllocation->empty()&&!rel_394_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt,rel_213_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_495_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt,rel_495_Stats_Simple_Application_InstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_213_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_213_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,5> key({0,0,0,0,env1[0]});
auto range = rel_394_InstanceFieldPointsTo->equalRange<4>(key,READ_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env2[3]),(RamDomain)(env1[0])});
if (!(rel_495_Stats_Simple_Application_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_495_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2989:1-2993:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)" <<  rel_495_Stats_Simple_Application_InstanceFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2920:1-0:0];)" <<  rel_495_Stats_Simple_Application_InstanceFieldPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_495_Stats_Simple_Application_InstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_213_AssignNormalHeapAllocation->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2922:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensCallGraphEdge(?from,?to) :- 
   CallGraphEdge(_,?from,_,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2994:1-2995:36])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2994:1-2995:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :- \n   CallGraphEdge(_,?from,_,?to).;)",profile);
if (!rel_403_CallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_403_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_496_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_496_Stats_Simple_InsensCallGraphEdge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_496_Stats_Simple_InsensCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_496_Stats_Simple_InsensCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2994:1-2995:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :-     CallGraphEdge(_,?from,_,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2994:1-2995:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :- \n   CallGraphEdge(_,?from,_,?to).;)" <<  rel_496_Stats_Simple_InsensCallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2922:1-0:0];)" <<  rel_496_Stats_Simple_InsensCallGraphEdge->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensCallGraphEdge.csv"},{"name","Stats_Simple_InsensCallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_496_Stats_Simple_InsensCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2934:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :- 
   Reachable(?method),
   Instruction_Method(?invocation,?method),
   isVirtualMethodInvocation_Insn(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3009:1-3012:47])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3009:1-3012:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :- \n   Reachable(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_85_Instruction_Method->empty()&&!rel_406_Reachable->empty()&&!rel_98_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_406_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt,rel_85_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_497_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_85_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_85_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_98_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_497_Stats_Simple_ReachableVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3009:1-3012:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :-     Reachable(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3009:1-3012:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :- \n   Reachable(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_497_Stats_Simple_ReachableVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2934:1-0:0];)" <<  rel_497_Stats_Simple_ReachableVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_ReachableVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_497_Stats_Simple_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_85_Instruction_Method->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2924:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_VirtualCallGraphEdge(?from,?to) :- 
   Stats_Simple_ReachableVirtualMethodInvocation(?from),
   Stats_Simple_InsensCallGraphEdge(?from,?to).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2996:1-2998:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2996:1-2998:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?from),\n   Stats_Simple_InsensCallGraphEdge(?from,?to).;)",profile);
if (!rel_496_Stats_Simple_InsensCallGraphEdge->empty()&&!rel_497_Stats_Simple_ReachableVirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_497_Stats_Simple_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_496_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_496_Stats_Simple_InsensCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_497_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_498_Stats_Simple_VirtualCallGraphEdge_op_ctxt,rel_498_Stats_Simple_VirtualCallGraphEdge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_496_Stats_Simple_InsensCallGraphEdge->equalRange<0>(key,READ_OP_CONTEXT(rel_496_Stats_Simple_InsensCallGraphEdge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_498_Stats_Simple_VirtualCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_498_Stats_Simple_VirtualCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2996:1-2998:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :-     Stats_Simple_ReachableVirtualMethodInvocation(?from),    Stats_Simple_InsensCallGraphEdge(?from,?to).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2996:1-2998:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?from),\n   Stats_Simple_InsensCallGraphEdge(?from,?to).;)" <<  rel_498_Stats_Simple_VirtualCallGraphEdge->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2924:1-0:0];)" <<  rel_498_Stats_Simple_VirtualCallGraphEdge->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_VirtualCallGraphEdge.csv"},{"name","Stats_Simple_VirtualCallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_498_Stats_Simple_VirtualCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2938:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :- 
   Stats_Simple_VirtualCallGraphEdge(?from,_).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3017:1-3019:60])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3017:1-3019:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :- \n   Stats_Simple_VirtualCallGraphEdge(?from,_).;)",profile);
if (!rel_498_Stats_Simple_VirtualCallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_498_Stats_Simple_VirtualCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_498_Stats_Simple_VirtualCallGraphEdge_op_ctxt,rel_498_Stats_Simple_VirtualCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_499_Stats_Simple_VirtualTargets_op_ctxt,rel_499_Stats_Simple_VirtualTargets->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = 0;
const ram::Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_498_Stats_Simple_VirtualCallGraphEdge->equalRange<0>(key,READ_OP_CONTEXT(rel_498_Stats_Simple_VirtualCallGraphEdge_op_ctxt));
for(const auto& cur : range) {
++res
;}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_499_Stats_Simple_VirtualTargets->insert(tuple,READ_OP_CONTEXT(rel_499_Stats_Simple_VirtualTargets_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3017:1-3019:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :-     Stats_Simple_VirtualCallGraphEdge(?from,_).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3017:1-3019:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :- \n   Stats_Simple_VirtualCallGraphEdge(?from,_).;)" <<  rel_499_Stats_Simple_VirtualTargets->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2938:1-0:0];)" <<  rel_499_Stats_Simple_VirtualTargets->size() << std::endl;
}if (!isHintsProfilingEnabled() && (performIO || 0)) rel_498_Stats_Simple_VirtualCallGraphEdge->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2939:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_PolymorphicCallSite(?from) :- 
   Stats_Simple_VirtualTargets(?from,?size),
   ?size > 1.
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3020:1-3022:13])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3020:1-3022:13];Stats_Simple_PolymorphicCallSite(?from) :- \n   Stats_Simple_VirtualTargets(?from,?size),\n   ?size > 1.;)",profile);
if (!rel_499_Stats_Simple_VirtualTargets->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_499_Stats_Simple_VirtualTargets->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_500_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_500_Stats_Simple_PolymorphicCallSite->createContext());
CREATE_OP_CONTEXT(rel_499_Stats_Simple_VirtualTargets_op_ctxt,rel_499_Stats_Simple_VirtualTargets->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
if( ((env0[1]) > (1))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_500_Stats_Simple_PolymorphicCallSite->insert(tuple,READ_OP_CONTEXT(rel_500_Stats_Simple_PolymorphicCallSite_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3020:1-3022:13];Stats_Simple_PolymorphicCallSite(?from) :-     Stats_Simple_VirtualTargets(?from,?size),    ?size > 1.;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3020:1-3022:13];Stats_Simple_PolymorphicCallSite(?from) :- \n   Stats_Simple_VirtualTargets(?from,?size),\n   ?size > 1.;)" <<  rel_500_Stats_Simple_PolymorphicCallSite->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2939:1-0:0];)" <<  rel_500_Stats_Simple_PolymorphicCallSite->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PolymorphicCallSite.csv"},{"name","Stats_Simple_PolymorphicCallSite"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_500_Stats_Simple_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_499_Stats_Simple_VirtualTargets->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2947:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_PolymorphicCallSite(?from) :- 
   Stats_Simple_PolymorphicCallSite(?from),
   Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3036:1-3038:68])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3036:1-3038:68];Stats_Simple_Application_PolymorphicCallSite(?from) :- \n   Stats_Simple_PolymorphicCallSite(?from),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;)",profile);
if (!rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_500_Stats_Simple_PolymorphicCallSite->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_500_Stats_Simple_PolymorphicCallSite->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_501_Stats_Simple_Application_PolymorphicCallSite_op_ctxt,rel_501_Stats_Simple_Application_PolymorphicCallSite->createContext());
CREATE_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_500_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_500_Stats_Simple_PolymorphicCallSite->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_501_Stats_Simple_Application_PolymorphicCallSite->insert(tuple,READ_OP_CONTEXT(rel_501_Stats_Simple_Application_PolymorphicCallSite_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3036:1-3038:68];Stats_Simple_Application_PolymorphicCallSite(?from) :-     Stats_Simple_PolymorphicCallSite(?from),    Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3036:1-3038:68];Stats_Simple_Application_PolymorphicCallSite(?from) :- \n   Stats_Simple_PolymorphicCallSite(?from),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;)" <<  rel_501_Stats_Simple_Application_PolymorphicCallSite->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2947:1-0:0];)" <<  rel_501_Stats_Simple_Application_PolymorphicCallSite->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PolymorphicCallSite.csv"},{"name","Stats_Simple_Application_PolymorphicCallSite"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_501_Stats_Simple_Application_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2943:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :- 
   Stats_Simple_ReachableVirtualMethodInvocation(?invocation),
   VirtualMethodInvocation_Base(?invocation,?base),
   !Stats_Simple_InsensVarPointsTo(_,?base).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3028:1-3031:45])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3028:1-3031:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)",profile);
if (!rel_497_Stats_Simple_ReachableVirtualMethodInvocation->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_497_Stats_Simple_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_502_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt,rel_502_Stats_Simple_EmptyVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_497_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( rel_482_Stats_Simple_InsensVarPointsTo->equalRange<1>(Tuple<RamDomain,2>({0,env1[1]}),READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_502_Stats_Simple_EmptyVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_502_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3028:1-3031:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :-     Stats_Simple_ReachableVirtualMethodInvocation(?invocation),    VirtualMethodInvocation_Base(?invocation,?base),    !Stats_Simple_InsensVarPointsTo(_,?base).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3028:1-3031:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)" <<  rel_502_Stats_Simple_EmptyVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2943:1-0:0];)" <<  rel_502_Stats_Simple_EmptyVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_EmptyVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_502_Stats_Simple_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2941:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_NullVirtualMethodInvocation(?invocation) :- 
   HeapAllocation_Null(?null),
   Stats_Simple_InsensVarPointsTo(?null,?base),
   VirtualMethodInvocation_Base(?invocation,?base),
   Stats_Simple_ReachableVirtualMethodInvocation(?invocation).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3023:1-3027:62])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3023:1-3027:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;)",profile);
if (!rel_104_HeapAllocation_Null->empty()&&!rel_482_Stats_Simple_InsensVarPointsTo->empty()&&!rel_497_Stats_Simple_ReachableVirtualMethodInvocation->empty()&&!rel_102_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_104_HeapAllocation_Null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_104_HeapAllocation_Null_op_ctxt,rel_104_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_503_Stats_Simple_NullVirtualMethodInvocation_op_ctxt,rel_503_Stats_Simple_NullVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_497_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt,rel_102_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_482_Stats_Simple_InsensVarPointsTo->equalRange<0>(key,READ_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_102_VirtualMethodInvocation_Base->equalRange<1>(key,READ_OP_CONTEXT(rel_102_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_Stats_Simple_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_503_Stats_Simple_NullVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_503_Stats_Simple_NullVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3023:1-3027:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :-     HeapAllocation_Null(?null),    Stats_Simple_InsensVarPointsTo(?null,?base),    VirtualMethodInvocation_Base(?invocation,?base),    Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3023:1-3027:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;)" <<  rel_503_Stats_Simple_NullVirtualMethodInvocation->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2941:1-0:0];)" <<  rel_503_Stats_Simple_NullVirtualMethodInvocation->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_NullVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_503_Stats_Simple_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_104_HeapAllocation_Null->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_102_VirtualMethodInvocation_Base->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2961:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_ReachableMethod(?method) :- 
   Reachable(?method),
   ApplicationMethod(?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3063:1-3065:30])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3063:1-3065:30];Stats_Simple_Application_ReachableMethod(?method) :- \n   Reachable(?method),\n   ApplicationMethod(?method).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_406_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_406_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_504_Stats_Simple_Application_ReachableMethod_op_ctxt,rel_504_Stats_Simple_Application_ReachableMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_118_ApplicationMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_504_Stats_Simple_Application_ReachableMethod->insert(tuple,READ_OP_CONTEXT(rel_504_Stats_Simple_Application_ReachableMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3063:1-3065:30];Stats_Simple_Application_ReachableMethod(?method) :-     Reachable(?method),    ApplicationMethod(?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3063:1-3065:30];Stats_Simple_Application_ReachableMethod(?method) :- \n   Reachable(?method),\n   ApplicationMethod(?method).;)" <<  rel_504_Stats_Simple_Application_ReachableMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2961:1-0:0];)" <<  rel_504_Stats_Simple_Application_ReachableMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableMethod.csv"},{"name","Stats_Simple_Application_ReachableMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_504_Stats_Simple_Application_ReachableMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2902:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :- 
   ApplicationVar(?var),
   VarPointsTo(?hctx,?value,?ctx,?var).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_249_ApplicationVar->empty()&&!rel_391_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_249_ApplicationVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_249_ApplicationVar_op_ctxt,rel_249_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_505_Stats_Simple_Application_VarPointsTo_op_ctxt,rel_505_Stats_Simple_Application_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_391_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_505_Stats_Simple_Application_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_505_Stats_Simple_Application_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :-     ApplicationVar(?var),    VarPointsTo(?hctx,?value,?ctx,?var).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2969:1-2972:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_505_Stats_Simple_Application_VarPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2902:1-0:0];)" <<  rel_505_Stats_Simple_Application_VarPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VarPointsTo.csv"},{"name","Stats_Simple_Application_VarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_505_Stats_Simple_Application_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_249_ApplicationVar->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2908:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :- 
   ArrayIndexPointsTo(_,?value,_,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2978:1-2979:49])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2978:1-2979:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ArrayIndexPointsTo(_,?value,_,?basevalue).;)",profile);
if (!rel_400_ArrayIndexPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_400_ArrayIndexPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_506_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt,rel_506_Stats_Simple_InsensArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_506_Stats_Simple_InsensArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_506_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2978:1-2979:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :-     ArrayIndexPointsTo(_,?value,_,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2978:1-2979:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ArrayIndexPointsTo(_,?value,_,?basevalue).;)" <<  rel_506_Stats_Simple_InsensArrayIndexPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2908:1-0:0];)" <<  rel_506_Stats_Simple_InsensArrayIndexPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_InsensArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_506_Stats_Simple_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2914:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- 
   InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2985:1-2986:57])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2985:1-2986:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;)",profile);
if (!rel_394_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_394_InstanceFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_507_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt,rel_507_Stats_Simple_InsensInstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[4])});
if (!(rel_507_Stats_Simple_InsensInstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_507_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2985:1-2986:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :-     InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2985:1-2986:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;)" <<  rel_507_Stats_Simple_InsensInstanceFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2914:1-0:0];)" <<  rel_507_Stats_Simple_InsensInstanceFieldPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_InsensInstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_507_Stats_Simple_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2916:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :- 
   StaticFieldPointsTo(_,?value,?sig).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2987:1-2988:40])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2987:1-2988:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :- \n   StaticFieldPointsTo(_,?value,?sig).;)",profile);
if (!rel_397_StaticFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_StaticFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_508_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt,rel_508_Stats_Simple_InsensStaticFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_508_Stats_Simple_InsensStaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_508_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2987:1-2988:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :-     StaticFieldPointsTo(_,?value,?sig).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2987:1-2988:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :- \n   StaticFieldPointsTo(_,?value,?sig).;)" <<  rel_508_Stats_Simple_InsensStaticFieldPointsTo->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2916:1-0:0];)" <<  rel_508_Stats_Simple_InsensStaticFieldPointsTo->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensStaticFieldPointsTo.csv"},{"name","Stats_Simple_InsensStaticFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_508_Stats_Simple_InsensStaticFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [236:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Metrics("1.0","var points-to (INS)",count : Stats_Simple_InsensVarPointsTo(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3071:1-3071:104])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3071:1-3071:104];Stats_Metrics(\"1.0\",\"var points-to (INS)\",count : Stats_Simple_InsensVarPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_482_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_482_Stats_Simple_InsensVarPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_482_Stats_Simple_InsensVarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(177),(RamDomain)(178),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3071:1-3071:104];Stats_Metrics('1.0','var points-to (INS)',count : Stats_Simple_InsensVarPointsTo(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3071:1-3071:104];Stats_Metrics(\"1.0\",\"var points-to (INS)\",count : Stats_Simple_InsensVarPointsTo(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("1.5","var points-to (SENS)",count : VarPointsTo(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3072:1-3072:92])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3072:1-3072:92];Stats_Metrics(\"1.5\",\"var points-to (SENS)\",count : VarPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_391_VarPointsTo_op_ctxt,rel_391_VarPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_391_VarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(179),(RamDomain)(180),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3072:1-3072:92];Stats_Metrics('1.5','var points-to (SENS)',count : VarPointsTo(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3072:1-3072:92];Stats_Metrics(\"1.5\",\"var points-to (SENS)\",count : VarPointsTo(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("5.0","app var points-to (INS)",count : Stats_Simple_Application_InsensVarPointsTo(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3073:1-3073:120])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3073:1-3073:120];Stats_Metrics(\"5.0\",\"app var points-to (INS)\",count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_494_Stats_Simple_Application_InsensVarPointsTo_op_ctxt,rel_494_Stats_Simple_Application_InsensVarPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_494_Stats_Simple_Application_InsensVarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(181),(RamDomain)(182),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3073:1-3073:120];Stats_Metrics('5.0','app var points-to (INS)',count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3073:1-3073:120];Stats_Metrics(\"5.0\",\"app var points-to (INS)\",count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("5.5","app var points-to (SENS)",count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3074:1-3074:121])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3074:1-3074:121];Stats_Metrics(\"5.5\",\"app var points-to (SENS)\",count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_505_Stats_Simple_Application_VarPointsTo_op_ctxt,rel_505_Stats_Simple_Application_VarPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_505_Stats_Simple_Application_VarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(183),(RamDomain)(184),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3074:1-3074:121];Stats_Metrics('5.5','app var points-to (SENS)',count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3074:1-3074:121];Stats_Metrics(\"5.5\",\"app var points-to (SENS)\",count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("10.0","reachable variables (INS)",count : Stats_Simple_InsensReachableVar(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3075:1-3075:109])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3075:1-3075:109];Stats_Metrics(\"10.0\",\"reachable variables (INS)\",count : Stats_Simple_InsensReachableVar(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_490_Stats_Simple_InsensReachableVar_op_ctxt,rel_490_Stats_Simple_InsensReachableVar->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_490_Stats_Simple_InsensReachableVar->size();
Tuple<RamDomain,3> tuple({(RamDomain)(185),(RamDomain)(186),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3075:1-3075:109];Stats_Metrics('10.0','reachable variables (INS)',count : Stats_Simple_InsensReachableVar(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3075:1-3075:109];Stats_Metrics(\"10.0\",\"reachable variables (INS)\",count : Stats_Simple_InsensReachableVar(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("10.5","reachable variables (SENS)",count : Stats_Simple_ReachableVar(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3076:1-3076:107])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3076:1-3076:107];Stats_Metrics(\"10.5\",\"reachable variables (SENS)\",count : Stats_Simple_ReachableVar(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_491_Stats_Simple_ReachableVar_op_ctxt,rel_491_Stats_Simple_ReachableVar->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_491_Stats_Simple_ReachableVar->size();
Tuple<RamDomain,3> tuple({(RamDomain)(187),(RamDomain)(188),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3076:1-3076:107];Stats_Metrics('10.5','reachable variables (SENS)',count : Stats_Simple_ReachableVar(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3076:1-3076:107];Stats_Metrics(\"10.5\",\"reachable variables (SENS)\",count : Stats_Simple_ReachableVar(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("2.0","array index points-to (INS)",count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3077:1-3077:119])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3077:1-3077:119];Stats_Metrics(\"2.0\",\"array index points-to (INS)\",count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_506_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt,rel_506_Stats_Simple_InsensArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_506_Stats_Simple_InsensArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(189),(RamDomain)(190),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3077:1-3077:119];Stats_Metrics('2.0','array index points-to (INS)',count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3077:1-3077:119];Stats_Metrics(\"2.0\",\"array index points-to (INS)\",count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("2.5","array index points-to (SENS)",count : ArrayIndexPointsTo(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3078:1-3078:107])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3078:1-3078:107];Stats_Metrics(\"2.5\",\"array index points-to (SENS)\",count : ArrayIndexPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_400_ArrayIndexPointsTo_op_ctxt,rel_400_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_400_ArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(191),(RamDomain)(192),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3078:1-3078:107];Stats_Metrics('2.5','array index points-to (SENS)',count : ArrayIndexPointsTo(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3078:1-3078:107];Stats_Metrics(\"2.5\",\"array index points-to (SENS)\",count : ArrayIndexPointsTo(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("6.0","app array index points-to (INS)",count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3079:1-3079:135])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3079:1-3079:135];Stats_Metrics(\"6.0\",\"app array index points-to (INS)\",count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt,rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(193),(RamDomain)(194),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3079:1-3079:135];Stats_Metrics('6.0','app array index points-to (INS)',count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3079:1-3079:135];Stats_Metrics(\"6.0\",\"app array index points-to (INS)\",count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("6.5","app array index points-to (SENS)",count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3080:1-3080:136])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3080:1-3080:136];Stats_Metrics(\"6.5\",\"app array index points-to (SENS)\",count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_478_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt,rel_478_Stats_Simple_Application_ArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_478_Stats_Simple_Application_ArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(195),(RamDomain)(196),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3080:1-3080:136];Stats_Metrics('6.5','app array index points-to (SENS)',count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3080:1-3080:136];Stats_Metrics(\"6.5\",\"app array index points-to (SENS)\",count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("3.0","instance field points-to (INS)",count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3081:1-3081:128])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3081:1-3081:128];Stats_Metrics(\"3.0\",\"instance field points-to (INS)\",count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_507_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt,rel_507_Stats_Simple_InsensInstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_507_Stats_Simple_InsensInstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(197),(RamDomain)(198),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3081:1-3081:128];Stats_Metrics('3.0','instance field points-to (INS)',count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3081:1-3081:128];Stats_Metrics(\"3.0\",\"instance field points-to (INS)\",count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("3.5","instance field points-to (SENS)",count : InstanceFieldPointsTo(_,_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3082:1-3082:116])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3082:1-3082:116];Stats_Metrics(\"3.5\",\"instance field points-to (SENS)\",count : InstanceFieldPointsTo(_,_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_394_InstanceFieldPointsTo_op_ctxt,rel_394_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,5> env0;
env0[0] = rel_394_InstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(199),(RamDomain)(200),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3082:1-3082:116];Stats_Metrics('3.5','instance field points-to (SENS)',count : InstanceFieldPointsTo(_,_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3082:1-3082:116];Stats_Metrics(\"3.5\",\"instance field points-to (SENS)\",count : InstanceFieldPointsTo(_,_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("4.0","static field points-to (INS)",count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3083:1-3083:121])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3083:1-3083:121];Stats_Metrics(\"4.0\",\"static field points-to (INS)\",count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_508_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt,rel_508_Stats_Simple_InsensStaticFieldPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_508_Stats_Simple_InsensStaticFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(201),(RamDomain)(202),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3083:1-3083:121];Stats_Metrics('4.0','static field points-to (INS)',count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3083:1-3083:121];Stats_Metrics(\"4.0\",\"static field points-to (INS)\",count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("4.5","static field points-to (SENS)",count : StaticFieldPointsTo(_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3084:1-3084:106])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3084:1-3084:106];Stats_Metrics(\"4.5\",\"static field points-to (SENS)\",count : StaticFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_397_StaticFieldPointsTo_op_ctxt,rel_397_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_397_StaticFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(203),(RamDomain)(204),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3084:1-3084:106];Stats_Metrics('4.5','static field points-to (SENS)',count : StaticFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3084:1-3084:106];Stats_Metrics(\"4.5\",\"static field points-to (SENS)\",count : StaticFieldPointsTo(_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("7.0","app instance field points-to (INS)",count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3085:1-3085:144])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3085:1-3085:144];Stats_Metrics(\"7.0\",\"app instance field points-to (INS)\",count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt,rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(205),(RamDomain)(206),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3085:1-3085:144];Stats_Metrics('7.0','app instance field points-to (INS)',count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3085:1-3085:144];Stats_Metrics(\"7.0\",\"app instance field points-to (INS)\",count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("7.5","app instance field points-to (SENS)",count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3086:1-3086:145])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3086:1-3086:145];Stats_Metrics(\"7.5\",\"app instance field points-to (SENS)\",count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_495_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt,rel_495_Stats_Simple_Application_InstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,5> env0;
env0[0] = rel_495_Stats_Simple_Application_InstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(207),(RamDomain)(208),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3086:1-3086:145];Stats_Metrics('7.5','app instance field points-to (SENS)',count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3086:1-3086:145];Stats_Metrics(\"7.5\",\"app instance field points-to (SENS)\",count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("8.0","call graph edges (INS)",count : Stats_Simple_InsensCallGraphEdge(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3087:1-3087:109])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3087:1-3087:109];Stats_Metrics(\"8.0\",\"call graph edges (INS)\",count : Stats_Simple_InsensCallGraphEdge(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_496_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_496_Stats_Simple_InsensCallGraphEdge->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_496_Stats_Simple_InsensCallGraphEdge->size();
Tuple<RamDomain,3> tuple({(RamDomain)(209),(RamDomain)(210),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3087:1-3087:109];Stats_Metrics('8.0','call graph edges (INS)',count : Stats_Simple_InsensCallGraphEdge(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3087:1-3087:109];Stats_Metrics(\"8.0\",\"call graph edges (INS)\",count : Stats_Simple_InsensCallGraphEdge(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("8.5","call graph edges (SENS)",count : CallGraphEdge(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3088:1-3088:97])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3088:1-3088:97];Stats_Metrics(\"8.5\",\"call graph edges (SENS)\",count : CallGraphEdge(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_403_CallGraphEdge_op_ctxt,rel_403_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_403_CallGraphEdge->size();
Tuple<RamDomain,3> tuple({(RamDomain)(211),(RamDomain)(212),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3088:1-3088:97];Stats_Metrics('8.5','call graph edges (SENS)',count : CallGraphEdge(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3088:1-3088:97];Stats_Metrics(\"8.5\",\"call graph edges (SENS)\",count : CallGraphEdge(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("9.0","non-reachable app concrete methods",count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3089:1-3089:136])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3089:1-3089:136];Stats_Metrics(\"9.0\",\"non-reachable app concrete methods\",count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_481_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt,rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->size();
Tuple<RamDomain,3> tuple({(RamDomain)(213),(RamDomain)(214),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3089:1-3089:136];Stats_Metrics('9.0','non-reachable app concrete methods',count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3089:1-3089:136];Stats_Metrics(\"9.0\",\"non-reachable app concrete methods\",count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("11.0","reachable methods (INS)",count : Reachable(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3090:1-3090:85])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3090:1-3090:85];Stats_Metrics(\"11.0\",\"reachable methods (INS)\",count : Reachable(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_406_Reachable_op_ctxt,rel_406_Reachable->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_406_Reachable->size();
Tuple<RamDomain,3> tuple({(RamDomain)(215),(RamDomain)(216),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3090:1-3090:85];Stats_Metrics('11.0','reachable methods (INS)',count : Reachable(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3090:1-3090:85];Stats_Metrics(\"11.0\",\"reachable methods (INS)\",count : Reachable(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("11.5","reachable methods (SENS)",count : ReachableContext(_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3091:1-3091:96])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3091:1-3091:96];Stats_Metrics(\"11.5\",\"reachable methods (SENS)\",count : ReachableContext(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_409_ReachableContext->size();
Tuple<RamDomain,3> tuple({(RamDomain)(217),(RamDomain)(218),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3091:1-3091:96];Stats_Metrics('11.5','reachable methods (SENS)',count : ReachableContext(_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3091:1-3091:96];Stats_Metrics(\"11.5\",\"reachable methods (SENS)\",count : ReachableContext(_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("12.0","virtual call sites (statically)",count : isVirtualMethodInvocation_Insn(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3092:1-3092:114])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3092:1-3092:114];Stats_Metrics(\"12.0\",\"virtual call sites (statically)\",count : isVirtualMethodInvocation_Insn(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_98_isVirtualMethodInvocation_Insn_op_ctxt,rel_98_isVirtualMethodInvocation_Insn->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_98_isVirtualMethodInvocation_Insn->size();
Tuple<RamDomain,3> tuple({(RamDomain)(219),(RamDomain)(220),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3092:1-3092:114];Stats_Metrics('12.0','virtual call sites (statically)',count : isVirtualMethodInvocation_Insn(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3092:1-3092:114];Stats_Metrics(\"12.0\",\"virtual call sites (statically)\",count : isVirtualMethodInvocation_Insn(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("13.0","reachable virtual call sites",count : Stats_Simple_ReachableVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3093:1-3093:126])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3093:1-3093:126];Stats_Metrics(\"13.0\",\"reachable virtual call sites\",count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_497_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_497_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_497_Stats_Simple_ReachableVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(221),(RamDomain)(222),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3093:1-3093:126];Stats_Metrics('13.0','reachable virtual call sites',count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3093:1-3093:126];Stats_Metrics(\"13.0\",\"reachable virtual call sites\",count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("14.0","polymorphic virtual call sites",count : Stats_Simple_PolymorphicCallSite(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3094:1-3094:115])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3094:1-3094:115];Stats_Metrics(\"14.0\",\"polymorphic virtual call sites\",count : Stats_Simple_PolymorphicCallSite(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_500_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_500_Stats_Simple_PolymorphicCallSite->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_500_Stats_Simple_PolymorphicCallSite->size();
Tuple<RamDomain,3> tuple({(RamDomain)(223),(RamDomain)(224),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3094:1-3094:115];Stats_Metrics('14.0','polymorphic virtual call sites',count : Stats_Simple_PolymorphicCallSite(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3094:1-3094:115];Stats_Metrics(\"14.0\",\"polymorphic virtual call sites\",count : Stats_Simple_PolymorphicCallSite(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("15.0","null virtual call sites",count : Stats_Simple_NullVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3095:1-3095:116])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3095:1-3095:116];Stats_Metrics(\"15.0\",\"null virtual call sites\",count : Stats_Simple_NullVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_503_Stats_Simple_NullVirtualMethodInvocation_op_ctxt,rel_503_Stats_Simple_NullVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_503_Stats_Simple_NullVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(225),(RamDomain)(226),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3095:1-3095:116];Stats_Metrics('15.0','null virtual call sites',count : Stats_Simple_NullVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3095:1-3095:116];Stats_Metrics(\"15.0\",\"null virtual call sites\",count : Stats_Simple_NullVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("15.5","empty virtual call sites",count : Stats_Simple_EmptyVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3096:1-3096:118])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3096:1-3096:118];Stats_Metrics(\"15.5\",\"empty virtual call sites\",count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_502_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt,rel_502_Stats_Simple_EmptyVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_502_Stats_Simple_EmptyVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(227),(RamDomain)(228),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3096:1-3096:118];Stats_Metrics('15.5','empty virtual call sites',count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3096:1-3096:118];Stats_Metrics(\"15.5\",\"empty virtual call sites\",count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("16.0","app virtual call sites (statically)",count : Stats_Simple_Application_VirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3097:1-3097:136])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3097:1-3097:136];Stats_Metrics(\"16.0\",\"app virtual call sites (statically)\",count : Stats_Simple_Application_VirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_120_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt,rel_120_Stats_Simple_Application_VirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_120_Stats_Simple_Application_VirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(229),(RamDomain)(230),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3097:1-3097:136];Stats_Metrics('16.0','app virtual call sites (statically)',count : Stats_Simple_Application_VirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3097:1-3097:136];Stats_Metrics(\"16.0\",\"app virtual call sites (statically)\",count : Stats_Simple_Application_VirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("17.0","app reachable virtual call sites",count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3098:1-3098:142])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3098:1-3098:142];Stats_Metrics(\"17.0\",\"app reachable virtual call sites\",count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(231),(RamDomain)(232),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3098:1-3098:142];Stats_Metrics('17.0','app reachable virtual call sites',count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3098:1-3098:142];Stats_Metrics(\"17.0\",\"app reachable virtual call sites\",count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("18.0","app polymorphic virtual call sites",count : Stats_Simple_Application_PolymorphicCallSite(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3099:1-3099:131])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3099:1-3099:131];Stats_Metrics(\"18.0\",\"app polymorphic virtual call sites\",count : Stats_Simple_Application_PolymorphicCallSite(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_501_Stats_Simple_Application_PolymorphicCallSite_op_ctxt,rel_501_Stats_Simple_Application_PolymorphicCallSite->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_501_Stats_Simple_Application_PolymorphicCallSite->size();
Tuple<RamDomain,3> tuple({(RamDomain)(233),(RamDomain)(234),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3099:1-3099:131];Stats_Metrics('18.0','app polymorphic virtual call sites',count : Stats_Simple_Application_PolymorphicCallSite(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3099:1-3099:131];Stats_Metrics(\"18.0\",\"app polymorphic virtual call sites\",count : Stats_Simple_Application_PolymorphicCallSite(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("19.0","app null virtual call sites",count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3100:1-3100:132])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3100:1-3100:132];Stats_Metrics(\"19.0\",\"app null virtual call sites\",count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_484_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt,rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(235),(RamDomain)(236),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3100:1-3100:132];Stats_Metrics('19.0','app null virtual call sites',count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3100:1-3100:132];Stats_Metrics(\"19.0\",\"app null virtual call sites\",count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("19.5","app empty virtual call sites",count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3101:1-3101:134])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3101:1-3101:134];Stats_Metrics(\"19.5\",\"app empty virtual call sites\",count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt,rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(237),(RamDomain)(238),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3101:1-3101:134];Stats_Metrics('19.5','app empty virtual call sites',count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3101:1-3101:134];Stats_Metrics(\"19.5\",\"app empty virtual call sites\",count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("20.0","casts (statically)",count : AssignCast(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3102:1-3102:90])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3102:1-3102:90];Stats_Metrics(\"20.0\",\"casts (statically)\",count : AssignCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_96_AssignCast_op_ctxt,rel_96_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_96_AssignCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(239),(RamDomain)(240),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3102:1-3102:90];Stats_Metrics('20.0','casts (statically)',count : AssignCast(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3102:1-3102:90];Stats_Metrics(\"20.0\",\"casts (statically)\",count : AssignCast(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("21.0","reachable casts",count : Stats_Simple_ReachableCast(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3103:1-3103:103])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3103:1-3103:103];Stats_Metrics(\"21.0\",\"reachable casts\",count : Stats_Simple_ReachableCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_486_Stats_Simple_ReachableCast_op_ctxt,rel_486_Stats_Simple_ReachableCast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_486_Stats_Simple_ReachableCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(241),(RamDomain)(242),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3103:1-3103:103];Stats_Metrics('21.0','reachable casts',count : Stats_Simple_ReachableCast(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3103:1-3103:103];Stats_Metrics(\"21.0\",\"reachable casts\",count : Stats_Simple_ReachableCast(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("22.0","reachable casts that may fail",count : Stats_Simple_PotentiallyFailingCast(_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3104:1-3104:123])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3104:1-3104:123];Stats_Metrics(\"22.0\",\"reachable casts that may fail\",count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_489_Stats_Simple_PotentiallyFailingCast_op_ctxt,rel_489_Stats_Simple_PotentiallyFailingCast->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_489_Stats_Simple_PotentiallyFailingCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(243),(RamDomain)(244),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3104:1-3104:123];Stats_Metrics('22.0','reachable casts that may fail',count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3104:1-3104:123];Stats_Metrics(\"22.0\",\"reachable casts that may fail\",count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("23.0","app casts (statically)",count : Stats_Simple_Application_Cast(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3105:1-3105:113])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3105:1-3105:113];Stats_Metrics(\"23.0\",\"app casts (statically)\",count : Stats_Simple_Application_Cast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_119_Stats_Simple_Application_Cast_op_ctxt,rel_119_Stats_Simple_Application_Cast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_119_Stats_Simple_Application_Cast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(245),(RamDomain)(246),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3105:1-3105:113];Stats_Metrics('23.0','app casts (statically)',count : Stats_Simple_Application_Cast(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3105:1-3105:113];Stats_Metrics(\"23.0\",\"app casts (statically)\",count : Stats_Simple_Application_Cast(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("24.0","app reachable casts",count : Stats_Simple_Application_ReachableCast(_,_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3106:1-3106:119])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3106:1-3106:119];Stats_Metrics(\"24.0\",\"app reachable casts\",count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_487_Stats_Simple_Application_ReachableCast_op_ctxt,rel_487_Stats_Simple_Application_ReachableCast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_487_Stats_Simple_Application_ReachableCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(247),(RamDomain)(248),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3106:1-3106:119];Stats_Metrics('24.0','app reachable casts',count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3106:1-3106:119];Stats_Metrics(\"24.0\",\"app reachable casts\",count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("25.0","app reachable casts that may fail",count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3107:1-3107:139])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3107:1-3107:139];Stats_Metrics(\"25.0\",\"app reachable casts that may fail\",count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_488_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt,rel_488_Stats_Simple_Application_PotentiallyFailingCast->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_488_Stats_Simple_Application_PotentiallyFailingCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(249),(RamDomain)(250),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3107:1-3107:139];Stats_Metrics('25.0','app reachable casts that may fail',count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3107:1-3107:139];Stats_Metrics(\"25.0\",\"app reachable casts that may fail\",count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}SignalHandler::instance()->setMsg(R"_(Stats_Metrics("25.5","app reachable methods",count : Stats_Simple_Application_ReachableMethod(_)).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3108:1-3108:114])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3108:1-3108:114];Stats_Metrics(\"25.5\",\"app reachable methods\",count : Stats_Simple_Application_ReachableMethod(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt,rel_509_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_504_Stats_Simple_Application_ReachableMethod_op_ctxt,rel_504_Stats_Simple_Application_ReachableMethod->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_504_Stats_Simple_Application_ReachableMethod->size();
Tuple<RamDomain,3> tuple({(RamDomain)(251),(RamDomain)(252),(RamDomain)(env0[0])});
if (!(rel_509_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_509_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3108:1-3108:114];Stats_Metrics('25.5','app reachable methods',count : Stats_Simple_Application_ReachableMethod(_)).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [3108:1-3108:114];Stats_Metrics(\"25.5\",\"app reachable methods\",count : Stats_Simple_Application_ReachableMethod(_)).;)" <<  rel_509_Stats_Metrics->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Metrics;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [236:1-0:0];)" <<  rel_509_Stats_Metrics->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Metrics.csv"},{"name","Stats_Metrics"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0}), symTable, ioDirectives, 0)->writeAll(*rel_509_Stats_Metrics);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_98_isVirtualMethodInvocation_Insn->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_96_AssignCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_391_VarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_394_InstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_397_StaticFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_400_ArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_403_CallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_406_Reachable->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_482_Stats_Simple_InsensVarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_494_Stats_Simple_Application_InsensVarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_505_Stats_Simple_Application_VarPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_490_Stats_Simple_InsensReachableVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_491_Stats_Simple_ReachableVar->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_506_Stats_Simple_InsensArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_478_Stats_Simple_Application_ArrayIndexPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_507_Stats_Simple_InsensInstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_508_Stats_Simple_InsensStaticFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_495_Stats_Simple_Application_InstanceFieldPointsTo->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_496_Stats_Simple_InsensCallGraphEdge->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_497_Stats_Simple_ReachableVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_500_Stats_Simple_PolymorphicCallSite->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_503_Stats_Simple_NullVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_502_Stats_Simple_EmptyVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_120_Stats_Simple_Application_VirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_501_Stats_Simple_Application_PolymorphicCallSite->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_486_Stats_Simple_ReachableCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_489_Stats_Simple_PotentiallyFailingCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_119_Stats_Simple_Application_Cast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_487_Stats_Simple_Application_ReachableCast->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_504_Stats_Simple_Application_ReachableMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_488_Stats_Simple_Application_PotentiallyFailingCast->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2928:1-0:0];)",profile);
SignalHandler::instance()->setMsg(R"_(Stats_Simple_ReachableApplicationMethod(?ctx,?method) :- 
   ApplicationMethod(?method),
   ReachableContext(?ctx,?method).
in file /home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35])_");
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_118_ApplicationMethod->empty()&&!rel_409_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_118_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_ApplicationMethod_op_ctxt,rel_118_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_409_ReachableContext_op_ctxt,rel_409_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_510_Stats_Simple_ReachableApplicationMethod_op_ctxt,rel_510_Stats_Simple_ReachableApplicationMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
try{for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_409_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_409_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_510_Stats_Simple_ReachableApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_510_Stats_Simple_ReachableApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); (void)lease;
profile << R"(#p-proof-counter;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :-     ApplicationMethod(?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << std::endl;
}}
}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2999:1-3002:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_510_Stats_Simple_ReachableApplicationMethod->size() << std::endl;
}}
{ auto lease = getOutputLock().acquire(); 
(void)lease;
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/pts2o1h_itsc.dl [2928:1-0:0];)" <<  rel_510_Stats_Simple_ReachableApplicationMethod->size() << std::endl;
}if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableApplicationMethod.csv"},{"name","Stats_Simple_ReachableApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_510_Stats_Simple_ReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_118_ApplicationMethod->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_409_ReachableContext->purge();
if (!isHintsProfilingEnabled() && (performIO || 0)) rel_510_Stats_Simple_ReachableApplicationMethod->purge();
}

// -- relation hint statistics --
if(isHintsProfilingEnabled()) {
std::cout << " -- Operation Hint Statistics --\n";
std::cout << "Relation rel_1_AssignHeapAllocation:\n";
rel_1_AssignHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_2_AssignHeapAllocation_Heap:\n";
rel_2_AssignHeapAllocation_Heap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_3_isAssignHeapAllocation_Insn:\n";
rel_3_isAssignHeapAllocation_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_4_AssignBinop:\n";
rel_4_AssignBinop->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_5_AssignCast:\n";
rel_5_AssignCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_6_AssignCast_From:\n";
rel_6_AssignCast_From->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_7_AssignCastNull:\n";
rel_7_AssignCastNull->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_8_AssignCastNumConstant:\n";
rel_8_AssignCastNumConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_9_AssignCastNumConstant_Id:\n";
rel_9_AssignCastNumConstant_Id->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_10_AssignCast_Type:\n";
rel_10_AssignCast_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_11_isAssignCast_Insn:\n";
rel_11_isAssignCast_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_12_AssignInstanceOf:\n";
rel_12_AssignInstanceOf->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_13_AssignLocal:\n";
rel_13_AssignLocal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_14_AssignLocal_From:\n";
rel_14_AssignLocal_From->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_15_isAssignLocal_Insn:\n";
rel_15_isAssignLocal_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_16_AssignNull:\n";
rel_16_AssignNull->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_17_isAssignNull_Insn:\n";
rel_17_isAssignNull_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_18_AssignNumConstant:\n";
rel_18_AssignNumConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_19_AssignNumConstant_Id:\n";
rel_19_AssignNumConstant_Id->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_20_isNumConstant:\n";
rel_20_isNumConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_21_AssignUnop:\n";
rel_21_AssignUnop->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_22_AssignInstruction_To:\n";
rel_22_AssignInstruction_To->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_23_Return:\n";
rel_23_Return->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_24_ReturnNonvoid_Var:\n";
rel_24_ReturnNonvoid_Var->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_25_isReturnNonvoid_Insn:\n";
rel_25_isReturnNonvoid_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_26_NativeReturnVar:\n";
rel_26_NativeReturnVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_27_AssignPhantomInvoke:\n";
rel_27_AssignPhantomInvoke->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_28_BreakpointStmt:\n";
rel_28_BreakpointStmt->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_29_DynamicMethodInvocation:\n";
rel_29_DynamicMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_30_EnterMonitor:\n";
rel_30_EnterMonitor->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_31_ExitMonitor:\n";
rel_31_ExitMonitor->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_32_FormalParam:\n";
rel_32_FormalParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_33_Goto:\n";
rel_33_Goto->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_34_If:\n";
rel_34_If->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_35_LoadArrayIndex:\n";
rel_35_LoadArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_36_LoadArrayIndex_Base:\n";
rel_36_LoadArrayIndex_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_37_LoadArrayIndex_To:\n";
rel_37_LoadArrayIndex_To->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_38_isLoadArrayIndex_Insn:\n";
rel_38_isLoadArrayIndex_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_39_LoadInstanceField:\n";
rel_39_LoadInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_40_LoadInstanceField_Base:\n";
rel_40_LoadInstanceField_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_41_LoadInstanceField_To:\n";
rel_41_LoadInstanceField_To->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_42_isLoadInstanceField_Insn:\n";
rel_42_isLoadInstanceField_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_43_LoadStaticField:\n";
rel_43_LoadStaticField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_44_LoadStaticField_To:\n";
rel_44_LoadStaticField_To->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_45_isLoadStaticField_Insn:\n";
rel_45_isLoadStaticField_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_46_LookupSwitch:\n";
rel_46_LookupSwitch->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_47_PhantomInvoke:\n";
rel_47_PhantomInvoke->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_48_ReturnVoid:\n";
rel_48_ReturnVoid->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_49_SpecialMethodInvocation:\n";
rel_49_SpecialMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_50_StaticMethodInvocation:\n";
rel_50_StaticMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_51_isStaticMethodInvocation_Insn:\n";
rel_51_isStaticMethodInvocation_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_52_StoreArrayIndex:\n";
rel_52_StoreArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_53_StoreArrayIndex_Base:\n";
rel_53_StoreArrayIndex_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_54_StoreArrayIndex_From:\n";
rel_54_StoreArrayIndex_From->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_55_isStoreArrayIndex_Insn:\n";
rel_55_isStoreArrayIndex_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_56_StoreInstanceField:\n";
rel_56_StoreInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_57_StoreInstanceField_Base:\n";
rel_57_StoreInstanceField_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_58_StoreInstanceField_From:\n";
rel_58_StoreInstanceField_From->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_59_isStoreInstanceField_Insn:\n";
rel_59_isStoreInstanceField_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_60_StoreStaticField:\n";
rel_60_StoreStaticField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_61_FieldInstruction_Signature:\n";
rel_61_FieldInstruction_Signature->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_62_StoreStaticField_From:\n";
rel_62_StoreStaticField_From->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_63_isStoreStaticField_Insn:\n";
rel_63_isStoreStaticField_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_64_TableSwitch:\n";
rel_64_TableSwitch->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_65_Throw:\n";
rel_65_Throw->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_66_Throw_Var:\n";
rel_66_Throw_Var->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_67_ThrowNull:\n";
rel_67_ThrowNull->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_68_isThrow_Insn:\n";
rel_68_isThrow_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_69_Throw:\n";
rel_69_Throw->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_70_UnsupportedInstruction:\n";
rel_70_UnsupportedInstruction->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_71_VirtualMethodInvocation:\n";
rel_71_VirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_72_CallbackMethod:\n";
rel_72_CallbackMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_73_Method:\n";
rel_73_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_74_Method_DeclaringType:\n";
rel_74_Method_DeclaringType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_75_Method_Descriptor:\n";
rel_75_Method_Descriptor->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_76_Method_SimpleName:\n";
rel_76_Method_SimpleName->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_77_Method_ReturnType:\n";
rel_77_Method_ReturnType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_78_Method_DeclaresException:\n";
rel_78_Method_DeclaresException->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_79_Method_Modifier:\n";
rel_79_Method_Modifier->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_80_MethodImplemented:\n";
rel_80_MethodImplemented->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_81_ClassInitializer:\n";
rel_81_ClassInitializer->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_82_ThisVar:\n";
rel_82_ThisVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_83_Var_DeclaringMethod:\n";
rel_83_Var_DeclaringMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_84_isMethod:\n";
rel_84_isMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_85_Instruction_Method:\n";
rel_85_Instruction_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_86_delta_Instruction_Method:\n";
rel_86_delta_Instruction_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_87_new_Instruction_Method:\n";
rel_87_new_Instruction_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_88_ReturnVar:\n";
rel_88_ReturnVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_89_delta_ReturnVar:\n";
rel_89_delta_ReturnVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_90_new_ReturnVar:\n";
rel_90_new_ReturnVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_91_MethodInvocation_Method:\n";
rel_91_MethodInvocation_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_92_StaticMethodInvocation:\n";
rel_92_StaticMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_93_OptForNameInvocation:\n";
rel_93_OptForNameInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_94_AssignNull:\n";
rel_94_AssignNull->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_95_Instruction_Index:\n";
rel_95_Instruction_Index->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_96_AssignCast:\n";
rel_96_AssignCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_97_SpecialMethodInvocation_Base:\n";
rel_97_SpecialMethodInvocation_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_98_isVirtualMethodInvocation_Insn:\n";
rel_98_isVirtualMethodInvocation_Insn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_99_VirtualMethodInvocation:\n";
rel_99_VirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_100_VirtualMethodInvocation_Descriptor:\n";
rel_100_VirtualMethodInvocation_Descriptor->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_101_VirtualMethodInvocation_SimpleName:\n";
rel_101_VirtualMethodInvocation_SimpleName->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_102_VirtualMethodInvocation_Base:\n";
rel_102_VirtualMethodInvocation_Base->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_103_Type_null:\n";
rel_103_Type_null->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_104_HeapAllocation_Null:\n";
rel_104_HeapAllocation_Null->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_105_ClassHeap:\n";
rel_105_ClassHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_106_isClassHeap:\n";
rel_106_isClassHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_107_Dacapo:\n";
rel_107_Dacapo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_108_HeapAllocation_Keep:\n";
rel_108_HeapAllocation_Keep->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_109_MethodHandleConstant:\n";
rel_109_MethodHandleConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_110_NormalHeap:\n";
rel_110_NormalHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_111_StringConstant:\n";
rel_111_StringConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_112_isHeapAllocation:\n";
rel_112_isHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_113_HeapAllocation_Type:\n";
rel_113_HeapAllocation_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_114_Value_isHeap:\n";
rel_114_Value_isHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_115_isStringConstant:\n";
rel_115_isStringConstant->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_116_Activity:\n";
rel_116_Activity->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_117_ApplicationClass:\n";
rel_117_ApplicationClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_118_ApplicationMethod:\n";
rel_118_ApplicationMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_119_Stats_Simple_Application_Cast:\n";
rel_119_Stats_Simple_Application_Cast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_120_Stats_Simple_Application_VirtualMethodInvocation:\n";
rel_120_Stats_Simple_Application_VirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_121_Stats_Simple_ApplicationConcreteMethod:\n";
rel_121_Stats_Simple_ApplicationConcreteMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_122_ArrayType:\n";
rel_122_ArrayType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_123_BroadcastReceiver:\n";
rel_123_BroadcastReceiver->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_124_ClassType:\n";
rel_124_ClassType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_125_ComponentType:\n";
rel_125_ComponentType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_126_isArrayType:\n";
rel_126_isArrayType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_127_ContentProvider:\n";
rel_127_ContentProvider->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_128_DirectSuperclass:\n";
rel_128_DirectSuperclass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_129_Subclass:\n";
rel_129_Subclass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_130_delta_Subclass:\n";
rel_130_delta_Subclass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_131_new_Subclass:\n";
rel_131_new_Subclass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_132_isClassType:\n";
rel_132_isClassType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_133_ClassNameIndexes:\n";
rel_133_ClassNameIndexes->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_134_delta_ClassNameIndexes:\n";
rel_134_delta_ClassNameIndexes->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_135_new_ClassNameIndexes:\n";
rel_135_new_ClassNameIndexes->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_136_DotsInClassName:\n";
rel_136_DotsInClassName->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_137_NotLastDot:\n";
rel_137_NotLastDot->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_138_LastDot:\n";
rel_138_LastDot->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_139_DirectSuperinterface:\n";
rel_139_DirectSuperinterface->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_140_Superinterface:\n";
rel_140_Superinterface->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_141_delta_Superinterface:\n";
rel_141_delta_Superinterface->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_142_new_Superinterface:\n";
rel_142_new_Superinterface->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_143_InterfaceType:\n";
rel_143_InterfaceType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_144_isInterfaceType:\n";
rel_144_isInterfaceType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_145_isReferenceType:\n";
rel_145_isReferenceType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_146_Service:\n";
rel_146_Service->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_147_AndroidAppComponent:\n";
rel_147_AndroidAppComponent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_148_Var_Type:\n";
rel_148_Var_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_149_isType:\n";
rel_149_isType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_150_AssignHeapAllocation:\n";
rel_150_AssignHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_151_OptAssignHeapAllocation:\n";
rel_151_OptAssignHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_152_ObjectMultipleAllocated:\n";
rel_152_ObjectMultipleAllocated->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_153_MethodLookup:\n";
rel_153_MethodLookup->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_154_delta_MethodLookup:\n";
rel_154_delta_MethodLookup->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_155_new_MethodLookup:\n";
rel_155_new_MethodLookup->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_156_OverridesFinalize:\n";
rel_156_OverridesFinalize->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_157_AllocatedObjectSupportsFinalize:\n";
rel_157_AllocatedObjectSupportsFinalize->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_158_FakeInvocation_RegisterFinalize0:\n";
rel_158_FakeInvocation_RegisterFinalize0->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_159_MethodDeclaredOrInherited:\n";
rel_159_MethodDeclaredOrInherited->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_160_delta_MethodDeclaredOrInherited:\n";
rel_160_delta_MethodDeclaredOrInherited->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_161_new_MethodDeclaredOrInherited:\n";
rel_161_new_MethodDeclaredOrInherited->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_162_ProtectedMethodOfComponent:\n";
rel_162_ProtectedMethodOfComponent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_163_PublicMethodOfComponent:\n";
rel_163_PublicMethodOfComponent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_164_CollectionLibraryClass:\n";
rel_164_CollectionLibraryClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_165_SpecialLibraryClass:\n";
rel_165_SpecialLibraryClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_166_SpecialLibraryMethod:\n";
rel_166_SpecialLibraryMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_167_SpecialLibraryObject:\n";
rel_167_SpecialLibraryObject->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_168_ImplicitlyInstantiatedLibraryType:\n";
rel_168_ImplicitlyInstantiatedLibraryType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_169_ReifiedLibraryObject:\n";
rel_169_ReifiedLibraryObject->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_170_AndroidLibraryType:\n";
rel_170_AndroidLibraryType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_171_AndroidApplicationClass:\n";
rel_171_AndroidApplicationClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_172_AndroidLibraryListenerType:\n";
rel_172_AndroidLibraryListenerType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_173_ReifiedComponent:\n";
rel_173_ReifiedComponent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_174_ViewRetrievalByArg0MethodInvocation:\n";
rel_174_ViewRetrievalByArg0MethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_175_Type_byte:\n";
rel_175_Type_byte->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_176_Type_char:\n";
rel_176_Type_char->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_177_Type_double:\n";
rel_177_Type_double->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_178_Type_float:\n";
rel_178_Type_float->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_179_Type_int:\n";
rel_179_Type_int->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_180_Type_long:\n";
rel_180_Type_long->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_181_Type_short:\n";
rel_181_Type_short->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_182_isPrimitiveType:\n";
rel_182_isPrimitiveType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_183_SubtypeOf:\n";
rel_183_SubtypeOf->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_184_delta_SubtypeOf:\n";
rel_184_delta_SubtypeOf->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_185_new_SubtypeOf:\n";
rel_185_new_SubtypeOf->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_186_ExceptionType:\n";
rel_186_ExceptionType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_187_ExceptionTypeToHeap:\n";
rel_187_ExceptionTypeToHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_188_ExceptionHeapTypeRepresentativeOrdinal:\n";
rel_188_ExceptionHeapTypeRepresentativeOrdinal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_189_SupertypeOf:\n";
rel_189_SupertypeOf->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_190_AppMethodOverridesAndroidLibraryMethod:\n";
rel_190_AppMethodOverridesAndroidLibraryMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_191_OverridingProtectedMethodOfComponent:\n";
rel_191_OverridingProtectedMethodOfComponent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_192_ListenerType:\n";
rel_192_ListenerType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_193_AndroidApplicationListenerClass:\n";
rel_193_AndroidApplicationListenerClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_194_StringFactoryType:\n";
rel_194_StringFactoryType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_195_StringFactoryHeap:\n";
rel_195_StringFactoryHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_196_EmptyArray:\n";
rel_196_EmptyArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_197_MethodAndTypeToHeap:\n";
rel_197_MethodAndTypeToHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_198_AllocationsPerMethodAndType:\n";
rel_198_AllocationsPerMethodAndType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_199_MethodAllocationMergeThreshold:\n";
rel_199_MethodAllocationMergeThreshold->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_200_AllocationShouldBeMergedPerMethod:\n";
rel_200_AllocationShouldBeMergedPerMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_201_MethodAndTypeToMergedHeap:\n";
rel_201_MethodAndTypeToMergedHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_202_MinHeapOrdinalPerMethodAndType:\n";
rel_202_MinHeapOrdinalPerMethodAndType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_203_MethodAndTypeToRepresentative:\n";
rel_203_MethodAndTypeToRepresentative->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_204_HeapRepresentative:\n";
rel_204_HeapRepresentative->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_205_HeapIsMergedString:\n";
rel_205_HeapIsMergedString->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_206_HeapIsMergedStringFactory:\n";
rel_206_HeapIsMergedStringFactory->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_207_RepresentativesToPickFrom:\n";
rel_207_RepresentativesToPickFrom->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_208_MinRepresentativeHeapToPickFromOrdinal:\n";
rel_208_MinRepresentativeHeapToPickFromOrdinal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_209_HeapAllocation_Merge:\n";
rel_209_HeapAllocation_Merge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_210_HeapAllocation_ContextInsensitive:\n";
rel_210_HeapAllocation_ContextInsensitive->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_211_AssignContextInsensitiveHeapAllocation:\n";
rel_211_AssignContextInsensitiveHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_212_HeapAllocation_Special:\n";
rel_212_HeapAllocation_Special->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_213_AssignNormalHeapAllocation:\n";
rel_213_AssignNormalHeapAllocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_214_Field:\n";
rel_214_Field->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_215_Field_DeclaringType:\n";
rel_215_Field_DeclaringType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_216_AssignReturnValue:\n";
rel_216_AssignReturnValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_217_AssignReturnValue:\n";
rel_217_AssignReturnValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_218_Tamiflex_ReflectionData:\n";
rel_218_Tamiflex_ReflectionData->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_219_Tamiflex_ToDoopFormat:\n";
rel_219_Tamiflex_ToDoopFormat->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_220_Tamiflex_ReflectionData:\n";
rel_220_Tamiflex_ReflectionData->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_221_MethodInvocation_Line:\n";
rel_221_MethodInvocation_Line->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_222_Tamiflex_ReflectionMap:\n";
rel_222_Tamiflex_ReflectionMap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_223_Tamiflex_ReifiedFieldArray:\n";
rel_223_Tamiflex_ReifiedFieldArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_224_Tamiflex_ReifiedMethod:\n";
rel_224_Tamiflex_ReifiedMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_225_Tamiflex_ReifiedMethodArray:\n";
rel_225_Tamiflex_ReifiedMethodArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_226_Field_Modifier:\n";
rel_226_Field_Modifier->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_227_isField:\n";
rel_227_isField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_228_LoadStaticField:\n";
rel_228_LoadStaticField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_229_Tamiflex_ReifiedField:\n";
rel_229_Tamiflex_ReifiedField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_230_MainClass:\n";
rel_230_MainClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_231_MainMethodDeclaration:\n";
rel_231_MainMethodDeclaration->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_232_ActualParam:\n";
rel_232_ActualParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_233_StoreInstanceField:\n";
rel_233_StoreInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_234_LoadInstanceField:\n";
rel_234_LoadInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_235_VarsAtInvocationRetrievingView:\n";
rel_235_VarsAtInvocationRetrievingView->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_236_BootstrapParam:\n";
rel_236_BootstrapParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_237_isMethodInvocation:\n";
rel_237_isMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_238_isVar:\n";
rel_238_isVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_239_StoreStaticField:\n";
rel_239_StoreStaticField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_240_AssignLocal:\n";
rel_240_AssignLocal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_241_Var_Type:\n";
rel_241_Var_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_242_ResolveInvocation:\n";
rel_242_ResolveInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_243_SiteShouldNotBeRefined:\n";
rel_243_SiteShouldNotBeRefined->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_244_StoreArrayIndex:\n";
rel_244_StoreArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_245_OptStoreArrayIndex:\n";
rel_245_OptStoreArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_246_LoadArrayIndex:\n";
rel_246_LoadArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_247_OptLoadArrayIndex:\n";
rel_247_OptLoadArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_248_Var_DeclaringMethod:\n";
rel_248_Var_DeclaringMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_249_ApplicationVar:\n";
rel_249_ApplicationVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_250_isInstruction:\n";
rel_250_isInstruction->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_251_Tamiflex_Constructor_NewInstance:\n";
rel_251_Tamiflex_Constructor_NewInstance->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_252_Tamiflex_Array_NewInstance:\n";
rel_252_Tamiflex_Array_NewInstance->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_253_Tamiflex_Class_NewInstance:\n";
rel_253_Tamiflex_Class_NewInstance->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_254_ClassModifier:\n";
rel_254_ClassModifier->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_255_ClassHasPossibleEntryPoint:\n";
rel_255_ClassHasPossibleEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_256_PrefixAbove:\n";
rel_256_PrefixAbove->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_257_PrefixBelow:\n";
rel_257_PrefixBelow->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_258_ClassIsAboveOtherInNamingHierarchy:\n";
rel_258_ClassIsAboveOtherInNamingHierarchy->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_259_ClassWithTopLevelEntryPoint:\n";
rel_259_ClassWithTopLevelEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_260_PossibleEntryPoint:\n";
rel_260_PossibleEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_261_TopLevelEntryPoint:\n";
rel_261_TopLevelEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_262_FormalsForEntryPoints:\n";
rel_262_FormalsForEntryPoints->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_263_AllConcreteImplementations:\n";
rel_263_AllConcreteImplementations->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_264_TypeToConcreteImplementationOrd:\n";
rel_264_TypeToConcreteImplementationOrd->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_265_ConcreteImplementations:\n";
rel_265_ConcreteImplementations->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_266_ConcreteType:\n";
rel_266_ConcreteType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_267_StaticToActualType:\n";
rel_267_StaticToActualType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_268_ObjToMock:\n";
rel_268_ObjToMock->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_269_delta_ObjToMock:\n";
rel_269_delta_ObjToMock->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_270_new_ObjToMock:\n";
rel_270_new_ObjToMock->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_271_MockObject:\n";
rel_271_MockObject->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_272_MockObjectForType:\n";
rel_272_MockObjectForType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_273_MockObjectForComponentType:\n";
rel_273_MockObjectForComponentType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_274_TypeForFormals:\n";
rel_274_TypeForFormals->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_275_MockForFormal:\n";
rel_275_MockForFormal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_276_ConcreteClass:\n";
rel_276_ConcreteClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_277_isImmutableHContext:\n";
rel_277_isImmutableHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_278_ContextForEntryPoint:\n";
rel_278_ContextForEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_279_ReceiverPointsTo:\n";
rel_279_ReceiverPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_280_HContextForEntryPoint:\n";
rel_280_HContextForEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_281_MockObjectContext:\n";
rel_281_MockObjectContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_282_AndroidEntryPoint:\n";
rel_282_AndroidEntryPoint->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_283_ImplicitReachable:\n";
rel_283_ImplicitReachable->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_284_isJVMStartupHContext:\n";
rel_284_isJVMStartupHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_285_LayoutControl:\n";
rel_285_LayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_286_LayoutControl:\n";
rel_286_LayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_287_ProtectedOnMethodOfLayoutControl:\n";
rel_287_ProtectedOnMethodOfLayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_288_OverridingProtectedOnMethodOfLayoutControl:\n";
rel_288_OverridingProtectedOnMethodOfLayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_289_Value_isMock:\n";
rel_289_Value_isMock->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_290_PublicOnMethodOfLayoutControl:\n";
rel_290_PublicOnMethodOfLayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_291_ReifiedLayoutControl:\n";
rel_291_ReifiedLayoutControl->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_292_ReifiedAndroidObjectValue:\n";
rel_292_ReifiedAndroidObjectValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_293_ViewObjectValueFromId:\n";
rel_293_ViewObjectValueFromId->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_294_FieldInitialValue:\n";
rel_294_FieldInitialValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_295_isValue:\n";
rel_295_isValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_296_MainThread:\n";
rel_296_MainThread->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_297_MainThreadGroup:\n";
rel_297_MainThreadGroup->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_298_SystemThreadGroup:\n";
rel_298_SystemThreadGroup->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_299_ObjectShouldNotBeRefined:\n";
rel_299_ObjectShouldNotBeRefined->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_300_Value_Type:\n";
rel_300_Value_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_301_Value_Num:\n";
rel_301_Value_Num->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_302_Value_isNonHeap:\n";
rel_302_Value_isNonHeap->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_303_NotEmptyArrayValue:\n";
rel_303_NotEmptyArrayValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_304_NotSpecialObject:\n";
rel_304_NotSpecialObject->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_305_MainMethodArgArray:\n";
rel_305_MainMethodArgArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_306_MainMethodArgArrayContent:\n";
rel_306_MainMethodArgArrayContent->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_307_ExceptionHandler:\n";
rel_307_ExceptionHandler->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_308_ExceptionHandler_FormalParam:\n";
rel_308_ExceptionHandler_FormalParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_309_ExceptionHandler_Begin:\n";
rel_309_ExceptionHandler_Begin->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_310_ExceptionHandler_End:\n";
rel_310_ExceptionHandler_End->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_311_ExceptionHandler_Method:\n";
rel_311_ExceptionHandler_Method->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_312_ExceptionHandler_InRange:\n";
rel_312_ExceptionHandler_InRange->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_313_ExceptionHandler_Type:\n";
rel_313_ExceptionHandler_Type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_314_ExceptionHandler_Index:\n";
rel_314_ExceptionHandler_Index->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_315_ExceptionHandler_Previous:\n";
rel_315_ExceptionHandler_Previous->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_316_ExceptionHandler_Before:\n";
rel_316_ExceptionHandler_Before->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_317_delta_ExceptionHandler_Before:\n";
rel_317_delta_ExceptionHandler_Before->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_318_new_ExceptionHandler_Before:\n";
rel_318_new_ExceptionHandler_Before->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_319_ExceptionHandler_Impossible:\n";
rel_319_ExceptionHandler_Impossible->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_320_ExceptionHandler_SameBlock_PartialOrder:\n";
rel_320_ExceptionHandler_SameBlock_PartialOrder->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_321_ExceptionHandler_SameInsn_PartialOrder:\n";
rel_321_ExceptionHandler_SameInsn_PartialOrder->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_322_ExceptionHandler_SameInsn_Repr:\n";
rel_322_ExceptionHandler_SameInsn_Repr->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_323_isExceptionHandler:\n";
rel_323_isExceptionHandler->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_324_ExceptionHandler_SameBlock_Repr:\n";
rel_324_ExceptionHandler_SameBlock_Repr->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_325_ExceptionHandler_TypeIsCaught:\n";
rel_325_ExceptionHandler_TypeIsCaught->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_326_isImmutableContext:\n";
rel_326_isImmutableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_327_replace_tpt:\n";
rel_327_replace_tpt->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_328_replace_cge:\n";
rel_328_replace_cge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_329_HasItsc:\n";
rel_329_HasItsc->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_330_Itsc:\n";
rel_330_Itsc->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_331_isClinitContext:\n";
rel_331_isClinitContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_332_isInitialContext:\n";
rel_332_isInitialContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_333_isJVMStartupContext:\n";
rel_333_isJVMStartupContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_334_ForcedReachableAndroidContext:\n";
rel_334_ForcedReachableAndroidContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_335_delta_ForcedReachableAndroidContext:\n";
rel_335_delta_ForcedReachableAndroidContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_336_new_ForcedReachableAndroidContext:\n";
rel_336_new_ForcedReachableAndroidContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_337_ReachableApplicationObjectOfType:\n";
rel_337_ReachableApplicationObjectOfType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_338_delta_ReachableApplicationObjectOfType:\n";
rel_338_delta_ReachableApplicationObjectOfType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_339_new_ReachableApplicationObjectOfType:\n";
rel_339_new_ReachableApplicationObjectOfType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_340_ApplicationObjectFlowingToLibrary:\n";
rel_340_ApplicationObjectFlowingToLibrary->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_341_delta_ApplicationObjectFlowingToLibrary:\n";
rel_341_delta_ApplicationObjectFlowingToLibrary->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_342_new_ApplicationObjectFlowingToLibrary:\n";
rel_342_new_ApplicationObjectFlowingToLibrary->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_343_PublicOnMethodOfReachableListener:\n";
rel_343_PublicOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_344_delta_PublicOnMethodOfReachableListener:\n";
rel_344_delta_PublicOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_345_new_PublicOnMethodOfReachableListener:\n";
rel_345_new_PublicOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_346_LibraryReachableAppListenerType:\n";
rel_346_LibraryReachableAppListenerType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_347_delta_LibraryReachableAppListenerType:\n";
rel_347_delta_LibraryReachableAppListenerType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_348_new_LibraryReachableAppListenerType:\n";
rel_348_new_LibraryReachableAppListenerType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_349_ProtectedOnMethodOfReachableListener:\n";
rel_349_ProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_350_delta_ProtectedOnMethodOfReachableListener:\n";
rel_350_delta_ProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_351_new_ProtectedOnMethodOfReachableListener:\n";
rel_351_new_ProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_352_OverridingProtectedOnMethodOfReachableListener:\n";
rel_352_OverridingProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_353_delta_OverridingProtectedOnMethodOfReachableListener:\n";
rel_353_delta_OverridingProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_354_new_OverridingProtectedOnMethodOfReachableListener:\n";
rel_354_new_OverridingProtectedOnMethodOfReachableListener->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_355_FormalOfForcedReachableContext:\n";
rel_355_FormalOfForcedReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_356_delta_FormalOfForcedReachableContext:\n";
rel_356_delta_FormalOfForcedReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_357_new_FormalOfForcedReachableContext:\n";
rel_357_new_FormalOfForcedReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_358_ApplicationObjectFlowingToLibraryStaticType:\n";
rel_358_ApplicationObjectFlowingToLibraryStaticType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_359_delta_ApplicationObjectFlowingToLibraryStaticType:\n";
rel_359_delta_ApplicationObjectFlowingToLibraryStaticType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_360_new_ApplicationObjectFlowingToLibraryStaticType:\n";
rel_360_new_ApplicationObjectFlowingToLibraryStaticType->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_361_InitializedClass:\n";
rel_361_InitializedClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_362_delta_InitializedClass:\n";
rel_362_delta_InitializedClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_363_new_InitializedClass:\n";
rel_363_new_InitializedClass->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_364_Instruction_Throws:\n";
rel_364_Instruction_Throws->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_365_delta_Instruction_Throws:\n";
rel_365_delta_Instruction_Throws->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_366_new_Instruction_Throws:\n";
rel_366_new_Instruction_Throws->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_367_ThrowPointsTo:\n";
rel_367_ThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_368_delta_ThrowPointsTo:\n";
rel_368_delta_ThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_369_new_ThrowPointsTo:\n";
rel_369_new_ThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_370_RunningThread:\n";
rel_370_RunningThread->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_371_delta_RunningThread:\n";
rel_371_delta_RunningThread->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_372_new_RunningThread:\n";
rel_372_new_RunningThread->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_373_ReachableCurrentThreadInvocation:\n";
rel_373_ReachableCurrentThreadInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_374_delta_ReachableCurrentThreadInvocation:\n";
rel_374_delta_ReachableCurrentThreadInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_375_new_ReachableCurrentThreadInvocation:\n";
rel_375_new_ReachableCurrentThreadInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_376_isContext:\n";
rel_376_isContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_377_delta_isContext:\n";
rel_377_delta_isContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_378_new_isContext:\n";
rel_378_new_isContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_379_isHContext:\n";
rel_379_isHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_380_delta_isHContext:\n";
rel_380_delta_isHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_381_new_isHContext:\n";
rel_381_new_isHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_382_ImmutableContextFromHContext:\n";
rel_382_ImmutableContextFromHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_383_delta_ImmutableContextFromHContext:\n";
rel_383_delta_ImmutableContextFromHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_384_new_ImmutableContextFromHContext:\n";
rel_384_new_ImmutableContextFromHContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_385_ImmutableHContextFromContext:\n";
rel_385_ImmutableHContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_386_delta_ImmutableHContextFromContext:\n";
rel_386_delta_ImmutableHContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_387_new_ImmutableHContextFromContext:\n";
rel_387_new_ImmutableHContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_388_ImmutableContextFromContext:\n";
rel_388_ImmutableContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_389_delta_ImmutableContextFromContext:\n";
rel_389_delta_ImmutableContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_390_new_ImmutableContextFromContext:\n";
rel_390_new_ImmutableContextFromContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_391_VarPointsTo:\n";
rel_391_VarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_392_delta_VarPointsTo:\n";
rel_392_delta_VarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_393_new_VarPointsTo:\n";
rel_393_new_VarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_394_InstanceFieldPointsTo:\n";
rel_394_InstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_395_delta_InstanceFieldPointsTo:\n";
rel_395_delta_InstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_396_new_InstanceFieldPointsTo:\n";
rel_396_new_InstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_397_StaticFieldPointsTo:\n";
rel_397_StaticFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_398_delta_StaticFieldPointsTo:\n";
rel_398_delta_StaticFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_399_new_StaticFieldPointsTo:\n";
rel_399_new_StaticFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_400_ArrayIndexPointsTo:\n";
rel_400_ArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_401_delta_ArrayIndexPointsTo:\n";
rel_401_delta_ArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_402_new_ArrayIndexPointsTo:\n";
rel_402_new_ArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_403_CallGraphEdge:\n";
rel_403_CallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_404_delta_CallGraphEdge:\n";
rel_404_delta_CallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_405_new_CallGraphEdge:\n";
rel_405_new_CallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_406_Reachable:\n";
rel_406_Reachable->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_407_delta_Reachable:\n";
rel_407_delta_Reachable->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_408_new_Reachable:\n";
rel_408_new_Reachable->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_409_ReachableContext:\n";
rel_409_ReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_410_delta_ReachableContext:\n";
rel_410_delta_ReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_411_new_ReachableContext:\n";
rel_411_new_ReachableContext->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_412_OptInterproceduralAssign:\n";
rel_412_OptInterproceduralAssign->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_413_delta_OptInterproceduralAssign:\n";
rel_413_delta_OptInterproceduralAssign->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_414_new_OptInterproceduralAssign:\n";
rel_414_new_OptInterproceduralAssign->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_415_OptStoreIntoArray:\n";
rel_415_OptStoreIntoArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_416_delta_OptStoreIntoArray:\n";
rel_416_delta_OptStoreIntoArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_417_new_OptStoreIntoArray:\n";
rel_417_new_OptStoreIntoArray->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_418_LoadHeapInstanceField:\n";
rel_418_LoadHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_419_delta_LoadHeapInstanceField:\n";
rel_419_delta_LoadHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_420_new_LoadHeapInstanceField:\n";
rel_420_new_LoadHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_421_StoreHeapInstanceField:\n";
rel_421_StoreHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_422_delta_StoreHeapInstanceField:\n";
rel_422_delta_StoreHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_423_new_StoreHeapInstanceField:\n";
rel_423_new_StoreHeapInstanceField->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_424_LoadHeapArrayIndex:\n";
rel_424_LoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_425_delta_LoadHeapArrayIndex:\n";
rel_425_delta_LoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_426_new_LoadHeapArrayIndex:\n";
rel_426_new_LoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_427_StoreHeapArrayIndex:\n";
rel_427_StoreHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_428_delta_StoreHeapArrayIndex:\n";
rel_428_delta_StoreHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_429_new_StoreHeapArrayIndex:\n";
rel_429_new_StoreHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_430_AbstractCallGraphEdge:\n";
rel_430_AbstractCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_431_delta_AbstractCallGraphEdge:\n";
rel_431_delta_AbstractCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_432_new_AbstractCallGraphEdge:\n";
rel_432_new_AbstractCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_433_AbstractThrowPointsTo:\n";
rel_433_AbstractThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_434_delta_AbstractThrowPointsTo:\n";
rel_434_delta_AbstractThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_435_new_AbstractThrowPointsTo:\n";
rel_435_new_AbstractThrowPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_436_OptAssignCast:\n";
rel_436_OptAssignCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_437_delta_OptAssignCast:\n";
rel_437_delta_OptAssignCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_438_new_OptAssignCast:\n";
rel_438_new_OptAssignCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_439_ReachableStoreStaticFieldFrom:\n";
rel_439_ReachableStoreStaticFieldFrom->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_440_delta_ReachableStoreStaticFieldFrom:\n";
rel_440_delta_ReachableStoreStaticFieldFrom->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_441_new_ReachableStoreStaticFieldFrom:\n";
rel_441_new_ReachableStoreStaticFieldFrom->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_442_OptLoadHeapArrayIndex:\n";
rel_442_OptLoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_443_delta_OptLoadHeapArrayIndex:\n";
rel_443_delta_OptLoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_444_new_OptLoadHeapArrayIndex:\n";
rel_444_new_OptLoadHeapArrayIndex->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_445_Temp1:\n";
rel_445_Temp1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_446_delta_Temp1:\n";
rel_446_delta_Temp1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_447_new_Temp1:\n";
rel_447_new_Temp1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_448_Temp2:\n";
rel_448_Temp2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_449_delta_Temp2:\n";
rel_449_delta_Temp2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_450_new_Temp2:\n";
rel_450_new_Temp2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_451_ReachableLoadArrayIndexBase:\n";
rel_451_ReachableLoadArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_452_delta_ReachableLoadArrayIndexBase:\n";
rel_452_delta_ReachableLoadArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_453_new_ReachableLoadArrayIndexBase:\n";
rel_453_new_ReachableLoadArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_454_ReachableStoreArrayIndexBase:\n";
rel_454_ReachableStoreArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_455_delta_ReachableStoreArrayIndexBase:\n";
rel_455_delta_ReachableStoreArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_456_new_ReachableStoreArrayIndexBase:\n";
rel_456_new_ReachableStoreArrayIndexBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_457_OptVirtualMethodInvocationBase:\n";
rel_457_OptVirtualMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_458_delta_OptVirtualMethodInvocationBase:\n";
rel_458_delta_OptVirtualMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_459_new_OptVirtualMethodInvocationBase:\n";
rel_459_new_OptVirtualMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_460_OptSpecialMethodInvocationBase:\n";
rel_460_OptSpecialMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_461_delta_OptSpecialMethodInvocationBase:\n";
rel_461_delta_OptSpecialMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_462_new_OptSpecialMethodInvocationBase:\n";
rel_462_new_OptSpecialMethodInvocationBase->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_463_Tamiflex_Invoke:\n";
rel_463_Tamiflex_Invoke->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_464_delta_Tamiflex_Invoke:\n";
rel_464_delta_Tamiflex_Invoke->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_465_new_Tamiflex_Invoke:\n";
rel_465_new_Tamiflex_Invoke->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_466_TamiflexCallGraphEdge:\n";
rel_466_TamiflexCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_467_delta_TamiflexCallGraphEdge:\n";
rel_467_delta_TamiflexCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_468_new_TamiflexCallGraphEdge:\n";
rel_468_new_TamiflexCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_469_TamiflexConstructorCallGraphEdge:\n";
rel_469_TamiflexConstructorCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_470_delta_TamiflexConstructorCallGraphEdge:\n";
rel_470_delta_TamiflexConstructorCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_471_new_TamiflexConstructorCallGraphEdge:\n";
rel_471_new_TamiflexConstructorCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_472_TamiflexInvocationFirstParam:\n";
rel_472_TamiflexInvocationFirstParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_473_delta_TamiflexInvocationFirstParam:\n";
rel_473_delta_TamiflexInvocationFirstParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_474_new_TamiflexInvocationFirstParam:\n";
rel_474_new_TamiflexInvocationFirstParam->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_475_TamiflexInvocationArgumentArrayValue:\n";
rel_475_TamiflexInvocationArgumentArrayValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_476_delta_TamiflexInvocationArgumentArrayValue:\n";
rel_476_delta_TamiflexInvocationArgumentArrayValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_477_new_TamiflexInvocationArgumentArrayValue:\n";
rel_477_new_TamiflexInvocationArgumentArrayValue->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_478_Stats_Simple_Application_ArrayIndexPointsTo:\n";
rel_478_Stats_Simple_Application_ArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_479_Stats_Simple_InsensReachableApplicationMethod:\n";
rel_479_Stats_Simple_InsensReachableApplicationMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation:\n";
rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_481_Stats_Simple_NonReachableApplicationConcreteMethod:\n";
rel_481_Stats_Simple_NonReachableApplicationConcreteMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_482_Stats_Simple_InsensVarPointsTo:\n";
rel_482_Stats_Simple_InsensVarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation:\n";
rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_484_Stats_Simple_Application_NullVirtualMethodInvocation:\n";
rel_484_Stats_Simple_Application_NullVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_485_Stats_Simple_AssignedVariable:\n";
rel_485_Stats_Simple_AssignedVariable->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_486_Stats_Simple_ReachableCast:\n";
rel_486_Stats_Simple_ReachableCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_487_Stats_Simple_Application_ReachableCast:\n";
rel_487_Stats_Simple_Application_ReachableCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_488_Stats_Simple_Application_PotentiallyFailingCast:\n";
rel_488_Stats_Simple_Application_PotentiallyFailingCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_489_Stats_Simple_PotentiallyFailingCast:\n";
rel_489_Stats_Simple_PotentiallyFailingCast->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_490_Stats_Simple_InsensReachableVar:\n";
rel_490_Stats_Simple_InsensReachableVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_491_Stats_Simple_ReachableVar:\n";
rel_491_Stats_Simple_ReachableVar->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo:\n";
rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo:\n";
rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_494_Stats_Simple_Application_InsensVarPointsTo:\n";
rel_494_Stats_Simple_Application_InsensVarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_495_Stats_Simple_Application_InstanceFieldPointsTo:\n";
rel_495_Stats_Simple_Application_InstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_496_Stats_Simple_InsensCallGraphEdge:\n";
rel_496_Stats_Simple_InsensCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_497_Stats_Simple_ReachableVirtualMethodInvocation:\n";
rel_497_Stats_Simple_ReachableVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_498_Stats_Simple_VirtualCallGraphEdge:\n";
rel_498_Stats_Simple_VirtualCallGraphEdge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_499_Stats_Simple_VirtualTargets:\n";
rel_499_Stats_Simple_VirtualTargets->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_500_Stats_Simple_PolymorphicCallSite:\n";
rel_500_Stats_Simple_PolymorphicCallSite->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_501_Stats_Simple_Application_PolymorphicCallSite:\n";
rel_501_Stats_Simple_Application_PolymorphicCallSite->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_502_Stats_Simple_EmptyVirtualMethodInvocation:\n";
rel_502_Stats_Simple_EmptyVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_503_Stats_Simple_NullVirtualMethodInvocation:\n";
rel_503_Stats_Simple_NullVirtualMethodInvocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_504_Stats_Simple_Application_ReachableMethod:\n";
rel_504_Stats_Simple_Application_ReachableMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_505_Stats_Simple_Application_VarPointsTo:\n";
rel_505_Stats_Simple_Application_VarPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_506_Stats_Simple_InsensArrayIndexPointsTo:\n";
rel_506_Stats_Simple_InsensArrayIndexPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_507_Stats_Simple_InsensInstanceFieldPointsTo:\n";
rel_507_Stats_Simple_InsensInstanceFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_508_Stats_Simple_InsensStaticFieldPointsTo:\n";
rel_508_Stats_Simple_InsensStaticFieldPointsTo->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_509_Stats_Metrics:\n";
rel_509_Stats_Metrics->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_510_Stats_Simple_ReachableApplicationMethod:\n";
rel_510_Stats_Simple_ReachableApplicationMethod->printHintStatistics(std::cout,"  ");
std::cout << "\n";
}
SignalHandler::instance()->reset();
}
public:
void run() { runFunction<false>(); }
public:
void runAll(std::string inputDirectory = ".", std::string outputDirectory = ".") { runFunction<true>(inputDirectory, outputDirectory); }
public:
void printAll(std::string outputDirectory = ".") {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Throw.csv"},{"name","Throw"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_69_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationMethod.csv"},{"name","ApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_118_ApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_Cast.csv"},{"name","Stats_Simple_Application_Cast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_119_Stats_Simple_Application_Cast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_VirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_120_Stats_Simple_Application_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ApplicationConcreteMethod.csv"},{"name","Stats_Simple_ApplicationConcreteMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_121_Stats_Simple_ApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Value_Type.csv"},{"name","Value_Type"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_300_Value_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Instruction_Throws.csv"},{"name","Instruction_Throws"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_364_Instruction_Throws);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./ThrowPointsTo.csv"},{"name","ThrowPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_367_ThrowPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./VarPointsTo.csv"},{"name","VarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_391_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./CallGraphEdge.csv"},{"name","CallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_403_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Reachable.csv"},{"name","Reachable"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_406_Reachable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./StoreHeapInstanceField.csv"},{"name","StoreHeapInstanceField"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_421_StoreHeapInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./OptVirtualMethodInvocationBase.csv"},{"name","OptVirtualMethodInvocationBase"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_457_OptVirtualMethodInvocationBase);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_ArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_478_Stats_Simple_Application_ArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableApplicationMethod.csv"},{"name","Stats_Simple_InsensReachableApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_479_Stats_Simple_InsensReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_ReachableVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NonReachableApplicationConcreteMethod.csv"},{"name","Stats_Simple_NonReachableApplicationConcreteMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_481_Stats_Simple_NonReachableApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensVarPointsTo.csv"},{"name","Stats_Simple_InsensVarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_482_Stats_Simple_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_EmptyVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_NullVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_484_Stats_Simple_Application_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_AssignedVariable.csv"},{"name","Stats_Simple_AssignedVariable"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_485_Stats_Simple_AssignedVariable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableCast.csv"},{"name","Stats_Simple_ReachableCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_486_Stats_Simple_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableCast.csv"},{"name","Stats_Simple_Application_ReachableCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_487_Stats_Simple_Application_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PotentiallyFailingCast.csv"},{"name","Stats_Simple_Application_PotentiallyFailingCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_488_Stats_Simple_Application_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PotentiallyFailingCast.csv"},{"name","Stats_Simple_PotentiallyFailingCast"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_489_Stats_Simple_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableVar.csv"},{"name","Stats_Simple_InsensReachableVar"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_490_Stats_Simple_InsensReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVar.csv"},{"name","Stats_Simple_ReachableVar"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_491_Stats_Simple_ReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_InsensArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InsensInstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensVarPointsTo.csv"},{"name","Stats_Simple_Application_InsensVarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_494_Stats_Simple_Application_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_495_Stats_Simple_Application_InstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensCallGraphEdge.csv"},{"name","Stats_Simple_InsensCallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_496_Stats_Simple_InsensCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_ReachableVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_497_Stats_Simple_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_VirtualCallGraphEdge.csv"},{"name","Stats_Simple_VirtualCallGraphEdge"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_498_Stats_Simple_VirtualCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PolymorphicCallSite.csv"},{"name","Stats_Simple_PolymorphicCallSite"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_500_Stats_Simple_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PolymorphicCallSite.csv"},{"name","Stats_Simple_Application_PolymorphicCallSite"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_501_Stats_Simple_Application_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_EmptyVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_502_Stats_Simple_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_NullVirtualMethodInvocation"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_503_Stats_Simple_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableMethod.csv"},{"name","Stats_Simple_Application_ReachableMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_504_Stats_Simple_Application_ReachableMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VarPointsTo.csv"},{"name","Stats_Simple_Application_VarPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_505_Stats_Simple_Application_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_InsensArrayIndexPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_506_Stats_Simple_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_InsensInstanceFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_507_Stats_Simple_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensStaticFieldPointsTo.csv"},{"name","Stats_Simple_InsensStaticFieldPointsTo"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_508_Stats_Simple_InsensStaticFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Metrics.csv"},{"name","Stats_Metrics"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0}), symTable, ioDirectives, 0)->writeAll(*rel_509_Stats_Metrics);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableApplicationMethod.csv"},{"name","Stats_Simple_ReachableApplicationMethod"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_510_Stats_Simple_ReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectory = ".") {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignHeapAllocation.facts"},{"name","_AssignHeapAllocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_1_AssignHeapAllocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignBinop.facts"},{"name","_AssignBinop"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_4_AssignBinop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCast.facts"},{"name","_AssignCast"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_5_AssignCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNull.facts"},{"name","_AssignCastNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_7_AssignCastNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNumConstant.facts"},{"name","_AssignCastNumConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_8_AssignCastNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignInstanceOf.facts"},{"name","_AssignInstanceOf"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_12_AssignInstanceOf);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignLocal.facts"},{"name","_AssignLocal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_13_AssignLocal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNull.facts"},{"name","_AssignNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_16_AssignNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNumConstant.facts"},{"name","_AssignNumConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_18_AssignNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignUnop.facts"},{"name","_AssignUnop"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_21_AssignUnop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Return.facts"},{"name","_Return"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_23_Return);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NativeReturnVar.facts"},{"name","_NativeReturnVar"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_26_NativeReturnVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignPhantomInvoke.facts"},{"name","_AssignPhantomInvoke"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_27_AssignPhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BreakpointStmt.facts"},{"name","_BreakpointStmt"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_28_BreakpointStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DynamicMethodInvocation.facts"},{"name","_DynamicMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_29_DynamicMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EnterMonitor.facts"},{"name","_EnterMonitor"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_30_EnterMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExitMonitor.facts"},{"name","_ExitMonitor"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_31_ExitMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FormalParam.facts"},{"name","_FormalParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_32_FormalParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Goto.facts"},{"name","_Goto"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_33_Goto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./If.facts"},{"name","_If"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_34_If);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadArrayIndex.facts"},{"name","_LoadArrayIndex"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_35_LoadArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadInstanceField.facts"},{"name","_LoadInstanceField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_39_LoadInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadStaticField.facts"},{"name","_LoadStaticField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_43_LoadStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LookupSwitch.facts"},{"name","_LookupSwitch"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_46_LookupSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./PhantomInvoke.facts"},{"name","_PhantomInvoke"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_47_PhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ReturnVoid.facts"},{"name","_ReturnVoid"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_48_ReturnVoid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./SpecialMethodInvocation.facts"},{"name","_SpecialMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_49_SpecialMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StaticMethodInvocation.facts"},{"name","_StaticMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_50_StaticMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreArrayIndex.facts"},{"name","_StoreArrayIndex"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_52_StoreArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreInstanceField.facts"},{"name","_StoreInstanceField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_56_StoreInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreStaticField.facts"},{"name","_StoreStaticField"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_60_StoreStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./TableSwitch.facts"},{"name","_TableSwitch"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_64_TableSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Throw.facts"},{"name","_Throw"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_65_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThrowNull.facts"},{"name","_ThrowNull"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_67_ThrowNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./UnsupportedInstruction.facts"},{"name","_UnsupportedInstruction"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->readAll(*rel_70_UnsupportedInstruction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./VirtualMethodInvocation.facts"},{"name","_VirtualMethodInvocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_71_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./CallbackMethod.facts"},{"name","_CallbackMethod"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_72_CallbackMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method.facts"},{"name","_Method"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_73_Method);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-DeclaresException.facts"},{"name","_Method_DeclaresException"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_78_Method_DeclaresException);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-Modifier.facts"},{"name","_Method_Modifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_79_Method_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThisVar.facts"},{"name","_ThisVar"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_82_ThisVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-DeclaringMethod.facts"},{"name","_Var_DeclaringMethod"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_83_Var_DeclaringMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassHeap.facts"},{"name","_ClassHeap"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_105_ClassHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Dacapo.facts"},{"name","_Dacapo"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_107_Dacapo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodHandleConstant.facts"},{"name","_MethodHandleConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_109_MethodHandleConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NormalHeap.facts"},{"name","_NormalHeap"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_110_NormalHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StringConstant.facts"},{"name","_StringConstant"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_111_StringConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Activity.facts"},{"name","_Activity"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_116_Activity);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationClass.facts"},{"name","_ApplicationClass"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_117_ApplicationClass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ArrayType.facts"},{"name","_ArrayType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_122_ArrayType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BroadcastReceiver.facts"},{"name","_BroadcastReceiver"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_123_BroadcastReceiver);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassType.facts"},{"name","_ClassType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_124_ClassType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ComponentType.facts"},{"name","_ComponentType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_125_ComponentType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ContentProvider.facts"},{"name","_ContentProvider"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_127_ContentProvider);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperclass.facts"},{"name","_DirectSuperclass"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_128_DirectSuperclass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperinterface.facts"},{"name","_DirectSuperinterface"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_139_DirectSuperinterface);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./InterfaceType.facts"},{"name","_InterfaceType"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_143_InterfaceType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Service.facts"},{"name","_Service"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_146_Service);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-Type.facts"},{"name","_Var_Type"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_148_Var_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EmptyArray.facts"},{"name","_EmptyArray"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_196_EmptyArray);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field.facts"},{"name","_Field"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_214_Field);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignReturnValue.facts"},{"name","_AssignReturnValue"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_216_AssignReturnValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Tamiflex.facts"},{"name","_Tamiflex_ReflectionData"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 0}), symTable, ioDirectives, 0)->readAll(*rel_218_Tamiflex_ReflectionData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodInvocation-Line.facts"},{"name","_MethodInvocation_Line"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0}), symTable, ioDirectives, 0)->readAll(*rel_221_MethodInvocation_Line);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field-Modifier.facts"},{"name","_Field_Modifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_226_Field_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ActualParam.facts"},{"name","_ActualParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_232_ActualParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BootstrapParam.facts"},{"name","_BootstrapParam"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_236_BootstrapParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassModifier.facts"},{"name","_ClassModifier"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_254_ClassModifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AndroidEntryPoint.facts"},{"name","_AndroidEntryPoint"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives, 0)->readAll(*rel_282_AndroidEntryPoint);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LayoutControl.facts"},{"name","_LayoutControl"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_285_LayoutControl);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FieldInitialValue.facts"},{"name","_FieldInitialValue"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_294_FieldInitialValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler.facts"},{"name","_ExceptionHandler"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 0, 1, 1, 0, 0}), symTable, ioDirectives, 0)->readAll(*rel_307_ExceptionHandler);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler-Previous.facts"},{"name","_ExceptionHandler_Previous"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives, 0)->readAll(*rel_315_ExceptionHandler_Previous);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./replace_tpt.csv"},{"name","_replace_tpt"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_327_replace_tpt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./replace_cge.csv"},{"name","_replace_cge"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->readAll(*rel_328_replace_cge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpInputs(std::ostream& out = std::cout) {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_1_AssignHeapAllocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_1_AssignHeapAllocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_4_AssignBinop");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_4_AssignBinop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_5_AssignCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_5_AssignCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_7_AssignCastNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_7_AssignCastNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_8_AssignCastNumConstant");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_8_AssignCastNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_12_AssignInstanceOf");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_12_AssignInstanceOf);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_13_AssignLocal");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_13_AssignLocal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_16_AssignNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_16_AssignNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_18_AssignNumConstant");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_18_AssignNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_21_AssignUnop");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_21_AssignUnop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_23_Return");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_23_Return);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_26_NativeReturnVar");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_26_NativeReturnVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_27_AssignPhantomInvoke");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_27_AssignPhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_28_BreakpointStmt");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_28_BreakpointStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_29_DynamicMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_29_DynamicMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_30_EnterMonitor");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_30_EnterMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_31_ExitMonitor");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_31_ExitMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_32_FormalParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_32_FormalParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_33_Goto");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_33_Goto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_34_If");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_34_If);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_35_LoadArrayIndex");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_35_LoadArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_39_LoadInstanceField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_39_LoadInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_43_LoadStaticField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_43_LoadStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_46_LookupSwitch");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_46_LookupSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_47_PhantomInvoke");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_47_PhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_48_ReturnVoid");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_48_ReturnVoid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_49_SpecialMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_49_SpecialMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_50_StaticMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_50_StaticMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_52_StoreArrayIndex");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_52_StoreArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_56_StoreInstanceField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_56_StoreInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_60_StoreStaticField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_60_StoreStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_64_TableSwitch");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_64_TableSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_65_Throw");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_65_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_67_ThrowNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_67_ThrowNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_70_UnsupportedInstruction");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_70_UnsupportedInstruction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_71_VirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_71_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_72_CallbackMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_72_CallbackMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_73_Method");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_73_Method);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_78_Method_DeclaresException");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_78_Method_DeclaresException);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_79_Method_Modifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_79_Method_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_82_ThisVar");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_82_ThisVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_83_Var_DeclaringMethod");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_83_Var_DeclaringMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_105_ClassHeap");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_105_ClassHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_107_Dacapo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_107_Dacapo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_109_MethodHandleConstant");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_109_MethodHandleConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_110_NormalHeap");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_110_NormalHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_111_StringConstant");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_111_StringConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_116_Activity");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_116_Activity);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_117_ApplicationClass");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_117_ApplicationClass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_122_ArrayType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_122_ArrayType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_123_BroadcastReceiver");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_123_BroadcastReceiver);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_124_ClassType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_124_ClassType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_125_ComponentType");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_125_ComponentType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_127_ContentProvider");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_127_ContentProvider);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_128_DirectSuperclass");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_128_DirectSuperclass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_139_DirectSuperinterface");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_139_DirectSuperinterface);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_143_InterfaceType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_143_InterfaceType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_146_Service");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_146_Service);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_148_Var_Type");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_148_Var_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_196_EmptyArray");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_196_EmptyArray);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_214_Field");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_214_Field);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_216_AssignReturnValue");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_216_AssignReturnValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_218_Tamiflex_ReflectionData");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 0}), symTable, ioDirectives, 0)->writeAll(*rel_218_Tamiflex_ReflectionData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_221_MethodInvocation_Line");
IOSystem::getInstance().getWriter(SymbolMask({1, 0}), symTable, ioDirectives, 0)->writeAll(*rel_221_MethodInvocation_Line);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_226_Field_Modifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_226_Field_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_232_ActualParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_232_ActualParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_236_BootstrapParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_236_BootstrapParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_254_ClassModifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_254_ClassModifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_282_AndroidEntryPoint");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_282_AndroidEntryPoint);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_285_LayoutControl");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_285_LayoutControl);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_294_FieldInitialValue");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_294_FieldInitialValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_307_ExceptionHandler");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0, 1, 1, 0, 0}), symTable, ioDirectives, 0)->writeAll(*rel_307_ExceptionHandler);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_315_ExceptionHandler_Previous");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_315_ExceptionHandler_Previous);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_327_replace_tpt");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_327_replace_tpt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_328_replace_cge");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_328_replace_cge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_69_Throw");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_69_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_118_ApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_118_ApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_119_Stats_Simple_Application_Cast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_119_Stats_Simple_Application_Cast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_120_Stats_Simple_Application_VirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_120_Stats_Simple_Application_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_121_Stats_Simple_ApplicationConcreteMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_121_Stats_Simple_ApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_300_Value_Type");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_300_Value_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_364_Instruction_Throws");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_364_Instruction_Throws);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_367_ThrowPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_367_ThrowPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_391_VarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_391_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_403_CallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_403_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_406_Reachable");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_406_Reachable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_421_StoreHeapInstanceField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_421_StoreHeapInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_457_OptVirtualMethodInvocationBase");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_457_OptVirtualMethodInvocationBase);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_478_Stats_Simple_Application_ArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_478_Stats_Simple_Application_ArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_479_Stats_Simple_InsensReachableApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_479_Stats_Simple_InsensReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_480_Stats_Simple_Application_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_481_Stats_Simple_NonReachableApplicationConcreteMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_481_Stats_Simple_NonReachableApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_482_Stats_Simple_InsensVarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_482_Stats_Simple_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_483_Stats_Simple_Application_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_484_Stats_Simple_Application_NullVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_484_Stats_Simple_Application_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_485_Stats_Simple_AssignedVariable");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_485_Stats_Simple_AssignedVariable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_486_Stats_Simple_ReachableCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_486_Stats_Simple_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_487_Stats_Simple_Application_ReachableCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_487_Stats_Simple_Application_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_488_Stats_Simple_Application_PotentiallyFailingCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_488_Stats_Simple_Application_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_489_Stats_Simple_PotentiallyFailingCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_489_Stats_Simple_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_490_Stats_Simple_InsensReachableVar");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_490_Stats_Simple_InsensReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_491_Stats_Simple_ReachableVar");
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_491_Stats_Simple_ReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_492_Stats_Simple_Application_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_493_Stats_Simple_Application_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_494_Stats_Simple_Application_InsensVarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_494_Stats_Simple_Application_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_495_Stats_Simple_Application_InstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_495_Stats_Simple_Application_InstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_496_Stats_Simple_InsensCallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_496_Stats_Simple_InsensCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_497_Stats_Simple_ReachableVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_497_Stats_Simple_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_498_Stats_Simple_VirtualCallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_498_Stats_Simple_VirtualCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_500_Stats_Simple_PolymorphicCallSite");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_500_Stats_Simple_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_501_Stats_Simple_Application_PolymorphicCallSite");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_501_Stats_Simple_Application_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_502_Stats_Simple_EmptyVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_502_Stats_Simple_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_503_Stats_Simple_NullVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_503_Stats_Simple_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_504_Stats_Simple_Application_ReachableMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives, 0)->writeAll(*rel_504_Stats_Simple_Application_ReachableMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_505_Stats_Simple_Application_VarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_505_Stats_Simple_Application_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_506_Stats_Simple_InsensArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_506_Stats_Simple_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_507_Stats_Simple_InsensInstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_507_Stats_Simple_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_508_Stats_Simple_InsensStaticFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives, 0)->writeAll(*rel_508_Stats_Simple_InsensStaticFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_509_Stats_Metrics");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0}), symTable, ioDirectives, 0)->writeAll(*rel_509_Stats_Metrics);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_510_Stats_Simple_ReachableApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives, 0)->writeAll(*rel_510_Stats_Simple_ReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
const SymbolTable &getSymbolTable() const {
return symTable;
}
};
SouffleProgram *newInstance_pts2o1h_itsc(){return new Sf_pts2o1h_itsc;}
SymbolTable *getST_pts2o1h_itsc(SouffleProgram *p){return &reinterpret_cast<Sf_pts2o1h_itsc*>(p)->symTable;}
#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_pts2o1h_itsc: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_pts2o1h_itsc();
};
public:
factory_Sf_pts2o1h_itsc() : ProgramFactory("pts2o1h_itsc"){}
};
static factory_Sf_pts2o1h_itsc __factory_Sf_pts2o1h_itsc_instance;
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(pts2o1h_itsc.dl)",
R"(.)",
R"(.)",
true,
R"(pts2o1h.log)",
1
);
if (!opt.parse(argc,argv)) return 1;
#if defined(_OPENMP) 
omp_set_nested(true);
#endif
souffle::Sf_pts2o1h_itsc obj(opt.getProfileName());
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir());
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}
#endif
