#include "souffle/CompiledSouffle.h"

namespace souffle {
using namespace ram;
class Sf_pts2o1h_opt : public SouffleProgram {
private:
static inline bool regex_wrapper(const char *pattern, const char *text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\")\n";
}
   return result;
}
static inline std::string substr_wrapper(const char *str, size_t idx, size_t len) {
   std::string sub_str, result; 
   try { result = std::string(str).substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << idx << "," << len << ") functor.\n";
   } return result;
}
std::string profiling_fname;
public:
SymbolTable symTable;
// -- Table: AllConcreteImplementations
ram::Relation<Auto,2, ram::index<1>>* rel_1_AllConcreteImplementations;
// -- Table: AllocatedObjectSupportsFinalize
ram::Relation<Auto,2, ram::index<0>>* rel_2_AllocatedObjectSupportsFinalize;
// -- Table: AllocationShouldBeMergedPerMethod
ram::Relation<Auto,2>* rel_3_AllocationShouldBeMergedPerMethod;
// -- Table: AllocationsPerMethodAndType
ram::Relation<Auto,3>* rel_4_AllocationsPerMethodAndType;
// -- Table: AndroidAppComponent
ram::Relation<Auto,1>* rel_5_AndroidAppComponent;
// -- Table: AndroidApplicationClass
ram::Relation<Auto,1, ram::index<0>>* rel_6_AndroidApplicationClass;
// -- Table: AndroidApplicationListenerClass
ram::Relation<Auto,1>* rel_7_AndroidApplicationListenerClass;
// -- Table: AndroidLibraryListenerType
ram::Relation<Auto,1>* rel_8_AndroidLibraryListenerType;
// -- Table: AndroidLibraryType
ram::Relation<Auto,1, ram::index<0>>* rel_9_AndroidLibraryType;
// -- Table: AppMethodOverridesAndroidLibraryMethod
ram::Relation<Auto,1, ram::index<0>>* rel_10_AppMethodOverridesAndroidLibraryMethod;
// -- Table: ApplicationMethod
ram::Relation<Auto,1, ram::index<0>>* rel_11_ApplicationMethod;
souffle::RelationWrapper<0,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_11_ApplicationMethod;
// -- Table: ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_12_ApplicationObjectFlowingToLibrary;
// -- Table: @delta_ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_13_delta_ApplicationObjectFlowingToLibrary;
// -- Table: @new_ApplicationObjectFlowingToLibrary
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_14_new_ApplicationObjectFlowingToLibrary;
// -- Table: ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_15_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: @delta_ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_16_delta_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: @new_ApplicationObjectFlowingToLibraryStaticType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_17_new_ApplicationObjectFlowingToLibraryStaticType;
// -- Table: ApplicationVar
ram::Relation<Auto,1>* rel_18_ApplicationVar;
// -- Table: ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<3,2,0,1>>* rel_19_ArrayIndexPointsTo;
// -- Table: @delta_ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_20_delta_ArrayIndexPointsTo;
// -- Table: @new_ArrayIndexPointsTo
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_21_new_ArrayIndexPointsTo;
// -- Table: AssignCast
ram::Relation<Auto,4, ram::index<1>, ram::index<3>>* rel_22_AssignCast;
// -- Table: AssignCastNumConstant_Id
ram::Relation<Auto,2, ram::index<0>>* rel_23_AssignCastNumConstant_Id;
// -- Table: AssignCast_From
ram::Relation<Auto,2, ram::index<0>>* rel_24_AssignCast_From;
// -- Table: AssignCast_Type
ram::Relation<Auto,2, ram::index<0>>* rel_25_AssignCast_Type;
// -- Table: AssignContextInsensitiveHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_26_AssignContextInsensitiveHeapAllocation;
// -- Table: AssignHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_27_AssignHeapAllocation;
// -- Table: AssignHeapAllocation_Heap
ram::Relation<Auto,2, ram::index<0>>* rel_28_AssignHeapAllocation_Heap;
// -- Table: AssignInstruction_To
ram::Relation<Auto,2, ram::index<0>>* rel_29_AssignInstruction_To;
// -- Table: AssignLocal
ram::Relation<Auto,3, ram::index<0>>* rel_30_AssignLocal;
// -- Table: AssignLocal_From
ram::Relation<Auto,2, ram::index<0>>* rel_31_AssignLocal_From;
// -- Table: AssignNormalHeapAllocation
ram::Relation<Auto,3, ram::index<2>>* rel_32_AssignNormalHeapAllocation;
// -- Table: AssignNull
ram::Relation<Auto,2, ram::index<1>>* rel_33_AssignNull;
// -- Table: AssignNumConstant_Id
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_34_AssignNumConstant_Id;
// -- Table: AssignReturnValue
ram::Relation<Auto,2, ram::index<0>>* rel_35_AssignReturnValue;
// -- Table: CallGraphEdge
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_36_CallGraphEdge;
souffle::RelationWrapper<1,ram::Relation<Auto,4, ram::index<2,3,0,1>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_36_CallGraphEdge;
// -- Table: @delta_CallGraphEdge
ram::Relation<Auto,4>* rel_37_delta_CallGraphEdge;
// -- Table: @new_CallGraphEdge
ram::Relation<Auto,4>* rel_38_new_CallGraphEdge;
// -- Table: ClassHasPossibleEntryPoint
ram::Relation<Auto,1>* rel_39_ClassHasPossibleEntryPoint;
// -- Table: ClassInitializer
ram::Relation<Auto,2, ram::index<0>>* rel_40_ClassInitializer;
// -- Table: ClassIsAboveOtherInNamingHierarchy
ram::Relation<Auto,2, ram::index<1>>* rel_41_ClassIsAboveOtherInNamingHierarchy;
// -- Table: ClassNameIndexes
ram::Relation<Auto,2, ram::index<0,1>>* rel_42_ClassNameIndexes;
// -- Table: @delta_ClassNameIndexes
ram::Relation<Auto,2>* rel_43_delta_ClassNameIndexes;
// -- Table: @new_ClassNameIndexes
ram::Relation<Auto,2>* rel_44_new_ClassNameIndexes;
// -- Table: ClassWithTopLevelEntryPoint
ram::Relation<Auto,1, ram::index<0>>* rel_45_ClassWithTopLevelEntryPoint;
// -- Table: CollectionLibraryClass
ram::Relation<Auto,1, ram::index<0>>* rel_46_CollectionLibraryClass;
// -- Table: ConcreteClass
ram::Relation<Auto,1, ram::index<0>>* rel_47_ConcreteClass;
// -- Table: ConcreteImplementations
ram::Relation<Auto,2>* rel_48_ConcreteImplementations;
// -- Table: ConcreteType
ram::Relation<Auto,1, ram::index<0>>* rel_49_ConcreteType;
// -- Table: ContextForEntryPoint
ram::Relation<Auto,2>* rel_50_ContextForEntryPoint;
// -- Table: DotsInClassName
ram::Relation<Auto,2, ram::index<0>>* rel_51_DotsInClassName;
// -- Table: ExceptionHandler_Before
ram::Relation<Auto,2, ram::index<0,1>>* rel_52_ExceptionHandler_Before;
// -- Table: @delta_ExceptionHandler_Before
ram::Relation<Auto,2>* rel_53_delta_ExceptionHandler_Before;
// -- Table: @new_ExceptionHandler_Before
ram::Relation<Auto,2>* rel_54_new_ExceptionHandler_Before;
// -- Table: ExceptionHandler_Begin
ram::Relation<Auto,2, ram::index<0>>* rel_55_ExceptionHandler_Begin;
// -- Table: ExceptionHandler_End
ram::Relation<Auto,2, ram::index<0>>* rel_56_ExceptionHandler_End;
// -- Table: ExceptionHandler_FormalParam
ram::Relation<Auto,2, ram::index<0>>* rel_57_ExceptionHandler_FormalParam;
// -- Table: ExceptionHandler_Impossible
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_58_ExceptionHandler_Impossible;
// -- Table: ExceptionHandler_InRange
ram::Relation<Auto,2, ram::index<1>>* rel_59_ExceptionHandler_InRange;
// -- Table: ExceptionHandler_Index
ram::Relation<Auto,2, ram::index<0,1>>* rel_60_ExceptionHandler_Index;
// -- Table: ExceptionHandler_Method
ram::Relation<Auto,2>* rel_61_ExceptionHandler_Method;
// -- Table: ExceptionHandler_SameBlock_PartialOrder
ram::Relation<Auto,2, ram::index<1>>* rel_62_ExceptionHandler_SameBlock_PartialOrder;
// -- Table: ExceptionHandler_SameBlock_Repr
ram::Relation<Auto,2, ram::index<0>>* rel_63_ExceptionHandler_SameBlock_Repr;
// -- Table: ExceptionHandler_SameInsn_PartialOrder
ram::Relation<Auto,3, ram::index<1,2>>* rel_64_ExceptionHandler_SameInsn_PartialOrder;
// -- Table: ExceptionHandler_SameInsn_Repr
ram::Relation<Auto,2, ram::index<0>>* rel_65_ExceptionHandler_SameInsn_Repr;
// -- Table: ExceptionHandler_Type
ram::Relation<Auto,2, ram::index<0>>* rel_66_ExceptionHandler_Type;
// -- Table: ExceptionHandler_TypeIsCaught
ram::Relation<Auto,2, ram::index<0,1>>* rel_67_ExceptionHandler_TypeIsCaught;
// -- Table: ExceptionHeapTypeRepresentativeOrdinal
ram::Relation<Auto,2>* rel_68_ExceptionHeapTypeRepresentativeOrdinal;
// -- Table: ExceptionType
ram::Relation<Auto,1, ram::index<0>>* rel_69_ExceptionType;
// -- Table: ExceptionTypeToHeap
ram::Relation<Auto,2, ram::index<1>>* rel_70_ExceptionTypeToHeap;
// -- Table: FakeInvocation_RegisterFinalize0
ram::Relation<Auto,2>* rel_71_FakeInvocation_RegisterFinalize0;
// -- Table: FieldInstruction_Signature
ram::Relation<Auto,2, ram::index<0>>* rel_72_FieldInstruction_Signature;
// -- Table: Field_DeclaringType
ram::Relation<Auto,2, ram::index<0>>* rel_73_Field_DeclaringType;
// -- Table: ForcedReachableAndroidContext
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_74_ForcedReachableAndroidContext;
// -- Table: @delta_ForcedReachableAndroidContext
ram::Relation<Auto,2>* rel_75_delta_ForcedReachableAndroidContext;
// -- Table: @new_ForcedReachableAndroidContext
ram::Relation<Auto,2>* rel_76_new_ForcedReachableAndroidContext;
// -- Table: FormalOfForcedReachableContext
ram::Relation<Auto,3, ram::index<2>, ram::index<0,1,2>>* rel_77_FormalOfForcedReachableContext;
// -- Table: @delta_FormalOfForcedReachableContext
ram::Relation<Auto,3>* rel_78_delta_FormalOfForcedReachableContext;
// -- Table: @new_FormalOfForcedReachableContext
ram::Relation<Auto,3>* rel_79_new_FormalOfForcedReachableContext;
// -- Table: FormalsForEntryPoints
ram::Relation<Auto,2>* rel_80_FormalsForEntryPoints;
// -- Table: HContextForEntryPoint
ram::Relation<Auto,2, ram::index<1>>* rel_81_HContextForEntryPoint;
// -- Table: HeapAllocation_ContextInsensitive
ram::Relation<Auto,1, ram::index<0>>* rel_82_HeapAllocation_ContextInsensitive;
// -- Table: HeapAllocation_Keep
ram::Relation<Auto,1, ram::index<0>>* rel_83_HeapAllocation_Keep;
// -- Table: HeapAllocation_Merge
ram::Relation<Auto,2, ram::index<0,1>>* rel_84_HeapAllocation_Merge;
// -- Table: HeapAllocation_Null
ram::Relation<Auto,1, ram::index<0>>* rel_85_HeapAllocation_Null;
// -- Table: HeapAllocation_Special
ram::Relation<Auto,1, ram::index<0>>* rel_86_HeapAllocation_Special;
// -- Table: HeapAllocation_Type
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_87_HeapAllocation_Type;
// -- Table: HeapIsMergedString
ram::Relation<Auto,1, ram::index<0>>* rel_88_HeapIsMergedString;
// -- Table: HeapIsMergedStringFactory
ram::Relation<Auto,1, ram::index<0>>* rel_89_HeapIsMergedStringFactory;
// -- Table: HeapRepresentative
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_90_HeapRepresentative;
// -- Table: ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_91_ImmutableContextFromContext;
// -- Table: @delta_ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_92_delta_ImmutableContextFromContext;
// -- Table: @new_ImmutableContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_93_new_ImmutableContextFromContext;
// -- Table: ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_94_ImmutableContextFromHContext;
// -- Table: @delta_ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_95_delta_ImmutableContextFromHContext;
// -- Table: @new_ImmutableContextFromHContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_96_new_ImmutableContextFromHContext;
// -- Table: ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_97_ImmutableHContextFromContext;
// -- Table: @delta_ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_98_delta_ImmutableHContextFromContext;
// -- Table: @new_ImmutableHContextFromContext
ram::Relation<Auto,2, ram::index<0,1>>* rel_99_new_ImmutableHContextFromContext;
// -- Table: ImplicitReachable
ram::Relation<Auto,1>* rel_100_ImplicitReachable;
// -- Table: ImplicitlyInstantiatedLibraryType
ram::Relation<Auto,1>* rel_101_ImplicitlyInstantiatedLibraryType;
// -- Table: InitializedClass
ram::Relation<Auto,1, ram::index<0>>* rel_102_InitializedClass;
// -- Table: @delta_InitializedClass
ram::Relation<Auto,1>* rel_103_delta_InitializedClass;
// -- Table: @new_InitializedClass
ram::Relation<Auto,1>* rel_104_new_InitializedClass;
// -- Table: InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<4,2,3,0,1>>* rel_105_InstanceFieldPointsTo;
// -- Table: @delta_InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<0,1,2,3,4>>* rel_106_delta_InstanceFieldPointsTo;
// -- Table: @new_InstanceFieldPointsTo
ram::Relation<Auto,5, ram::index<0,1,2,3,4>>* rel_107_new_InstanceFieldPointsTo;
// -- Table: Instruction_Index
ram::Relation<Auto,2, ram::index<0>>* rel_108_Instruction_Index;
// -- Table: Instruction_Method
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_109_Instruction_Method;
// -- Table: @delta_Instruction_Method
ram::Relation<Auto,2, ram::index<0>>* rel_110_delta_Instruction_Method;
// -- Table: @new_Instruction_Method
ram::Relation<Auto,2, ram::index<0>>* rel_111_new_Instruction_Method;
// -- Table: Instruction_Throws
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_112_Instruction_Throws;
// -- Table: @delta_Instruction_Throws
ram::Relation<Auto,4>* rel_113_delta_Instruction_Throws;
// -- Table: @new_Instruction_Throws
ram::Relation<Auto,4>* rel_114_new_Instruction_Throws;
// -- Table: LastDot
ram::Relation<Auto,2, ram::index<0>>* rel_115_LastDot;
// -- Table: LayoutControl
ram::Relation<Auto,3, ram::index<1>>* rel_116_LayoutControl;
// -- Table: LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_117_LibraryReachableAppListenerType;
// -- Table: @delta_LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_118_delta_LibraryReachableAppListenerType;
// -- Table: @new_LibraryReachableAppListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_119_new_LibraryReachableAppListenerType;
// -- Table: ListenerType
ram::Relation<Auto,1, ram::index<0>>* rel_120_ListenerType;
// -- Table: LoadArrayIndex
ram::Relation<Auto,3, ram::index<2>>* rel_121_LoadArrayIndex;
// -- Table: LoadArrayIndex_Base
ram::Relation<Auto,2, ram::index<0>>* rel_122_LoadArrayIndex_Base;
// -- Table: LoadArrayIndex_To
ram::Relation<Auto,2, ram::index<0>>* rel_123_LoadArrayIndex_To;
// -- Table: LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_124_LoadHeapArrayIndex;
// -- Table: @delta_LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_125_delta_LoadHeapArrayIndex;
// -- Table: @new_LoadHeapArrayIndex
ram::Relation<Auto,4, ram::index<1,3,0,2>>* rel_126_new_LoadHeapArrayIndex;
// -- Table: LoadHeapInstanceField
ram::Relation<Auto,5, ram::index<2,3,4,0,1>>* rel_127_LoadHeapInstanceField;
// -- Table: @delta_LoadHeapInstanceField
ram::Relation<Auto,5>* rel_128_delta_LoadHeapInstanceField;
// -- Table: @new_LoadHeapInstanceField
ram::Relation<Auto,5>* rel_129_new_LoadHeapInstanceField;
// -- Table: LoadInstanceField
ram::Relation<Auto,4>* rel_130_LoadInstanceField;
// -- Table: LoadInstanceField_Base
ram::Relation<Auto,2, ram::index<0>>* rel_131_LoadInstanceField_Base;
// -- Table: LoadInstanceField_To
ram::Relation<Auto,2, ram::index<0>>* rel_132_LoadInstanceField_To;
// -- Table: LoadStaticField
ram::Relation<Auto,3, ram::index<0>, ram::index<2>>* rel_133_LoadStaticField;
// -- Table: LoadStaticField_To
ram::Relation<Auto,2, ram::index<0>>* rel_134_LoadStaticField_To;
// -- Table: MainClass
ram::Relation<Auto,1>* rel_135_MainClass;
// -- Table: MainMethodArgArray
ram::Relation<Auto,1>* rel_136_MainMethodArgArray;
// -- Table: MainMethodArgArrayContent
ram::Relation<Auto,1>* rel_137_MainMethodArgArrayContent;
// -- Table: MainMethodDeclaration
ram::Relation<Auto,1>* rel_138_MainMethodDeclaration;
// -- Table: MainThread
ram::Relation<Auto,2>* rel_139_MainThread;
// -- Table: MainThreadGroup
ram::Relation<Auto,2>* rel_140_MainThreadGroup;
// -- Table: MethodAllocationMergeThreshold
ram::Relation<Auto,1>* rel_141_MethodAllocationMergeThreshold;
// -- Table: MethodAndTypeToHeap
ram::Relation<Auto,3, ram::index<1,2>>* rel_142_MethodAndTypeToHeap;
// -- Table: MethodAndTypeToMergedHeap
ram::Relation<Auto,3, ram::index<1,2>>* rel_143_MethodAndTypeToMergedHeap;
// -- Table: MethodAndTypeToRepresentative
ram::Relation<Auto,3>* rel_144_MethodAndTypeToRepresentative;
// -- Table: MethodDeclaredOrInherited
ram::Relation<Auto,2, ram::index<1,0>>* rel_145_MethodDeclaredOrInherited;
// -- Table: @delta_MethodDeclaredOrInherited
ram::Relation<Auto,2>* rel_146_delta_MethodDeclaredOrInherited;
// -- Table: @new_MethodDeclaredOrInherited
ram::Relation<Auto,2>* rel_147_new_MethodDeclaredOrInherited;
// -- Table: MethodImplemented
ram::Relation<Auto,4, ram::index<2>, ram::index<0,1,2>>* rel_148_MethodImplemented;
// -- Table: MethodInvocation_Method
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_149_MethodInvocation_Method;
// -- Table: MethodLookup
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_150_MethodLookup;
// -- Table: @delta_MethodLookup
ram::Relation<Auto,4, ram::index<2>>* rel_151_delta_MethodLookup;
// -- Table: @new_MethodLookup
ram::Relation<Auto,4, ram::index<2>>* rel_152_new_MethodLookup;
// -- Table: Method_DeclaringType
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_153_Method_DeclaringType;
// -- Table: Method_Descriptor
ram::Relation<Auto,2, ram::index<0,1>>* rel_154_Method_Descriptor;
// -- Table: Method_ReturnType
ram::Relation<Auto,2, ram::index<0,1>>* rel_155_Method_ReturnType;
// -- Table: Method_SimpleName
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_156_Method_SimpleName;
// -- Table: MinHeapOrdinalPerMethodAndType
ram::Relation<Auto,3, ram::index<0>>* rel_157_MinHeapOrdinalPerMethodAndType;
// -- Table: MinRepresentativeHeapToPickFromOrdinal
ram::Relation<Auto,2, ram::index<0>>* rel_158_MinRepresentativeHeapToPickFromOrdinal;
// -- Table: MockForFormal
ram::Relation<Auto,4, ram::index<3>>* rel_159_MockForFormal;
// -- Table: MockObject
ram::Relation<Auto,2, ram::index<1>>* rel_160_MockObject;
// -- Table: MockObjectContext
ram::Relation<Auto,3>* rel_161_MockObjectContext;
// -- Table: MockObjectForComponentType
ram::Relation<Auto,2, ram::index<1>>* rel_162_MockObjectForComponentType;
// -- Table: MockObjectForType
ram::Relation<Auto,2, ram::index<1>>* rel_163_MockObjectForType;
// -- Table: NotEmptyArrayValue
ram::Relation<Auto,1, ram::index<0>>* rel_164_NotEmptyArrayValue;
// -- Table: NotLastDot
ram::Relation<Auto,2, ram::index<0,1>>* rel_165_NotLastDot;
// -- Table: NotSpecialObject
ram::Relation<Auto,1, ram::index<0>>* rel_166_NotSpecialObject;
// -- Table: ObjToMock
ram::Relation<Auto,1, ram::index<0>>* rel_167_ObjToMock;
// -- Table: @delta_ObjToMock
ram::Relation<Auto,1>* rel_168_delta_ObjToMock;
// -- Table: @new_ObjToMock
ram::Relation<Auto,1>* rel_169_new_ObjToMock;
// -- Table: ObjectMultipleAllocated
ram::Relation<Auto,1, ram::index<0>>* rel_170_ObjectMultipleAllocated;
// -- Table: ObjectShouldNotBeRefined
ram::Relation<Auto,1, ram::index<0>>* rel_171_ObjectShouldNotBeRefined;
// -- Table: OptAssignCast
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_172_OptAssignCast;
// -- Table: @delta_OptAssignCast
ram::Relation<Auto,3>* rel_173_delta_OptAssignCast;
// -- Table: @new_OptAssignCast
ram::Relation<Auto,3>* rel_174_new_OptAssignCast;
// -- Table: OptAssignHeapAllocation
ram::Relation<Auto,2, ram::index<1>>* rel_175_OptAssignHeapAllocation;
// -- Table: OptForNameInvocation
ram::Relation<Auto,2>* rel_176_OptForNameInvocation;
// -- Table: OptInterproceduralAssign
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_177_OptInterproceduralAssign;
// -- Table: @delta_OptInterproceduralAssign
ram::Relation<Auto,4>* rel_178_delta_OptInterproceduralAssign;
// -- Table: @new_OptInterproceduralAssign
ram::Relation<Auto,4>* rel_179_new_OptInterproceduralAssign;
// -- Table: OptLoadArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_180_OptLoadArrayIndex;
// -- Table: OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<0,1>>* rel_181_OptLoadHeapArrayIndex;
// -- Table: @delta_OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_182_delta_OptLoadHeapArrayIndex;
// -- Table: @new_OptLoadHeapArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_183_new_OptLoadHeapArrayIndex;
// -- Table: OptSpecialMethodInvocationBase
ram::Relation<Auto,2, ram::index<0,1>>* rel_184_OptSpecialMethodInvocationBase;
// -- Table: @delta_OptSpecialMethodInvocationBase
ram::Relation<Auto,2>* rel_185_delta_OptSpecialMethodInvocationBase;
// -- Table: @new_OptSpecialMethodInvocationBase
ram::Relation<Auto,2>* rel_186_new_OptSpecialMethodInvocationBase;
// -- Table: OptStoreArrayIndex
ram::Relation<Auto,2, ram::index<1>>* rel_187_OptStoreArrayIndex;
// -- Table: OptStoreIntoArray
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_188_OptStoreIntoArray;
// -- Table: @delta_OptStoreIntoArray
ram::Relation<Auto,4>* rel_189_delta_OptStoreIntoArray;
// -- Table: @new_OptStoreIntoArray
ram::Relation<Auto,4>* rel_190_new_OptStoreIntoArray;
// -- Table: OptVirtualMethodInvocationBase
ram::Relation<Auto,2, ram::index<0,1>>* rel_191_OptVirtualMethodInvocationBase;
// -- Table: @delta_OptVirtualMethodInvocationBase
ram::Relation<Auto,2>* rel_192_delta_OptVirtualMethodInvocationBase;
// -- Table: @new_OptVirtualMethodInvocationBase
ram::Relation<Auto,2>* rel_193_new_OptVirtualMethodInvocationBase;
// -- Table: OverridesFinalize
ram::Relation<Auto,1, ram::index<0>>* rel_194_OverridesFinalize;
// -- Table: OverridingProtectedMethodOfComponent
ram::Relation<Auto,1>* rel_195_OverridingProtectedMethodOfComponent;
// -- Table: OverridingProtectedOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_196_OverridingProtectedOnMethodOfLayoutControl;
// -- Table: OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_197_OverridingProtectedOnMethodOfReachableListener;
// -- Table: @delta_OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_198_delta_OverridingProtectedOnMethodOfReachableListener;
// -- Table: @new_OverridingProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_199_new_OverridingProtectedOnMethodOfReachableListener;
// -- Table: PossibleEntryPoint
ram::Relation<Auto,1>* rel_200_PossibleEntryPoint;
// -- Table: PrefixAbove
ram::Relation<Auto,3>* rel_201_PrefixAbove;
// -- Table: PrefixBelow
ram::Relation<Auto,2>* rel_202_PrefixBelow;
// -- Table: ProtectedMethodOfComponent
ram::Relation<Auto,1>* rel_203_ProtectedMethodOfComponent;
// -- Table: ProtectedOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_204_ProtectedOnMethodOfLayoutControl;
// -- Table: ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_205_ProtectedOnMethodOfReachableListener;
// -- Table: @delta_ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_206_delta_ProtectedOnMethodOfReachableListener;
// -- Table: @new_ProtectedOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_207_new_ProtectedOnMethodOfReachableListener;
// -- Table: PublicMethodOfComponent
ram::Relation<Auto,1>* rel_208_PublicMethodOfComponent;
// -- Table: PublicOnMethodOfLayoutControl
ram::Relation<Auto,1>* rel_209_PublicOnMethodOfLayoutControl;
// -- Table: PublicOnMethodOfReachableListener
ram::Relation<Auto,1, ram::index<0>>* rel_210_PublicOnMethodOfReachableListener;
// -- Table: @delta_PublicOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_211_delta_PublicOnMethodOfReachableListener;
// -- Table: @new_PublicOnMethodOfReachableListener
ram::Relation<Auto,1>* rel_212_new_PublicOnMethodOfReachableListener;
// -- Table: Reachable
ram::Relation<Auto,1, ram::index<0>>* rel_213_Reachable;
souffle::RelationWrapper<2,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_213_Reachable;
// -- Table: @delta_Reachable
ram::Relation<Auto,1>* rel_214_delta_Reachable;
// -- Table: @new_Reachable
ram::Relation<Auto,1>* rel_215_new_Reachable;
// -- Table: ReachableApplicationObjectOfType
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_216_ReachableApplicationObjectOfType;
// -- Table: @delta_ReachableApplicationObjectOfType
ram::Relation<Auto,3>* rel_217_delta_ReachableApplicationObjectOfType;
// -- Table: @new_ReachableApplicationObjectOfType
ram::Relation<Auto,3>* rel_218_new_ReachableApplicationObjectOfType;
// -- Table: ReachableContext
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_219_ReachableContext;
// -- Table: @delta_ReachableContext
ram::Relation<Auto,2, ram::index<1,0>>* rel_220_delta_ReachableContext;
// -- Table: @new_ReachableContext
ram::Relation<Auto,2, ram::index<1,0>>* rel_221_new_ReachableContext;
// -- Table: ReachableCurrentThreadInvocation
ram::Relation<Auto,2, ram::index<0,1>>* rel_222_ReachableCurrentThreadInvocation;
// -- Table: @delta_ReachableCurrentThreadInvocation
ram::Relation<Auto,2>* rel_223_delta_ReachableCurrentThreadInvocation;
// -- Table: @new_ReachableCurrentThreadInvocation
ram::Relation<Auto,2>* rel_224_new_ReachableCurrentThreadInvocation;
// -- Table: ReachableLoadArrayIndexBase
ram::Relation<Auto,1, ram::index<0>>* rel_225_ReachableLoadArrayIndexBase;
// -- Table: @delta_ReachableLoadArrayIndexBase
ram::Relation<Auto,1>* rel_226_delta_ReachableLoadArrayIndexBase;
// -- Table: @new_ReachableLoadArrayIndexBase
ram::Relation<Auto,1>* rel_227_new_ReachableLoadArrayIndexBase;
// -- Table: ReachableStoreArrayIndexBase
ram::Relation<Auto,1, ram::index<0>>* rel_228_ReachableStoreArrayIndexBase;
// -- Table: @delta_ReachableStoreArrayIndexBase
ram::Relation<Auto,1>* rel_229_delta_ReachableStoreArrayIndexBase;
// -- Table: @new_ReachableStoreArrayIndexBase
ram::Relation<Auto,1>* rel_230_new_ReachableStoreArrayIndexBase;
// -- Table: ReachableStoreStaticFieldFrom
ram::Relation<Auto,1, ram::index<0>>* rel_231_ReachableStoreStaticFieldFrom;
// -- Table: @delta_ReachableStoreStaticFieldFrom
ram::Relation<Auto,1>* rel_232_delta_ReachableStoreStaticFieldFrom;
// -- Table: @new_ReachableStoreStaticFieldFrom
ram::Relation<Auto,1>* rel_233_new_ReachableStoreStaticFieldFrom;
// -- Table: ReceiverPointsTo
ram::Relation<Auto,5>* rel_234_ReceiverPointsTo;
// -- Table: ReifiedAndroidObjectValue
ram::Relation<Auto,2, ram::index<1>>* rel_235_ReifiedAndroidObjectValue;
// -- Table: ReifiedComponent
ram::Relation<Auto,2>* rel_236_ReifiedComponent;
// -- Table: ReifiedLayoutControl
ram::Relation<Auto,3, ram::index<0,1>>* rel_237_ReifiedLayoutControl;
// -- Table: ReifiedLibraryObject
ram::Relation<Auto,2>* rel_238_ReifiedLibraryObject;
// -- Table: RepresentativesToPickFrom
ram::Relation<Auto,2, ram::index<1>>* rel_239_RepresentativesToPickFrom;
// -- Table: ResolveInvocation
ram::Relation<Auto,3, ram::index<0,1>>* rel_240_ResolveInvocation;
// -- Table: ReturnNonvoid_Var
ram::Relation<Auto,2, ram::index<0>>* rel_241_ReturnNonvoid_Var;
// -- Table: ReturnVar
ram::Relation<Auto,2, ram::index<1,0>>* rel_242_ReturnVar;
// -- Table: @delta_ReturnVar
ram::Relation<Auto,2, ram::index<1>>* rel_243_delta_ReturnVar;
// -- Table: @new_ReturnVar
ram::Relation<Auto,2, ram::index<1>>* rel_244_new_ReturnVar;
// -- Table: RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_245_RunningThread;
// -- Table: @delta_RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_246_delta_RunningThread;
// -- Table: @new_RunningThread
ram::Relation<Auto,2, ram::index<0,1>>* rel_247_new_RunningThread;
// -- Table: SiteShouldNotBeRefined
ram::Relation<Auto,1, ram::index<0>>* rel_248_SiteShouldNotBeRefined;
// -- Table: SpecialLibraryClass
ram::Relation<Auto,1, ram::index<0>>* rel_249_SpecialLibraryClass;
// -- Table: SpecialLibraryMethod
ram::Relation<Auto,1, ram::index<0>>* rel_250_SpecialLibraryMethod;
// -- Table: SpecialLibraryObject
ram::Relation<Auto,1>* rel_251_SpecialLibraryObject;
// -- Table: SpecialMethodInvocation_Base
ram::Relation<Auto,2, ram::index<0>>* rel_252_SpecialMethodInvocation_Base;
// -- Table: StaticFieldPointsTo
ram::Relation<Auto,3, ram::index<2,0,1>>* rel_253_StaticFieldPointsTo;
// -- Table: @delta_StaticFieldPointsTo
ram::Relation<Auto,3>* rel_254_delta_StaticFieldPointsTo;
// -- Table: @new_StaticFieldPointsTo
ram::Relation<Auto,3>* rel_255_new_StaticFieldPointsTo;
// -- Table: StaticMethodInvocation
ram::Relation<Auto,3, ram::index<1>, ram::index<2>>* rel_256_StaticMethodInvocation;
// -- Table: StaticToActualType
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_257_StaticToActualType;
// -- Table: Stats_Metrics
ram::Relation<Auto,3>* rel_258_Stats_Metrics;
souffle::RelationWrapper<3,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_258_Stats_Metrics;
// -- Table: Stats_Simple_ApplicationConcreteMethod
ram::Relation<Auto,1>* rel_259_Stats_Simple_ApplicationConcreteMethod;
souffle::RelationWrapper<4,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_259_Stats_Simple_ApplicationConcreteMethod;
// -- Table: Stats_Simple_Application_ArrayIndexPointsTo
ram::Relation<Auto,4>* rel_260_Stats_Simple_Application_ArrayIndexPointsTo;
souffle::RelationWrapper<5,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_260_Stats_Simple_Application_ArrayIndexPointsTo;
// -- Table: Stats_Simple_Application_Cast
ram::Relation<Auto,4>* rel_261_Stats_Simple_Application_Cast;
souffle::RelationWrapper<6,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_261_Stats_Simple_Application_Cast;
// -- Table: Stats_Simple_Application_EmptyVirtualMethodInvocation
ram::Relation<Auto,1>* rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation;
souffle::RelationWrapper<7,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation;
// -- Table: Stats_Simple_Application_InsensArrayIndexPointsTo
ram::Relation<Auto,2>* rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo;
souffle::RelationWrapper<8,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo;
// -- Table: Stats_Simple_Application_InsensInstanceFieldPointsTo
ram::Relation<Auto,3>* rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo;
souffle::RelationWrapper<9,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo;
// -- Table: Stats_Simple_Application_InsensVarPointsTo
ram::Relation<Auto,2>* rel_265_Stats_Simple_Application_InsensVarPointsTo;
souffle::RelationWrapper<10,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_265_Stats_Simple_Application_InsensVarPointsTo;
// -- Table: Stats_Simple_Application_InstanceFieldPointsTo
ram::Relation<Auto,5>* rel_266_Stats_Simple_Application_InstanceFieldPointsTo;
souffle::RelationWrapper<11,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,false,true> wrapper_rel_266_Stats_Simple_Application_InstanceFieldPointsTo;
// -- Table: Stats_Simple_Application_NullVirtualMethodInvocation
ram::Relation<Auto,1>* rel_267_Stats_Simple_Application_NullVirtualMethodInvocation;
souffle::RelationWrapper<12,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_267_Stats_Simple_Application_NullVirtualMethodInvocation;
// -- Table: Stats_Simple_Application_PolymorphicCallSite
ram::Relation<Auto,1>* rel_268_Stats_Simple_Application_PolymorphicCallSite;
souffle::RelationWrapper<13,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_268_Stats_Simple_Application_PolymorphicCallSite;
// -- Table: Stats_Simple_Application_PotentiallyFailingCast
ram::Relation<Auto,3>* rel_269_Stats_Simple_Application_PotentiallyFailingCast;
souffle::RelationWrapper<14,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_269_Stats_Simple_Application_PotentiallyFailingCast;
// -- Table: Stats_Simple_Application_ReachableCast
ram::Relation<Auto,4>* rel_270_Stats_Simple_Application_ReachableCast;
souffle::RelationWrapper<15,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_270_Stats_Simple_Application_ReachableCast;
// -- Table: Stats_Simple_Application_ReachableMethod
ram::Relation<Auto,1>* rel_271_Stats_Simple_Application_ReachableMethod;
souffle::RelationWrapper<16,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_271_Stats_Simple_Application_ReachableMethod;
// -- Table: Stats_Simple_Application_ReachableVirtualMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation;
souffle::RelationWrapper<17,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation;
// -- Table: Stats_Simple_Application_VarPointsTo
ram::Relation<Auto,4>* rel_273_Stats_Simple_Application_VarPointsTo;
souffle::RelationWrapper<18,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_273_Stats_Simple_Application_VarPointsTo;
// -- Table: Stats_Simple_Application_VirtualMethodInvocation
ram::Relation<Auto,1>* rel_274_Stats_Simple_Application_VirtualMethodInvocation;
souffle::RelationWrapper<19,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_274_Stats_Simple_Application_VirtualMethodInvocation;
// -- Table: Stats_Simple_AssignedVariable
ram::Relation<Auto,1>* rel_275_Stats_Simple_AssignedVariable;
souffle::RelationWrapper<20,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_275_Stats_Simple_AssignedVariable;
// -- Table: Stats_Simple_EmptyVirtualMethodInvocation
ram::Relation<Auto,1>* rel_276_Stats_Simple_EmptyVirtualMethodInvocation;
souffle::RelationWrapper<21,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_276_Stats_Simple_EmptyVirtualMethodInvocation;
// -- Table: Stats_Simple_InsensArrayIndexPointsTo
ram::Relation<Auto,2>* rel_277_Stats_Simple_InsensArrayIndexPointsTo;
souffle::RelationWrapper<22,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_277_Stats_Simple_InsensArrayIndexPointsTo;
// -- Table: Stats_Simple_InsensCallGraphEdge
ram::Relation<Auto,2, ram::index<0>>* rel_278_Stats_Simple_InsensCallGraphEdge;
souffle::RelationWrapper<23,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_278_Stats_Simple_InsensCallGraphEdge;
// -- Table: Stats_Simple_InsensInstanceFieldPointsTo
ram::Relation<Auto,3>* rel_279_Stats_Simple_InsensInstanceFieldPointsTo;
souffle::RelationWrapper<24,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_279_Stats_Simple_InsensInstanceFieldPointsTo;
// -- Table: Stats_Simple_InsensReachableApplicationMethod
ram::Relation<Auto,1, ram::index<0>>* rel_280_Stats_Simple_InsensReachableApplicationMethod;
souffle::RelationWrapper<25,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_280_Stats_Simple_InsensReachableApplicationMethod;
// -- Table: Stats_Simple_InsensReachableVar
ram::Relation<Auto,1>* rel_281_Stats_Simple_InsensReachableVar;
souffle::RelationWrapper<26,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_281_Stats_Simple_InsensReachableVar;
// -- Table: Stats_Simple_InsensStaticFieldPointsTo
ram::Relation<Auto,2>* rel_282_Stats_Simple_InsensStaticFieldPointsTo;
souffle::RelationWrapper<27,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_282_Stats_Simple_InsensStaticFieldPointsTo;
// -- Table: Stats_Simple_InsensVarPointsTo
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_283_Stats_Simple_InsensVarPointsTo;
souffle::RelationWrapper<28,ram::Relation<Auto,2, ram::index<0>, ram::index<1>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_283_Stats_Simple_InsensVarPointsTo;
// -- Table: Stats_Simple_NonReachableApplicationConcreteMethod
ram::Relation<Auto,1>* rel_284_Stats_Simple_NonReachableApplicationConcreteMethod;
souffle::RelationWrapper<29,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_284_Stats_Simple_NonReachableApplicationConcreteMethod;
// -- Table: Stats_Simple_NullVirtualMethodInvocation
ram::Relation<Auto,1>* rel_285_Stats_Simple_NullVirtualMethodInvocation;
souffle::RelationWrapper<30,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_285_Stats_Simple_NullVirtualMethodInvocation;
// -- Table: Stats_Simple_PolymorphicCallSite
ram::Relation<Auto,1>* rel_286_Stats_Simple_PolymorphicCallSite;
souffle::RelationWrapper<31,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_286_Stats_Simple_PolymorphicCallSite;
// -- Table: Stats_Simple_PotentiallyFailingCast
ram::Relation<Auto,3>* rel_287_Stats_Simple_PotentiallyFailingCast;
souffle::RelationWrapper<32,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,false,true> wrapper_rel_287_Stats_Simple_PotentiallyFailingCast;
// -- Table: Stats_Simple_ReachableApplicationMethod
ram::Relation<Auto,2>* rel_288_Stats_Simple_ReachableApplicationMethod;
souffle::RelationWrapper<33,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_288_Stats_Simple_ReachableApplicationMethod;
// -- Table: Stats_Simple_ReachableCast
ram::Relation<Auto,4, ram::index<0>>* rel_289_Stats_Simple_ReachableCast;
souffle::RelationWrapper<34,ram::Relation<Auto,4, ram::index<0>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_289_Stats_Simple_ReachableCast;
// -- Table: Stats_Simple_ReachableVar
ram::Relation<Auto,2>* rel_290_Stats_Simple_ReachableVar;
souffle::RelationWrapper<35,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_290_Stats_Simple_ReachableVar;
// -- Table: Stats_Simple_ReachableVirtualMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_291_Stats_Simple_ReachableVirtualMethodInvocation;
souffle::RelationWrapper<36,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,false,true> wrapper_rel_291_Stats_Simple_ReachableVirtualMethodInvocation;
// -- Table: Stats_Simple_VirtualCallGraphEdge
ram::Relation<Auto,2, ram::index<0>>* rel_292_Stats_Simple_VirtualCallGraphEdge;
souffle::RelationWrapper<37,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,false,true> wrapper_rel_292_Stats_Simple_VirtualCallGraphEdge;
// -- Table: Stats_Simple_VirtualTargets
ram::Relation<Auto,2>* rel_293_Stats_Simple_VirtualTargets;
// -- Table: StoreArrayIndex
ram::Relation<Auto,3, ram::index<2>>* rel_294_StoreArrayIndex;
// -- Table: StoreArrayIndex_Base
ram::Relation<Auto,2, ram::index<0>>* rel_295_StoreArrayIndex_Base;
// -- Table: StoreArrayIndex_From
ram::Relation<Auto,2, ram::index<0>>* rel_296_StoreArrayIndex_From;
// -- Table: StoreHeapArrayIndex
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_297_StoreHeapArrayIndex;
// -- Table: @delta_StoreHeapArrayIndex
ram::Relation<Auto,4>* rel_298_delta_StoreHeapArrayIndex;
// -- Table: @new_StoreHeapArrayIndex
ram::Relation<Auto,4>* rel_299_new_StoreHeapArrayIndex;
// -- Table: StoreHeapInstanceField
ram::Relation<Auto,5, ram::index<3,4,0,1,2>>* rel_300_StoreHeapInstanceField;
// -- Table: @delta_StoreHeapInstanceField
ram::Relation<Auto,5>* rel_301_delta_StoreHeapInstanceField;
// -- Table: @new_StoreHeapInstanceField
ram::Relation<Auto,5>* rel_302_new_StoreHeapInstanceField;
// -- Table: StoreInstanceField
ram::Relation<Auto,4>* rel_303_StoreInstanceField;
// -- Table: StoreInstanceField_Base
ram::Relation<Auto,2, ram::index<0>>* rel_304_StoreInstanceField_Base;
// -- Table: StoreInstanceField_From
ram::Relation<Auto,2, ram::index<0>>* rel_305_StoreInstanceField_From;
// -- Table: StoreStaticField
ram::Relation<Auto,3, ram::index<0>, ram::index<2>>* rel_306_StoreStaticField;
// -- Table: StoreStaticField_From
ram::Relation<Auto,2, ram::index<0>>* rel_307_StoreStaticField_From;
// -- Table: StringFactoryHeap
ram::Relation<Auto,1, ram::index<0>>* rel_308_StringFactoryHeap;
// -- Table: StringFactoryType
ram::Relation<Auto,1, ram::index<0>>* rel_309_StringFactoryType;
// -- Table: Subclass
ram::Relation<Auto,2, ram::index<0,1>>* rel_310_Subclass;
// -- Table: @delta_Subclass
ram::Relation<Auto,2>* rel_311_delta_Subclass;
// -- Table: @new_Subclass
ram::Relation<Auto,2>* rel_312_new_Subclass;
// -- Table: SubtypeOf
ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>* rel_313_SubtypeOf;
// -- Table: @delta_SubtypeOf
ram::Relation<Auto,2, ram::index<0,1>>* rel_314_delta_SubtypeOf;
// -- Table: @new_SubtypeOf
ram::Relation<Auto,2, ram::index<0,1>>* rel_315_new_SubtypeOf;
// -- Table: Superinterface
ram::Relation<Auto,2, ram::index<1,0>>* rel_316_Superinterface;
// -- Table: @delta_Superinterface
ram::Relation<Auto,2, ram::index<1>>* rel_317_delta_Superinterface;
// -- Table: @new_Superinterface
ram::Relation<Auto,2, ram::index<1>>* rel_318_new_Superinterface;
// -- Table: SupertypeOf
ram::Relation<Auto,2, ram::index<1,0>>* rel_319_SupertypeOf;
// -- Table: SystemThreadGroup
ram::Relation<Auto,2>* rel_320_SystemThreadGroup;
// -- Table: TamiflexCallGraphEdge
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_321_TamiflexCallGraphEdge;
// -- Table: @delta_TamiflexCallGraphEdge
ram::Relation<Auto,4>* rel_322_delta_TamiflexCallGraphEdge;
// -- Table: @new_TamiflexCallGraphEdge
ram::Relation<Auto,4>* rel_323_new_TamiflexCallGraphEdge;
// -- Table: TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_324_TamiflexConstructorCallGraphEdge;
// -- Table: @delta_TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4>* rel_325_delta_TamiflexConstructorCallGraphEdge;
// -- Table: @new_TamiflexConstructorCallGraphEdge
ram::Relation<Auto,4>* rel_326_new_TamiflexConstructorCallGraphEdge;
// -- Table: TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_327_TamiflexInvocationArgumentArrayValue;
// -- Table: @delta_TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4>* rel_328_delta_TamiflexInvocationArgumentArrayValue;
// -- Table: @new_TamiflexInvocationArgumentArrayValue
ram::Relation<Auto,4>* rel_329_new_TamiflexInvocationArgumentArrayValue;
// -- Table: TamiflexInvocationFirstParam
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_330_TamiflexInvocationFirstParam;
// -- Table: @delta_TamiflexInvocationFirstParam
ram::Relation<Auto,4>* rel_331_delta_TamiflexInvocationFirstParam;
// -- Table: @new_TamiflexInvocationFirstParam
ram::Relation<Auto,4>* rel_332_new_TamiflexInvocationFirstParam;
// -- Table: Tamiflex_Array_NewInstance
ram::Relation<Auto,2>* rel_333_Tamiflex_Array_NewInstance;
// -- Table: Tamiflex_Class_NewInstance
ram::Relation<Auto,2>* rel_334_Tamiflex_Class_NewInstance;
// -- Table: Tamiflex_Constructor_NewInstance
ram::Relation<Auto,3>* rel_335_Tamiflex_Constructor_NewInstance;
// -- Table: Tamiflex_Invoke
ram::Relation<Auto,3, ram::index<0,1,2>>* rel_336_Tamiflex_Invoke;
// -- Table: @delta_Tamiflex_Invoke
ram::Relation<Auto,3>* rel_337_delta_Tamiflex_Invoke;
// -- Table: @new_Tamiflex_Invoke
ram::Relation<Auto,3>* rel_338_new_Tamiflex_Invoke;
// -- Table: Tamiflex_ReflectionData
ram::Relation<Auto,6, ram::index<5>>* rel_339_Tamiflex_ReflectionData;
// -- Table: Tamiflex_ReflectionMap
ram::Relation<Auto,2, ram::index<1>>* rel_340_Tamiflex_ReflectionMap;
// -- Table: Tamiflex_ReifiedField
ram::Relation<Auto,3>* rel_341_Tamiflex_ReifiedField;
// -- Table: Tamiflex_ReifiedFieldArray
ram::Relation<Auto,3>* rel_342_Tamiflex_ReifiedFieldArray;
// -- Table: Tamiflex_ReifiedMethod
ram::Relation<Auto,3>* rel_343_Tamiflex_ReifiedMethod;
// -- Table: Tamiflex_ReifiedMethodArray
ram::Relation<Auto,3>* rel_344_Tamiflex_ReifiedMethodArray;
// -- Table: Temp1
ram::Relation<Auto,2, ram::index<0,1>>* rel_345_Temp1;
// -- Table: @delta_Temp1
ram::Relation<Auto,2>* rel_346_delta_Temp1;
// -- Table: @new_Temp1
ram::Relation<Auto,2>* rel_347_new_Temp1;
// -- Table: Temp2
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_348_Temp2;
// -- Table: @delta_Temp2
ram::Relation<Auto,4>* rel_349_delta_Temp2;
// -- Table: @new_Temp2
ram::Relation<Auto,4>* rel_350_new_Temp2;
// -- Table: Throw
ram::Relation<Auto,2>* rel_351_Throw;
// -- Table: ThrowPointsTo
ram::Relation<Auto,4, ram::index<2,3,0,1>>* rel_352_ThrowPointsTo;
// -- Table: @delta_ThrowPointsTo
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_353_delta_ThrowPointsTo;
// -- Table: @new_ThrowPointsTo
ram::Relation<Auto,4, ram::index<0,1,2,3>>* rel_354_new_ThrowPointsTo;
// -- Table: Throw_Var
ram::Relation<Auto,2, ram::index<0>>* rel_355_Throw_Var;
// -- Table: TopLevelEntryPoint
ram::Relation<Auto,1, ram::index<0>>* rel_356_TopLevelEntryPoint;
// -- Table: TypeForFormals
ram::Relation<Auto,3>* rel_357_TypeForFormals;
// -- Table: TypeToConcreteImplementationOrd
ram::Relation<Auto,2>* rel_358_TypeToConcreteImplementationOrd;
// -- Table: Type_byte
ram::Relation<Auto,1>* rel_359_Type_byte;
// -- Table: Type_char
ram::Relation<Auto,1>* rel_360_Type_char;
// -- Table: Type_double
ram::Relation<Auto,1>* rel_361_Type_double;
// -- Table: Type_float
ram::Relation<Auto,1>* rel_362_Type_float;
// -- Table: Type_int
ram::Relation<Auto,1>* rel_363_Type_int;
// -- Table: Type_long
ram::Relation<Auto,1>* rel_364_Type_long;
// -- Table: Type_null
ram::Relation<Auto,1>* rel_365_Type_null;
// -- Table: Type_short
ram::Relation<Auto,1>* rel_366_Type_short;
// -- Table: Value_Num
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_367_Value_Num;
// -- Table: Value_Type
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_368_Value_Type;
// -- Table: Value_isHeap
ram::Relation<Auto,1>* rel_369_Value_isHeap;
// -- Table: Value_isMock
ram::Relation<Auto,1>* rel_370_Value_isMock;
// -- Table: Value_isNonHeap
ram::Relation<Auto,1>* rel_371_Value_isNonHeap;
// -- Table: VarPointsTo
ram::Relation<Auto,4, ram::index<3,2,0,1>>* rel_372_VarPointsTo;
souffle::RelationWrapper<38,ram::Relation<Auto,4, ram::index<3,2,0,1>>,Tuple<RamDomain,4>,4,false,true> wrapper_rel_372_VarPointsTo;
// -- Table: @delta_VarPointsTo
ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>* rel_373_delta_VarPointsTo;
// -- Table: @new_VarPointsTo
ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>* rel_374_new_VarPointsTo;
// -- Table: Var_DeclaringMethod
ram::Relation<Auto,2, ram::index<0>>* rel_375_Var_DeclaringMethod;
// -- Table: Var_Type
ram::Relation<Auto,2, ram::index<0>>* rel_376_Var_Type;
// -- Table: VarsAtInvocationRetrievingView
ram::Relation<Auto,2>* rel_377_VarsAtInvocationRetrievingView;
// -- Table: ViewObjectValueFromId
ram::Relation<Auto,2, ram::index<1>>* rel_378_ViewObjectValueFromId;
// -- Table: ViewRetrievalByArg0MethodInvocation
ram::Relation<Auto,1>* rel_379_ViewRetrievalByArg0MethodInvocation;
// -- Table: VirtualMethodInvocation
ram::Relation<Auto,3, ram::index<1>>* rel_380_VirtualMethodInvocation;
// -- Table: VirtualMethodInvocation_Base
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_381_VirtualMethodInvocation_Base;
// -- Table: VirtualMethodInvocation_Descriptor
ram::Relation<Auto,2, ram::index<0>>* rel_382_VirtualMethodInvocation_Descriptor;
// -- Table: VirtualMethodInvocation_SimpleName
ram::Relation<Auto,2>* rel_383_VirtualMethodInvocation_SimpleName;
// -- Table: _Activity
ram::Relation<Auto,1>* rel_384_Activity;
souffle::RelationWrapper<39,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_384_Activity;
// -- Table: _ActualParam
ram::Relation<Auto,3, ram::index<1,0>>* rel_385_ActualParam;
souffle::RelationWrapper<40,ram::Relation<Auto,3, ram::index<1,0>>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_385_ActualParam;
// -- Table: _AndroidEntryPoint
ram::Relation<Auto,1>* rel_386_AndroidEntryPoint;
souffle::RelationWrapper<41,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_386_AndroidEntryPoint;
// -- Table: _ApplicationClass
ram::Relation<Auto,1, ram::index<0>>* rel_387_ApplicationClass;
souffle::RelationWrapper<42,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_387_ApplicationClass;
// -- Table: _ArrayType
ram::Relation<Auto,1>* rel_388_ArrayType;
souffle::RelationWrapper<43,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_388_ArrayType;
// -- Table: _AssignBinop
ram::Relation<Auto,4>* rel_389_AssignBinop;
souffle::RelationWrapper<44,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_389_AssignBinop;
// -- Table: _AssignCast
ram::Relation<Auto,6>* rel_390_AssignCast;
souffle::RelationWrapper<45,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_390_AssignCast;
// -- Table: _AssignCastNull
ram::Relation<Auto,5>* rel_391_AssignCastNull;
souffle::RelationWrapper<46,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_391_AssignCastNull;
// -- Table: _AssignCastNumConstant
ram::Relation<Auto,6>* rel_392_AssignCastNumConstant;
souffle::RelationWrapper<47,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_392_AssignCastNumConstant;
// -- Table: _AssignHeapAllocation
ram::Relation<Auto,5>* rel_393_AssignHeapAllocation;
souffle::RelationWrapper<48,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_393_AssignHeapAllocation;
// -- Table: _AssignInstanceOf
ram::Relation<Auto,6>* rel_394_AssignInstanceOf;
souffle::RelationWrapper<49,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_394_AssignInstanceOf;
// -- Table: _AssignLocal
ram::Relation<Auto,5>* rel_395_AssignLocal;
souffle::RelationWrapper<50,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_395_AssignLocal;
// -- Table: _AssignNull
ram::Relation<Auto,4>* rel_396_AssignNull;
souffle::RelationWrapper<51,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_396_AssignNull;
// -- Table: _AssignNumConstant
ram::Relation<Auto,5>* rel_397_AssignNumConstant;
souffle::RelationWrapper<52,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_397_AssignNumConstant;
// -- Table: _AssignPhantomInvoke
ram::Relation<Auto,3>* rel_398_AssignPhantomInvoke;
souffle::RelationWrapper<53,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_398_AssignPhantomInvoke;
// -- Table: _AssignReturnValue
ram::Relation<Auto,2>* rel_399_AssignReturnValue;
souffle::RelationWrapper<54,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_399_AssignReturnValue;
// -- Table: _AssignUnop
ram::Relation<Auto,4>* rel_400_AssignUnop;
souffle::RelationWrapper<55,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_400_AssignUnop;
// -- Table: _BootstrapParam
ram::Relation<Auto,3>* rel_401_BootstrapParam;
souffle::RelationWrapper<56,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_401_BootstrapParam;
// -- Table: _BreakpointStmt
ram::Relation<Auto,3>* rel_402_BreakpointStmt;
souffle::RelationWrapper<57,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_402_BreakpointStmt;
// -- Table: _BroadcastReceiver
ram::Relation<Auto,1>* rel_403_BroadcastReceiver;
souffle::RelationWrapper<58,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_403_BroadcastReceiver;
// -- Table: _CallbackMethod
ram::Relation<Auto,1>* rel_404_CallbackMethod;
souffle::RelationWrapper<59,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_404_CallbackMethod;
// -- Table: _ClassHeap
ram::Relation<Auto,2>* rel_405_ClassHeap;
souffle::RelationWrapper<60,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_405_ClassHeap;
// -- Table: _ClassModifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_406_ClassModifier;
souffle::RelationWrapper<61,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_406_ClassModifier;
// -- Table: _ClassType
ram::Relation<Auto,1>* rel_407_ClassType;
souffle::RelationWrapper<62,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_407_ClassType;
// -- Table: _ComponentType
ram::Relation<Auto,2, ram::index<0,1>>* rel_408_ComponentType;
souffle::RelationWrapper<63,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_408_ComponentType;
// -- Table: _ContentProvider
ram::Relation<Auto,1>* rel_409_ContentProvider;
souffle::RelationWrapper<64,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_409_ContentProvider;
// -- Table: _Dacapo
ram::Relation<Auto,2>* rel_410_Dacapo;
souffle::RelationWrapper<65,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_410_Dacapo;
// -- Table: _DirectSuperclass
ram::Relation<Auto,2, ram::index<0>, ram::index<1>>* rel_411_DirectSuperclass;
souffle::RelationWrapper<66,ram::Relation<Auto,2, ram::index<0>, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_411_DirectSuperclass;
// -- Table: _DirectSuperinterface
ram::Relation<Auto,2>* rel_412_DirectSuperinterface;
souffle::RelationWrapper<67,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_412_DirectSuperinterface;
// -- Table: _DynamicMethodInvocation
ram::Relation<Auto,5>* rel_413_DynamicMethodInvocation;
souffle::RelationWrapper<68,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_413_DynamicMethodInvocation;
// -- Table: _EmptyArray
ram::Relation<Auto,1, ram::index<0>>* rel_414_EmptyArray;
souffle::RelationWrapper<69,ram::Relation<Auto,1, ram::index<0>>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_414_EmptyArray;
// -- Table: _EnterMonitor
ram::Relation<Auto,4>* rel_415_EnterMonitor;
souffle::RelationWrapper<70,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_415_EnterMonitor;
// -- Table: _ExceptionHandler
ram::Relation<Auto,7>* rel_416_ExceptionHandler;
souffle::RelationWrapper<71,ram::Relation<Auto,7>,Tuple<RamDomain,7>,7,true,false> wrapper_rel_416_ExceptionHandler;
// -- Table: _ExceptionHandler_Previous
ram::Relation<Auto,2, ram::index<0>>* rel_417_ExceptionHandler_Previous;
souffle::RelationWrapper<72,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_417_ExceptionHandler_Previous;
// -- Table: _ExitMonitor
ram::Relation<Auto,4>* rel_418_ExitMonitor;
souffle::RelationWrapper<73,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_418_ExitMonitor;
// -- Table: _Field
ram::Relation<Auto,4>* rel_419_Field;
souffle::RelationWrapper<74,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_419_Field;
// -- Table: _FieldInitialValue
ram::Relation<Auto,2, ram::index<1>>* rel_420_FieldInitialValue;
souffle::RelationWrapper<75,ram::Relation<Auto,2, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_420_FieldInitialValue;
// -- Table: _Field_Modifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_421_Field_Modifier;
souffle::RelationWrapper<76,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_421_Field_Modifier;
// -- Table: _FormalParam
ram::Relation<Auto,3, ram::index<1,0>>* rel_422_FormalParam;
souffle::RelationWrapper<77,ram::Relation<Auto,3, ram::index<1,0>>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_422_FormalParam;
// -- Table: _Goto
ram::Relation<Auto,4>* rel_423_Goto;
souffle::RelationWrapper<78,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_423_Goto;
// -- Table: _If
ram::Relation<Auto,4>* rel_424_If;
souffle::RelationWrapper<79,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_424_If;
// -- Table: _InterfaceType
ram::Relation<Auto,1>* rel_425_InterfaceType;
souffle::RelationWrapper<80,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_425_InterfaceType;
// -- Table: _LayoutControl
ram::Relation<Auto,3>* rel_426_LayoutControl;
souffle::RelationWrapper<81,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_426_LayoutControl;
// -- Table: _LoadArrayIndex
ram::Relation<Auto,5>* rel_427_LoadArrayIndex;
souffle::RelationWrapper<82,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_427_LoadArrayIndex;
// -- Table: _LoadInstanceField
ram::Relation<Auto,6>* rel_428_LoadInstanceField;
souffle::RelationWrapper<83,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_428_LoadInstanceField;
// -- Table: _LoadStaticField
ram::Relation<Auto,5>* rel_429_LoadStaticField;
souffle::RelationWrapper<84,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_429_LoadStaticField;
// -- Table: _LookupSwitch
ram::Relation<Auto,4>* rel_430_LookupSwitch;
souffle::RelationWrapper<85,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_430_LookupSwitch;
// -- Table: _Method
ram::Relation<Auto,6>* rel_431_Method;
souffle::RelationWrapper<86,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_431_Method;
// -- Table: _MethodHandleConstant
ram::Relation<Auto,1>* rel_432_MethodHandleConstant;
souffle::RelationWrapper<87,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_432_MethodHandleConstant;
// -- Table: _MethodInvocation_Line
ram::Relation<Auto,2, ram::index<1>>* rel_433_MethodInvocation_Line;
souffle::RelationWrapper<88,ram::Relation<Auto,2, ram::index<1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_433_MethodInvocation_Line;
// -- Table: _Method_DeclaresException
ram::Relation<Auto,2>* rel_434_Method_DeclaresException;
souffle::RelationWrapper<89,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_434_Method_DeclaresException;
// -- Table: _Method_Modifier
ram::Relation<Auto,2, ram::index<0,1>>* rel_435_Method_Modifier;
souffle::RelationWrapper<90,ram::Relation<Auto,2, ram::index<0,1>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_435_Method_Modifier;
// -- Table: _NativeReturnVar
ram::Relation<Auto,2>* rel_436_NativeReturnVar;
souffle::RelationWrapper<91,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_436_NativeReturnVar;
// -- Table: _NormalHeap
ram::Relation<Auto,2>* rel_437_NormalHeap;
souffle::RelationWrapper<92,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_437_NormalHeap;
// -- Table: _PhantomInvoke
ram::Relation<Auto,3>* rel_438_PhantomInvoke;
souffle::RelationWrapper<93,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_438_PhantomInvoke;
// -- Table: _Return
ram::Relation<Auto,4>* rel_439_Return;
souffle::RelationWrapper<94,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_439_Return;
// -- Table: _ReturnVoid
ram::Relation<Auto,3>* rel_440_ReturnVoid;
souffle::RelationWrapper<95,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_440_ReturnVoid;
// -- Table: _Service
ram::Relation<Auto,1>* rel_441_Service;
souffle::RelationWrapper<96,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_441_Service;
// -- Table: _SpecialMethodInvocation
ram::Relation<Auto,5>* rel_442_SpecialMethodInvocation;
souffle::RelationWrapper<97,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_442_SpecialMethodInvocation;
// -- Table: _StaticMethodInvocation
ram::Relation<Auto,4>* rel_443_StaticMethodInvocation;
souffle::RelationWrapper<98,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_443_StaticMethodInvocation;
// -- Table: _StoreArrayIndex
ram::Relation<Auto,5>* rel_444_StoreArrayIndex;
souffle::RelationWrapper<99,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_444_StoreArrayIndex;
// -- Table: _StoreInstanceField
ram::Relation<Auto,6>* rel_445_StoreInstanceField;
souffle::RelationWrapper<100,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_445_StoreInstanceField;
// -- Table: _StoreStaticField
ram::Relation<Auto,5>* rel_446_StoreStaticField;
souffle::RelationWrapper<101,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_446_StoreStaticField;
// -- Table: _StringConstant
ram::Relation<Auto,1>* rel_447_StringConstant;
souffle::RelationWrapper<102,ram::Relation<Auto,1>,Tuple<RamDomain,1>,1,true,false> wrapper_rel_447_StringConstant;
// -- Table: _TableSwitch
ram::Relation<Auto,4>* rel_448_TableSwitch;
souffle::RelationWrapper<103,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_448_TableSwitch;
// -- Table: _Tamiflex_ReflectionData
ram::Relation<Auto,6>* rel_449_Tamiflex_ReflectionData;
souffle::RelationWrapper<104,ram::Relation<Auto,6>,Tuple<RamDomain,6>,6,true,false> wrapper_rel_449_Tamiflex_ReflectionData;
// -- Table: _Tamiflex_ToDoopFormat
ram::Relation<Auto,2, ram::index<0>>* rel_450_Tamiflex_ToDoopFormat;
// -- Table: _ThisVar
ram::Relation<Auto,2, ram::index<0>>* rel_451_ThisVar;
souffle::RelationWrapper<105,ram::Relation<Auto,2, ram::index<0>>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_451_ThisVar;
// -- Table: _Throw
ram::Relation<Auto,4>* rel_452_Throw;
souffle::RelationWrapper<106,ram::Relation<Auto,4>,Tuple<RamDomain,4>,4,true,false> wrapper_rel_452_Throw;
// -- Table: _ThrowNull
ram::Relation<Auto,3>* rel_453_ThrowNull;
souffle::RelationWrapper<107,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_453_ThrowNull;
// -- Table: _UnsupportedInstruction
ram::Relation<Auto,3>* rel_454_UnsupportedInstruction;
souffle::RelationWrapper<108,ram::Relation<Auto,3>,Tuple<RamDomain,3>,3,true,false> wrapper_rel_454_UnsupportedInstruction;
// -- Table: _Var_DeclaringMethod
ram::Relation<Auto,2>* rel_455_Var_DeclaringMethod;
souffle::RelationWrapper<109,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_455_Var_DeclaringMethod;
// -- Table: _Var_Type
ram::Relation<Auto,2>* rel_456_Var_Type;
souffle::RelationWrapper<110,ram::Relation<Auto,2>,Tuple<RamDomain,2>,2,true,false> wrapper_rel_456_Var_Type;
// -- Table: _VirtualMethodInvocation
ram::Relation<Auto,5>* rel_457_VirtualMethodInvocation;
souffle::RelationWrapper<111,ram::Relation<Auto,5>,Tuple<RamDomain,5>,5,true,false> wrapper_rel_457_VirtualMethodInvocation;
// -- Table: isArrayType
ram::Relation<Auto,1, ram::index<0>>* rel_458_isArrayType;
// -- Table: isAssignCast_Insn
ram::Relation<Auto,1>* rel_459_isAssignCast_Insn;
// -- Table: isAssignHeapAllocation_Insn
ram::Relation<Auto,1>* rel_460_isAssignHeapAllocation_Insn;
// -- Table: isAssignLocal_Insn
ram::Relation<Auto,1>* rel_461_isAssignLocal_Insn;
// -- Table: isAssignNull_Insn
ram::Relation<Auto,1>* rel_462_isAssignNull_Insn;
// -- Table: isClassHeap
ram::Relation<Auto,1>* rel_463_isClassHeap;
// -- Table: isClassType
ram::Relation<Auto,1, ram::index<0>>* rel_464_isClassType;
// -- Table: isClinitContext
ram::Relation<Auto,1>* rel_465_isClinitContext;
// -- Table: isContext
ram::Relation<Auto,1, ram::index<0>>* rel_466_isContext;
// -- Table: @delta_isContext
ram::Relation<Auto,1>* rel_467_delta_isContext;
// -- Table: @new_isContext
ram::Relation<Auto,1>* rel_468_new_isContext;
// -- Table: isExceptionHandler
ram::Relation<Auto,1>* rel_469_isExceptionHandler;
// -- Table: isField
ram::Relation<Auto,1, ram::index<0>>* rel_470_isField;
// -- Table: isHContext
ram::Relation<Auto,1, ram::index<0>>* rel_471_isHContext;
// -- Table: @delta_isHContext
ram::Relation<Auto,1>* rel_472_delta_isHContext;
// -- Table: @new_isHContext
ram::Relation<Auto,1>* rel_473_new_isHContext;
// -- Table: isHeapAllocation
ram::Relation<Auto,1, ram::index<0>>* rel_474_isHeapAllocation;
// -- Table: isImmutableContext
ram::Relation<Auto,1>* rel_475_isImmutableContext;
// -- Table: isImmutableHContext
ram::Relation<Auto,1>* rel_476_isImmutableHContext;
// -- Table: isInitialContext
ram::Relation<Auto,1>* rel_477_isInitialContext;
// -- Table: isInstruction
ram::Relation<Auto,1, ram::index<0>>* rel_478_isInstruction;
// -- Table: isInterfaceType
ram::Relation<Auto,1, ram::index<0>>* rel_479_isInterfaceType;
// -- Table: isJVMStartupContext
ram::Relation<Auto,1>* rel_480_isJVMStartupContext;
// -- Table: isJVMStartupHContext
ram::Relation<Auto,1>* rel_481_isJVMStartupHContext;
// -- Table: isLoadArrayIndex_Insn
ram::Relation<Auto,1>* rel_482_isLoadArrayIndex_Insn;
// -- Table: isLoadInstanceField_Insn
ram::Relation<Auto,1>* rel_483_isLoadInstanceField_Insn;
// -- Table: isLoadStaticField_Insn
ram::Relation<Auto,1>* rel_484_isLoadStaticField_Insn;
// -- Table: isMethod
ram::Relation<Auto,1, ram::index<0>>* rel_485_isMethod;
// -- Table: isMethodInvocation
ram::Relation<Auto,1, ram::index<0>>* rel_486_isMethodInvocation;
// -- Table: isNumConstant
ram::Relation<Auto,1>* rel_487_isNumConstant;
// -- Table: isPrimitiveType
ram::Relation<Auto,1, ram::index<0>>* rel_488_isPrimitiveType;
// -- Table: isReferenceType
ram::Relation<Auto,1, ram::index<0>>* rel_489_isReferenceType;
// -- Table: isReturnNonvoid_Insn
ram::Relation<Auto,1>* rel_490_isReturnNonvoid_Insn;
// -- Table: isStaticMethodInvocation_Insn
ram::Relation<Auto,1, ram::index<0>>* rel_491_isStaticMethodInvocation_Insn;
// -- Table: isStoreArrayIndex_Insn
ram::Relation<Auto,1>* rel_492_isStoreArrayIndex_Insn;
// -- Table: isStoreInstanceField_Insn
ram::Relation<Auto,1>* rel_493_isStoreInstanceField_Insn;
// -- Table: isStoreStaticField_Insn
ram::Relation<Auto,1>* rel_494_isStoreStaticField_Insn;
// -- Table: isStringConstant
ram::Relation<Auto,1, ram::index<0>>* rel_495_isStringConstant;
// -- Table: isThrow_Insn
ram::Relation<Auto,1>* rel_496_isThrow_Insn;
// -- Table: isType
ram::Relation<Auto,1, ram::index<0>>* rel_497_isType;
// -- Table: isValue
ram::Relation<Auto,1, ram::index<0>>* rel_498_isValue;
// -- Table: isVar
ram::Relation<Auto,1, ram::index<0>>* rel_499_isVar;
// -- Table: isVirtualMethodInvocation_Insn
ram::Relation<Auto,1, ram::index<0>>* rel_500_isVirtualMethodInvocation_Insn;
public:
Sf_pts2o1h_opt(std::string pf="profile.log") : profiling_fname(pf),
rel_1_AllConcreteImplementations(new ram::Relation<Auto,2, ram::index<1>>()),
rel_2_AllocatedObjectSupportsFinalize(new ram::Relation<Auto,2, ram::index<0>>()),
rel_3_AllocationShouldBeMergedPerMethod(new ram::Relation<Auto,2>()),
rel_4_AllocationsPerMethodAndType(new ram::Relation<Auto,3>()),
rel_5_AndroidAppComponent(new ram::Relation<Auto,1>()),
rel_6_AndroidApplicationClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_7_AndroidApplicationListenerClass(new ram::Relation<Auto,1>()),
rel_8_AndroidLibraryListenerType(new ram::Relation<Auto,1>()),
rel_9_AndroidLibraryType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_10_AppMethodOverridesAndroidLibraryMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_11_ApplicationMethod(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_11_ApplicationMethod(*rel_11_ApplicationMethod,symTable,"ApplicationMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_12_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_13_delta_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_14_new_ApplicationObjectFlowingToLibrary(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_15_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_16_delta_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_17_new_ApplicationObjectFlowingToLibraryStaticType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_18_ApplicationVar(new ram::Relation<Auto,1>()),
rel_19_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<3,2,0,1>>()),
rel_20_delta_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_21_new_ArrayIndexPointsTo(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_22_AssignCast(new ram::Relation<Auto,4, ram::index<1>, ram::index<3>>()),
rel_23_AssignCastNumConstant_Id(new ram::Relation<Auto,2, ram::index<0>>()),
rel_24_AssignCast_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_25_AssignCast_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_26_AssignContextInsensitiveHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_27_AssignHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_28_AssignHeapAllocation_Heap(new ram::Relation<Auto,2, ram::index<0>>()),
rel_29_AssignInstruction_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_30_AssignLocal(new ram::Relation<Auto,3, ram::index<0>>()),
rel_31_AssignLocal_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_32_AssignNormalHeapAllocation(new ram::Relation<Auto,3, ram::index<2>>()),
rel_33_AssignNull(new ram::Relation<Auto,2, ram::index<1>>()),
rel_34_AssignNumConstant_Id(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_35_AssignReturnValue(new ram::Relation<Auto,2, ram::index<0>>()),
rel_36_CallGraphEdge(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
wrapper_rel_36_CallGraphEdge(*rel_36_CallGraphEdge,symTable,"CallGraphEdge",std::array<const char *,4>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:MethodInvocation[s:Instruction]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Method"},std::array<const char *,4>{"?callerCtx","?invocation","?calleeCtx","?method"}),
rel_37_delta_CallGraphEdge(new ram::Relation<Auto,4>()),
rel_38_new_CallGraphEdge(new ram::Relation<Auto,4>()),
rel_39_ClassHasPossibleEntryPoint(new ram::Relation<Auto,1>()),
rel_40_ClassInitializer(new ram::Relation<Auto,2, ram::index<0>>()),
rel_41_ClassIsAboveOtherInNamingHierarchy(new ram::Relation<Auto,2, ram::index<1>>()),
rel_42_ClassNameIndexes(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_43_delta_ClassNameIndexes(new ram::Relation<Auto,2>()),
rel_44_new_ClassNameIndexes(new ram::Relation<Auto,2>()),
rel_45_ClassWithTopLevelEntryPoint(new ram::Relation<Auto,1, ram::index<0>>()),
rel_46_CollectionLibraryClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_47_ConcreteClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_48_ConcreteImplementations(new ram::Relation<Auto,2>()),
rel_49_ConcreteType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_50_ContextForEntryPoint(new ram::Relation<Auto,2>()),
rel_51_DotsInClassName(new ram::Relation<Auto,2, ram::index<0>>()),
rel_52_ExceptionHandler_Before(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_53_delta_ExceptionHandler_Before(new ram::Relation<Auto,2>()),
rel_54_new_ExceptionHandler_Before(new ram::Relation<Auto,2>()),
rel_55_ExceptionHandler_Begin(new ram::Relation<Auto,2, ram::index<0>>()),
rel_56_ExceptionHandler_End(new ram::Relation<Auto,2, ram::index<0>>()),
rel_57_ExceptionHandler_FormalParam(new ram::Relation<Auto,2, ram::index<0>>()),
rel_58_ExceptionHandler_Impossible(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_59_ExceptionHandler_InRange(new ram::Relation<Auto,2, ram::index<1>>()),
rel_60_ExceptionHandler_Index(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_61_ExceptionHandler_Method(new ram::Relation<Auto,2>()),
rel_62_ExceptionHandler_SameBlock_PartialOrder(new ram::Relation<Auto,2, ram::index<1>>()),
rel_63_ExceptionHandler_SameBlock_Repr(new ram::Relation<Auto,2, ram::index<0>>()),
rel_64_ExceptionHandler_SameInsn_PartialOrder(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_65_ExceptionHandler_SameInsn_Repr(new ram::Relation<Auto,2, ram::index<0>>()),
rel_66_ExceptionHandler_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_67_ExceptionHandler_TypeIsCaught(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_68_ExceptionHeapTypeRepresentativeOrdinal(new ram::Relation<Auto,2>()),
rel_69_ExceptionType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_70_ExceptionTypeToHeap(new ram::Relation<Auto,2, ram::index<1>>()),
rel_71_FakeInvocation_RegisterFinalize0(new ram::Relation<Auto,2>()),
rel_72_FieldInstruction_Signature(new ram::Relation<Auto,2, ram::index<0>>()),
rel_73_Field_DeclaringType(new ram::Relation<Auto,2, ram::index<0>>()),
rel_74_ForcedReachableAndroidContext(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_75_delta_ForcedReachableAndroidContext(new ram::Relation<Auto,2>()),
rel_76_new_ForcedReachableAndroidContext(new ram::Relation<Auto,2>()),
rel_77_FormalOfForcedReachableContext(new ram::Relation<Auto,3, ram::index<2>, ram::index<0,1,2>>()),
rel_78_delta_FormalOfForcedReachableContext(new ram::Relation<Auto,3>()),
rel_79_new_FormalOfForcedReachableContext(new ram::Relation<Auto,3>()),
rel_80_FormalsForEntryPoints(new ram::Relation<Auto,2>()),
rel_81_HContextForEntryPoint(new ram::Relation<Auto,2, ram::index<1>>()),
rel_82_HeapAllocation_ContextInsensitive(new ram::Relation<Auto,1, ram::index<0>>()),
rel_83_HeapAllocation_Keep(new ram::Relation<Auto,1, ram::index<0>>()),
rel_84_HeapAllocation_Merge(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_85_HeapAllocation_Null(new ram::Relation<Auto,1, ram::index<0>>()),
rel_86_HeapAllocation_Special(new ram::Relation<Auto,1, ram::index<0>>()),
rel_87_HeapAllocation_Type(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_88_HeapIsMergedString(new ram::Relation<Auto,1, ram::index<0>>()),
rel_89_HeapIsMergedStringFactory(new ram::Relation<Auto,1, ram::index<0>>()),
rel_90_HeapRepresentative(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_91_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_92_delta_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_93_new_ImmutableContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_94_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_95_delta_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_96_new_ImmutableContextFromHContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_97_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_98_delta_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_99_new_ImmutableHContextFromContext(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_100_ImplicitReachable(new ram::Relation<Auto,1>()),
rel_101_ImplicitlyInstantiatedLibraryType(new ram::Relation<Auto,1>()),
rel_102_InitializedClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_103_delta_InitializedClass(new ram::Relation<Auto,1>()),
rel_104_new_InitializedClass(new ram::Relation<Auto,1>()),
rel_105_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<4,2,3,0,1>>()),
rel_106_delta_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<0,1,2,3,4>>()),
rel_107_new_InstanceFieldPointsTo(new ram::Relation<Auto,5, ram::index<0,1,2,3,4>>()),
rel_108_Instruction_Index(new ram::Relation<Auto,2, ram::index<0>>()),
rel_109_Instruction_Method(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_110_delta_Instruction_Method(new ram::Relation<Auto,2, ram::index<0>>()),
rel_111_new_Instruction_Method(new ram::Relation<Auto,2, ram::index<0>>()),
rel_112_Instruction_Throws(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_113_delta_Instruction_Throws(new ram::Relation<Auto,4>()),
rel_114_new_Instruction_Throws(new ram::Relation<Auto,4>()),
rel_115_LastDot(new ram::Relation<Auto,2, ram::index<0>>()),
rel_116_LayoutControl(new ram::Relation<Auto,3, ram::index<1>>()),
rel_117_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_118_delta_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_119_new_LibraryReachableAppListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_120_ListenerType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_121_LoadArrayIndex(new ram::Relation<Auto,3, ram::index<2>>()),
rel_122_LoadArrayIndex_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_123_LoadArrayIndex_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_124_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_125_delta_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_126_new_LoadHeapArrayIndex(new ram::Relation<Auto,4, ram::index<1,3,0,2>>()),
rel_127_LoadHeapInstanceField(new ram::Relation<Auto,5, ram::index<2,3,4,0,1>>()),
rel_128_delta_LoadHeapInstanceField(new ram::Relation<Auto,5>()),
rel_129_new_LoadHeapInstanceField(new ram::Relation<Auto,5>()),
rel_130_LoadInstanceField(new ram::Relation<Auto,4>()),
rel_131_LoadInstanceField_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_132_LoadInstanceField_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_133_LoadStaticField(new ram::Relation<Auto,3, ram::index<0>, ram::index<2>>()),
rel_134_LoadStaticField_To(new ram::Relation<Auto,2, ram::index<0>>()),
rel_135_MainClass(new ram::Relation<Auto,1>()),
rel_136_MainMethodArgArray(new ram::Relation<Auto,1>()),
rel_137_MainMethodArgArrayContent(new ram::Relation<Auto,1>()),
rel_138_MainMethodDeclaration(new ram::Relation<Auto,1>()),
rel_139_MainThread(new ram::Relation<Auto,2>()),
rel_140_MainThreadGroup(new ram::Relation<Auto,2>()),
rel_141_MethodAllocationMergeThreshold(new ram::Relation<Auto,1>()),
rel_142_MethodAndTypeToHeap(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_143_MethodAndTypeToMergedHeap(new ram::Relation<Auto,3, ram::index<1,2>>()),
rel_144_MethodAndTypeToRepresentative(new ram::Relation<Auto,3>()),
rel_145_MethodDeclaredOrInherited(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_146_delta_MethodDeclaredOrInherited(new ram::Relation<Auto,2>()),
rel_147_new_MethodDeclaredOrInherited(new ram::Relation<Auto,2>()),
rel_148_MethodImplemented(new ram::Relation<Auto,4, ram::index<2>, ram::index<0,1,2>>()),
rel_149_MethodInvocation_Method(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_150_MethodLookup(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_151_delta_MethodLookup(new ram::Relation<Auto,4, ram::index<2>>()),
rel_152_new_MethodLookup(new ram::Relation<Auto,4, ram::index<2>>()),
rel_153_Method_DeclaringType(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_154_Method_Descriptor(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_155_Method_ReturnType(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_156_Method_SimpleName(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_157_MinHeapOrdinalPerMethodAndType(new ram::Relation<Auto,3, ram::index<0>>()),
rel_158_MinRepresentativeHeapToPickFromOrdinal(new ram::Relation<Auto,2, ram::index<0>>()),
rel_159_MockForFormal(new ram::Relation<Auto,4, ram::index<3>>()),
rel_160_MockObject(new ram::Relation<Auto,2, ram::index<1>>()),
rel_161_MockObjectContext(new ram::Relation<Auto,3>()),
rel_162_MockObjectForComponentType(new ram::Relation<Auto,2, ram::index<1>>()),
rel_163_MockObjectForType(new ram::Relation<Auto,2, ram::index<1>>()),
rel_164_NotEmptyArrayValue(new ram::Relation<Auto,1, ram::index<0>>()),
rel_165_NotLastDot(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_166_NotSpecialObject(new ram::Relation<Auto,1, ram::index<0>>()),
rel_167_ObjToMock(new ram::Relation<Auto,1, ram::index<0>>()),
rel_168_delta_ObjToMock(new ram::Relation<Auto,1>()),
rel_169_new_ObjToMock(new ram::Relation<Auto,1>()),
rel_170_ObjectMultipleAllocated(new ram::Relation<Auto,1, ram::index<0>>()),
rel_171_ObjectShouldNotBeRefined(new ram::Relation<Auto,1, ram::index<0>>()),
rel_172_OptAssignCast(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_173_delta_OptAssignCast(new ram::Relation<Auto,3>()),
rel_174_new_OptAssignCast(new ram::Relation<Auto,3>()),
rel_175_OptAssignHeapAllocation(new ram::Relation<Auto,2, ram::index<1>>()),
rel_176_OptForNameInvocation(new ram::Relation<Auto,2>()),
rel_177_OptInterproceduralAssign(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_178_delta_OptInterproceduralAssign(new ram::Relation<Auto,4>()),
rel_179_new_OptInterproceduralAssign(new ram::Relation<Auto,4>()),
rel_180_OptLoadArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_181_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_182_delta_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_183_new_OptLoadHeapArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_184_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_185_delta_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_186_new_OptSpecialMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_187_OptStoreArrayIndex(new ram::Relation<Auto,2, ram::index<1>>()),
rel_188_OptStoreIntoArray(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_189_delta_OptStoreIntoArray(new ram::Relation<Auto,4>()),
rel_190_new_OptStoreIntoArray(new ram::Relation<Auto,4>()),
rel_191_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_192_delta_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_193_new_OptVirtualMethodInvocationBase(new ram::Relation<Auto,2>()),
rel_194_OverridesFinalize(new ram::Relation<Auto,1, ram::index<0>>()),
rel_195_OverridingProtectedMethodOfComponent(new ram::Relation<Auto,1>()),
rel_196_OverridingProtectedOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_197_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_198_delta_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_199_new_OverridingProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_200_PossibleEntryPoint(new ram::Relation<Auto,1>()),
rel_201_PrefixAbove(new ram::Relation<Auto,3>()),
rel_202_PrefixBelow(new ram::Relation<Auto,2>()),
rel_203_ProtectedMethodOfComponent(new ram::Relation<Auto,1>()),
rel_204_ProtectedOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_205_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_206_delta_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_207_new_ProtectedOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_208_PublicMethodOfComponent(new ram::Relation<Auto,1>()),
rel_209_PublicOnMethodOfLayoutControl(new ram::Relation<Auto,1>()),
rel_210_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1, ram::index<0>>()),
rel_211_delta_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_212_new_PublicOnMethodOfReachableListener(new ram::Relation<Auto,1>()),
rel_213_Reachable(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_213_Reachable(*rel_213_Reachable,symTable,"Reachable",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_214_delta_Reachable(new ram::Relation<Auto,1>()),
rel_215_new_Reachable(new ram::Relation<Auto,1>()),
rel_216_ReachableApplicationObjectOfType(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_217_delta_ReachableApplicationObjectOfType(new ram::Relation<Auto,3>()),
rel_218_new_ReachableApplicationObjectOfType(new ram::Relation<Auto,3>()),
rel_219_ReachableContext(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_220_delta_ReachableContext(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_221_new_ReachableContext(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_222_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_223_delta_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2>()),
rel_224_new_ReachableCurrentThreadInvocation(new ram::Relation<Auto,2>()),
rel_225_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1, ram::index<0>>()),
rel_226_delta_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1>()),
rel_227_new_ReachableLoadArrayIndexBase(new ram::Relation<Auto,1>()),
rel_228_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1, ram::index<0>>()),
rel_229_delta_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1>()),
rel_230_new_ReachableStoreArrayIndexBase(new ram::Relation<Auto,1>()),
rel_231_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1, ram::index<0>>()),
rel_232_delta_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1>()),
rel_233_new_ReachableStoreStaticFieldFrom(new ram::Relation<Auto,1>()),
rel_234_ReceiverPointsTo(new ram::Relation<Auto,5>()),
rel_235_ReifiedAndroidObjectValue(new ram::Relation<Auto,2, ram::index<1>>()),
rel_236_ReifiedComponent(new ram::Relation<Auto,2>()),
rel_237_ReifiedLayoutControl(new ram::Relation<Auto,3, ram::index<0,1>>()),
rel_238_ReifiedLibraryObject(new ram::Relation<Auto,2>()),
rel_239_RepresentativesToPickFrom(new ram::Relation<Auto,2, ram::index<1>>()),
rel_240_ResolveInvocation(new ram::Relation<Auto,3, ram::index<0,1>>()),
rel_241_ReturnNonvoid_Var(new ram::Relation<Auto,2, ram::index<0>>()),
rel_242_ReturnVar(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_243_delta_ReturnVar(new ram::Relation<Auto,2, ram::index<1>>()),
rel_244_new_ReturnVar(new ram::Relation<Auto,2, ram::index<1>>()),
rel_245_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_246_delta_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_247_new_RunningThread(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_248_SiteShouldNotBeRefined(new ram::Relation<Auto,1, ram::index<0>>()),
rel_249_SpecialLibraryClass(new ram::Relation<Auto,1, ram::index<0>>()),
rel_250_SpecialLibraryMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_251_SpecialLibraryObject(new ram::Relation<Auto,1>()),
rel_252_SpecialMethodInvocation_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_253_StaticFieldPointsTo(new ram::Relation<Auto,3, ram::index<2,0,1>>()),
rel_254_delta_StaticFieldPointsTo(new ram::Relation<Auto,3>()),
rel_255_new_StaticFieldPointsTo(new ram::Relation<Auto,3>()),
rel_256_StaticMethodInvocation(new ram::Relation<Auto,3, ram::index<1>, ram::index<2>>()),
rel_257_StaticToActualType(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_258_Stats_Metrics(new ram::Relation<Auto,3>()),
wrapper_rel_258_Stats_Metrics(*rel_258_Stats_Metrics,symTable,"Stats_Metrics",std::array<const char *,3>{"s:symbol","s:symbol","i:number"},std::array<const char *,3>{"order","msg","c"}),
rel_259_Stats_Simple_ApplicationConcreteMethod(new ram::Relation<Auto,1>()),
wrapper_rel_259_Stats_Simple_ApplicationConcreteMethod(*rel_259_Stats_Simple_ApplicationConcreteMethod,symTable,"Stats_Simple_ApplicationConcreteMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_260_Stats_Simple_Application_ArrayIndexPointsTo(new ram::Relation<Auto,4>()),
wrapper_rel_260_Stats_Simple_Application_ArrayIndexPointsTo(*rel_260_Stats_Simple_Application_ArrayIndexPointsTo,symTable,"Stats_Simple_Application_ArrayIndexPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,4>{"?hctx","?value","?baseHCtx","?basevalue"}),
rel_261_Stats_Simple_Application_Cast(new ram::Relation<Auto,4>()),
wrapper_rel_261_Stats_Simple_Application_Cast(*rel_261_Stats_Simple_Application_Cast,symTable,"Stats_Simple_Application_Cast",std::array<const char *,4>{"s:Type","s:Var","s:Var","s:Method"},std::array<const char *,4>{"?type","?from","?to","?inmethod"}),
rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation(*rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation,symTable,"Stats_Simple_Application_EmptyVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo(*rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo,symTable,"Stats_Simple_Application_InsensArrayIndexPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,2>{"?value","?basevalue"}),
rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo(new ram::Relation<Auto,3>()),
wrapper_rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo(*rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo,symTable,"Stats_Simple_Application_InsensInstanceFieldPointsTo",std::array<const char *,3>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,3>{"?value","?sig","?basevalue"}),
rel_265_Stats_Simple_Application_InsensVarPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_265_Stats_Simple_Application_InsensVarPointsTo(*rel_265_Stats_Simple_Application_InsensVarPointsTo,symTable,"Stats_Simple_Application_InsensVarPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Var"},std::array<const char *,2>{"?value","?var"}),
rel_266_Stats_Simple_Application_InstanceFieldPointsTo(new ram::Relation<Auto,5>()),
wrapper_rel_266_Stats_Simple_Application_InstanceFieldPointsTo(*rel_266_Stats_Simple_Application_InstanceFieldPointsTo,symTable,"Stats_Simple_Application_InstanceFieldPointsTo",std::array<const char *,5>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","s:Field","r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,5>{"?hctx","?value","?sig","?baseHCtx","?basevalue"}),
rel_267_Stats_Simple_Application_NullVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_267_Stats_Simple_Application_NullVirtualMethodInvocation(*rel_267_Stats_Simple_Application_NullVirtualMethodInvocation,symTable,"Stats_Simple_Application_NullVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_268_Stats_Simple_Application_PolymorphicCallSite(new ram::Relation<Auto,1>()),
wrapper_rel_268_Stats_Simple_Application_PolymorphicCallSite(*rel_268_Stats_Simple_Application_PolymorphicCallSite,symTable,"Stats_Simple_Application_PolymorphicCallSite",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_269_Stats_Simple_Application_PotentiallyFailingCast(new ram::Relation<Auto,3>()),
wrapper_rel_269_Stats_Simple_Application_PotentiallyFailingCast(*rel_269_Stats_Simple_Application_PotentiallyFailingCast,symTable,"Stats_Simple_Application_PotentiallyFailingCast",std::array<const char *,3>{"s:Type","s:Var","s:Var"},std::array<const char *,3>{"?type","?from","?to"}),
rel_270_Stats_Simple_Application_ReachableCast(new ram::Relation<Auto,4>()),
wrapper_rel_270_Stats_Simple_Application_ReachableCast(*rel_270_Stats_Simple_Application_ReachableCast,symTable,"Stats_Simple_Application_ReachableCast",std::array<const char *,4>{"s:Method","s:Type","s:Var","s:Var"},std::array<const char *,4>{"?inmethod","?type","?to","?from"}),
rel_271_Stats_Simple_Application_ReachableMethod(new ram::Relation<Auto,1>()),
wrapper_rel_271_Stats_Simple_Application_ReachableMethod(*rel_271_Stats_Simple_Application_ReachableMethod,symTable,"Stats_Simple_Application_ReachableMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation(*rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation,symTable,"Stats_Simple_Application_ReachableVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_273_Stats_Simple_Application_VarPointsTo(new ram::Relation<Auto,4>()),
wrapper_rel_273_Stats_Simple_Application_VarPointsTo(*rel_273_Stats_Simple_Application_VarPointsTo,symTable,"Stats_Simple_Application_VarPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,4>{"?hctx","?value","?ctx","?var"}),
rel_274_Stats_Simple_Application_VirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_274_Stats_Simple_Application_VirtualMethodInvocation(*rel_274_Stats_Simple_Application_VirtualMethodInvocation,symTable,"Stats_Simple_Application_VirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_275_Stats_Simple_AssignedVariable(new ram::Relation<Auto,1>()),
wrapper_rel_275_Stats_Simple_AssignedVariable(*rel_275_Stats_Simple_AssignedVariable,symTable,"Stats_Simple_AssignedVariable",std::array<const char *,1>{"s:Var"},std::array<const char *,1>{"?var"}),
rel_276_Stats_Simple_EmptyVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_276_Stats_Simple_EmptyVirtualMethodInvocation(*rel_276_Stats_Simple_EmptyVirtualMethodInvocation,symTable,"Stats_Simple_EmptyVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_277_Stats_Simple_InsensArrayIndexPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_277_Stats_Simple_InsensArrayIndexPointsTo(*rel_277_Stats_Simple_InsensArrayIndexPointsTo,symTable,"Stats_Simple_InsensArrayIndexPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,2>{"?value","?basevalue"}),
rel_278_Stats_Simple_InsensCallGraphEdge(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_278_Stats_Simple_InsensCallGraphEdge(*rel_278_Stats_Simple_InsensCallGraphEdge,symTable,"Stats_Simple_InsensCallGraphEdge",std::array<const char *,2>{"s:MethodInvocation[s:Instruction]","s:Method"},std::array<const char *,2>{"?from","?to"}),
rel_279_Stats_Simple_InsensInstanceFieldPointsTo(new ram::Relation<Auto,3>()),
wrapper_rel_279_Stats_Simple_InsensInstanceFieldPointsTo(*rel_279_Stats_Simple_InsensInstanceFieldPointsTo,symTable,"Stats_Simple_InsensInstanceFieldPointsTo",std::array<const char *,3>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field","s:Value[s:HeapAllocation,s:NumConstant]"},std::array<const char *,3>{"?value","?sig","?basevalue"}),
rel_280_Stats_Simple_InsensReachableApplicationMethod(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_280_Stats_Simple_InsensReachableApplicationMethod(*rel_280_Stats_Simple_InsensReachableApplicationMethod,symTable,"Stats_Simple_InsensReachableApplicationMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_281_Stats_Simple_InsensReachableVar(new ram::Relation<Auto,1>()),
wrapper_rel_281_Stats_Simple_InsensReachableVar(*rel_281_Stats_Simple_InsensReachableVar,symTable,"Stats_Simple_InsensReachableVar",std::array<const char *,1>{"s:Var"},std::array<const char *,1>{"?var"}),
rel_282_Stats_Simple_InsensStaticFieldPointsTo(new ram::Relation<Auto,2>()),
wrapper_rel_282_Stats_Simple_InsensStaticFieldPointsTo(*rel_282_Stats_Simple_InsensStaticFieldPointsTo,symTable,"Stats_Simple_InsensStaticFieldPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Field"},std::array<const char *,2>{"?value","?sig"}),
rel_283_Stats_Simple_InsensVarPointsTo(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
wrapper_rel_283_Stats_Simple_InsensVarPointsTo(*rel_283_Stats_Simple_InsensVarPointsTo,symTable,"Stats_Simple_InsensVarPointsTo",std::array<const char *,2>{"s:Value[s:HeapAllocation,s:NumConstant]","s:Var"},std::array<const char *,2>{"?value","?var"}),
rel_284_Stats_Simple_NonReachableApplicationConcreteMethod(new ram::Relation<Auto,1>()),
wrapper_rel_284_Stats_Simple_NonReachableApplicationConcreteMethod(*rel_284_Stats_Simple_NonReachableApplicationConcreteMethod,symTable,"Stats_Simple_NonReachableApplicationConcreteMethod",std::array<const char *,1>{"s:Method"},std::array<const char *,1>{"?method"}),
rel_285_Stats_Simple_NullVirtualMethodInvocation(new ram::Relation<Auto,1>()),
wrapper_rel_285_Stats_Simple_NullVirtualMethodInvocation(*rel_285_Stats_Simple_NullVirtualMethodInvocation,symTable,"Stats_Simple_NullVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_286_Stats_Simple_PolymorphicCallSite(new ram::Relation<Auto,1>()),
wrapper_rel_286_Stats_Simple_PolymorphicCallSite(*rel_286_Stats_Simple_PolymorphicCallSite,symTable,"Stats_Simple_PolymorphicCallSite",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_287_Stats_Simple_PotentiallyFailingCast(new ram::Relation<Auto,3>()),
wrapper_rel_287_Stats_Simple_PotentiallyFailingCast(*rel_287_Stats_Simple_PotentiallyFailingCast,symTable,"Stats_Simple_PotentiallyFailingCast",std::array<const char *,3>{"s:Type","s:Var","s:Var"},std::array<const char *,3>{"?type","?from","?to"}),
rel_288_Stats_Simple_ReachableApplicationMethod(new ram::Relation<Auto,2>()),
wrapper_rel_288_Stats_Simple_ReachableApplicationMethod(*rel_288_Stats_Simple_ReachableApplicationMethod,symTable,"Stats_Simple_ReachableApplicationMethod",std::array<const char *,2>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Method"},std::array<const char *,2>{"?ctx","?method"}),
rel_289_Stats_Simple_ReachableCast(new ram::Relation<Auto,4, ram::index<0>>()),
wrapper_rel_289_Stats_Simple_ReachableCast(*rel_289_Stats_Simple_ReachableCast,symTable,"Stats_Simple_ReachableCast",std::array<const char *,4>{"s:Method","s:Type","s:Var","s:Var"},std::array<const char *,4>{"?inmethod","?type","?to","?from"}),
rel_290_Stats_Simple_ReachableVar(new ram::Relation<Auto,2>()),
wrapper_rel_290_Stats_Simple_ReachableVar(*rel_290_Stats_Simple_ReachableVar,symTable,"Stats_Simple_ReachableVar",std::array<const char *,2>{"r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,2>{"?ctx","?var"}),
rel_291_Stats_Simple_ReachableVirtualMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_291_Stats_Simple_ReachableVirtualMethodInvocation(*rel_291_Stats_Simple_ReachableVirtualMethodInvocation,symTable,"Stats_Simple_ReachableVirtualMethodInvocation",std::array<const char *,1>{"s:MethodInvocation[s:Instruction]"},std::array<const char *,1>{"?invocation"}),
rel_292_Stats_Simple_VirtualCallGraphEdge(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_292_Stats_Simple_VirtualCallGraphEdge(*rel_292_Stats_Simple_VirtualCallGraphEdge,symTable,"Stats_Simple_VirtualCallGraphEdge",std::array<const char *,2>{"s:MethodInvocation[s:Instruction]","s:Method"},std::array<const char *,2>{"?from","?to"}),
rel_293_Stats_Simple_VirtualTargets(new ram::Relation<Auto,2>()),
rel_294_StoreArrayIndex(new ram::Relation<Auto,3, ram::index<2>>()),
rel_295_StoreArrayIndex_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_296_StoreArrayIndex_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_297_StoreHeapArrayIndex(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_298_delta_StoreHeapArrayIndex(new ram::Relation<Auto,4>()),
rel_299_new_StoreHeapArrayIndex(new ram::Relation<Auto,4>()),
rel_300_StoreHeapInstanceField(new ram::Relation<Auto,5, ram::index<3,4,0,1,2>>()),
rel_301_delta_StoreHeapInstanceField(new ram::Relation<Auto,5>()),
rel_302_new_StoreHeapInstanceField(new ram::Relation<Auto,5>()),
rel_303_StoreInstanceField(new ram::Relation<Auto,4>()),
rel_304_StoreInstanceField_Base(new ram::Relation<Auto,2, ram::index<0>>()),
rel_305_StoreInstanceField_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_306_StoreStaticField(new ram::Relation<Auto,3, ram::index<0>, ram::index<2>>()),
rel_307_StoreStaticField_From(new ram::Relation<Auto,2, ram::index<0>>()),
rel_308_StringFactoryHeap(new ram::Relation<Auto,1, ram::index<0>>()),
rel_309_StringFactoryType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_310_Subclass(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_311_delta_Subclass(new ram::Relation<Auto,2>()),
rel_312_new_Subclass(new ram::Relation<Auto,2>()),
rel_313_SubtypeOf(new ram::Relation<Auto,2, ram::index<1>, ram::index<0,1>>()),
rel_314_delta_SubtypeOf(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_315_new_SubtypeOf(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_316_Superinterface(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_317_delta_Superinterface(new ram::Relation<Auto,2, ram::index<1>>()),
rel_318_new_Superinterface(new ram::Relation<Auto,2, ram::index<1>>()),
rel_319_SupertypeOf(new ram::Relation<Auto,2, ram::index<1,0>>()),
rel_320_SystemThreadGroup(new ram::Relation<Auto,2>()),
rel_321_TamiflexCallGraphEdge(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_322_delta_TamiflexCallGraphEdge(new ram::Relation<Auto,4>()),
rel_323_new_TamiflexCallGraphEdge(new ram::Relation<Auto,4>()),
rel_324_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_325_delta_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4>()),
rel_326_new_TamiflexConstructorCallGraphEdge(new ram::Relation<Auto,4>()),
rel_327_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_328_delta_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4>()),
rel_329_new_TamiflexInvocationArgumentArrayValue(new ram::Relation<Auto,4>()),
rel_330_TamiflexInvocationFirstParam(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_331_delta_TamiflexInvocationFirstParam(new ram::Relation<Auto,4>()),
rel_332_new_TamiflexInvocationFirstParam(new ram::Relation<Auto,4>()),
rel_333_Tamiflex_Array_NewInstance(new ram::Relation<Auto,2>()),
rel_334_Tamiflex_Class_NewInstance(new ram::Relation<Auto,2>()),
rel_335_Tamiflex_Constructor_NewInstance(new ram::Relation<Auto,3>()),
rel_336_Tamiflex_Invoke(new ram::Relation<Auto,3, ram::index<0,1,2>>()),
rel_337_delta_Tamiflex_Invoke(new ram::Relation<Auto,3>()),
rel_338_new_Tamiflex_Invoke(new ram::Relation<Auto,3>()),
rel_339_Tamiflex_ReflectionData(new ram::Relation<Auto,6, ram::index<5>>()),
rel_340_Tamiflex_ReflectionMap(new ram::Relation<Auto,2, ram::index<1>>()),
rel_341_Tamiflex_ReifiedField(new ram::Relation<Auto,3>()),
rel_342_Tamiflex_ReifiedFieldArray(new ram::Relation<Auto,3>()),
rel_343_Tamiflex_ReifiedMethod(new ram::Relation<Auto,3>()),
rel_344_Tamiflex_ReifiedMethodArray(new ram::Relation<Auto,3>()),
rel_345_Temp1(new ram::Relation<Auto,2, ram::index<0,1>>()),
rel_346_delta_Temp1(new ram::Relation<Auto,2>()),
rel_347_new_Temp1(new ram::Relation<Auto,2>()),
rel_348_Temp2(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_349_delta_Temp2(new ram::Relation<Auto,4>()),
rel_350_new_Temp2(new ram::Relation<Auto,4>()),
rel_351_Throw(new ram::Relation<Auto,2>()),
rel_352_ThrowPointsTo(new ram::Relation<Auto,4, ram::index<2,3,0,1>>()),
rel_353_delta_ThrowPointsTo(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_354_new_ThrowPointsTo(new ram::Relation<Auto,4, ram::index<0,1,2,3>>()),
rel_355_Throw_Var(new ram::Relation<Auto,2, ram::index<0>>()),
rel_356_TopLevelEntryPoint(new ram::Relation<Auto,1, ram::index<0>>()),
rel_357_TypeForFormals(new ram::Relation<Auto,3>()),
rel_358_TypeToConcreteImplementationOrd(new ram::Relation<Auto,2>()),
rel_359_Type_byte(new ram::Relation<Auto,1>()),
rel_360_Type_char(new ram::Relation<Auto,1>()),
rel_361_Type_double(new ram::Relation<Auto,1>()),
rel_362_Type_float(new ram::Relation<Auto,1>()),
rel_363_Type_int(new ram::Relation<Auto,1>()),
rel_364_Type_long(new ram::Relation<Auto,1>()),
rel_365_Type_null(new ram::Relation<Auto,1>()),
rel_366_Type_short(new ram::Relation<Auto,1>()),
rel_367_Value_Num(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_368_Value_Type(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_369_Value_isHeap(new ram::Relation<Auto,1>()),
rel_370_Value_isMock(new ram::Relation<Auto,1>()),
rel_371_Value_isNonHeap(new ram::Relation<Auto,1>()),
rel_372_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2,0,1>>()),
wrapper_rel_372_VarPointsTo(*rel_372_VarPointsTo,symTable,"VarPointsTo",std::array<const char *,4>{"r:HContext{value#s:Value[s:HeapAllocation,s:NumConstant]}","s:Value[s:HeapAllocation,s:NumConstant]","r:Context{value1#s:Value[s:HeapAllocation,s:NumConstant],value2#s:Value[s:HeapAllocation,s:NumConstant]}","s:Var"},std::array<const char *,4>{"?hctx","?value","?ctx","?var"}),
rel_373_delta_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>()),
rel_374_new_VarPointsTo(new ram::Relation<Auto,4, ram::index<3,2>, ram::index<1,0,2,3>>()),
rel_375_Var_DeclaringMethod(new ram::Relation<Auto,2, ram::index<0>>()),
rel_376_Var_Type(new ram::Relation<Auto,2, ram::index<0>>()),
rel_377_VarsAtInvocationRetrievingView(new ram::Relation<Auto,2>()),
rel_378_ViewObjectValueFromId(new ram::Relation<Auto,2, ram::index<1>>()),
rel_379_ViewRetrievalByArg0MethodInvocation(new ram::Relation<Auto,1>()),
rel_380_VirtualMethodInvocation(new ram::Relation<Auto,3, ram::index<1>>()),
rel_381_VirtualMethodInvocation_Base(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
rel_382_VirtualMethodInvocation_Descriptor(new ram::Relation<Auto,2, ram::index<0>>()),
rel_383_VirtualMethodInvocation_SimpleName(new ram::Relation<Auto,2>()),
rel_384_Activity(new ram::Relation<Auto,1>()),
wrapper_rel_384_Activity(*rel_384_Activity,symTable,"_Activity",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_385_ActualParam(new ram::Relation<Auto,3, ram::index<1,0>>()),
wrapper_rel_385_ActualParam(*rel_385_ActualParam,symTable,"_ActualParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?invocation","?var"}),
rel_386_AndroidEntryPoint(new ram::Relation<Auto,1>()),
wrapper_rel_386_AndroidEntryPoint(*rel_386_AndroidEntryPoint,symTable,"_AndroidEntryPoint",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?method"}),
rel_387_ApplicationClass(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_387_ApplicationClass(*rel_387_ApplicationClass,symTable,"_ApplicationClass",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?type"}),
rel_388_ArrayType(new ram::Relation<Auto,1>()),
wrapper_rel_388_ArrayType(*rel_388_ArrayType,symTable,"_ArrayType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?arrayType"}),
rel_389_AssignBinop(new ram::Relation<Auto,4>()),
wrapper_rel_389_AssignBinop(*rel_389_AssignBinop,symTable,"_AssignBinop",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?inmethod"}),
rel_390_AssignCast(new ram::Relation<Auto,6>()),
wrapper_rel_390_AssignCast(*rel_390_AssignCast,symTable,"_AssignCast",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?to","?type","?inmethod"}),
rel_391_AssignCastNull(new ram::Relation<Auto,5>()),
wrapper_rel_391_AssignCastNull(*rel_391_AssignCastNull,symTable,"_AssignCastNull",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?type","?method"}),
rel_392_AssignCastNumConstant(new ram::Relation<Auto,6>()),
wrapper_rel_392_AssignCastNumConstant(*rel_392_AssignCastNumConstant,symTable,"_AssignCastNumConstant",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?const","?to","?type","?inmethod"}),
rel_393_AssignHeapAllocation(new ram::Relation<Auto,5>()),
wrapper_rel_393_AssignHeapAllocation(*rel_393_AssignHeapAllocation,symTable,"_AssignHeapAllocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?heap","?to","?inmethod"}),
rel_394_AssignInstanceOf(new ram::Relation<Auto,6>()),
wrapper_rel_394_AssignInstanceOf(*rel_394_AssignInstanceOf,symTable,"_AssignInstanceOf",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?to","?type","?inmethod"}),
rel_395_AssignLocal(new ram::Relation<Auto,5>()),
wrapper_rel_395_AssignLocal(*rel_395_AssignLocal,symTable,"_AssignLocal",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?to","?inmethod"}),
rel_396_AssignNull(new ram::Relation<Auto,4>()),
wrapper_rel_396_AssignNull(*rel_396_AssignNull,symTable,"_AssignNull",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_397_AssignNumConstant(new ram::Relation<Auto,5>()),
wrapper_rel_397_AssignNumConstant(*rel_397_AssignNumConstant,symTable,"_AssignNumConstant",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?const","?to","?inmethod"}),
rel_398_AssignPhantomInvoke(new ram::Relation<Auto,3>()),
wrapper_rel_398_AssignPhantomInvoke(*rel_398_AssignPhantomInvoke,symTable,"_AssignPhantomInvoke",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_399_AssignReturnValue(new ram::Relation<Auto,2>()),
wrapper_rel_399_AssignReturnValue(*rel_399_AssignReturnValue,symTable,"_AssignReturnValue",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?invocation","?to"}),
rel_400_AssignUnop(new ram::Relation<Auto,4>()),
wrapper_rel_400_AssignUnop(*rel_400_AssignUnop,symTable,"_AssignUnop",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?inmethod"}),
rel_401_BootstrapParam(new ram::Relation<Auto,3>()),
wrapper_rel_401_BootstrapParam(*rel_401_BootstrapParam,symTable,"_BootstrapParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?invocation","?var"}),
rel_402_BreakpointStmt(new ram::Relation<Auto,3>()),
wrapper_rel_402_BreakpointStmt(*rel_402_BreakpointStmt,symTable,"_BreakpointStmt",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_403_BroadcastReceiver(new ram::Relation<Auto,1>()),
wrapper_rel_403_BroadcastReceiver(*rel_403_BroadcastReceiver,symTable,"_BroadcastReceiver",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_404_CallbackMethod(new ram::Relation<Auto,1>()),
wrapper_rel_404_CallbackMethod(*rel_404_CallbackMethod,symTable,"_CallbackMethod",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_405_ClassHeap(new ram::Relation<Auto,2>()),
wrapper_rel_405_ClassHeap(*rel_405_ClassHeap,symTable,"_ClassHeap",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?instanceType"}),
rel_406_ClassModifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_406_ClassModifier(*rel_406_ClassModifier,symTable,"_ClassModifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?modifier"}),
rel_407_ClassType(new ram::Relation<Auto,1>()),
wrapper_rel_407_ClassType(*rel_407_ClassType,symTable,"_ClassType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?class"}),
rel_408_ComponentType(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_408_ComponentType(*rel_408_ComponentType,symTable,"_ComponentType",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?arrayType","?componentType"}),
rel_409_ContentProvider(new ram::Relation<Auto,1>()),
wrapper_rel_409_ContentProvider(*rel_409_ContentProvider,symTable,"_ContentProvider",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_410_Dacapo(new ram::Relation<Auto,2>()),
wrapper_rel_410_Dacapo(*rel_410_Dacapo,symTable,"_Dacapo",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?method"}),
rel_411_DirectSuperclass(new ram::Relation<Auto,2, ram::index<0>, ram::index<1>>()),
wrapper_rel_411_DirectSuperclass(*rel_411_DirectSuperclass,symTable,"_DirectSuperclass",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?superclass"}),
rel_412_DirectSuperinterface(new ram::Relation<Auto,2>()),
wrapper_rel_412_DirectSuperinterface(*rel_412_DirectSuperinterface,symTable,"_DirectSuperinterface",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?class","?interface"}),
rel_413_DynamicMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_413_DynamicMethodInvocation(*rel_413_DynamicMethodInvocation,symTable,"_DynamicMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?bootSignature","?dynName","?method"}),
rel_414_EmptyArray(new ram::Relation<Auto,1, ram::index<0>>()),
wrapper_rel_414_EmptyArray(*rel_414_EmptyArray,symTable,"_EmptyArray",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_415_EnterMonitor(new ram::Relation<Auto,4>()),
wrapper_rel_415_EnterMonitor(*rel_415_EnterMonitor,symTable,"_EnterMonitor",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_416_ExceptionHandler(new ram::Relation<Auto,7>()),
wrapper_rel_416_ExceptionHandler(*rel_416_ExceptionHandler,symTable,"_ExceptionHandler",std::array<const char *,7>{"s:symbol","s:symbol","i:number","s:symbol","s:symbol","i:number","i:number"},std::array<const char *,7>{"?handler","?method","?index","?type","?var","?begin","?end"}),
rel_417_ExceptionHandler_Previous(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_417_ExceptionHandler_Previous(*rel_417_ExceptionHandler_Previous,symTable,"_ExceptionHandler_Previous",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?handler","?previous"}),
rel_418_ExitMonitor(new ram::Relation<Auto,4>()),
wrapper_rel_418_ExitMonitor(*rel_418_ExitMonitor,symTable,"_ExitMonitor",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_419_Field(new ram::Relation<Auto,4>()),
wrapper_rel_419_Field(*rel_419_Field,symTable,"_Field",std::array<const char *,4>{"s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,4>{"?signature","?declaringClass","?simplename","?type"}),
rel_420_FieldInitialValue(new ram::Relation<Auto,2, ram::index<1>>()),
wrapper_rel_420_FieldInitialValue(*rel_420_FieldInitialValue,symTable,"_FieldInitialValue",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?fld","?valueString"}),
rel_421_Field_Modifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_421_Field_Modifier(*rel_421_Field_Modifier,symTable,"_Field_Modifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?modifier","?field"}),
rel_422_FormalParam(new ram::Relation<Auto,3, ram::index<1,0>>()),
wrapper_rel_422_FormalParam(*rel_422_FormalParam,symTable,"_FormalParam",std::array<const char *,3>{"i:number","s:symbol","s:symbol"},std::array<const char *,3>{"?index","?method","?var"}),
rel_423_Goto(new ram::Relation<Auto,4>()),
wrapper_rel_423_Goto(*rel_423_Goto,symTable,"_Goto",std::array<const char *,4>{"s:symbol","i:number","i:number","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_424_If(new ram::Relation<Auto,4>()),
wrapper_rel_424_If(*rel_424_If,symTable,"_If",std::array<const char *,4>{"s:symbol","i:number","i:number","s:symbol"},std::array<const char *,4>{"?instruction","?index","?to","?method"}),
rel_425_InterfaceType(new ram::Relation<Auto,1>()),
wrapper_rel_425_InterfaceType(*rel_425_InterfaceType,symTable,"_InterfaceType",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?interface"}),
rel_426_LayoutControl(new ram::Relation<Auto,3>()),
wrapper_rel_426_LayoutControl(*rel_426_LayoutControl,symTable,"_LayoutControl",std::array<const char *,3>{"s:NumConstant","s:symbol","s:symbol"},std::array<const char *,3>{"?id","?typename","?parent"}),
rel_427_LoadArrayIndex(new ram::Relation<Auto,5>()),
wrapper_rel_427_LoadArrayIndex(*rel_427_LoadArrayIndex,symTable,"_LoadArrayIndex",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?base","?method"}),
rel_428_LoadInstanceField(new ram::Relation<Auto,6>()),
wrapper_rel_428_LoadInstanceField(*rel_428_LoadInstanceField,symTable,"_LoadInstanceField",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?to","?base","?signature","?method"}),
rel_429_LoadStaticField(new ram::Relation<Auto,5>()),
wrapper_rel_429_LoadStaticField(*rel_429_LoadStaticField,symTable,"_LoadStaticField",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?to","?signature","?method"}),
rel_430_LookupSwitch(new ram::Relation<Auto,4>()),
wrapper_rel_430_LookupSwitch(*rel_430_LookupSwitch,symTable,"_LookupSwitch",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?key","?method"}),
rel_431_Method(new ram::Relation<Auto,6>()),
wrapper_rel_431_Method(*rel_431_Method,symTable,"_Method",std::array<const char *,6>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?method","?simplename","?descriptor","?declaringType","?returnType","?jvmDescriptor"}),
rel_432_MethodHandleConstant(new ram::Relation<Auto,1>()),
wrapper_rel_432_MethodHandleConstant(*rel_432_MethodHandleConstant,symTable,"_MethodHandleConstant",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_433_MethodInvocation_Line(new ram::Relation<Auto,2, ram::index<1>>()),
wrapper_rel_433_MethodInvocation_Line(*rel_433_MethodInvocation_Line,symTable,"_MethodInvocation_Line",std::array<const char *,2>{"s:symbol","i:number"},std::array<const char *,2>{"?instruction","line"}),
rel_434_Method_DeclaresException(new ram::Relation<Auto,2>()),
wrapper_rel_434_Method_DeclaresException(*rel_434_Method_DeclaresException,symTable,"_Method_DeclaresException",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?exceptionType","?method"}),
rel_435_Method_Modifier(new ram::Relation<Auto,2, ram::index<0,1>>()),
wrapper_rel_435_Method_Modifier(*rel_435_Method_Modifier,symTable,"_Method_Modifier",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?mod","?method"}),
rel_436_NativeReturnVar(new ram::Relation<Auto,2>()),
wrapper_rel_436_NativeReturnVar(*rel_436_NativeReturnVar,symTable,"_NativeReturnVar",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?method"}),
rel_437_NormalHeap(new ram::Relation<Auto,2>()),
wrapper_rel_437_NormalHeap(*rel_437_NormalHeap,symTable,"_NormalHeap",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?id","?type"}),
rel_438_PhantomInvoke(new ram::Relation<Auto,3>()),
wrapper_rel_438_PhantomInvoke(*rel_438_PhantomInvoke,symTable,"_PhantomInvoke",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_439_Return(new ram::Relation<Auto,4>()),
wrapper_rel_439_Return(*rel_439_Return,symTable,"_Return",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_440_ReturnVoid(new ram::Relation<Auto,3>()),
wrapper_rel_440_ReturnVoid(*rel_440_ReturnVoid,symTable,"_ReturnVoid",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_441_Service(new ram::Relation<Auto,1>()),
wrapper_rel_441_Service(*rel_441_Service,symTable,"_Service",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_442_SpecialMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_442_SpecialMethodInvocation(*rel_442_SpecialMethodInvocation,symTable,"_SpecialMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?signature","?base","?method"}),
rel_443_StaticMethodInvocation(new ram::Relation<Auto,4>()),
wrapper_rel_443_StaticMethodInvocation(*rel_443_StaticMethodInvocation,symTable,"_StaticMethodInvocation",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?signature","?method"}),
rel_444_StoreArrayIndex(new ram::Relation<Auto,5>()),
wrapper_rel_444_StoreArrayIndex(*rel_444_StoreArrayIndex,symTable,"_StoreArrayIndex",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?base","?method"}),
rel_445_StoreInstanceField(new ram::Relation<Auto,6>()),
wrapper_rel_445_StoreInstanceField(*rel_445_StoreInstanceField,symTable,"_StoreInstanceField",std::array<const char *,6>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol","s:symbol"},std::array<const char *,6>{"?instruction","?index","?from","?base","?signature","?method"}),
rel_446_StoreStaticField(new ram::Relation<Auto,5>()),
wrapper_rel_446_StoreStaticField(*rel_446_StoreStaticField,symTable,"_StoreStaticField",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?from","?signature","?method"}),
rel_447_StringConstant(new ram::Relation<Auto,1>()),
wrapper_rel_447_StringConstant(*rel_447_StringConstant,symTable,"_StringConstant",std::array<const char *,1>{"s:symbol"},std::array<const char *,1>{"?id"}),
rel_448_TableSwitch(new ram::Relation<Auto,4>()),
wrapper_rel_448_TableSwitch(*rel_448_TableSwitch,symTable,"_TableSwitch",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?key","?method"}),
rel_449_Tamiflex_ReflectionData(new ram::Relation<Auto,6>()),
wrapper_rel_449_Tamiflex_ReflectionData(*rel_449_Tamiflex_ReflectionData,symTable,"_Tamiflex_ReflectionData",std::array<const char *,6>{"s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","i:number"},std::array<const char *,6>{"?classStr","?methodStr","?mapped","?inClassStr","?inMethodStr","?lineNumber"}),
rel_450_Tamiflex_ToDoopFormat(new ram::Relation<Auto,2, ram::index<0>>()),
rel_451_ThisVar(new ram::Relation<Auto,2, ram::index<0>>()),
wrapper_rel_451_ThisVar(*rel_451_ThisVar,symTable,"_ThisVar",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?method","?var"}),
rel_452_Throw(new ram::Relation<Auto,4>()),
wrapper_rel_452_Throw(*rel_452_Throw,symTable,"_Throw",std::array<const char *,4>{"s:symbol","i:number","s:symbol","s:symbol"},std::array<const char *,4>{"?instruction","?index","?var","?method"}),
rel_453_ThrowNull(new ram::Relation<Auto,3>()),
wrapper_rel_453_ThrowNull(*rel_453_ThrowNull,symTable,"_ThrowNull",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_454_UnsupportedInstruction(new ram::Relation<Auto,3>()),
wrapper_rel_454_UnsupportedInstruction(*rel_454_UnsupportedInstruction,symTable,"_UnsupportedInstruction",std::array<const char *,3>{"s:symbol","i:number","s:symbol"},std::array<const char *,3>{"?instruction","?index","?method"}),
rel_455_Var_DeclaringMethod(new ram::Relation<Auto,2>()),
wrapper_rel_455_Var_DeclaringMethod(*rel_455_Var_DeclaringMethod,symTable,"_Var_DeclaringMethod",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?method"}),
rel_456_Var_Type(new ram::Relation<Auto,2>()),
wrapper_rel_456_Var_Type(*rel_456_Var_Type,symTable,"_Var_Type",std::array<const char *,2>{"s:symbol","s:symbol"},std::array<const char *,2>{"?var","?type"}),
rel_457_VirtualMethodInvocation(new ram::Relation<Auto,5>()),
wrapper_rel_457_VirtualMethodInvocation(*rel_457_VirtualMethodInvocation,symTable,"_VirtualMethodInvocation",std::array<const char *,5>{"s:symbol","i:number","s:symbol","s:symbol","s:symbol"},std::array<const char *,5>{"?instruction","?index","?signature","?base","?method"}),
rel_458_isArrayType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_459_isAssignCast_Insn(new ram::Relation<Auto,1>()),
rel_460_isAssignHeapAllocation_Insn(new ram::Relation<Auto,1>()),
rel_461_isAssignLocal_Insn(new ram::Relation<Auto,1>()),
rel_462_isAssignNull_Insn(new ram::Relation<Auto,1>()),
rel_463_isClassHeap(new ram::Relation<Auto,1>()),
rel_464_isClassType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_465_isClinitContext(new ram::Relation<Auto,1>()),
rel_466_isContext(new ram::Relation<Auto,1, ram::index<0>>()),
rel_467_delta_isContext(new ram::Relation<Auto,1>()),
rel_468_new_isContext(new ram::Relation<Auto,1>()),
rel_469_isExceptionHandler(new ram::Relation<Auto,1>()),
rel_470_isField(new ram::Relation<Auto,1, ram::index<0>>()),
rel_471_isHContext(new ram::Relation<Auto,1, ram::index<0>>()),
rel_472_delta_isHContext(new ram::Relation<Auto,1>()),
rel_473_new_isHContext(new ram::Relation<Auto,1>()),
rel_474_isHeapAllocation(new ram::Relation<Auto,1, ram::index<0>>()),
rel_475_isImmutableContext(new ram::Relation<Auto,1>()),
rel_476_isImmutableHContext(new ram::Relation<Auto,1>()),
rel_477_isInitialContext(new ram::Relation<Auto,1>()),
rel_478_isInstruction(new ram::Relation<Auto,1, ram::index<0>>()),
rel_479_isInterfaceType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_480_isJVMStartupContext(new ram::Relation<Auto,1>()),
rel_481_isJVMStartupHContext(new ram::Relation<Auto,1>()),
rel_482_isLoadArrayIndex_Insn(new ram::Relation<Auto,1>()),
rel_483_isLoadInstanceField_Insn(new ram::Relation<Auto,1>()),
rel_484_isLoadStaticField_Insn(new ram::Relation<Auto,1>()),
rel_485_isMethod(new ram::Relation<Auto,1, ram::index<0>>()),
rel_486_isMethodInvocation(new ram::Relation<Auto,1, ram::index<0>>()),
rel_487_isNumConstant(new ram::Relation<Auto,1>()),
rel_488_isPrimitiveType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_489_isReferenceType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_490_isReturnNonvoid_Insn(new ram::Relation<Auto,1>()),
rel_491_isStaticMethodInvocation_Insn(new ram::Relation<Auto,1, ram::index<0>>()),
rel_492_isStoreArrayIndex_Insn(new ram::Relation<Auto,1>()),
rel_493_isStoreInstanceField_Insn(new ram::Relation<Auto,1>()),
rel_494_isStoreStaticField_Insn(new ram::Relation<Auto,1>()),
rel_495_isStringConstant(new ram::Relation<Auto,1, ram::index<0>>()),
rel_496_isThrow_Insn(new ram::Relation<Auto,1>()),
rel_497_isType(new ram::Relation<Auto,1, ram::index<0>>()),
rel_498_isValue(new ram::Relation<Auto,1, ram::index<0>>()),
rel_499_isVar(new ram::Relation<Auto,1, ram::index<0>>()),
rel_500_isVirtualMethodInvocation_Insn(new ram::Relation<Auto,1, ram::index<0>>()){
addRelation("ApplicationMethod",&wrapper_rel_11_ApplicationMethod,0,1);
addRelation("CallGraphEdge",&wrapper_rel_36_CallGraphEdge,0,1);
addRelation("Reachable",&wrapper_rel_213_Reachable,0,1);
addRelation("Stats_Metrics",&wrapper_rel_258_Stats_Metrics,0,1);
addRelation("Stats_Simple_ApplicationConcreteMethod",&wrapper_rel_259_Stats_Simple_ApplicationConcreteMethod,0,1);
addRelation("Stats_Simple_Application_ArrayIndexPointsTo",&wrapper_rel_260_Stats_Simple_Application_ArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_Application_Cast",&wrapper_rel_261_Stats_Simple_Application_Cast,0,1);
addRelation("Stats_Simple_Application_EmptyVirtualMethodInvocation",&wrapper_rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_Application_InsensArrayIndexPointsTo",&wrapper_rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_Application_InsensInstanceFieldPointsTo",&wrapper_rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_Application_InsensVarPointsTo",&wrapper_rel_265_Stats_Simple_Application_InsensVarPointsTo,0,1);
addRelation("Stats_Simple_Application_InstanceFieldPointsTo",&wrapper_rel_266_Stats_Simple_Application_InstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_Application_NullVirtualMethodInvocation",&wrapper_rel_267_Stats_Simple_Application_NullVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_Application_PolymorphicCallSite",&wrapper_rel_268_Stats_Simple_Application_PolymorphicCallSite,0,1);
addRelation("Stats_Simple_Application_PotentiallyFailingCast",&wrapper_rel_269_Stats_Simple_Application_PotentiallyFailingCast,0,1);
addRelation("Stats_Simple_Application_ReachableCast",&wrapper_rel_270_Stats_Simple_Application_ReachableCast,0,1);
addRelation("Stats_Simple_Application_ReachableMethod",&wrapper_rel_271_Stats_Simple_Application_ReachableMethod,0,1);
addRelation("Stats_Simple_Application_ReachableVirtualMethodInvocation",&wrapper_rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_Application_VarPointsTo",&wrapper_rel_273_Stats_Simple_Application_VarPointsTo,0,1);
addRelation("Stats_Simple_Application_VirtualMethodInvocation",&wrapper_rel_274_Stats_Simple_Application_VirtualMethodInvocation,0,1);
addRelation("Stats_Simple_AssignedVariable",&wrapper_rel_275_Stats_Simple_AssignedVariable,0,1);
addRelation("Stats_Simple_EmptyVirtualMethodInvocation",&wrapper_rel_276_Stats_Simple_EmptyVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_InsensArrayIndexPointsTo",&wrapper_rel_277_Stats_Simple_InsensArrayIndexPointsTo,0,1);
addRelation("Stats_Simple_InsensCallGraphEdge",&wrapper_rel_278_Stats_Simple_InsensCallGraphEdge,0,1);
addRelation("Stats_Simple_InsensInstanceFieldPointsTo",&wrapper_rel_279_Stats_Simple_InsensInstanceFieldPointsTo,0,1);
addRelation("Stats_Simple_InsensReachableApplicationMethod",&wrapper_rel_280_Stats_Simple_InsensReachableApplicationMethod,0,1);
addRelation("Stats_Simple_InsensReachableVar",&wrapper_rel_281_Stats_Simple_InsensReachableVar,0,1);
addRelation("Stats_Simple_InsensStaticFieldPointsTo",&wrapper_rel_282_Stats_Simple_InsensStaticFieldPointsTo,0,1);
addRelation("Stats_Simple_InsensVarPointsTo",&wrapper_rel_283_Stats_Simple_InsensVarPointsTo,0,1);
addRelation("Stats_Simple_NonReachableApplicationConcreteMethod",&wrapper_rel_284_Stats_Simple_NonReachableApplicationConcreteMethod,0,1);
addRelation("Stats_Simple_NullVirtualMethodInvocation",&wrapper_rel_285_Stats_Simple_NullVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_PolymorphicCallSite",&wrapper_rel_286_Stats_Simple_PolymorphicCallSite,0,1);
addRelation("Stats_Simple_PotentiallyFailingCast",&wrapper_rel_287_Stats_Simple_PotentiallyFailingCast,0,1);
addRelation("Stats_Simple_ReachableApplicationMethod",&wrapper_rel_288_Stats_Simple_ReachableApplicationMethod,0,1);
addRelation("Stats_Simple_ReachableCast",&wrapper_rel_289_Stats_Simple_ReachableCast,0,1);
addRelation("Stats_Simple_ReachableVar",&wrapper_rel_290_Stats_Simple_ReachableVar,0,1);
addRelation("Stats_Simple_ReachableVirtualMethodInvocation",&wrapper_rel_291_Stats_Simple_ReachableVirtualMethodInvocation,0,1);
addRelation("Stats_Simple_VirtualCallGraphEdge",&wrapper_rel_292_Stats_Simple_VirtualCallGraphEdge,0,1);
addRelation("VarPointsTo",&wrapper_rel_372_VarPointsTo,0,1);
addRelation("_Activity",&wrapper_rel_384_Activity,1,0);
addRelation("_ActualParam",&wrapper_rel_385_ActualParam,1,0);
addRelation("_AndroidEntryPoint",&wrapper_rel_386_AndroidEntryPoint,1,0);
addRelation("_ApplicationClass",&wrapper_rel_387_ApplicationClass,1,0);
addRelation("_ArrayType",&wrapper_rel_388_ArrayType,1,0);
addRelation("_AssignBinop",&wrapper_rel_389_AssignBinop,1,0);
addRelation("_AssignCast",&wrapper_rel_390_AssignCast,1,0);
addRelation("_AssignCastNull",&wrapper_rel_391_AssignCastNull,1,0);
addRelation("_AssignCastNumConstant",&wrapper_rel_392_AssignCastNumConstant,1,0);
addRelation("_AssignHeapAllocation",&wrapper_rel_393_AssignHeapAllocation,1,0);
addRelation("_AssignInstanceOf",&wrapper_rel_394_AssignInstanceOf,1,0);
addRelation("_AssignLocal",&wrapper_rel_395_AssignLocal,1,0);
addRelation("_AssignNull",&wrapper_rel_396_AssignNull,1,0);
addRelation("_AssignNumConstant",&wrapper_rel_397_AssignNumConstant,1,0);
addRelation("_AssignPhantomInvoke",&wrapper_rel_398_AssignPhantomInvoke,1,0);
addRelation("_AssignReturnValue",&wrapper_rel_399_AssignReturnValue,1,0);
addRelation("_AssignUnop",&wrapper_rel_400_AssignUnop,1,0);
addRelation("_BootstrapParam",&wrapper_rel_401_BootstrapParam,1,0);
addRelation("_BreakpointStmt",&wrapper_rel_402_BreakpointStmt,1,0);
addRelation("_BroadcastReceiver",&wrapper_rel_403_BroadcastReceiver,1,0);
addRelation("_CallbackMethod",&wrapper_rel_404_CallbackMethod,1,0);
addRelation("_ClassHeap",&wrapper_rel_405_ClassHeap,1,0);
addRelation("_ClassModifier",&wrapper_rel_406_ClassModifier,1,0);
addRelation("_ClassType",&wrapper_rel_407_ClassType,1,0);
addRelation("_ComponentType",&wrapper_rel_408_ComponentType,1,0);
addRelation("_ContentProvider",&wrapper_rel_409_ContentProvider,1,0);
addRelation("_Dacapo",&wrapper_rel_410_Dacapo,1,0);
addRelation("_DirectSuperclass",&wrapper_rel_411_DirectSuperclass,1,0);
addRelation("_DirectSuperinterface",&wrapper_rel_412_DirectSuperinterface,1,0);
addRelation("_DynamicMethodInvocation",&wrapper_rel_413_DynamicMethodInvocation,1,0);
addRelation("_EmptyArray",&wrapper_rel_414_EmptyArray,1,0);
addRelation("_EnterMonitor",&wrapper_rel_415_EnterMonitor,1,0);
addRelation("_ExceptionHandler",&wrapper_rel_416_ExceptionHandler,1,0);
addRelation("_ExceptionHandler_Previous",&wrapper_rel_417_ExceptionHandler_Previous,1,0);
addRelation("_ExitMonitor",&wrapper_rel_418_ExitMonitor,1,0);
addRelation("_Field",&wrapper_rel_419_Field,1,0);
addRelation("_FieldInitialValue",&wrapper_rel_420_FieldInitialValue,1,0);
addRelation("_Field_Modifier",&wrapper_rel_421_Field_Modifier,1,0);
addRelation("_FormalParam",&wrapper_rel_422_FormalParam,1,0);
addRelation("_Goto",&wrapper_rel_423_Goto,1,0);
addRelation("_If",&wrapper_rel_424_If,1,0);
addRelation("_InterfaceType",&wrapper_rel_425_InterfaceType,1,0);
addRelation("_LayoutControl",&wrapper_rel_426_LayoutControl,1,0);
addRelation("_LoadArrayIndex",&wrapper_rel_427_LoadArrayIndex,1,0);
addRelation("_LoadInstanceField",&wrapper_rel_428_LoadInstanceField,1,0);
addRelation("_LoadStaticField",&wrapper_rel_429_LoadStaticField,1,0);
addRelation("_LookupSwitch",&wrapper_rel_430_LookupSwitch,1,0);
addRelation("_Method",&wrapper_rel_431_Method,1,0);
addRelation("_MethodHandleConstant",&wrapper_rel_432_MethodHandleConstant,1,0);
addRelation("_MethodInvocation_Line",&wrapper_rel_433_MethodInvocation_Line,1,0);
addRelation("_Method_DeclaresException",&wrapper_rel_434_Method_DeclaresException,1,0);
addRelation("_Method_Modifier",&wrapper_rel_435_Method_Modifier,1,0);
addRelation("_NativeReturnVar",&wrapper_rel_436_NativeReturnVar,1,0);
addRelation("_NormalHeap",&wrapper_rel_437_NormalHeap,1,0);
addRelation("_PhantomInvoke",&wrapper_rel_438_PhantomInvoke,1,0);
addRelation("_Return",&wrapper_rel_439_Return,1,0);
addRelation("_ReturnVoid",&wrapper_rel_440_ReturnVoid,1,0);
addRelation("_Service",&wrapper_rel_441_Service,1,0);
addRelation("_SpecialMethodInvocation",&wrapper_rel_442_SpecialMethodInvocation,1,0);
addRelation("_StaticMethodInvocation",&wrapper_rel_443_StaticMethodInvocation,1,0);
addRelation("_StoreArrayIndex",&wrapper_rel_444_StoreArrayIndex,1,0);
addRelation("_StoreInstanceField",&wrapper_rel_445_StoreInstanceField,1,0);
addRelation("_StoreStaticField",&wrapper_rel_446_StoreStaticField,1,0);
addRelation("_StringConstant",&wrapper_rel_447_StringConstant,1,0);
addRelation("_TableSwitch",&wrapper_rel_448_TableSwitch,1,0);
addRelation("_Tamiflex_ReflectionData",&wrapper_rel_449_Tamiflex_ReflectionData,1,0);
addRelation("_ThisVar",&wrapper_rel_451_ThisVar,1,0);
addRelation("_Throw",&wrapper_rel_452_Throw,1,0);
addRelation("_ThrowNull",&wrapper_rel_453_ThrowNull,1,0);
addRelation("_UnsupportedInstruction",&wrapper_rel_454_UnsupportedInstruction,1,0);
addRelation("_Var_DeclaringMethod",&wrapper_rel_455_Var_DeclaringMethod,1,0);
addRelation("_Var_Type",&wrapper_rel_456_Var_Type,1,0);
addRelation("_VirtualMethodInvocation",&wrapper_rel_457_VirtualMethodInvocation,1,0);
// -- initialize symbol table --
static const char *symbols[]={
	R"(java.lang.String)",
	R"(java.lang.Class)",
	R"(java.lang.invoke.MethodHandle)",
	R"(abstract)",
	R"(public)",
	R"(private)",
	R"(final)",
	R"(static)",
	R"(boolean)",
	R"(byte)",
	R"(char)",
	R"(short)",
	R"(int)",
	R"(long)",
	R"(float)",
	R"(double)",
	R"(void)",
	R"(null_type)",
	R"(java.lang.Object)",
	R"(<<null pseudo heap>>)",
	R"(<<main method array>>)",
	R"(java.lang.String[])",
	R"(<<main method array content>>)",
	R"(java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem)",
	R"(java.io.UnixFileSystem)",
	R"(java.io.UnixFileSystem.list/new java.lang.String[])",
	R"(java.io.UnixFileSystem.list/new java.lang.String)",
	R"(<<string-constant>>)",
	R"(<<reflection-string-constant>>)",
	R"(<<string-buffer>>)",
	R"(java.lang.StringBuffer)",
	R"(<<string-builder>>)",
	R"(java.lang.StringBuilder)",
	R"(<<system-thread-group>>)",
	R"(<<main-thread-group>>)",
	R"(java.lang.ThreadGroup)",
	R"(<<main-thread>>)",
	R"(java.lang.Thread)",
	R"(<<initial-context>>)",
	R"(<<jvm-startup-context>>)",
	R"(<<jvm-startup-hcontext>>)",
	R"(<<clinit-context>>)",
	R"(<<immutable-context>>)",
	R"(<<immutable-hcontext>>)",
	R"(<<immutable>>)",
	R"(Class)",
	R"(Constructor)",
	R"(java.lang.reflect.Constructor)",
	R"(Field)",
	R"(java.lang.reflect.Field)",
	R"(Method)",
	R"(java.lang.reflect.Method)",
	R"(Array)",
	R"(java.lang.reflect.Array)",
	R"(get*)",
	R"(get)",
	R"(set*)",
	R"(set)",
	R"(finalize)",
	R"(void())",
	R"(<java.lang.Object: void finalize()>)",
	R"(protected)",
	R"(.*<init>.*)",
	R"(java.lang.Cloneable)",
	R"(java.io.Serializable)",
	R"(java.lang.ClassLoader)",
	R"(java.lang.SecurityManager)",
	R"(main)",
	R"(void(java.lang.String[]))",
	R"(java.lang.System)",
	R"(<register-finalize )",
	R"(/)",
	R"(  >)",
	R"(<android component object )",
	R"(>)",
	R"(<layout control object )",
	R"( of type )",
	R"(android.content.Intent)",
	R"(android.os.Bundle)",
	R"(<android library object )",
	R"(^android.*)",
	R"(android.view.View)",
	R"(android.view.ViewGroup)",
	R"(Listener)",
	R"(Callback)",
	R"(^on.*)",
	R"(inflate)",
	R"(getView)",
	R"(findViewById)",
	R"(<clinit>)",
	R"(<java.lang.ref.Finalizer: void register(java.lang.Object)>)",
	R"(<java.lang.System: void initializeSystemClass()>)",
	R"(<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>)",
	R"(<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>)",
	R"(<java.lang.ThreadGroup: void <init>()>)",
	R"(<java.lang.Thread: void exit()>)",
	R"(<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>)",
	R"(<java.lang.ClassLoader: void <init>()>)",
	R"(<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>)",
	R"(<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>)",
	R"(<java.lang.ClassLoader: void addClass(java.lang.Class)>)",
	R"(<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>)",
	R"(<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>)",
	R"(java.lang.Object.clone/@this)",
	R"(java.lang.Object.clone/@native-return)",
	R"(<java.lang.Object: java.lang.Object clone()>)",
	R"(java.lang.System.setIn0/@param0)",
	R"(<java.lang.System: java.io.InputStream in>)",
	R"(<java.lang.System: void setIn0(java.io.InputStream)>)",
	R"(java.lang.System.setOut0/@param0)",
	R"(<java.lang.System: java.io.PrintStream out>)",
	R"(<java.lang.System: void setOut0(java.io.PrintStream)>)",
	R"(java.lang.System.setErr0/@param0)",
	R"(<java.lang.System: java.io.PrintStream err>)",
	R"(<java.lang.System: void setErr0(java.io.PrintStream)>)",
	R"(/@tmp-arraycopy)",
	R"(<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>)",
	R"(<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>)",
	R"(<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>)",
	R"(<java.io.FileSystem: java.io.FileSystem getFileSystem()>)",
	R"(/native)",
	R"(<java.io.UnixFileSystem: void <init>()>)",
	R"(<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>)",
	R"(/@native-array-element)",
	R"(<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>)",
	R"(/native )",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>)",
	R"(<java.security.PrivilegedAction: java.lang.Object run()>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>)",
	R"(<java.security.PrivilegedExceptionAction: java.lang.Object run()>)",
	R"(<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>)",
	R"(<java.lang.ref.Reference: java.lang.ref.Reference pending>)",
	R"(<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this)",
	R"(<init>)",
	R"(java.lang.Throwable)",
	R"(.)",
	R"(java\.util.*)",
	R"(<java.lang.Thread: void start0()>)",
	R"(run)",
	R"(<java.lang.Thread: java.lang.Thread currentThread()>)",
	R"(<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>)",
	R"(num-constant-)",
	R"(.R$)",
	R"(true)",
	R"(::: (Mock))",
	R"(<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>)",
	R"(<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>)",
	R"(<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>)",
	R"(<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>)",
	R"(<(Tamiflex) )",
	R"(<java.lang.Class: java.lang.Object newInstance()>)",
	R"(<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>)",
	R"(<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>)",
	R"(<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>)",
	R"(<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>)",
	R"(/Field[]>)",
	R"(<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>)",
	R"(<java.lang.Class: java.lang.reflect.Field[] getFields()>)",
	R"(java.lang.reflect.Field[])",
	R"(<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>)",
	R"(<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>)",
	R"(/Method[]>)",
	R"(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>)",
	R"(<java.lang.Class: java.lang.reflect.Method[] getMethods()>)",
	R"(java.lang.reflect.Method[])",
	R"(<java.lang.Class: java.lang.Class forName(java.lang.String)>)",
	R"(<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>)",
	R"(<class )",
	R"(<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>)",
	R"(Harness)",
	R"(1.0)",
	R"(var points-to (INS))",
	R"(1.5)",
	R"(var points-to (SENS))",
	R"(5.0)",
	R"(app var points-to (INS))",
	R"(5.5)",
	R"(app var points-to (SENS))",
	R"(10.0)",
	R"(reachable variables (INS))",
	R"(10.5)",
	R"(reachable variables (SENS))",
	R"(2.0)",
	R"(array index points-to (INS))",
	R"(2.5)",
	R"(array index points-to (SENS))",
	R"(6.0)",
	R"(app array index points-to (INS))",
	R"(6.5)",
	R"(app array index points-to (SENS))",
	R"(3.0)",
	R"(instance field points-to (INS))",
	R"(3.5)",
	R"(instance field points-to (SENS))",
	R"(4.0)",
	R"(static field points-to (INS))",
	R"(4.5)",
	R"(static field points-to (SENS))",
	R"(7.0)",
	R"(app instance field points-to (INS))",
	R"(7.5)",
	R"(app instance field points-to (SENS))",
	R"(8.0)",
	R"(call graph edges (INS))",
	R"(8.5)",
	R"(call graph edges (SENS))",
	R"(9.0)",
	R"(non-reachable app concrete methods)",
	R"(11.0)",
	R"(reachable methods (INS))",
	R"(11.5)",
	R"(reachable methods (SENS))",
	R"(12.0)",
	R"(virtual call sites (statically))",
	R"(13.0)",
	R"(reachable virtual call sites)",
	R"(14.0)",
	R"(polymorphic virtual call sites)",
	R"(15.0)",
	R"(null virtual call sites)",
	R"(15.5)",
	R"(empty virtual call sites)",
	R"(16.0)",
	R"(app virtual call sites (statically))",
	R"(17.0)",
	R"(app reachable virtual call sites)",
	R"(18.0)",
	R"(app polymorphic virtual call sites)",
	R"(19.0)",
	R"(app null virtual call sites)",
	R"(19.5)",
	R"(app empty virtual call sites)",
	R"(20.0)",
	R"(casts (statically))",
	R"(21.0)",
	R"(reachable casts)",
	R"(22.0)",
	R"(reachable casts that may fail)",
	R"(23.0)",
	R"(app casts (statically))",
	R"(24.0)",
	R"(app reachable casts)",
	R"(25.0)",
	R"(app reachable casts that may fail)",
	R"(25.5)",
	R"(app reachable methods)",
};
symTable.insert(symbols,253);

}
~Sf_pts2o1h_opt() {
delete rel_1_AllConcreteImplementations;
delete rel_2_AllocatedObjectSupportsFinalize;
delete rel_3_AllocationShouldBeMergedPerMethod;
delete rel_4_AllocationsPerMethodAndType;
delete rel_5_AndroidAppComponent;
delete rel_6_AndroidApplicationClass;
delete rel_7_AndroidApplicationListenerClass;
delete rel_8_AndroidLibraryListenerType;
delete rel_9_AndroidLibraryType;
delete rel_10_AppMethodOverridesAndroidLibraryMethod;
delete rel_11_ApplicationMethod;
delete rel_12_ApplicationObjectFlowingToLibrary;
delete rel_13_delta_ApplicationObjectFlowingToLibrary;
delete rel_14_new_ApplicationObjectFlowingToLibrary;
delete rel_15_ApplicationObjectFlowingToLibraryStaticType;
delete rel_16_delta_ApplicationObjectFlowingToLibraryStaticType;
delete rel_17_new_ApplicationObjectFlowingToLibraryStaticType;
delete rel_18_ApplicationVar;
delete rel_19_ArrayIndexPointsTo;
delete rel_20_delta_ArrayIndexPointsTo;
delete rel_21_new_ArrayIndexPointsTo;
delete rel_22_AssignCast;
delete rel_23_AssignCastNumConstant_Id;
delete rel_24_AssignCast_From;
delete rel_25_AssignCast_Type;
delete rel_26_AssignContextInsensitiveHeapAllocation;
delete rel_27_AssignHeapAllocation;
delete rel_28_AssignHeapAllocation_Heap;
delete rel_29_AssignInstruction_To;
delete rel_30_AssignLocal;
delete rel_31_AssignLocal_From;
delete rel_32_AssignNormalHeapAllocation;
delete rel_33_AssignNull;
delete rel_34_AssignNumConstant_Id;
delete rel_35_AssignReturnValue;
delete rel_36_CallGraphEdge;
delete rel_37_delta_CallGraphEdge;
delete rel_38_new_CallGraphEdge;
delete rel_39_ClassHasPossibleEntryPoint;
delete rel_40_ClassInitializer;
delete rel_41_ClassIsAboveOtherInNamingHierarchy;
delete rel_42_ClassNameIndexes;
delete rel_43_delta_ClassNameIndexes;
delete rel_44_new_ClassNameIndexes;
delete rel_45_ClassWithTopLevelEntryPoint;
delete rel_46_CollectionLibraryClass;
delete rel_47_ConcreteClass;
delete rel_48_ConcreteImplementations;
delete rel_49_ConcreteType;
delete rel_50_ContextForEntryPoint;
delete rel_51_DotsInClassName;
delete rel_52_ExceptionHandler_Before;
delete rel_53_delta_ExceptionHandler_Before;
delete rel_54_new_ExceptionHandler_Before;
delete rel_55_ExceptionHandler_Begin;
delete rel_56_ExceptionHandler_End;
delete rel_57_ExceptionHandler_FormalParam;
delete rel_58_ExceptionHandler_Impossible;
delete rel_59_ExceptionHandler_InRange;
delete rel_60_ExceptionHandler_Index;
delete rel_61_ExceptionHandler_Method;
delete rel_62_ExceptionHandler_SameBlock_PartialOrder;
delete rel_63_ExceptionHandler_SameBlock_Repr;
delete rel_64_ExceptionHandler_SameInsn_PartialOrder;
delete rel_65_ExceptionHandler_SameInsn_Repr;
delete rel_66_ExceptionHandler_Type;
delete rel_67_ExceptionHandler_TypeIsCaught;
delete rel_68_ExceptionHeapTypeRepresentativeOrdinal;
delete rel_69_ExceptionType;
delete rel_70_ExceptionTypeToHeap;
delete rel_71_FakeInvocation_RegisterFinalize0;
delete rel_72_FieldInstruction_Signature;
delete rel_73_Field_DeclaringType;
delete rel_74_ForcedReachableAndroidContext;
delete rel_75_delta_ForcedReachableAndroidContext;
delete rel_76_new_ForcedReachableAndroidContext;
delete rel_77_FormalOfForcedReachableContext;
delete rel_78_delta_FormalOfForcedReachableContext;
delete rel_79_new_FormalOfForcedReachableContext;
delete rel_80_FormalsForEntryPoints;
delete rel_81_HContextForEntryPoint;
delete rel_82_HeapAllocation_ContextInsensitive;
delete rel_83_HeapAllocation_Keep;
delete rel_84_HeapAllocation_Merge;
delete rel_85_HeapAllocation_Null;
delete rel_86_HeapAllocation_Special;
delete rel_87_HeapAllocation_Type;
delete rel_88_HeapIsMergedString;
delete rel_89_HeapIsMergedStringFactory;
delete rel_90_HeapRepresentative;
delete rel_91_ImmutableContextFromContext;
delete rel_92_delta_ImmutableContextFromContext;
delete rel_93_new_ImmutableContextFromContext;
delete rel_94_ImmutableContextFromHContext;
delete rel_95_delta_ImmutableContextFromHContext;
delete rel_96_new_ImmutableContextFromHContext;
delete rel_97_ImmutableHContextFromContext;
delete rel_98_delta_ImmutableHContextFromContext;
delete rel_99_new_ImmutableHContextFromContext;
delete rel_100_ImplicitReachable;
delete rel_101_ImplicitlyInstantiatedLibraryType;
delete rel_102_InitializedClass;
delete rel_103_delta_InitializedClass;
delete rel_104_new_InitializedClass;
delete rel_105_InstanceFieldPointsTo;
delete rel_106_delta_InstanceFieldPointsTo;
delete rel_107_new_InstanceFieldPointsTo;
delete rel_108_Instruction_Index;
delete rel_109_Instruction_Method;
delete rel_110_delta_Instruction_Method;
delete rel_111_new_Instruction_Method;
delete rel_112_Instruction_Throws;
delete rel_113_delta_Instruction_Throws;
delete rel_114_new_Instruction_Throws;
delete rel_115_LastDot;
delete rel_116_LayoutControl;
delete rel_117_LibraryReachableAppListenerType;
delete rel_118_delta_LibraryReachableAppListenerType;
delete rel_119_new_LibraryReachableAppListenerType;
delete rel_120_ListenerType;
delete rel_121_LoadArrayIndex;
delete rel_122_LoadArrayIndex_Base;
delete rel_123_LoadArrayIndex_To;
delete rel_124_LoadHeapArrayIndex;
delete rel_125_delta_LoadHeapArrayIndex;
delete rel_126_new_LoadHeapArrayIndex;
delete rel_127_LoadHeapInstanceField;
delete rel_128_delta_LoadHeapInstanceField;
delete rel_129_new_LoadHeapInstanceField;
delete rel_130_LoadInstanceField;
delete rel_131_LoadInstanceField_Base;
delete rel_132_LoadInstanceField_To;
delete rel_133_LoadStaticField;
delete rel_134_LoadStaticField_To;
delete rel_135_MainClass;
delete rel_136_MainMethodArgArray;
delete rel_137_MainMethodArgArrayContent;
delete rel_138_MainMethodDeclaration;
delete rel_139_MainThread;
delete rel_140_MainThreadGroup;
delete rel_141_MethodAllocationMergeThreshold;
delete rel_142_MethodAndTypeToHeap;
delete rel_143_MethodAndTypeToMergedHeap;
delete rel_144_MethodAndTypeToRepresentative;
delete rel_145_MethodDeclaredOrInherited;
delete rel_146_delta_MethodDeclaredOrInherited;
delete rel_147_new_MethodDeclaredOrInherited;
delete rel_148_MethodImplemented;
delete rel_149_MethodInvocation_Method;
delete rel_150_MethodLookup;
delete rel_151_delta_MethodLookup;
delete rel_152_new_MethodLookup;
delete rel_153_Method_DeclaringType;
delete rel_154_Method_Descriptor;
delete rel_155_Method_ReturnType;
delete rel_156_Method_SimpleName;
delete rel_157_MinHeapOrdinalPerMethodAndType;
delete rel_158_MinRepresentativeHeapToPickFromOrdinal;
delete rel_159_MockForFormal;
delete rel_160_MockObject;
delete rel_161_MockObjectContext;
delete rel_162_MockObjectForComponentType;
delete rel_163_MockObjectForType;
delete rel_164_NotEmptyArrayValue;
delete rel_165_NotLastDot;
delete rel_166_NotSpecialObject;
delete rel_167_ObjToMock;
delete rel_168_delta_ObjToMock;
delete rel_169_new_ObjToMock;
delete rel_170_ObjectMultipleAllocated;
delete rel_171_ObjectShouldNotBeRefined;
delete rel_172_OptAssignCast;
delete rel_173_delta_OptAssignCast;
delete rel_174_new_OptAssignCast;
delete rel_175_OptAssignHeapAllocation;
delete rel_176_OptForNameInvocation;
delete rel_177_OptInterproceduralAssign;
delete rel_178_delta_OptInterproceduralAssign;
delete rel_179_new_OptInterproceduralAssign;
delete rel_180_OptLoadArrayIndex;
delete rel_181_OptLoadHeapArrayIndex;
delete rel_182_delta_OptLoadHeapArrayIndex;
delete rel_183_new_OptLoadHeapArrayIndex;
delete rel_184_OptSpecialMethodInvocationBase;
delete rel_185_delta_OptSpecialMethodInvocationBase;
delete rel_186_new_OptSpecialMethodInvocationBase;
delete rel_187_OptStoreArrayIndex;
delete rel_188_OptStoreIntoArray;
delete rel_189_delta_OptStoreIntoArray;
delete rel_190_new_OptStoreIntoArray;
delete rel_191_OptVirtualMethodInvocationBase;
delete rel_192_delta_OptVirtualMethodInvocationBase;
delete rel_193_new_OptVirtualMethodInvocationBase;
delete rel_194_OverridesFinalize;
delete rel_195_OverridingProtectedMethodOfComponent;
delete rel_196_OverridingProtectedOnMethodOfLayoutControl;
delete rel_197_OverridingProtectedOnMethodOfReachableListener;
delete rel_198_delta_OverridingProtectedOnMethodOfReachableListener;
delete rel_199_new_OverridingProtectedOnMethodOfReachableListener;
delete rel_200_PossibleEntryPoint;
delete rel_201_PrefixAbove;
delete rel_202_PrefixBelow;
delete rel_203_ProtectedMethodOfComponent;
delete rel_204_ProtectedOnMethodOfLayoutControl;
delete rel_205_ProtectedOnMethodOfReachableListener;
delete rel_206_delta_ProtectedOnMethodOfReachableListener;
delete rel_207_new_ProtectedOnMethodOfReachableListener;
delete rel_208_PublicMethodOfComponent;
delete rel_209_PublicOnMethodOfLayoutControl;
delete rel_210_PublicOnMethodOfReachableListener;
delete rel_211_delta_PublicOnMethodOfReachableListener;
delete rel_212_new_PublicOnMethodOfReachableListener;
delete rel_213_Reachable;
delete rel_214_delta_Reachable;
delete rel_215_new_Reachable;
delete rel_216_ReachableApplicationObjectOfType;
delete rel_217_delta_ReachableApplicationObjectOfType;
delete rel_218_new_ReachableApplicationObjectOfType;
delete rel_219_ReachableContext;
delete rel_220_delta_ReachableContext;
delete rel_221_new_ReachableContext;
delete rel_222_ReachableCurrentThreadInvocation;
delete rel_223_delta_ReachableCurrentThreadInvocation;
delete rel_224_new_ReachableCurrentThreadInvocation;
delete rel_225_ReachableLoadArrayIndexBase;
delete rel_226_delta_ReachableLoadArrayIndexBase;
delete rel_227_new_ReachableLoadArrayIndexBase;
delete rel_228_ReachableStoreArrayIndexBase;
delete rel_229_delta_ReachableStoreArrayIndexBase;
delete rel_230_new_ReachableStoreArrayIndexBase;
delete rel_231_ReachableStoreStaticFieldFrom;
delete rel_232_delta_ReachableStoreStaticFieldFrom;
delete rel_233_new_ReachableStoreStaticFieldFrom;
delete rel_234_ReceiverPointsTo;
delete rel_235_ReifiedAndroidObjectValue;
delete rel_236_ReifiedComponent;
delete rel_237_ReifiedLayoutControl;
delete rel_238_ReifiedLibraryObject;
delete rel_239_RepresentativesToPickFrom;
delete rel_240_ResolveInvocation;
delete rel_241_ReturnNonvoid_Var;
delete rel_242_ReturnVar;
delete rel_243_delta_ReturnVar;
delete rel_244_new_ReturnVar;
delete rel_245_RunningThread;
delete rel_246_delta_RunningThread;
delete rel_247_new_RunningThread;
delete rel_248_SiteShouldNotBeRefined;
delete rel_249_SpecialLibraryClass;
delete rel_250_SpecialLibraryMethod;
delete rel_251_SpecialLibraryObject;
delete rel_252_SpecialMethodInvocation_Base;
delete rel_253_StaticFieldPointsTo;
delete rel_254_delta_StaticFieldPointsTo;
delete rel_255_new_StaticFieldPointsTo;
delete rel_256_StaticMethodInvocation;
delete rel_257_StaticToActualType;
delete rel_258_Stats_Metrics;
delete rel_259_Stats_Simple_ApplicationConcreteMethod;
delete rel_260_Stats_Simple_Application_ArrayIndexPointsTo;
delete rel_261_Stats_Simple_Application_Cast;
delete rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation;
delete rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo;
delete rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo;
delete rel_265_Stats_Simple_Application_InsensVarPointsTo;
delete rel_266_Stats_Simple_Application_InstanceFieldPointsTo;
delete rel_267_Stats_Simple_Application_NullVirtualMethodInvocation;
delete rel_268_Stats_Simple_Application_PolymorphicCallSite;
delete rel_269_Stats_Simple_Application_PotentiallyFailingCast;
delete rel_270_Stats_Simple_Application_ReachableCast;
delete rel_271_Stats_Simple_Application_ReachableMethod;
delete rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation;
delete rel_273_Stats_Simple_Application_VarPointsTo;
delete rel_274_Stats_Simple_Application_VirtualMethodInvocation;
delete rel_275_Stats_Simple_AssignedVariable;
delete rel_276_Stats_Simple_EmptyVirtualMethodInvocation;
delete rel_277_Stats_Simple_InsensArrayIndexPointsTo;
delete rel_278_Stats_Simple_InsensCallGraphEdge;
delete rel_279_Stats_Simple_InsensInstanceFieldPointsTo;
delete rel_280_Stats_Simple_InsensReachableApplicationMethod;
delete rel_281_Stats_Simple_InsensReachableVar;
delete rel_282_Stats_Simple_InsensStaticFieldPointsTo;
delete rel_283_Stats_Simple_InsensVarPointsTo;
delete rel_284_Stats_Simple_NonReachableApplicationConcreteMethod;
delete rel_285_Stats_Simple_NullVirtualMethodInvocation;
delete rel_286_Stats_Simple_PolymorphicCallSite;
delete rel_287_Stats_Simple_PotentiallyFailingCast;
delete rel_288_Stats_Simple_ReachableApplicationMethod;
delete rel_289_Stats_Simple_ReachableCast;
delete rel_290_Stats_Simple_ReachableVar;
delete rel_291_Stats_Simple_ReachableVirtualMethodInvocation;
delete rel_292_Stats_Simple_VirtualCallGraphEdge;
delete rel_293_Stats_Simple_VirtualTargets;
delete rel_294_StoreArrayIndex;
delete rel_295_StoreArrayIndex_Base;
delete rel_296_StoreArrayIndex_From;
delete rel_297_StoreHeapArrayIndex;
delete rel_298_delta_StoreHeapArrayIndex;
delete rel_299_new_StoreHeapArrayIndex;
delete rel_300_StoreHeapInstanceField;
delete rel_301_delta_StoreHeapInstanceField;
delete rel_302_new_StoreHeapInstanceField;
delete rel_303_StoreInstanceField;
delete rel_304_StoreInstanceField_Base;
delete rel_305_StoreInstanceField_From;
delete rel_306_StoreStaticField;
delete rel_307_StoreStaticField_From;
delete rel_308_StringFactoryHeap;
delete rel_309_StringFactoryType;
delete rel_310_Subclass;
delete rel_311_delta_Subclass;
delete rel_312_new_Subclass;
delete rel_313_SubtypeOf;
delete rel_314_delta_SubtypeOf;
delete rel_315_new_SubtypeOf;
delete rel_316_Superinterface;
delete rel_317_delta_Superinterface;
delete rel_318_new_Superinterface;
delete rel_319_SupertypeOf;
delete rel_320_SystemThreadGroup;
delete rel_321_TamiflexCallGraphEdge;
delete rel_322_delta_TamiflexCallGraphEdge;
delete rel_323_new_TamiflexCallGraphEdge;
delete rel_324_TamiflexConstructorCallGraphEdge;
delete rel_325_delta_TamiflexConstructorCallGraphEdge;
delete rel_326_new_TamiflexConstructorCallGraphEdge;
delete rel_327_TamiflexInvocationArgumentArrayValue;
delete rel_328_delta_TamiflexInvocationArgumentArrayValue;
delete rel_329_new_TamiflexInvocationArgumentArrayValue;
delete rel_330_TamiflexInvocationFirstParam;
delete rel_331_delta_TamiflexInvocationFirstParam;
delete rel_332_new_TamiflexInvocationFirstParam;
delete rel_333_Tamiflex_Array_NewInstance;
delete rel_334_Tamiflex_Class_NewInstance;
delete rel_335_Tamiflex_Constructor_NewInstance;
delete rel_336_Tamiflex_Invoke;
delete rel_337_delta_Tamiflex_Invoke;
delete rel_338_new_Tamiflex_Invoke;
delete rel_339_Tamiflex_ReflectionData;
delete rel_340_Tamiflex_ReflectionMap;
delete rel_341_Tamiflex_ReifiedField;
delete rel_342_Tamiflex_ReifiedFieldArray;
delete rel_343_Tamiflex_ReifiedMethod;
delete rel_344_Tamiflex_ReifiedMethodArray;
delete rel_345_Temp1;
delete rel_346_delta_Temp1;
delete rel_347_new_Temp1;
delete rel_348_Temp2;
delete rel_349_delta_Temp2;
delete rel_350_new_Temp2;
delete rel_351_Throw;
delete rel_352_ThrowPointsTo;
delete rel_353_delta_ThrowPointsTo;
delete rel_354_new_ThrowPointsTo;
delete rel_355_Throw_Var;
delete rel_356_TopLevelEntryPoint;
delete rel_357_TypeForFormals;
delete rel_358_TypeToConcreteImplementationOrd;
delete rel_359_Type_byte;
delete rel_360_Type_char;
delete rel_361_Type_double;
delete rel_362_Type_float;
delete rel_363_Type_int;
delete rel_364_Type_long;
delete rel_365_Type_null;
delete rel_366_Type_short;
delete rel_367_Value_Num;
delete rel_368_Value_Type;
delete rel_369_Value_isHeap;
delete rel_370_Value_isMock;
delete rel_371_Value_isNonHeap;
delete rel_372_VarPointsTo;
delete rel_373_delta_VarPointsTo;
delete rel_374_new_VarPointsTo;
delete rel_375_Var_DeclaringMethod;
delete rel_376_Var_Type;
delete rel_377_VarsAtInvocationRetrievingView;
delete rel_378_ViewObjectValueFromId;
delete rel_379_ViewRetrievalByArg0MethodInvocation;
delete rel_380_VirtualMethodInvocation;
delete rel_381_VirtualMethodInvocation_Base;
delete rel_382_VirtualMethodInvocation_Descriptor;
delete rel_383_VirtualMethodInvocation_SimpleName;
delete rel_384_Activity;
delete rel_385_ActualParam;
delete rel_386_AndroidEntryPoint;
delete rel_387_ApplicationClass;
delete rel_388_ArrayType;
delete rel_389_AssignBinop;
delete rel_390_AssignCast;
delete rel_391_AssignCastNull;
delete rel_392_AssignCastNumConstant;
delete rel_393_AssignHeapAllocation;
delete rel_394_AssignInstanceOf;
delete rel_395_AssignLocal;
delete rel_396_AssignNull;
delete rel_397_AssignNumConstant;
delete rel_398_AssignPhantomInvoke;
delete rel_399_AssignReturnValue;
delete rel_400_AssignUnop;
delete rel_401_BootstrapParam;
delete rel_402_BreakpointStmt;
delete rel_403_BroadcastReceiver;
delete rel_404_CallbackMethod;
delete rel_405_ClassHeap;
delete rel_406_ClassModifier;
delete rel_407_ClassType;
delete rel_408_ComponentType;
delete rel_409_ContentProvider;
delete rel_410_Dacapo;
delete rel_411_DirectSuperclass;
delete rel_412_DirectSuperinterface;
delete rel_413_DynamicMethodInvocation;
delete rel_414_EmptyArray;
delete rel_415_EnterMonitor;
delete rel_416_ExceptionHandler;
delete rel_417_ExceptionHandler_Previous;
delete rel_418_ExitMonitor;
delete rel_419_Field;
delete rel_420_FieldInitialValue;
delete rel_421_Field_Modifier;
delete rel_422_FormalParam;
delete rel_423_Goto;
delete rel_424_If;
delete rel_425_InterfaceType;
delete rel_426_LayoutControl;
delete rel_427_LoadArrayIndex;
delete rel_428_LoadInstanceField;
delete rel_429_LoadStaticField;
delete rel_430_LookupSwitch;
delete rel_431_Method;
delete rel_432_MethodHandleConstant;
delete rel_433_MethodInvocation_Line;
delete rel_434_Method_DeclaresException;
delete rel_435_Method_Modifier;
delete rel_436_NativeReturnVar;
delete rel_437_NormalHeap;
delete rel_438_PhantomInvoke;
delete rel_439_Return;
delete rel_440_ReturnVoid;
delete rel_441_Service;
delete rel_442_SpecialMethodInvocation;
delete rel_443_StaticMethodInvocation;
delete rel_444_StoreArrayIndex;
delete rel_445_StoreInstanceField;
delete rel_446_StoreStaticField;
delete rel_447_StringConstant;
delete rel_448_TableSwitch;
delete rel_449_Tamiflex_ReflectionData;
delete rel_450_Tamiflex_ToDoopFormat;
delete rel_451_ThisVar;
delete rel_452_Throw;
delete rel_453_ThrowNull;
delete rel_454_UnsupportedInstruction;
delete rel_455_Var_DeclaringMethod;
delete rel_456_Var_Type;
delete rel_457_VirtualMethodInvocation;
delete rel_458_isArrayType;
delete rel_459_isAssignCast_Insn;
delete rel_460_isAssignHeapAllocation_Insn;
delete rel_461_isAssignLocal_Insn;
delete rel_462_isAssignNull_Insn;
delete rel_463_isClassHeap;
delete rel_464_isClassType;
delete rel_465_isClinitContext;
delete rel_466_isContext;
delete rel_467_delta_isContext;
delete rel_468_new_isContext;
delete rel_469_isExceptionHandler;
delete rel_470_isField;
delete rel_471_isHContext;
delete rel_472_delta_isHContext;
delete rel_473_new_isHContext;
delete rel_474_isHeapAllocation;
delete rel_475_isImmutableContext;
delete rel_476_isImmutableHContext;
delete rel_477_isInitialContext;
delete rel_478_isInstruction;
delete rel_479_isInterfaceType;
delete rel_480_isJVMStartupContext;
delete rel_481_isJVMStartupHContext;
delete rel_482_isLoadArrayIndex_Insn;
delete rel_483_isLoadInstanceField_Insn;
delete rel_484_isLoadStaticField_Insn;
delete rel_485_isMethod;
delete rel_486_isMethodInvocation;
delete rel_487_isNumConstant;
delete rel_488_isPrimitiveType;
delete rel_489_isReferenceType;
delete rel_490_isReturnNonvoid_Insn;
delete rel_491_isStaticMethodInvocation_Insn;
delete rel_492_isStoreArrayIndex_Insn;
delete rel_493_isStoreInstanceField_Insn;
delete rel_494_isStoreStaticField_Insn;
delete rel_495_isStringConstant;
delete rel_496_isThrow_Insn;
delete rel_497_isType;
delete rel_498_isValue;
delete rel_499_isVar;
delete rel_500_isVirtualMethodInvocation_Insn;
}
void run() {
// -- initialize counter --
std::atomic<RamDomain> ctr(0);

#if defined(__EMBEDDED_SOUFFLE__) && defined(_OPENMP)
omp_set_num_threads(1);
#endif

// -- query evaluation --
std::ofstream profile(profiling_fname);
profile << "@start-debug\n";
{
	RamLogger logger(R"(@runtime;)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-relation;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1084:1-1084:33];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1140:1-1141:28];Subclass(?c,?a) :- \n   _DirectSuperclass(?a,?c).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_310_Subclass_op_ctxt,rel_310_Subclass->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_310_Subclass->insert(tuple,READ_OP_CONTEXT(rel_310_Subclass_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1140:1-1141:28];Subclass(?c,?a) :-     _DirectSuperclass(?a,?c).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1140:1-1141:28];Subclass(?c,?a) :- \n   _DirectSuperclass(?a,?c).;)" <<  rel_310_Subclass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1084:1-1084:33];)" <<  rel_310_Subclass->size() << "\n";
}rel_311_delta_Subclass->insertAll(*rel_310_Subclass);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1084:1-1084:33];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Subclass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1142:1-1144:28];Subclass(?c,?a) :- \n   Subclass(?b,?a),\n   _DirectSuperclass(?b,?c).;)",profile);
if (!rel_311_delta_Subclass->empty()&&!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_311_delta_Subclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_311_delta_Subclass_op_ctxt,rel_311_delta_Subclass->createContext());
CREATE_OP_CONTEXT(rel_312_new_Subclass_op_ctxt,rel_312_new_Subclass->createContext());
CREATE_OP_CONTEXT(rel_310_Subclass_op_ctxt,rel_310_Subclass->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_411_DirectSuperclass->equalRange<0>(key,READ_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_310_Subclass->contains(Tuple<RamDomain,2>({env1[1],env0[1]}),READ_OP_CONTEXT(rel_310_Subclass_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1])});
if (!(rel_312_new_Subclass->insert(tuple,READ_OP_CONTEXT(rel_312_new_Subclass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1142:1-1144:28];@new_Subclass(?c,?a) :-     @delta_Subclass(?b,?a),    _DirectSuperclass(?b,?c),    !Subclass(?c,?a).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Subclass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1142:1-1144:28];Subclass(?c,?a) :- \n   Subclass(?b,?a),\n   _DirectSuperclass(?b,?c).;)" <<  rel_312_new_Subclass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1084:1-1084:33];)" <<  rel_312_new_Subclass->size() << "\n";
}if(rel_312_new_Subclass->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;Subclass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1084:1-1084:33];)",profile);
rel_310_Subclass->insertAll(*rel_312_new_Subclass);
{
auto rel_0 = rel_311_delta_Subclass;
rel_311_delta_Subclass = rel_312_new_Subclass;
rel_312_new_Subclass = rel_0;
}
rel_312_new_Subclass->purge();
}
}
rel_311_delta_Subclass->purge();
rel_312_new_Subclass->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1086:1-1086:39];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1147:1-1148:34];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?k).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_316_Superinterface_op_ctxt,rel_316_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_316_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_316_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1147:1-1148:34];Superinterface(?k,?c) :-     _DirectSuperinterface(?c,?k).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1147:1-1148:34];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?k).;)" <<  rel_316_Superinterface->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1086:1-1086:39];)" <<  rel_316_Superinterface->size() << "\n";
}rel_317_delta_Superinterface->insertAll(*rel_316_Superinterface);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1086:1-1086:39];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1149:1-1151:28];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?j),\n   Superinterface(?k,?j).;)",profile);
if (!rel_317_delta_Superinterface->empty()&&!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_317_delta_Superinterface_op_ctxt,rel_317_delta_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_318_new_Superinterface_op_ctxt,rel_318_new_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_316_Superinterface_op_ctxt,rel_316_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_317_delta_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_317_delta_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_316_Superinterface->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_316_Superinterface_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_318_new_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_318_new_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1149:1-1151:28];@new_Superinterface(?k,?c) :-     _DirectSuperinterface(?c,?j),    @delta_Superinterface(?k,?j),    !Superinterface(?k,?c).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1149:1-1151:28];Superinterface(?k,?c) :- \n   _DirectSuperinterface(?c,?j),\n   Superinterface(?k,?j).;)" <<  rel_318_new_Superinterface->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1152:1-1154:32];Superinterface(?k,?c) :- \n   _DirectSuperclass(?c,?super),\n   Superinterface(?k,?super).;)",profile);
if (!rel_317_delta_Superinterface->empty()&&!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_317_delta_Superinterface_op_ctxt,rel_317_delta_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_318_new_Superinterface_op_ctxt,rel_318_new_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_316_Superinterface_op_ctxt,rel_316_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_317_delta_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_317_delta_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_316_Superinterface->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_316_Superinterface_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_318_new_Superinterface->insert(tuple,READ_OP_CONTEXT(rel_318_new_Superinterface_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1152:1-1154:32];@new_Superinterface(?k,?c) :-     _DirectSuperclass(?c,?super),    @delta_Superinterface(?k,?super),    !Superinterface(?k,?c).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Superinterface;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1152:1-1154:32];Superinterface(?k,?c) :- \n   _DirectSuperclass(?c,?super),\n   Superinterface(?k,?super).;)" <<  rel_318_new_Superinterface->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1086:1-1086:39];)" <<  rel_318_new_Superinterface->size() << "\n";
}if(rel_318_new_Superinterface->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;Superinterface;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1086:1-1086:39];)",profile);
rel_316_Superinterface->insertAll(*rel_318_new_Superinterface);
{
auto rel_0 = rel_317_delta_Superinterface;
rel_317_delta_Superinterface = rel_318_new_Superinterface;
rel_318_new_Superinterface = rel_0;
}
rel_318_new_Superinterface->purge();
}
}
rel_317_delta_Superinterface->purge();
rel_318_new_Superinterface->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_byte;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [30:1-30:34];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_byte;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];Type_byte(\"byte\").;)",profile);
rel_359_Type_byte->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_byte;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];Type_byte(\"byte\").;)" <<  rel_359_Type_byte->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_byte;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [30:1-30:34];)" <<  rel_359_Type_byte->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_char;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [31:1-31:34];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_char;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];Type_char(\"char\").;)",profile);
rel_360_Type_char->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_char;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];Type_char(\"char\").;)" <<  rel_360_Type_char->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_char;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [31:1-31:34];)" <<  rel_360_Type_char->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_double;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [36:1-36:36];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_double;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];Type_double(\"double\").;)",profile);
rel_361_Type_double->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_double;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];Type_double(\"double\").;)" <<  rel_361_Type_double->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_double;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [36:1-36:36];)" <<  rel_361_Type_double->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_float;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [35:1-35:35];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_float;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];Type_float(\"float\").;)",profile);
rel_362_Type_float->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_float;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];Type_float(\"float\").;)" <<  rel_362_Type_float->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_float;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [35:1-35:35];)" <<  rel_362_Type_float->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_int;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [33:1-33:33];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_int;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];Type_int(\"int\").;)",profile);
rel_363_Type_int->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_int;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];Type_int(\"int\").;)" <<  rel_363_Type_int->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_int;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [33:1-33:33];)" <<  rel_363_Type_int->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_long;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [34:1-34:34];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_long;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];Type_long(\"long\").;)",profile);
rel_364_Type_long->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_long;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];Type_long(\"long\").;)" <<  rel_364_Type_long->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_long;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [34:1-34:34];)" <<  rel_364_Type_long->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [38:1-38:34];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];Type_null(\"null_type\").;)",profile);
rel_365_Type_null->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];Type_null(\"null_type\").;)" <<  rel_365_Type_null->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [38:1-38:34];)" <<  rel_365_Type_null->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [80:1-80:48];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Null(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)",profile);
if (!rel_365_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_365_Type_null_op_ctxt,rel_365_Type_null->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(19)});
if (!(rel_85_HeapAllocation_Null->insert(tuple,READ_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Null('<<null pseudo heap>>') :-     Type_null(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Null(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)" <<  rel_85_HeapAllocation_Null->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_Null;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [80:1-80:48];)" <<  rel_85_HeapAllocation_Null->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Type_short;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [32:1-32:35];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Type_short;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];Type_short(\"short\").;)",profile);
rel_366_Type_short->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Type_short;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];Type_short(\"short\").;)" <<  rel_366_Type_short->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Type_short;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [32:1-32:35];)" <<  rel_366_Type_short->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [21:1-21:32];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isArrayType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_388_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_388_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_388_ArrayType_op_ctxt,rel_388_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_458_isArrayType->insert(tuple,READ_OP_CONTEXT(rel_458_isArrayType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isArrayType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isArrayType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_458_isArrayType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isArrayType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_458_isArrayType->insert(tuple,READ_OP_CONTEXT(rel_458_isArrayType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isArrayType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isArrayType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_458_isArrayType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isArrayType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [21:1-21:32];)" <<  rel_458_isArrayType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [22:1-22:32];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isClassType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_407_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_ClassType_op_ctxt,rel_407_ClassType->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_464_isClassType->insert(tuple,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isClassType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isClassType(?class) :- \n   _ClassType(?class).;)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_464_isClassType->insert(tuple,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_464_isClassType->insert(tuple,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isClassType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [399:1-399:33];isClassType(\"java.lang.String\").;)",profile);
rel_464_isClassType->insert(0);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [399:1-399:33];isClassType(\"java.lang.String\").;)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [424:1-424:46];isClassType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_464_isClassType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [424:1-424:46];isClassType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isClassType(\"java.lang.Object\").;)",profile);
rel_464_isClassType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isClassType(\"java.lang.Object\").;)" <<  rel_464_isClassType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isClassType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [22:1-22:32];)" <<  rel_464_isClassType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1974:1-1974:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1975:1-1976:22];ClassNameIndexes(0,?type) :- \n   isClassType(?type).;)",profile);
if (!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_42_ClassNameIndexes_op_ctxt,rel_42_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(0),(RamDomain)(env0[0])});
if (!(rel_42_ClassNameIndexes->insert(tuple,READ_OP_CONTEXT(rel_42_ClassNameIndexes_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1975:1-1976:22];ClassNameIndexes(0,?type) :-     isClassType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1975:1-1976:22];ClassNameIndexes(0,?type) :- \n   isClassType(?type).;)" <<  rel_42_ClassNameIndexes->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1974:1-1974:53];)" <<  rel_42_ClassNameIndexes->size() << "\n";
}rel_43_delta_ClassNameIndexes->insertAll(*rel_42_ClassNameIndexes);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1974:1-1974:53];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ClassNameIndexes;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1977:1-1979:23];ClassNameIndexes((?pos+1),?t) :- \n   ClassNameIndexes(?pos,?t),\n   (?pos+1) < strlen(?t).;)",profile);
if (!rel_43_delta_ClassNameIndexes->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_43_delta_ClassNameIndexes->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_43_delta_ClassNameIndexes_op_ctxt,rel_43_delta_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_44_new_ClassNameIndexes_op_ctxt,rel_44_new_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_42_ClassNameIndexes_op_ctxt,rel_42_ClassNameIndexes->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((!rel_42_ClassNameIndexes->contains(Tuple<RamDomain,2>({(env0[0]) + (1),env0[1]}),READ_OP_CONTEXT(rel_42_ClassNameIndexes_op_ctxt))) && ((((env0[0]) + (1)) < (strlen(symTable.resolve((size_t)env0[1]))))))) {
Tuple<RamDomain,2> tuple({(RamDomain)((env0[0]) + (1)),(RamDomain)(env0[1])});
if (!(rel_44_new_ClassNameIndexes->insert(tuple,READ_OP_CONTEXT(rel_44_new_ClassNameIndexes_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1977:1-1979:23];@new_ClassNameIndexes((?pos+1),?t) :-     @delta_ClassNameIndexes(?pos,?t),    !ClassNameIndexes((?pos+1),?t),    (?pos+1) < strlen(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ClassNameIndexes;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1977:1-1979:23];ClassNameIndexes((?pos+1),?t) :- \n   ClassNameIndexes(?pos,?t),\n   (?pos+1) < strlen(?t).;)" <<  rel_44_new_ClassNameIndexes->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1974:1-1974:53];)" <<  rel_44_new_ClassNameIndexes->size() << "\n";
}if(rel_44_new_ClassNameIndexes->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ClassNameIndexes;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1974:1-1974:53];)",profile);
rel_42_ClassNameIndexes->insertAll(*rel_44_new_ClassNameIndexes);
{
auto rel_0 = rel_43_delta_ClassNameIndexes;
rel_43_delta_ClassNameIndexes = rel_44_new_ClassNameIndexes;
rel_44_new_ClassNameIndexes = rel_0;
}
rel_44_new_ClassNameIndexes->purge();
}
}
rel_43_delta_ClassNameIndexes->purge();
rel_44_new_ClassNameIndexes->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;DotsInClassName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1980:1-1980:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;DotsInClassName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1986:1-1988:32];DotsInClassName(?type,?pos) :- \n   ClassNameIndexes(?pos,?type),\n   substr(?type,?pos,1) = \".\".;)",profile);
if (!rel_42_ClassNameIndexes->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_42_ClassNameIndexes->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_42_ClassNameIndexes_op_ctxt,rel_42_ClassNameIndexes->createContext());
CREATE_OP_CONTEXT(rel_51_DotsInClassName_op_ctxt,rel_51_DotsInClassName->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( (((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[1]),(env0[0]),(1)).c_str()))) == (142))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_51_DotsInClassName->insert(tuple,READ_OP_CONTEXT(rel_51_DotsInClassName_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;DotsInClassName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1986:1-1988:32];DotsInClassName(?type,?pos) :-     ClassNameIndexes(?pos,?type),    substr(?type,?pos,1) = '.'.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;DotsInClassName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1986:1-1988:32];DotsInClassName(?type,?pos) :- \n   ClassNameIndexes(?pos,?type),\n   substr(?type,?pos,1) = \".\".;)" <<  rel_51_DotsInClassName->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;DotsInClassName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1980:1-1980:52];)" <<  rel_51_DotsInClassName->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;NotLastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1981:1-1981:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotLastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1989:1-1992:16];NotLastDot(?pos,?type) :- \n   DotsInClassName(?type,?pos),\n   DotsInClassName(?type,?pos2),\n   ?pos2 > ?pos.;)",profile);
if (!rel_51_DotsInClassName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_51_DotsInClassName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_51_DotsInClassName_op_ctxt,rel_51_DotsInClassName->createContext());
CREATE_OP_CONTEXT(rel_165_NotLastDot_op_ctxt,rel_165_NotLastDot->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_51_DotsInClassName->equalRange<0>(key,READ_OP_CONTEXT(rel_51_DotsInClassName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((env1[1]) > (env0[1]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_165_NotLastDot->insert(tuple,READ_OP_CONTEXT(rel_165_NotLastDot_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotLastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1989:1-1992:16];NotLastDot(?pos,?type) :-     DotsInClassName(?type,?pos),    DotsInClassName(?type,?pos2),    ?pos2 > ?pos.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotLastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1989:1-1992:16];NotLastDot(?pos,?type) :- \n   DotsInClassName(?type,?pos),\n   DotsInClassName(?type,?pos2),\n   ?pos2 > ?pos.;)" <<  rel_165_NotLastDot->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;NotLastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1981:1-1981:47];)" <<  rel_165_NotLastDot->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1983:1-1983:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2000:1-2002:28];LastDot(?type,?pos) :- \n   DotsInClassName(?type,?pos),\n   !NotLastDot(?pos,?type).;)",profile);
if (!rel_51_DotsInClassName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_51_DotsInClassName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_51_DotsInClassName_op_ctxt,rel_51_DotsInClassName->createContext());
CREATE_OP_CONTEXT(rel_115_LastDot_op_ctxt,rel_115_LastDot->createContext());
CREATE_OP_CONTEXT(rel_165_NotLastDot_op_ctxt,rel_165_NotLastDot->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_165_NotLastDot->contains(Tuple<RamDomain,2>({env0[1],env0[0]}),READ_OP_CONTEXT(rel_165_NotLastDot_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_115_LastDot->insert(tuple,READ_OP_CONTEXT(rel_115_LastDot_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2000:1-2002:28];LastDot(?type,?pos) :-     DotsInClassName(?type,?pos),    !NotLastDot(?pos,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2000:1-2002:28];LastDot(?type,?pos) :- \n   DotsInClassName(?type,?pos),\n   !NotLastDot(?pos,?type).;)" <<  rel_115_LastDot->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LastDot;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1983:1-1983:44];)" <<  rel_115_LastDot->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [23:1-23:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isInterfaceType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_425_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_425_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_InterfaceType_op_ctxt,rel_425_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_479_isInterfaceType->insert(tuple,READ_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isInterfaceType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isInterfaceType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_479_isInterfaceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isInterfaceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_479_isInterfaceType->insert(tuple,READ_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isInterfaceType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isInterfaceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_479_isInterfaceType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isInterfaceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [23:1-23:40];)" <<  rel_479_isInterfaceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [18:1-18:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [868:1-868:69];isPrimitiveType(\"boolean\").;)",profile);
rel_488_isPrimitiveType->insert(8);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [868:1-868:69];isPrimitiveType(\"boolean\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];isPrimitiveType(\"byte\").;)",profile);
rel_488_isPrimitiveType->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];isPrimitiveType(\"byte\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];isPrimitiveType(\"char\").;)",profile);
rel_488_isPrimitiveType->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];isPrimitiveType(\"char\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];isPrimitiveType(\"short\").;)",profile);
rel_488_isPrimitiveType->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];isPrimitiveType(\"short\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];isPrimitiveType(\"int\").;)",profile);
rel_488_isPrimitiveType->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];isPrimitiveType(\"int\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];isPrimitiveType(\"long\").;)",profile);
rel_488_isPrimitiveType->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];isPrimitiveType(\"long\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];isPrimitiveType(\"float\").;)",profile);
rel_488_isPrimitiveType->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];isPrimitiveType(\"float\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];isPrimitiveType(\"double\").;)",profile);
rel_488_isPrimitiveType->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];isPrimitiveType(\"double\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [876:1-876:63];isPrimitiveType(\"void\").;)",profile);
rel_488_isPrimitiveType->insert(16);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [876:1-876:63];isPrimitiveType(\"void\").;)" <<  rel_488_isPrimitiveType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isPrimitiveType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [18:1-18:40];)" <<  rel_488_isPrimitiveType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [19:1-19:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isReferenceType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_407_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_ClassType_op_ctxt,rel_407_ClassType->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isReferenceType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isReferenceType(?class) :- \n   _ClassType(?class).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isReferenceType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_388_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_388_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_388_ArrayType_op_ctxt,rel_388_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isReferenceType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isReferenceType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isReferenceType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_425_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_425_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_InterfaceType_op_ctxt,rel_425_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isReferenceType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isReferenceType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isReferenceType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isReferenceType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isReferenceType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?class) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isReferenceType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isReferenceType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isReferenceType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_434_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_434_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_434_Method_DeclaresException_op_ctxt,rel_434_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isReferenceType(?exceptionType) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isReferenceType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isReferenceType(?type) :- \n   _ApplicationClass(?type).;)",profile);
if (!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_387_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_489_isReferenceType->insert(tuple,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isReferenceType(?type) :-     _ApplicationClass(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isReferenceType(?type) :- \n   _ApplicationClass(?type).;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [423:1-423:50];isReferenceType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_489_isReferenceType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [423:1-423:50];isReferenceType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];isReferenceType(\"null_type\").;)",profile);
rel_489_isReferenceType->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];isReferenceType(\"null_type\").;)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isReferenceType(\"java.lang.Object\").;)",profile);
rel_489_isReferenceType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isReferenceType(\"java.lang.Object\").;)" <<  rel_489_isReferenceType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isReferenceType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [19:1-19:40];)" <<  rel_489_isReferenceType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isClassHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [75:1-75:32];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClassHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isClassHeap(?id) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_405_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_405_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_405_ClassHeap_op_ctxt,rel_405_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_463_isClassHeap_op_ctxt,rel_463_isClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_463_isClassHeap->insert(tuple,READ_OP_CONTEXT(rel_463_isClassHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isClassHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isClassHeap(?id) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClassHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isClassHeap(?id) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_463_isClassHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isClassHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [75:1-75:32];)" <<  rel_463_isClassHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1244:1-1244:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _Activity(?type).;)",profile);
if (!rel_384_Activity->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_384_Activity->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_384_Activity_op_ctxt,rel_384_Activity->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_5_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :-     _Activity(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _Activity(?type).;)" <<  rel_5_AndroidAppComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _Service(?type).;)",profile);
if (!rel_441_Service->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_441_Service->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_441_Service_op_ctxt,rel_441_Service->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_5_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :-     _Service(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _Service(?type).;)" <<  rel_5_AndroidAppComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _BroadcastReceiver(?type).;)",profile);
if (!rel_403_BroadcastReceiver->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_403_BroadcastReceiver->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_403_BroadcastReceiver_op_ctxt,rel_403_BroadcastReceiver->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_5_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :-     _BroadcastReceiver(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _BroadcastReceiver(?type).;)" <<  rel_5_AndroidAppComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _ContentProvider(?type).;)",profile);
if (!rel_409_ContentProvider->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_409_ContentProvider->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_409_ContentProvider_op_ctxt,rel_409_ContentProvider->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_5_AndroidAppComponent->insert(tuple,READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :-     _ContentProvider(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1399:1-1403:26];AndroidAppComponent(?type) :- \n   _ContentProvider(?type).;)" <<  rel_5_AndroidAppComponent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AndroidAppComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1244:1-1244:40];)" <<  rel_5_AndroidAppComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [17:1-17:22];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isType(?class) :- \n   _ClassType(?class).;)",profile);
if (!rel_407_ClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_407_ClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_407_ClassType_op_ctxt,rel_407_ClassType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isType(?class) :-     _ClassType(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [262:1-265:22];isType(?class) :- \n   _ClassType(?class).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isType(?arrayType) :- \n   _ArrayType(?arrayType).;)",profile);
if (!rel_388_ArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_388_ArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_388_ArrayType_op_ctxt,rel_388_ArrayType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isType(?arrayType) :-     _ArrayType(?arrayType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [268:1-271:26];isType(?arrayType) :- \n   _ArrayType(?arrayType).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isType(?interface) :- \n   _InterfaceType(?interface).;)",profile);
if (!rel_425_InterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_425_InterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_425_InterfaceType_op_ctxt,rel_425_InterfaceType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isType(?interface) :-     _InterfaceType(?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [274:1-277:30];isType(?interface) :- \n   _InterfaceType(?interface).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?arrayType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?arrayType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?componentType) :- \n   _ComponentType(?arrayType,?componentType).;)",profile);
if (!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?componentType) :-     _ComponentType(?arrayType,?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [280:1-285:46];isType(?componentType) :- \n   _ComponentType(?arrayType,?componentType).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?class) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?class) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)",profile);
if (!rel_412_DirectSuperinterface->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_412_DirectSuperinterface->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_412_DirectSuperinterface_op_ctxt,rel_412_DirectSuperinterface->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?interface) :-     _DirectSuperinterface(?class,?interface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [303:1-309:45];isType(?interface) :- \n   _DirectSuperinterface(?class,?interface).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?class) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?class) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)",profile);
if (!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?superclass) :-     _DirectSuperclass(?class,?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [312:1-319:42];isType(?superclass) :- \n   _DirectSuperclass(?class,?superclass).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_434_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_434_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_434_Method_DeclaresException_op_ctxt,rel_434_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isType(?exceptionType) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isType(?exceptionType) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isType(?type) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_456_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_456_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_456_Var_Type_op_ctxt,rel_456_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isType(?type) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isType(?type) :- \n   _Var_Type(?var,?type).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isType(?type) :- \n   _ApplicationClass(?type).;)",profile);
if (!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_387_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isType(?type) :-     _ApplicationClass(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [369:1-372:28];isType(?type) :- \n   _ApplicationClass(?type).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isType(?type) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_437_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_437_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_437_NormalHeap_op_ctxt,rel_437_NormalHeap->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isType(?type) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isType(?type) :- \n   _NormalHeap(?id,?type).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isType(?instanceType) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_405_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_405_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_405_ClassHeap_op_ctxt,rel_405_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isType(?instanceType) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isType(?instanceType) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [422:1-422:41];isType(\"java.lang.invoke.MethodHandle\").;)",profile);
rel_497_isType->insert(2);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [422:1-422:41];isType(\"java.lang.invoke.MethodHandle\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [832:1-834:18];isType(?id) :- \n   _Activity(?id).;)",profile);
if (!rel_384_Activity->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_384_Activity->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_384_Activity_op_ctxt,rel_384_Activity->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [832:1-834:18];isType(?id) :-     _Activity(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [832:1-834:18];isType(?id) :- \n   _Activity(?id).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [837:1-839:17];isType(?id) :- \n   _Service(?id).;)",profile);
if (!rel_441_Service->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_441_Service->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_441_Service_op_ctxt,rel_441_Service->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [837:1-839:17];isType(?id) :-     _Service(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [837:1-839:17];isType(?id) :- \n   _Service(?id).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [842:1-844:25];isType(?id) :- \n   _ContentProvider(?id).;)",profile);
if (!rel_409_ContentProvider->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_409_ContentProvider->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_409_ContentProvider_op_ctxt,rel_409_ContentProvider->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [842:1-844:25];isType(?id) :-     _ContentProvider(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [842:1-844:25];isType(?id) :- \n   _ContentProvider(?id).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [847:1-849:27];isType(?id) :- \n   _BroadcastReceiver(?id).;)",profile);
if (!rel_403_BroadcastReceiver->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_403_BroadcastReceiver->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_403_BroadcastReceiver_op_ctxt,rel_403_BroadcastReceiver->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_497_isType->insert(tuple,READ_OP_CONTEXT(rel_497_isType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [847:1-849:27];isType(?id) :-     _BroadcastReceiver(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [847:1-849:27];isType(?id) :- \n   _BroadcastReceiver(?id).;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [868:1-868:69];isType(\"boolean\").;)",profile);
rel_497_isType->insert(8);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [868:1-868:69];isType(\"boolean\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];isType(\"byte\").;)",profile);
rel_497_isType->insert(9);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [869:1-869:63];isType(\"byte\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];isType(\"char\").;)",profile);
rel_497_isType->insert(10);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [870:1-870:63];isType(\"char\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];isType(\"short\").;)",profile);
rel_497_isType->insert(11);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [871:1-871:65];isType(\"short\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];isType(\"int\").;)",profile);
rel_497_isType->insert(12);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [872:1-872:61];isType(\"int\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];isType(\"long\").;)",profile);
rel_497_isType->insert(13);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [873:1-873:63];isType(\"long\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];isType(\"float\").;)",profile);
rel_497_isType->insert(14);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [874:1-874:65];isType(\"float\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];isType(\"double\").;)",profile);
rel_497_isType->insert(15);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [875:1-875:67];isType(\"double\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [876:1-876:63];isType(\"void\").;)",profile);
rel_497_isType->insert(16);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [876:1-876:63];isType(\"void\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];isType(\"null_type\").;)",profile);
rel_497_isType->insert(17);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [877:1-877:84];isType(\"null_type\").;)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isType(\"java.lang.Object\").;)",profile);
rel_497_isType->insert(18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [878:1-878:94];isType(\"java.lang.Object\").;)" <<  rel_497_isType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [17:1-17:22];)" <<  rel_497_isType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1087:1-1087:43];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1157:1-1158:21];SubtypeOf(?s,?s) :- \n   isClassType(?s).;)",profile);
if (!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1157:1-1158:21];SubtypeOf(?s,?s) :-     isClassType(?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1157:1-1158:21];SubtypeOf(?s,?s) :- \n   isClassType(?s).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1159:1-1160:22];SubtypeOf(?s,?t) :- \n   Subclass(?t,?s).;)",profile);
if (!rel_310_Subclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_310_Subclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_310_Subclass_op_ctxt,rel_310_Subclass->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1159:1-1160:22];SubtypeOf(?s,?t) :-     Subclass(?t,?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1159:1-1160:22];SubtypeOf(?s,?t) :- \n   Subclass(?t,?s).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1161:1-1163:28];SubtypeOf(?s,?t) :- \n   isClassType(?s),\n   Superinterface(?t,?s).;)",profile);
if (!rel_316_Superinterface->empty()&&!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_316_Superinterface_op_ctxt,rel_316_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_316_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_316_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1161:1-1163:28];SubtypeOf(?s,?t) :-     isClassType(?s),    Superinterface(?t,?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1161:1-1163:28];SubtypeOf(?s,?t) :- \n   isClassType(?s),\n   Superinterface(?t,?s).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1164:1-1167:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isInterfaceType(?s),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_479_isInterfaceType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_479_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(18)});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1164:1-1167:29];SubtypeOf(?s,'java.lang.Object') :-     isInterfaceType(?s),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1164:1-1167:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isInterfaceType(?s),\n   isType(\"java.lang.Object\").;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1168:1-1169:25];SubtypeOf(?s,?s) :- \n   isInterfaceType(?s).;)",profile);
if (!rel_479_isInterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_479_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1168:1-1169:25];SubtypeOf(?s,?s) :-     isInterfaceType(?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1168:1-1169:25];SubtypeOf(?s,?s) :- \n   isInterfaceType(?s).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1170:1-1172:28];SubtypeOf(?s,?t) :- \n   isInterfaceType(?s),\n   Superinterface(?t,?s).;)",profile);
if (!rel_316_Superinterface->empty()&&!rel_479_isInterfaceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_479_isInterfaceType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_316_Superinterface_op_ctxt,rel_316_Superinterface->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_316_Superinterface->equalRange<1>(key,READ_OP_CONTEXT(rel_316_Superinterface_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1170:1-1172:28];SubtypeOf(?s,?t) :-     isInterfaceType(?s),    Superinterface(?t,?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1170:1-1172:28];SubtypeOf(?s,?t) :- \n   isInterfaceType(?s),\n   Superinterface(?t,?s).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1173:1-1176:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isArrayType(?s),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_458_isArrayType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(18)});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1173:1-1176:29];SubtypeOf(?s,'java.lang.Object') :-     isArrayType(?s),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1173:1-1176:29];SubtypeOf(?s,\"java.lang.Object\") :- \n   isArrayType(?s),\n   isType(\"java.lang.Object\").;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1177:1-1182:26];SubtypeOf(?s,?t) :- \n   isArrayType(?s),\n   isArrayType(?t),\n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?sc),\n   isPrimitiveType(?sc).;)",profile);
if (!rel_408_ComponentType->empty()&&!rel_458_isArrayType->empty()&&!rel_488_isPrimitiveType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_488_isPrimitiveType_op_ctxt,rel_488_isPrimitiveType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_458_isArrayType) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_408_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],env2[1]});
auto range = rel_408_ComponentType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_488_isPrimitiveType->equalRange<0>(key,READ_OP_CONTEXT(rel_488_isPrimitiveType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1177:1-1182:26];SubtypeOf(?s,?t) :-     isArrayType(?s),    isArrayType(?t),    _ComponentType(?s,?sc),    _ComponentType(?t,?sc),    isPrimitiveType(?sc).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1177:1-1182:26];SubtypeOf(?s,?t) :- \n   isArrayType(?s),\n   isArrayType(?t),\n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?sc),\n   isPrimitiveType(?sc).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1189:1-1193:32];SubtypeOf(?s,\"java.lang.Cloneable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.lang.Cloneable\"),\n   isType(\"java.lang.Cloneable\").;)",profile);
if (!rel_458_isArrayType->empty()&&!rel_479_isInterfaceType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({63});
auto range = rel_479_isInterfaceType->equalRange<0>(key,READ_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({63});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(63)});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1189:1-1193:32];SubtypeOf(?s,'java.lang.Cloneable') :-     isArrayType(?s),    isInterfaceType('java.lang.Cloneable'),    isType('java.lang.Cloneable').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1189:1-1193:32];SubtypeOf(?s,\"java.lang.Cloneable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.lang.Cloneable\"),\n   isType(\"java.lang.Cloneable\").;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1194:1-1198:33];SubtypeOf(?s,\"java.io.Serializable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.io.Serializable\"),\n   isType(\"java.io.Serializable\").;)",profile);
if (!rel_458_isArrayType->empty()&&!rel_479_isInterfaceType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt,rel_479_isInterfaceType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({64});
auto range = rel_479_isInterfaceType->equalRange<0>(key,READ_OP_CONTEXT(rel_479_isInterfaceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({64});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(64)});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1194:1-1198:33];SubtypeOf(?s,'java.io.Serializable') :-     isArrayType(?s),    isInterfaceType('java.io.Serializable'),    isType('java.io.Serializable').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1194:1-1198:33];SubtypeOf(?s,\"java.io.Serializable\") :- \n   isArrayType(?s),\n   isInterfaceType(\"java.io.Serializable\"),\n   isType(\"java.io.Serializable\").;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1199:1-1202:14];SubtypeOf(?s,?t) :- \n   Type_null(?s),\n   isReferenceType(?t),\n   ?t != ?s.;)",profile);
if (!rel_365_Type_null->empty()&&!rel_489_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_365_Type_null_op_ctxt,rel_365_Type_null->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_489_isReferenceType) {
if( ((env1[0]) != (env0[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1199:1-1202:14];SubtypeOf(?s,?t) :-     Type_null(?s),    isReferenceType(?t),    ?t != ?s.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1199:1-1202:14];SubtypeOf(?s,?t) :- \n   Type_null(?s),\n   isReferenceType(?t),\n   ?t != ?s.;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1203:1-1205:21];SubtypeOf(?s,?t) :- \n   Type_float(?s),\n   Type_double(?t).;)",profile);
if (!rel_361_Type_double->empty()&&!rel_362_Type_float->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_362_Type_float->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_361_Type_double_op_ctxt,rel_361_Type_double->createContext());
CREATE_OP_CONTEXT(rel_362_Type_float_op_ctxt,rel_362_Type_float->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_361_Type_double) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1203:1-1205:21];SubtypeOf(?s,?t) :-     Type_float(?s),    Type_double(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1203:1-1205:21];SubtypeOf(?s,?t) :- \n   Type_float(?s),\n   Type_double(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1206:1-1208:20];SubtypeOf(?s,?t) :- \n   Type_long(?s),\n   Type_float(?t).;)",profile);
if (!rel_362_Type_float->empty()&&!rel_364_Type_long->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_364_Type_long->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_362_Type_float_op_ctxt,rel_362_Type_float->createContext());
CREATE_OP_CONTEXT(rel_364_Type_long_op_ctxt,rel_364_Type_long->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_362_Type_float) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1206:1-1208:20];SubtypeOf(?s,?t) :-     Type_long(?s),    Type_float(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1206:1-1208:20];SubtypeOf(?s,?t) :- \n   Type_long(?s),\n   Type_float(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1209:1-1211:19];SubtypeOf(?s,?t) :- \n   Type_int(?s),\n   Type_long(?t).;)",profile);
if (!rel_363_Type_int->empty()&&!rel_364_Type_long->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_363_Type_int->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_364_Type_long_op_ctxt,rel_364_Type_long->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_364_Type_long) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1209:1-1211:19];SubtypeOf(?s,?t) :-     Type_int(?s),    Type_long(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1209:1-1211:19];SubtypeOf(?s,?t) :- \n   Type_int(?s),\n   Type_long(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1212:1-1214:18];SubtypeOf(?s,?t) :- \n   Type_char(?s),\n   Type_int(?t).;)",profile);
if (!rel_360_Type_char->empty()&&!rel_363_Type_int->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_360_Type_char->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_360_Type_char_op_ctxt,rel_360_Type_char->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1212:1-1214:18];SubtypeOf(?s,?t) :-     Type_char(?s),    Type_int(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1212:1-1214:18];SubtypeOf(?s,?t) :- \n   Type_char(?s),\n   Type_int(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1215:1-1217:18];SubtypeOf(?s,?t) :- \n   Type_short(?s),\n   Type_int(?t).;)",profile);
if (!rel_363_Type_int->empty()&&!rel_366_Type_short->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_366_Type_short->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_366_Type_short_op_ctxt,rel_366_Type_short->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1215:1-1217:18];SubtypeOf(?s,?t) :-     Type_short(?s),    Type_int(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1215:1-1217:18];SubtypeOf(?s,?t) :- \n   Type_short(?s),\n   Type_int(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1218:1-1220:20];SubtypeOf(?s,?t) :- \n   Type_byte(?s),\n   Type_short(?t).;)",profile);
if (!rel_359_Type_byte->empty()&&!rel_366_Type_short->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_359_Type_byte->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_359_Type_byte_op_ctxt,rel_359_Type_byte->createContext());
CREATE_OP_CONTEXT(rel_366_Type_short_op_ctxt,rel_366_Type_short->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_366_Type_short) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1218:1-1220:20];SubtypeOf(?s,?t) :-     Type_byte(?s),    Type_short(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1218:1-1220:20];SubtypeOf(?s,?t) :- \n   Type_byte(?s),\n   Type_short(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1221:1-1222:16];SubtypeOf(?t,?t) :- \n   isType(?t).;)",profile);
if (!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_497_isType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_313_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1221:1-1222:16];SubtypeOf(?t,?t) :-     isType(?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1221:1-1222:16];SubtypeOf(?t,?t) :- \n   isType(?t).;)" <<  rel_313_SubtypeOf->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1087:1-1087:43];)" <<  rel_313_SubtypeOf->size() << "\n";
}rel_314_delta_SubtypeOf->insertAll(*rel_313_SubtypeOf);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1087:1-1087:43];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;SubtypeOf;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1183:1-1188:25];SubtypeOf(?s,?t) :- \n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?tc),\n   isReferenceType(?sc),\n   isReferenceType(?tc),\n   SubtypeOf(?sc,?tc).;)",profile);
if (!rel_314_delta_SubtypeOf->empty()&&!rel_408_ComponentType->empty()&&!rel_489_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_314_delta_SubtypeOf_op_ctxt,rel_314_delta_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_315_new_SubtypeOf_op_ctxt,rel_315_new_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_408_ComponentType) {
if( !rel_313_SubtypeOf->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_489_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_489_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[1],env1[1]});
auto range = rel_314_delta_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_314_delta_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_315_new_SubtypeOf->insert(tuple,READ_OP_CONTEXT(rel_315_new_SubtypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1183:1-1188:25];@new_SubtypeOf(?s,?t) :-     _ComponentType(?s,?sc),    _ComponentType(?t,?tc),    isReferenceType(?sc),    isReferenceType(?tc),    @delta_SubtypeOf(?sc,?tc),    !SubtypeOf(?s,?t).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;SubtypeOf;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1183:1-1188:25];SubtypeOf(?s,?t) :- \n   _ComponentType(?s,?sc),\n   _ComponentType(?t,?tc),\n   isReferenceType(?sc),\n   isReferenceType(?tc),\n   SubtypeOf(?sc,?tc).;)" <<  rel_315_new_SubtypeOf->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1087:1-1087:43];)" <<  rel_315_new_SubtypeOf->size() << "\n";
}if(rel_315_new_SubtypeOf->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;SubtypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1087:1-1087:43];)",profile);
rel_313_SubtypeOf->insertAll(*rel_315_new_SubtypeOf);
{
auto rel_0 = rel_314_delta_SubtypeOf;
rel_314_delta_SubtypeOf = rel_315_new_SubtypeOf;
rel_315_new_SubtypeOf = rel_0;
}
rel_315_new_SubtypeOf->purge();
}
}
rel_314_delta_SubtypeOf->purge();
rel_315_new_SubtypeOf->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;SupertypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1088:1-1088:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SupertypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1155:1-1156:23];SupertypeOf(?s,?t) :- \n   SubtypeOf(?t,?s).;)",profile);
if (!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_313_SubtypeOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_319_SupertypeOf->insert(tuple,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SupertypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1155:1-1156:23];SupertypeOf(?s,?t) :-     SubtypeOf(?t,?s).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SupertypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1155:1-1156:23];SupertypeOf(?s,?t) :- \n   SubtypeOf(?t,?s).;)" <<  rel_319_SupertypeOf->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SupertypeOf;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1088:1-1088:47];)" <<  rel_319_SupertypeOf->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1902:1-1902:32];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1903:1-1906:28];ExceptionType(?type) :- \n   isType(\"java.lang.Throwable\"),\n   SubtypeOf(?type,\"java.lang.Throwable\").;)",profile);
if (!rel_313_SubtypeOf->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_69_ExceptionType_op_ctxt,rel_69_ExceptionType->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({141});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,141});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_69_ExceptionType->insert(tuple,READ_OP_CONTEXT(rel_69_ExceptionType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1903:1-1906:28];ExceptionType(?type) :-     isType('java.lang.Throwable'),    SubtypeOf(?type,'java.lang.Throwable').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1903:1-1906:28];ExceptionType(?type) :- \n   isType(\"java.lang.Throwable\"),\n   SubtypeOf(?type,\"java.lang.Throwable\").;)" <<  rel_69_ExceptionType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1902:1-1902:32];)" <<  rel_69_ExceptionType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2079:1-2079:42];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2080:1-2084:33];CollectionLibraryClass(?class) :- \n   isClassType(?class),\n   isType(?class),\n   !_ApplicationClass(?class),\n   \"java\.util.*\" match ?class.;)",profile);
if (!rel_464_isClassType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_46_CollectionLibraryClass_op_ctxt,rel_46_CollectionLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((!rel_387_ApplicationClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt))) && (regex_wrapper(symTable.resolve((size_t)143),symTable.resolve((size_t)env0[0]))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_46_CollectionLibraryClass->insert(tuple,READ_OP_CONTEXT(rel_46_CollectionLibraryClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2080:1-2084:33];CollectionLibraryClass(?class) :-     isClassType(?class),    isType(?class),    !_ApplicationClass(?class),    'java\.util.*' match ?class.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2080:1-2084:33];CollectionLibraryClass(?class) :- \n   isClassType(?class),\n   isType(?class),\n   !_ApplicationClass(?class),\n   \"java\.util.*\" match ?class.;)" <<  rel_46_CollectionLibraryClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;CollectionLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2079:1-2079:42];)" <<  rel_46_CollectionLibraryClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2074:1-2074:39];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2075:1-2078:35];SpecialLibraryClass(?class) :- \n   isClassType(?class),\n   !_ApplicationClass(?class),\n   !CollectionLibraryClass(?class).;)",profile);
if (!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_46_CollectionLibraryClass_op_ctxt,rel_46_CollectionLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt,rel_249_SpecialLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((!rel_387_ApplicationClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt))) && (!rel_46_CollectionLibraryClass->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_46_CollectionLibraryClass_op_ctxt))))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_249_SpecialLibraryClass->insert(tuple,READ_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2075:1-2078:35];SpecialLibraryClass(?class) :-     isClassType(?class),    !_ApplicationClass(?class),    !CollectionLibraryClass(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2075:1-2078:35];SpecialLibraryClass(?class) :- \n   isClassType(?class),\n   !_ApplicationClass(?class),\n   !CollectionLibraryClass(?class).;)" <<  rel_249_SpecialLibraryClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SpecialLibraryClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2074:1-2074:39];)" <<  rel_249_SpecialLibraryClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1248:1-1248:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1420:1-1422:30];AndroidLibraryType(?type) :- \n   isType(?type),\n   \"^android.*\" match ?type.;)",profile);
if (!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_497_isType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt,rel_9_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( regex_wrapper(symTable.resolve((size_t)80),symTable.resolve((size_t)env0[0]))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_9_AndroidLibraryType->insert(tuple,READ_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1420:1-1422:30];AndroidLibraryType(?type) :-     isType(?type),    '^android.*' match ?type.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1420:1-1422:30];AndroidLibraryType(?type) :- \n   isType(?type),\n   \"^android.*\" match ?type.;)" <<  rel_9_AndroidLibraryType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AndroidLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1248:1-1248:37];)" <<  rel_9_AndroidLibraryType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1249:1-1249:48];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1423:1-1425:31];AndroidApplicationClass(?class) :- \n   _ApplicationClass(?class),\n   !AndroidLibraryType(?class).;)",profile);
if (!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_387_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_6_AndroidApplicationClass_op_ctxt,rel_6_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt,rel_9_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_9_AndroidLibraryType->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_6_AndroidApplicationClass->insert(tuple,READ_OP_CONTEXT(rel_6_AndroidApplicationClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1423:1-1425:31];AndroidApplicationClass(?class) :-     _ApplicationClass(?class),    !AndroidLibraryType(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1423:1-1425:31];AndroidApplicationClass(?class) :- \n   _ApplicationClass(?class),\n   !AndroidLibraryType(?class).;)" <<  rel_6_AndroidApplicationClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AndroidApplicationClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1249:1-1249:48];)" <<  rel_6_AndroidApplicationClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1251:1-1251:45];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Listener\" contains ?type.;)",profile);
if (!rel_9_AndroidLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_9_AndroidLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AndroidLibraryListenerType_op_ctxt,rel_8_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt,rel_9_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( (std::string(symTable.resolve((size_t)env0[0])).find(symTable.resolve((size_t)83))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_8_AndroidLibraryListenerType->insert(tuple,READ_OP_CONTEXT(rel_8_AndroidLibraryListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :-     AndroidLibraryType(?type),    isType(?type),    'Listener' contains ?type.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Listener\" contains ?type.;)" <<  rel_8_AndroidLibraryListenerType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Callback\" contains ?type.;)",profile);
if (!rel_9_AndroidLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_9_AndroidLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AndroidLibraryListenerType_op_ctxt,rel_8_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt,rel_9_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( (std::string(symTable.resolve((size_t)env0[0])).find(symTable.resolve((size_t)84))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_8_AndroidLibraryListenerType->insert(tuple,READ_OP_CONTEXT(rel_8_AndroidLibraryListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :-     AndroidLibraryType(?type),    isType(?type),    'Callback' contains ?type.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1432:1-1436:33];AndroidLibraryListenerType(?type) :- \n   AndroidLibraryType(?type),\n   isType(?type),\n   \"Callback\" contains ?type.;)" <<  rel_8_AndroidLibraryListenerType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AndroidLibraryListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1251:1-1251:45];)" <<  rel_8_AndroidLibraryListenerType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1252:1-1252:31];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1437:1-1439:35];ListenerType(?type) :- \n   AndroidLibraryListenerType(?listenerType),\n   SubtypeOf(?type,?listenerType).;)",profile);
if (!rel_8_AndroidLibraryListenerType->empty()&&!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_8_AndroidLibraryListenerType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_8_AndroidLibraryListenerType_op_ctxt,rel_8_AndroidLibraryListenerType->createContext());
CREATE_OP_CONTEXT(rel_120_ListenerType_op_ctxt,rel_120_ListenerType->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_120_ListenerType->insert(tuple,READ_OP_CONTEXT(rel_120_ListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1437:1-1439:35];ListenerType(?type) :-     AndroidLibraryListenerType(?listenerType),    SubtypeOf(?type,?listenerType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1437:1-1439:35];ListenerType(?type) :- \n   AndroidLibraryListenerType(?listenerType),\n   SubtypeOf(?type,?listenerType).;)" <<  rel_120_ListenerType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1252:1-1252:31];)" <<  rel_120_ListenerType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1253:1-1253:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1440:1-1442:24];AndroidApplicationListenerClass(?class) :- \n   AndroidApplicationClass(?class),\n   ListenerType(?class).;)",profile);
if (!rel_6_AndroidApplicationClass->empty()&&!rel_120_ListenerType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_6_AndroidApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_6_AndroidApplicationClass_op_ctxt,rel_6_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_7_AndroidApplicationListenerClass_op_ctxt,rel_7_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_120_ListenerType_op_ctxt,rel_120_ListenerType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_120_ListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_120_ListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_7_AndroidApplicationListenerClass->insert(tuple,READ_OP_CONTEXT(rel_7_AndroidApplicationListenerClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1440:1-1442:24];AndroidApplicationListenerClass(?class) :-     AndroidApplicationClass(?class),    ListenerType(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1440:1-1442:24];AndroidApplicationListenerClass(?class) :- \n   AndroidApplicationClass(?class),\n   ListenerType(?class).;)" <<  rel_7_AndroidApplicationListenerClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AndroidApplicationListenerClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1253:1-1253:56];)" <<  rel_7_AndroidApplicationListenerClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1247:1-1247:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType(\"android.content.Intent\") :- \n   isType(\"android.content.Intent\").;)",profile);
if (!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({77});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(77)});
if (!(rel_101_ImplicitlyInstantiatedLibraryType->insert(tuple,READ_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType('android.content.Intent') :-     isType('android.content.Intent').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType(\"android.content.Intent\") :- \n   isType(\"android.content.Intent\").;)" <<  rel_101_ImplicitlyInstantiatedLibraryType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType(\"android.os.Bundle\") :- \n   isType(\"android.os.Bundle\").;)",profile);
if (!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({78});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(78)});
if (!(rel_101_ImplicitlyInstantiatedLibraryType->insert(tuple,READ_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType('android.os.Bundle') :-     isType('android.os.Bundle').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1412:1-1415:17];ImplicitlyInstantiatedLibraryType(\"android.os.Bundle\") :- \n   isType(\"android.os.Bundle\").;)" <<  rel_101_ImplicitlyInstantiatedLibraryType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ImplicitlyInstantiatedLibraryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1247:1-1247:52];)" <<  rel_101_ImplicitlyInstantiatedLibraryType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1271:1-1271:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];ReifiedLibraryObject(?type,cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_101_ImplicitlyInstantiatedLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_101_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_238_ReifiedLibraryObject_op_ctxt,rel_238_ReifiedLibraryObject->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_238_ReifiedLibraryObject->insert(tuple,READ_OP_CONTEXT(rel_238_ReifiedLibraryObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];ReifiedLibraryObject(?type,cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];ReifiedLibraryObject(?type,cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_238_ReifiedLibraryObject->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReifiedLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1271:1-1271:53];)" <<  rel_238_ReifiedLibraryObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1245:1-1245:49];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];ReifiedComponent(?type,cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_236_ReifiedComponent_op_ctxt,rel_236_ReifiedComponent->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_236_ReifiedComponent->insert(tuple,READ_OP_CONTEXT(rel_236_ReifiedComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];ReifiedComponent(?type,cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];ReifiedComponent(?type,cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_236_ReifiedComponent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReifiedComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1245:1-1245:49];)" <<  rel_236_ReifiedComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2518:1-2518:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2520:1-2523:38];AllConcreteImplementations(?class,?staticType) :- \n   isClassType(?class),\n   SubtypeOf(?class,?staticType),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_313_SubtypeOf->empty()&&!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt,rel_1_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_406_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_313_SubtypeOf->equalRange<0>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_1_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2520:1-2523:38];AllConcreteImplementations(?class,?staticType) :-     isClassType(?class),    SubtypeOf(?class,?staticType),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2520:1-2523:38];AllConcreteImplementations(?class,?staticType) :- \n   isClassType(?class),\n   SubtypeOf(?class,?staticType),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_1_AllConcreteImplementations->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2524:1-2526:38];AllConcreteImplementations(?class,?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt,rel_1_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_406_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_1_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2524:1-2526:38];AllConcreteImplementations(?class,?class) :-     isClassType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2524:1-2526:38];AllConcreteImplementations(?class,?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_1_AllConcreteImplementations->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2527:1-2528:22];AllConcreteImplementations(?type,?type) :- \n   isArrayType(?type).;)",profile);
if (!rel_458_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt,rel_1_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_1_AllConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2527:1-2528:22];AllConcreteImplementations(?type,?type) :-     isArrayType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2527:1-2528:22];AllConcreteImplementations(?type,?type) :- \n   isArrayType(?type).;)" <<  rel_1_AllConcreteImplementations->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AllConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2518:1-2518:63];)" <<  rel_1_AllConcreteImplementations->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2600:1-2600:74];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2602:1-2606:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :- \n   AllConcreteImplementations(_,?staticType).;)",profile);
if (!rel_1_AllConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AllConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt,rel_1_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_358_TypeToConcreteImplementationOrd_op_ctxt,rel_358_TypeToConcreteImplementationOrd->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_1_AllConcreteImplementations->equalRange<1>(key,READ_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_358_TypeToConcreteImplementationOrd->insert(tuple,READ_OP_CONTEXT(rel_358_TypeToConcreteImplementationOrd_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2602:1-2606:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :-     AllConcreteImplementations(_,?staticType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2602:1-2606:6];TypeToConcreteImplementationOrd(?staticType,min ord( ?allClasses6) : AllConcreteImplementations( ?allClasses6,?staticType)) :- \n   AllConcreteImplementations(_,?staticType).;)" <<  rel_358_TypeToConcreteImplementationOrd->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;TypeToConcreteImplementationOrd;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2600:1-2600:74];)" <<  rel_358_TypeToConcreteImplementationOrd->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2601:1-2601:66];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2607:1-2610:27];ConcreteImplementations(?staticType,?class) :- \n   TypeToConcreteImplementationOrd(?staticType, _tmp_0),\n   isType(?class),\n    _tmp_0 = ord(?class).;)",profile);
if (!rel_358_TypeToConcreteImplementationOrd->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_358_TypeToConcreteImplementationOrd->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_48_ConcreteImplementations_op_ctxt,rel_48_ConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_358_TypeToConcreteImplementationOrd_op_ctxt,rel_358_TypeToConcreteImplementationOrd->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_497_isType) {
if( ((env0[1]) == (env1[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_48_ConcreteImplementations->insert(tuple,READ_OP_CONTEXT(rel_48_ConcreteImplementations_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2607:1-2610:27];ConcreteImplementations(?staticType,?class) :-     TypeToConcreteImplementationOrd(?staticType, _tmp_0),    isType(?class),     _tmp_0 = ord(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2607:1-2610:27];ConcreteImplementations(?staticType,?class) :- \n   TypeToConcreteImplementationOrd(?staticType, _tmp_0),\n   isType(?class),\n    _tmp_0 = ord(?class).;)" <<  rel_48_ConcreteImplementations->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ConcreteImplementations;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2601:1-2601:66];)" <<  rel_48_ConcreteImplementations->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2519:1-2519:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2529:1-2530:40];ConcreteType(?type) :- \n   AllConcreteImplementations(?type,_).;)",profile);
if (!rel_1_AllConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_1_AllConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_1_AllConcreteImplementations_op_ctxt,rel_1_AllConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_49_ConcreteType_op_ctxt,rel_49_ConcreteType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_49_ConcreteType->insert(tuple,READ_OP_CONTEXT(rel_49_ConcreteType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ConcreteType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2529:1-2530:40];ConcreteType(?type) :-     AllConcreteImplementations(?type,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ConcreteType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2529:1-2530:40];ConcreteType(?type) :- \n   AllConcreteImplementations(?type,_).;)" <<  rel_49_ConcreteType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ConcreteType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2519:1-2519:37];)" <<  rel_49_ConcreteType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2611:1-2611:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2612:1-2614:30];StaticToActualType(?class,?staticType) :- \n   ConcreteImplementations(?staticType,?class),\n   !ConcreteType(?staticType).;)",profile);
if (!rel_48_ConcreteImplementations->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_48_ConcreteImplementations->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_48_ConcreteImplementations_op_ctxt,rel_48_ConcreteImplementations->createContext());
CREATE_OP_CONTEXT(rel_49_ConcreteType_op_ctxt,rel_49_ConcreteType->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_49_ConcreteType->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_49_ConcreteType_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_257_StaticToActualType->insert(tuple,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2612:1-2614:30];StaticToActualType(?class,?staticType) :-     ConcreteImplementations(?staticType,?class),    !ConcreteType(?staticType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2612:1-2614:30];StaticToActualType(?class,?staticType) :- \n   ConcreteImplementations(?staticType,?class),\n   !ConcreteType(?staticType).;)" <<  rel_257_StaticToActualType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2615:1-2616:23];StaticToActualType(?type,?type) :- \n   ConcreteType(?type).;)",profile);
if (!rel_49_ConcreteType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_49_ConcreteType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_49_ConcreteType_op_ctxt,rel_49_ConcreteType->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_257_StaticToActualType->insert(tuple,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2615:1-2616:23];StaticToActualType(?type,?type) :-     ConcreteType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2615:1-2616:23];StaticToActualType(?type,?type) :- \n   ConcreteType(?type).;)" <<  rel_257_StaticToActualType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StaticToActualType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2611:1-2611:61];)" <<  rel_257_StaticToActualType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ConcreteClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [27:1-27:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ConcreteClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [968:1-970:38];ConcreteClass(?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt,rel_47_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_406_ClassModifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_47_ConcreteClass->insert(tuple,READ_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ConcreteClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [968:1-970:38];ConcreteClass(?class) :-     isClassType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ConcreteClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [968:1-970:38];ConcreteClass(?class) :- \n   isClassType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_47_ConcreteClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ConcreteClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [27:1-27:40];)" <<  rel_47_ConcreteClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [205:1-205:87];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_28_AssignHeapAllocation_Heap_op_ctxt,rel_28_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_28_AssignHeapAllocation_Heap->insert(tuple,READ_OP_CONTEXT(rel_28_AssignHeapAllocation_Heap_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignHeapAllocation_Heap(?instruction,?heap) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_28_AssignHeapAllocation_Heap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignHeapAllocation_Heap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [205:1-205:87];)" <<  rel_28_AssignHeapAllocation_Heap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [151:1-151:67];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_460_isAssignHeapAllocation_Insn_op_ctxt,rel_460_isAssignHeapAllocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_460_isAssignHeapAllocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_460_isAssignHeapAllocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isAssignHeapAllocation_Insn(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_460_isAssignHeapAllocation_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isAssignHeapAllocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [151:1-151:67];)" <<  rel_460_isAssignHeapAllocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [197:1-197:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_From(?instruction,?from) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_24_AssignCast_From_op_ctxt,rel_24_AssignCast_From->createContext());
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_24_AssignCast_From->insert(tuple,READ_OP_CONTEXT(rel_24_AssignCast_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCast_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_From(?instruction,?from) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCast_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_From(?instruction,?from) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_24_AssignCast_From->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignCast_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [197:1-197:56];)" <<  rel_24_AssignCast_From->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [199:1-199:85];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt,rel_23_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_23_AssignCastNumConstant_Id->insert(tuple,READ_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCastNumConstant_Id(?instruction,?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_23_AssignCastNumConstant_Id->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignCastNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [199:1-199:85];)" <<  rel_23_AssignCastNumConstant_Id->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [198:1-198:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt,rel_25_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_25_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignCast_Type(?instruction,?type) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_25_AssignCast_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt,rel_25_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_25_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_25_AssignCast_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt,rel_25_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_25_AssignCast_Type->insert(tuple,READ_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignCast_Type(?instruction,?type) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_25_AssignCast_Type->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignCast_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [198:1-198:57];)" <<  rel_25_AssignCast_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [148:1-148:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isAssignCast_Insn(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt,rel_459_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_459_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isAssignCast_Insn(?instruction) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isAssignCast_Insn(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_459_isAssignCast_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isAssignCast_Insn(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt,rel_459_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_459_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isAssignCast_Insn(?instruction) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isAssignCast_Insn(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_459_isAssignCast_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isAssignCast_Insn(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
CREATE_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt,rel_459_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_459_isAssignCast_Insn->insert(tuple,READ_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isAssignCast_Insn(?instruction) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isAssignCast_Insn(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_459_isAssignCast_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isAssignCast_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [148:1-148:47];)" <<  rel_459_isAssignCast_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignLocal_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [200:1-200:58];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_31_AssignLocal_From_op_ctxt,rel_31_AssignLocal_From->createContext());
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_31_AssignLocal_From->insert(tuple,READ_OP_CONTEXT(rel_31_AssignLocal_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignLocal_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignLocal_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignLocal_From(?instruction,?from) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_31_AssignLocal_From->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignLocal_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [200:1-200:58];)" <<  rel_31_AssignLocal_From->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [144:1-144:49];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_461_isAssignLocal_Insn_op_ctxt,rel_461_isAssignLocal_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_461_isAssignLocal_Insn->insert(tuple,READ_OP_CONTEXT(rel_461_isAssignLocal_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isAssignLocal_Insn(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_461_isAssignLocal_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isAssignLocal_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [144:1-144:49];)" <<  rel_461_isAssignLocal_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [146:1-146:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isAssignNull_Insn(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_396_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_396_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_396_AssignNull_op_ctxt,rel_396_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_462_isAssignNull_Insn_op_ctxt,rel_462_isAssignNull_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_462_isAssignNull_Insn->insert(tuple,READ_OP_CONTEXT(rel_462_isAssignNull_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isAssignNull_Insn(?instruction) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isAssignNull_Insn(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_462_isAssignNull_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isAssignNull_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [146:1-146:47];)" <<  rel_462_isAssignNull_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [196:1-196:77];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_34_AssignNumConstant_Id->insert(tuple,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignNumConstant_Id(?instruction,?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_34_AssignNumConstant_Id->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignNumConstant_Id;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [196:1-196:77];)" <<  rel_34_AssignNumConstant_Id->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2:1-2:36];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isNumConstant(?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_487_isNumConstant->insert(tuple,READ_OP_CONTEXT(rel_487_isNumConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isNumConstant(?const) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isNumConstant(?const) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_487_isNumConstant->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isNumConstant(?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_487_isNumConstant->insert(tuple,READ_OP_CONTEXT(rel_487_isNumConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isNumConstant(?const) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isNumConstant(?const) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_487_isNumConstant->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isNumConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2:1-2:36];)" <<  rel_487_isNumConstant->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [195:1-195:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];AssignInstruction_To(?instruction,?to) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];AssignInstruction_To(?instruction,?to) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_389_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_389_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_389_AssignBinop_op_ctxt,rel_389_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];AssignInstruction_To(?instruction,?to) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_400_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_400_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_400_AssignUnop_op_ctxt,rel_400_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];AssignInstruction_To(?instruction,?to) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];AssignInstruction_To(?instruction,?to) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];AssignInstruction_To(?instruction,?to) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_396_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_396_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_396_AssignNull_op_ctxt,rel_396_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];AssignInstruction_To(?instruction,?to) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_394_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_394_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_394_AssignInstanceOf_op_ctxt,rel_394_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_29_AssignInstruction_To->insert(tuple,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];AssignInstruction_To(?instruction,?to) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_29_AssignInstruction_To->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignInstruction_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [195:1-195:61];)" <<  rel_29_AssignInstruction_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [206:1-206:62];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_439_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_241_ReturnNonvoid_Var_op_ctxt,rel_241_ReturnNonvoid_Var->createContext());
CREATE_OP_CONTEXT(rel_439_Return_op_ctxt,rel_439_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_241_ReturnNonvoid_Var->insert(tuple,READ_OP_CONTEXT(rel_241_ReturnNonvoid_Var_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];ReturnNonvoid_Var(?instruction,?var) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_241_ReturnNonvoid_Var->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReturnNonvoid_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [206:1-206:62];)" <<  rel_241_ReturnNonvoid_Var->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [154:1-154:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_439_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_439_Return_op_ctxt,rel_439_Return->createContext());
CREATE_OP_CONTEXT(rel_490_isReturnNonvoid_Insn_op_ctxt,rel_490_isReturnNonvoid_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_490_isReturnNonvoid_Insn->insert(tuple,READ_OP_CONTEXT(rel_490_isReturnNonvoid_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isReturnNonvoid_Insn(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_490_isReturnNonvoid_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isReturnNonvoid_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [154:1-154:53];)" <<  rel_490_isReturnNonvoid_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [191:1-191:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_122_LoadArrayIndex_Base_op_ctxt,rel_122_LoadArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_122_LoadArrayIndex_Base->insert(tuple,READ_OP_CONTEXT(rel_122_LoadArrayIndex_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_Base(?instruction,?base) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_122_LoadArrayIndex_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [191:1-191:63];)" <<  rel_122_LoadArrayIndex_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [192:1-192:60];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_123_LoadArrayIndex_To_op_ctxt,rel_123_LoadArrayIndex_To->createContext());
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_123_LoadArrayIndex_To->insert(tuple,READ_OP_CONTEXT(rel_123_LoadArrayIndex_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];LoadArrayIndex_To(?instruction,?to) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_123_LoadArrayIndex_To->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadArrayIndex_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [192:1-192:60];)" <<  rel_123_LoadArrayIndex_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [123:1-123:55];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_482_isLoadArrayIndex_Insn_op_ctxt,rel_482_isLoadArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_482_isLoadArrayIndex_Insn->insert(tuple,READ_OP_CONTEXT(rel_482_isLoadArrayIndex_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isLoadArrayIndex_Insn(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_482_isLoadArrayIndex_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isLoadArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [123:1-123:55];)" <<  rel_482_isLoadArrayIndex_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [183:1-183:69];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_131_LoadInstanceField_Base_op_ctxt,rel_131_LoadInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_131_LoadInstanceField_Base->insert(tuple,READ_OP_CONTEXT(rel_131_LoadInstanceField_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_Base(?instruction,?base) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_131_LoadInstanceField_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [183:1-183:69];)" <<  rel_131_LoadInstanceField_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [184:1-184:67];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_132_LoadInstanceField_To_op_ctxt,rel_132_LoadInstanceField_To->createContext());
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_132_LoadInstanceField_To->insert(tuple,READ_OP_CONTEXT(rel_132_LoadInstanceField_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];LoadInstanceField_To(?instruction,?to) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_132_LoadInstanceField_To->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadInstanceField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [184:1-184:67];)" <<  rel_132_LoadInstanceField_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [118:1-118:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_483_isLoadInstanceField_Insn_op_ctxt,rel_483_isLoadInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_483_isLoadInstanceField_Insn->insert(tuple,READ_OP_CONTEXT(rel_483_isLoadInstanceField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isLoadInstanceField_Insn(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_483_isLoadInstanceField_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isLoadInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [118:1-118:61];)" <<  rel_483_isLoadInstanceField_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadStaticField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [187:1-187:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_134_LoadStaticField_To_op_ctxt,rel_134_LoadStaticField_To->createContext());
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_134_LoadStaticField_To->insert(tuple,READ_OP_CONTEXT(rel_134_LoadStaticField_To_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadStaticField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadStaticField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];LoadStaticField_To(?instruction,?to) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_134_LoadStaticField_To->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadStaticField_To;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [187:1-187:63];)" <<  rel_134_LoadStaticField_To->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [120:1-120:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_484_isLoadStaticField_Insn_op_ctxt,rel_484_isLoadStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_484_isLoadStaticField_Insn->insert(tuple,READ_OP_CONTEXT(rel_484_isLoadStaticField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isLoadStaticField_Insn(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_484_isLoadStaticField_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isLoadStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [120:1-120:57];)" <<  rel_484_isLoadStaticField_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [163:1-163:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_491_isStaticMethodInvocation_Insn_op_ctxt,rel_491_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_491_isStaticMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_491_isStaticMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isStaticMethodInvocation_Insn(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_491_isStaticMethodInvocation_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isStaticMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [163:1-163:71];)" <<  rel_491_isStaticMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [194:1-194:65];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_295_StoreArrayIndex_Base_op_ctxt,rel_295_StoreArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_295_StoreArrayIndex_Base->insert(tuple,READ_OP_CONTEXT(rel_295_StoreArrayIndex_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_Base(?instruction,?base) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_295_StoreArrayIndex_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreArrayIndex_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [194:1-194:65];)" <<  rel_295_StoreArrayIndex_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [193:1-193:65];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_296_StoreArrayIndex_From_op_ctxt,rel_296_StoreArrayIndex_From->createContext());
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_296_StoreArrayIndex_From->insert(tuple,READ_OP_CONTEXT(rel_296_StoreArrayIndex_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];StoreArrayIndex_From(?instruction,?from) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_296_StoreArrayIndex_From->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreArrayIndex_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [193:1-193:65];)" <<  rel_296_StoreArrayIndex_From->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [124:1-124:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_492_isStoreArrayIndex_Insn_op_ctxt,rel_492_isStoreArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_492_isStoreArrayIndex_Insn->insert(tuple,READ_OP_CONTEXT(rel_492_isStoreArrayIndex_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isStoreArrayIndex_Insn(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_492_isStoreArrayIndex_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isStoreArrayIndex_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [124:1-124:57];)" <<  rel_492_isStoreArrayIndex_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [186:1-186:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_304_StoreInstanceField_Base_op_ctxt,rel_304_StoreInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_304_StoreInstanceField_Base->insert(tuple,READ_OP_CONTEXT(rel_304_StoreInstanceField_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_Base(?instruction,?base) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_304_StoreInstanceField_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreInstanceField_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [186:1-186:71];)" <<  rel_304_StoreInstanceField_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [185:1-185:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_305_StoreInstanceField_From_op_ctxt,rel_305_StoreInstanceField_From->createContext());
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_305_StoreInstanceField_From->insert(tuple,READ_OP_CONTEXT(rel_305_StoreInstanceField_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];StoreInstanceField_From(?instruction,?from) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_305_StoreInstanceField_From->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreInstanceField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [185:1-185:71];)" <<  rel_305_StoreInstanceField_From->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [119:1-119:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_493_isStoreInstanceField_Insn_op_ctxt,rel_493_isStoreInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_493_isStoreInstanceField_Insn->insert(tuple,READ_OP_CONTEXT(rel_493_isStoreInstanceField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isStoreInstanceField_Insn(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_493_isStoreInstanceField_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isStoreInstanceField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [119:1-119:63];)" <<  rel_493_isStoreInstanceField_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [182:1-182:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_72_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_72_FieldInstruction_Signature->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_72_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_72_FieldInstruction_Signature->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_72_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];FieldInstruction_Signature(?instruction,?signature) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_72_FieldInstruction_Signature->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_72_FieldInstruction_Signature->insert(tuple,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];FieldInstruction_Signature(?instruction,?signature) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_72_FieldInstruction_Signature->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;FieldInstruction_Signature;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [182:1-182:70];)" <<  rel_72_FieldInstruction_Signature->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreStaticField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [188:1-188:67];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_307_StoreStaticField_From_op_ctxt,rel_307_StoreStaticField_From->createContext());
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_307_StoreStaticField_From->insert(tuple,READ_OP_CONTEXT(rel_307_StoreStaticField_From_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];StoreStaticField_From(?instruction,?from) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_307_StoreStaticField_From->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreStaticField_From;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [188:1-188:67];)" <<  rel_307_StoreStaticField_From->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [121:1-121:59];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_494_isStoreStaticField_Insn_op_ctxt,rel_494_isStoreStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_494_isStoreStaticField_Insn->insert(tuple,READ_OP_CONTEXT(rel_494_isStoreStaticField_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isStoreStaticField_Insn(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_494_isStoreStaticField_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isStoreStaticField_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [121:1-121:59];)" <<  rel_494_isStoreStaticField_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Throw_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [174:1-174:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw_Var(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_355_Throw_Var_op_ctxt,rel_355_Throw_Var->createContext());
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_355_Throw_Var->insert(tuple,READ_OP_CONTEXT(rel_355_Throw_Var_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Throw_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw_Var(?instruction,?var) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Throw_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw_Var(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_355_Throw_Var->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Throw_Var;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [174:1-174:44];)" <<  rel_355_Throw_Var->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [107:1-107:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isThrow_Insn(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
CREATE_OP_CONTEXT(rel_496_isThrow_Insn_op_ctxt,rel_496_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_496_isThrow_Insn->insert(tuple,READ_OP_CONTEXT(rel_496_isThrow_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isThrow_Insn(?instruction) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isThrow_Insn(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_496_isThrow_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isThrow_Insn(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_453_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_453_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_453_ThrowNull_op_ctxt,rel_453_ThrowNull->createContext());
CREATE_OP_CONTEXT(rel_496_isThrow_Insn_op_ctxt,rel_496_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_496_isThrow_Insn->insert(tuple,READ_OP_CONTEXT(rel_496_isThrow_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isThrow_Insn(?instruction) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isThrow_Insn(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_496_isThrow_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isThrow_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [107:1-107:37];)" <<  rel_496_isThrow_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [246:1-246:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_351_Throw_op_ctxt,rel_351_Throw->createContext());
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_351_Throw->insert(tuple,READ_OP_CONTEXT(rel_351_Throw_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw(?instruction,?var) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Throw(?instruction,?var) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_351_Throw->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [881:1-883:26];Throw(?insn,?var) :- \n   isThrow_Insn(?insn),\n   Throw_Var(?insn,?var).;)",profile);
if (!rel_355_Throw_Var->empty()&&!rel_496_isThrow_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_496_isThrow_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_351_Throw_op_ctxt,rel_351_Throw->createContext());
CREATE_OP_CONTEXT(rel_355_Throw_Var_op_ctxt,rel_355_Throw_Var->createContext());
CREATE_OP_CONTEXT(rel_496_isThrow_Insn_op_ctxt,rel_496_isThrow_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_355_Throw_Var->equalRange<0>(key,READ_OP_CONTEXT(rel_355_Throw_Var_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_351_Throw->insert(tuple,READ_OP_CONTEXT(rel_351_Throw_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [881:1-883:26];Throw(?insn,?var) :-     isThrow_Insn(?insn),    Throw_Var(?insn,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [881:1-883:26];Throw(?insn,?var) :- \n   isThrow_Insn(?insn),\n   Throw_Var(?insn,?var).;)" <<  rel_351_Throw->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Throw;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [246:1-246:40];)" <<  rel_351_Throw->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [51:1-51:73];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_431_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_431_Method_op_ctxt,rel_431_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_153_Method_DeclaringType->insert(tuple,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Method_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Method_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_DeclaringType(?method,?declaringType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_153_Method_DeclaringType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Method_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [51:1-51:73];)" <<  rel_153_Method_DeclaringType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [209:1-209:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [962:1-964:28];ApplicationMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_153_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_387_ApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_11_ApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [962:1-964:28];ApplicationMethod(?method) :-     Method_DeclaringType(?method,?class),    _ApplicationClass(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [962:1-964:28];ApplicationMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class).;)" <<  rel_11_ApplicationMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [209:1-209:40];)" <<  rel_11_ApplicationMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2070:1-2070:43];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2071:1-2073:31];SpecialLibraryMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   SpecialLibraryClass(?class).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_249_SpecialLibraryClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_153_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt,rel_249_SpecialLibraryClass->createContext());
CREATE_OP_CONTEXT(rel_250_SpecialLibraryMethod_op_ctxt,rel_250_SpecialLibraryMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_249_SpecialLibraryClass->equalRange<0>(key,READ_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_250_SpecialLibraryMethod->insert(tuple,READ_OP_CONTEXT(rel_250_SpecialLibraryMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2071:1-2073:31];SpecialLibraryMethod(?method) :-     Method_DeclaringType(?method,?class),    SpecialLibraryClass(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2071:1-2073:31];SpecialLibraryMethod(?method) :- \n   Method_DeclaringType(?method,?class),\n   SpecialLibraryClass(?class).;)" <<  rel_250_SpecialLibraryMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SpecialLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2070:1-2070:43];)" <<  rel_250_SpecialLibraryMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [54:1-54:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_431_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_431_Method_op_ctxt,rel_431_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_154_Method_Descriptor->insert(tuple,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Method_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Method_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_Descriptor(?method,?descriptor) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_154_Method_Descriptor->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Method_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [54:1-54:70];)" <<  rel_154_Method_Descriptor->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [53:1-53:60];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_431_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_431_Method_op_ctxt,rel_431_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_156_Method_SimpleName->insert(tuple,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Method_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Method_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_SimpleName(?method,?simplename) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_156_Method_SimpleName->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Method_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [53:1-53:60];)" <<  rel_156_Method_SimpleName->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Method_ReturnType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [52:1-52:58];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Method_ReturnType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_431_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt,rel_155_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_431_Method_op_ctxt,rel_431_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_155_Method_ReturnType->insert(tuple,READ_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Method_ReturnType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Method_ReturnType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];Method_ReturnType(?method,?returnType) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_155_Method_ReturnType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Method_ReturnType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [52:1-52:58];)" <<  rel_155_Method_ReturnType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodImplemented;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1079:1-1079:102];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodImplemented;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :- \n   Method_SimpleName(?method,?simplename),\n   Method_Descriptor(?method,?descriptor),\n   Method_DeclaringType(?method,?type),\n   !_Method_Modifier(\"abstract\",?method).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_156_Method_SimpleName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt,rel_148_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_154_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[1]),(RamDomain)(env2[1]),(RamDomain)(env0[0])});
if (!(rel_148_MethodImplemented->insert(tuple,READ_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodImplemented;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :-     Method_SimpleName(?method,?simplename),    Method_Descriptor(?method,?descriptor),    Method_DeclaringType(?method,?type),    !_Method_Modifier('abstract',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodImplemented;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1110:1-1114:44];MethodImplemented(?simplename,?descriptor,?type,?method) :- \n   Method_SimpleName(?method,?simplename),\n   Method_Descriptor(?method,?descriptor),\n   Method_DeclaringType(?method,?type),\n   !_Method_Modifier(\"abstract\",?method).;)" <<  rel_148_MethodImplemented->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodImplemented;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1079:1-1079:102];)" <<  rel_148_MethodImplemented->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1078:1-1078:97];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   MethodImplemented(?simplename,?descriptor,?type,?method).;)",profile);
if (!rel_148_MethodImplemented->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_148_MethodImplemented->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt,rel_148_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_150_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :-     MethodImplemented(?simplename,?descriptor,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1099:1-1100:65];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   MethodImplemented(?simplename,?descriptor,?type,?method).;)" <<  rel_150_MethodLookup->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :- \n   isArrayType(?arraytype),\n   isType(\"java.lang.Object\"),\n   MethodImplemented(?simplename,?descriptor,\"java.lang.Object\",?method).;)",profile);
if (!rel_148_MethodImplemented->empty()&&!rel_458_isArrayType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_458_isArrayType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt,rel_148_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({0,0,18,0});
auto range = rel_148_MethodImplemented->equalRange<2>(key,READ_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env2[3])});
if (!(rel_150_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :-     isArrayType(?arraytype),    isType('java.lang.Object'),    MethodImplemented(?simplename,?descriptor,'java.lang.Object',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1105:1-1109:38];MethodLookup(?simplename,?descriptor,?arraytype,?method) :- \n   isArrayType(?arraytype),\n   isType(\"java.lang.Object\"),\n   MethodImplemented(?simplename,?descriptor,\"java.lang.Object\",?method).;)" <<  rel_150_MethodLookup->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1078:1-1078:97];)" <<  rel_150_MethodLookup->size() << "\n";
}rel_151_delta_MethodLookup->insertAll(*rel_150_MethodLookup);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1078:1-1078:97];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;MethodLookup;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1101:1-1104:61];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   _DirectSuperclass(?type,?supertype),\n   MethodLookup(?simplename,?descriptor,?supertype,?method),\n   !MethodImplemented(?simplename,?descriptor,?type,_).;)",profile);
if (!rel_151_delta_MethodLookup->empty()&&!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_411_DirectSuperclass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_151_delta_MethodLookup_op_ctxt,rel_151_delta_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_152_new_MethodLookup_op_ctxt,rel_152_new_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt,rel_148_MethodImplemented->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[1],0});
auto range = rel_151_delta_MethodLookup->equalRange<2>(key,READ_OP_CONTEXT(rel_151_delta_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((rel_148_MethodImplemented->equalRange<0,1,2>(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],0}),READ_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt)).empty()) && (!rel_150_MethodLookup->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env1[3]}),READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env1[3])});
if (!(rel_152_new_MethodLookup->insert(tuple,READ_OP_CONTEXT(rel_152_new_MethodLookup_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1101:1-1104:61];@new_MethodLookup(?simplename,?descriptor,?type,?method) :-     _DirectSuperclass(?type,?supertype),    @delta_MethodLookup(?simplename,?descriptor,?supertype,?method),    !MethodImplemented(?simplename,?descriptor,?type,_),    !MethodLookup(?simplename,?descriptor,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;MethodLookup;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1101:1-1104:61];MethodLookup(?simplename,?descriptor,?type,?method) :- \n   _DirectSuperclass(?type,?supertype),\n   MethodLookup(?simplename,?descriptor,?supertype,?method),\n   !MethodImplemented(?simplename,?descriptor,?type,_).;)" <<  rel_152_new_MethodLookup->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1078:1-1078:97];)" <<  rel_152_new_MethodLookup->size() << "\n";
}if(rel_152_new_MethodLookup->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;MethodLookup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1078:1-1078:97];)",profile);
rel_150_MethodLookup->insertAll(*rel_152_new_MethodLookup);
{
auto rel_0 = rel_151_delta_MethodLookup;
rel_151_delta_MethodLookup = rel_152_new_MethodLookup;
rel_152_new_MethodLookup = rel_0;
}
rel_152_new_MethodLookup->purge();
}
}
rel_151_delta_MethodLookup->purge();
rel_152_new_MethodLookup->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridesFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1077:1-1077:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridesFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1096:1-1098:54];OverridesFinalize(?class) :- \n   MethodLookup(\"finalize\",\"void()\",?class,?method),\n   ?method != \"<java.lang.Object: void finalize()>\".;)",profile);
if (!rel_150_MethodLookup->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_194_OverridesFinalize_op_ctxt,rel_194_OverridesFinalize->createContext());
const Tuple<RamDomain,4> key({58,59,0,0});
auto range = rel_150_MethodLookup->equalRange<0,1>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( ((env0[3]) != (60))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_194_OverridesFinalize->insert(tuple,READ_OP_CONTEXT(rel_194_OverridesFinalize_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OverridesFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1096:1-1098:54];OverridesFinalize(?class) :-     MethodLookup('finalize','void()',?class,?method),    ?method != '<java.lang.Object: void finalize()>'.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OverridesFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1096:1-1098:54];OverridesFinalize(?class) :- \n   MethodLookup(\"finalize\",\"void()\",?class,?method),\n   ?method != \"<java.lang.Object: void finalize()>\".;)" <<  rel_194_OverridesFinalize->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OverridesFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1077:1-1077:37];)" <<  rel_194_OverridesFinalize->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1257:1-1257:59];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1460:1-1467:59];AppMethodOverridesAndroidLibraryMethod(?meth) :- \n   Method_DeclaringType(?meth,?type),\n   AndroidApplicationClass(?type),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   SupertypeOf(?libraryType,?type),\n   AndroidLibraryType(?libraryType),\n   MethodLookup(?simplename,?descriptor,?libraryType,_).;)",profile);
if (!rel_6_AndroidApplicationClass->empty()&&!rel_9_AndroidLibraryType->empty()&&!rel_150_MethodLookup->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_319_SupertypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_153_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_6_AndroidApplicationClass_op_ctxt,rel_6_AndroidApplicationClass->createContext());
CREATE_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt,rel_9_AndroidLibraryType->createContext());
CREATE_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_10_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_6_AndroidApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_6_AndroidApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_154_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_319_SupertypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,1> key({env4[0]});
auto range = rel_9_AndroidLibraryType->equalRange<0>(key,READ_OP_CONTEXT(rel_9_AndroidLibraryType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({env3[1],env2[1],env4[0],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_10_AppMethodOverridesAndroidLibraryMethod->insert(tuple,READ_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1460:1-1467:59];AppMethodOverridesAndroidLibraryMethod(?meth) :-     Method_DeclaringType(?meth,?type),    AndroidApplicationClass(?type),    Method_Descriptor(?meth,?descriptor),    Method_SimpleName(?meth,?simplename),    SupertypeOf(?libraryType,?type),    AndroidLibraryType(?libraryType),    MethodLookup(?simplename,?descriptor,?libraryType,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1460:1-1467:59];AppMethodOverridesAndroidLibraryMethod(?meth) :- \n   Method_DeclaringType(?meth,?type),\n   AndroidApplicationClass(?type),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   SupertypeOf(?libraryType,?type),\n   AndroidLibraryType(?libraryType),\n   MethodLookup(?simplename,?descriptor,?libraryType,_).;)" <<  rel_10_AppMethodOverridesAndroidLibraryMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AppMethodOverridesAndroidLibraryMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1257:1-1257:59];)" <<  rel_10_AppMethodOverridesAndroidLibraryMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1254:1-1254:64];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1443:1-1445:39];MethodDeclaredOrInherited(?meth,?class) :- \n   isClassType(?class),\n   Method_DeclaringType(?meth,?class).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_464_isClassType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_153_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_145_MethodDeclaredOrInherited->insert(tuple,READ_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1443:1-1445:39];MethodDeclaredOrInherited(?meth,?class) :-     isClassType(?class),    Method_DeclaringType(?meth,?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1443:1-1445:39];MethodDeclaredOrInherited(?meth,?class) :- \n   isClassType(?class),\n   Method_DeclaringType(?meth,?class).;)" <<  rel_145_MethodDeclaredOrInherited->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1254:1-1254:64];)" <<  rel_145_MethodDeclaredOrInherited->size() << "\n";
}rel_146_delta_MethodDeclaredOrInherited->insertAll(*rel_145_MethodDeclaredOrInherited);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1254:1-1254:64];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;MethodDeclaredOrInherited;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1446:1-1451:57];MethodDeclaredOrInherited(?meth,?class) :- \n   MethodDeclaredOrInherited(?meth,?superClass),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   _DirectSuperclass(?class,?superClass),\n   MethodLookup(?simplename,?descriptor,?class,?meth).;)",profile);
if (!rel_146_delta_MethodDeclaredOrInherited->empty()&&!rel_150_MethodLookup->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_146_delta_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_146_delta_MethodDeclaredOrInherited_op_ctxt,rel_146_delta_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_147_new_MethodDeclaredOrInherited_op_ctxt,rel_147_new_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_154_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_411_DirectSuperclass->equalRange<1>(key,READ_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_145_MethodDeclaredOrInherited->contains(Tuple<RamDomain,2>({env0[0],env3[0]}),READ_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt))) {
const Tuple<RamDomain,4> key({env2[1],env1[1],env3[0],env0[0]});
auto range = rel_150_MethodLookup->equalRange<0,1,2,3>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env3[0])});
if (!(rel_147_new_MethodDeclaredOrInherited->insert(tuple,READ_OP_CONTEXT(rel_147_new_MethodDeclaredOrInherited_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1446:1-1451:57];@new_MethodDeclaredOrInherited(?meth,?class) :-     @delta_MethodDeclaredOrInherited(?meth,?superClass),    Method_Descriptor(?meth,?descriptor),    Method_SimpleName(?meth,?simplename),    _DirectSuperclass(?class,?superClass),    MethodLookup(?simplename,?descriptor,?class,?meth),    !MethodDeclaredOrInherited(?meth,?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;MethodDeclaredOrInherited;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1446:1-1451:57];MethodDeclaredOrInherited(?meth,?class) :- \n   MethodDeclaredOrInherited(?meth,?superClass),\n   Method_Descriptor(?meth,?descriptor),\n   Method_SimpleName(?meth,?simplename),\n   _DirectSuperclass(?class,?superClass),\n   MethodLookup(?simplename,?descriptor,?class,?meth).;)" <<  rel_147_new_MethodDeclaredOrInherited->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1254:1-1254:64];)" <<  rel_147_new_MethodDeclaredOrInherited->size() << "\n";
}if(rel_147_new_MethodDeclaredOrInherited->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;MethodDeclaredOrInherited;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1254:1-1254:64];)",profile);
rel_145_MethodDeclaredOrInherited->insertAll(*rel_147_new_MethodDeclaredOrInherited);
{
auto rel_0 = rel_146_delta_MethodDeclaredOrInherited;
rel_146_delta_MethodDeclaredOrInherited = rel_147_new_MethodDeclaredOrInherited;
rel_147_new_MethodDeclaredOrInherited = rel_0;
}
rel_147_new_MethodDeclaredOrInherited->purge();
}
}
rel_146_delta_MethodDeclaredOrInherited->purge();
rel_147_new_MethodDeclaredOrInherited->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1256:1-1256:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1456:1-1459:39];ProtectedMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"protected\",?meth).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_203_ProtectedMethodOfComponent_op_ctxt,rel_203_ProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_145_MethodDeclaredOrInherited->equalRange<1>(key,READ_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({61,env1[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_203_ProtectedMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_203_ProtectedMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1456:1-1459:39];ProtectedMethodOfComponent(?meth) :-     AndroidAppComponent(?type),    MethodDeclaredOrInherited(?meth,?type),    _Method_Modifier('protected',?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1456:1-1459:39];ProtectedMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"protected\",?meth).;)" <<  rel_203_ProtectedMethodOfComponent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1256:1-1256:47];)" <<  rel_203_ProtectedMethodOfComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1258:1-1258:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1468:1-1470:49];OverridingProtectedMethodOfComponent(?meth) :- \n   ProtectedMethodOfComponent(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_10_AppMethodOverridesAndroidLibraryMethod->empty()&&!rel_203_ProtectedMethodOfComponent->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_203_ProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_10_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_195_OverridingProtectedMethodOfComponent_op_ctxt,rel_195_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_203_ProtectedMethodOfComponent_op_ctxt,rel_203_ProtectedMethodOfComponent->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_10_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_195_OverridingProtectedMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_195_OverridingProtectedMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1468:1-1470:49];OverridingProtectedMethodOfComponent(?meth) :-     ProtectedMethodOfComponent(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1468:1-1470:49];OverridingProtectedMethodOfComponent(?meth) :- \n   ProtectedMethodOfComponent(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_195_OverridingProtectedMethodOfComponent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OverridingProtectedMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1258:1-1258:57];)" <<  rel_195_OverridingProtectedMethodOfComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1255:1-1255:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1452:1-1455:36];PublicMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"public\",?meth).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_208_PublicMethodOfComponent_op_ctxt,rel_208_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_145_MethodDeclaredOrInherited->equalRange<1>(key,READ_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({4,env1[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_208_PublicMethodOfComponent->insert(tuple,READ_OP_CONTEXT(rel_208_PublicMethodOfComponent_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1452:1-1455:36];PublicMethodOfComponent(?meth) :-     AndroidAppComponent(?type),    MethodDeclaredOrInherited(?meth,?type),    _Method_Modifier('public',?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1452:1-1455:36];PublicMethodOfComponent(?meth) :- \n   AndroidAppComponent(?type),\n   MethodDeclaredOrInherited(?meth,?type),\n   _Method_Modifier(\"public\",?meth).;)" <<  rel_208_PublicMethodOfComponent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;PublicMethodOfComponent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1255:1-1255:44];)" <<  rel_208_PublicMethodOfComponent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassInitializer;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1277:1-1277:51];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassInitializer;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1583:1-1584:60];ClassInitializer(?type,?method) :- \n   MethodImplemented(\"<clinit>\",\"void()\",?type,?method).;)",profile);
if (!rel_148_MethodImplemented->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt,rel_40_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt,rel_148_MethodImplemented->createContext());
const Tuple<RamDomain,4> key({89,59,0,0});
auto range = rel_148_MethodImplemented->equalRange<0,1>(key,READ_OP_CONTEXT(rel_148_MethodImplemented_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_40_ClassInitializer->insert(tuple,READ_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ClassInitializer;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1583:1-1584:60];ClassInitializer(?type,?method) :-     MethodImplemented('<clinit>','void()',?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ClassInitializer;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1583:1-1584:60];ClassInitializer(?type,?method) :- \n   MethodImplemented(\"<clinit>\",\"void()\",?type,?method).;)" <<  rel_40_ClassInitializer->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ClassInitializer;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1277:1-1277:51];)" <<  rel_40_ClassInitializer->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2486:1-2486:55];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];ClassHasPossibleEntryPoint(?class) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_153_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_ClassHasPossibleEntryPoint_op_ctxt,rel_39_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((!rel_406_ClassModifier->contains(Tuple<RamDomain,2>({5,env0[1]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) && (!rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[0]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_39_ClassHasPossibleEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_39_ClassHasPossibleEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];ClassHasPossibleEntryPoint(?class) :-     Method_DeclaringType(?method,?class),    _Method_Modifier('public',?method),    !_ClassModifier('private',?class),    !_Method_Modifier('static',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];ClassHasPossibleEntryPoint(?class) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)" <<  rel_39_ClassHasPossibleEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ClassHasPossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2486:1-2486:55];)" <<  rel_39_ClassHasPossibleEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PrefixAbove;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2493:1-2493:64];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;PrefixAbove;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2495:1-2497:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :- \n   ClassHasPossibleEntryPoint(?classAbove),\n   LastDot(?classAbove,?lastDotPos).;)",profile);
if (!rel_39_ClassHasPossibleEntryPoint->empty()&&!rel_115_LastDot->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_ClassHasPossibleEntryPoint_op_ctxt,rel_39_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_115_LastDot_op_ctxt,rel_115_LastDot->createContext());
CREATE_OP_CONTEXT(rel_201_PrefixAbove_op_ctxt,rel_201_PrefixAbove->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_115_LastDot->equalRange<0>(key,READ_OP_CONTEXT(rel_115_LastDot_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[0]),(0),((env1[1]) + (1))).c_str()))),(RamDomain)((env1[1]) + (1))});
if (!(rel_201_PrefixAbove->insert(tuple,READ_OP_CONTEXT(rel_201_PrefixAbove_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;PrefixAbove;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2495:1-2497:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :-     ClassHasPossibleEntryPoint(?classAbove),    LastDot(?classAbove,?lastDotPos).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;PrefixAbove;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2495:1-2497:37];PrefixAbove(?classAbove,substr(?classAbove,0,(?lastDotPos+1)),(?lastDotPos+1)) :- \n   ClassHasPossibleEntryPoint(?classAbove),\n   LastDot(?classAbove,?lastDotPos).;)" <<  rel_201_PrefixAbove->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;PrefixAbove;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2493:1-2493:64];)" <<  rel_201_PrefixAbove->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PrefixBelow;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2494:1-2494:51];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;PrefixBelow;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2498:1-2500:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :- \n   ClassHasPossibleEntryPoint(?classBelow),\n   LastDot(?classBelow,?lastDotPos).;)",profile);
if (!rel_39_ClassHasPossibleEntryPoint->empty()&&!rel_115_LastDot->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_ClassHasPossibleEntryPoint_op_ctxt,rel_39_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_115_LastDot_op_ctxt,rel_115_LastDot->createContext());
CREATE_OP_CONTEXT(rel_202_PrefixBelow_op_ctxt,rel_202_PrefixBelow->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_115_LastDot->equalRange<0>(key,READ_OP_CONTEXT(rel_115_LastDot_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env0[0]),(0),(env1[1])).c_str())))});
if (!(rel_202_PrefixBelow->insert(tuple,READ_OP_CONTEXT(rel_202_PrefixBelow_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;PrefixBelow;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2498:1-2500:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :-     ClassHasPossibleEntryPoint(?classBelow),    LastDot(?classBelow,?lastDotPos).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;PrefixBelow;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2498:1-2500:37];PrefixBelow(?classBelow,substr(?classBelow,0,?lastDotPos)) :- \n   ClassHasPossibleEntryPoint(?classBelow),\n   LastDot(?classBelow,?lastDotPos).;)" <<  rel_202_PrefixBelow->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;PrefixBelow;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2494:1-2494:51];)" <<  rel_202_PrefixBelow->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2501:1-2501:95];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2502:1-2505:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :- \n   PrefixAbove(?classAbove, _tmp_0,?prefixLen),\n   PrefixBelow(?classBelow,?prefixBelow),\n    _tmp_0 = substr(?prefixBelow,0,?prefixLen).;)",profile);
if (!rel_201_PrefixAbove->empty()&&!rel_202_PrefixBelow->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_201_PrefixAbove->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_41_ClassIsAboveOtherInNamingHierarchy_op_ctxt,rel_41_ClassIsAboveOtherInNamingHierarchy->createContext());
CREATE_OP_CONTEXT(rel_201_PrefixAbove_op_ctxt,rel_201_PrefixAbove->createContext());
CREATE_OP_CONTEXT(rel_202_PrefixBelow_op_ctxt,rel_202_PrefixBelow->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_202_PrefixBelow) {
if( ((env0[1]) == ((RamDomain)symTable.lookup((substr_wrapper(symTable.resolve((size_t)env1[1]),(0),(env0[2])).c_str()))))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_41_ClassIsAboveOtherInNamingHierarchy->insert(tuple,READ_OP_CONTEXT(rel_41_ClassIsAboveOtherInNamingHierarchy_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2502:1-2505:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :-     PrefixAbove(?classAbove, _tmp_0,?prefixLen),    PrefixBelow(?classBelow,?prefixBelow),     _tmp_0 = substr(?prefixBelow,0,?prefixLen).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2502:1-2505:54];ClassIsAboveOtherInNamingHierarchy(?classAbove,?classBelow) :- \n   PrefixAbove(?classAbove, _tmp_0,?prefixLen),\n   PrefixBelow(?classBelow,?prefixBelow),\n    _tmp_0 = substr(?prefixBelow,0,?prefixLen).;)" <<  rel_41_ClassIsAboveOtherInNamingHierarchy->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ClassIsAboveOtherInNamingHierarchy;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2501:1-2501:95];)" <<  rel_41_ClassIsAboveOtherInNamingHierarchy->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2506:1-2506:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2508:1-2510:50];ClassWithTopLevelEntryPoint(?class) :- \n   ClassHasPossibleEntryPoint(?class),\n   !ClassIsAboveOtherInNamingHierarchy(_,?class).;)",profile);
if (!rel_39_ClassHasPossibleEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_39_ClassHasPossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_39_ClassHasPossibleEntryPoint_op_ctxt,rel_39_ClassHasPossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_41_ClassIsAboveOtherInNamingHierarchy_op_ctxt,rel_41_ClassIsAboveOtherInNamingHierarchy->createContext());
CREATE_OP_CONTEXT(rel_45_ClassWithTopLevelEntryPoint_op_ctxt,rel_45_ClassWithTopLevelEntryPoint->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_41_ClassIsAboveOtherInNamingHierarchy->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_41_ClassIsAboveOtherInNamingHierarchy_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_45_ClassWithTopLevelEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_45_ClassWithTopLevelEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2508:1-2510:50];ClassWithTopLevelEntryPoint(?class) :-     ClassHasPossibleEntryPoint(?class),    !ClassIsAboveOtherInNamingHierarchy(_,?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2508:1-2510:50];ClassWithTopLevelEntryPoint(?class) :- \n   ClassHasPossibleEntryPoint(?class),\n   !ClassIsAboveOtherInNamingHierarchy(_,?class).;)" <<  rel_45_ClassWithTopLevelEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ClassWithTopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2506:1-2506:56];)" <<  rel_45_ClassWithTopLevelEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2485:1-2485:41];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];PossibleEntryPoint(?method) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_153_Method_DeclaringType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_200_PossibleEntryPoint_op_ctxt,rel_200_PossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((!rel_406_ClassModifier->contains(Tuple<RamDomain,2>({5,env0[1]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) && (!rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[0]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_200_PossibleEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_200_PossibleEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];PossibleEntryPoint(?method) :-     Method_DeclaringType(?method,?class),    _Method_Modifier('public',?method),    !_ClassModifier('private',?class),    !_Method_Modifier('static',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2487:1-2492:39];PossibleEntryPoint(?method) :- \n   Method_DeclaringType(?method,?class),\n   _Method_Modifier(\"public\",?method),\n   !_ClassModifier(\"private\",?class),\n   !_Method_Modifier(\"static\",?method).;)" <<  rel_200_PossibleEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;PossibleEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2485:1-2485:41];)" <<  rel_200_PossibleEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2507:1-2507:41];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2511:1-2515:39];TopLevelEntryPoint(?method) :- \n   PossibleEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class),\n   ClassWithTopLevelEntryPoint(?class).;)",profile);
if (!rel_45_ClassWithTopLevelEntryPoint->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_200_PossibleEntryPoint->empty()&&!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_200_PossibleEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_45_ClassWithTopLevelEntryPoint_op_ctxt,rel_45_ClassWithTopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_200_PossibleEntryPoint_op_ctxt,rel_200_PossibleEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt,rel_356_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_387_ApplicationClass->equalRange<0>(key,READ_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_45_ClassWithTopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_45_ClassWithTopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_356_TopLevelEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2511:1-2515:39];TopLevelEntryPoint(?method) :-     PossibleEntryPoint(?method),    Method_DeclaringType(?method,?class),    _ApplicationClass(?class),    ClassWithTopLevelEntryPoint(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2511:1-2515:39];TopLevelEntryPoint(?method) :- \n   PossibleEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   _ApplicationClass(?class),\n   ClassWithTopLevelEntryPoint(?class).;)" <<  rel_356_TopLevelEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;TopLevelEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2507:1-2507:41];)" <<  rel_356_TopLevelEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2559:1-2559:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2560:1-2562:36];FormalsForEntryPoints(?method,?formal) :- \n   TopLevelEntryPoint(?method),\n   _FormalParam(_,?method,?formal).;)",profile);
if (!rel_356_TopLevelEntryPoint->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_356_TopLevelEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_FormalsForEntryPoints_op_ctxt,rel_80_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt,rel_356_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],0});
auto range = rel_422_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_80_FormalsForEntryPoints->insert(tuple,READ_OP_CONTEXT(rel_80_FormalsForEntryPoints_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2560:1-2562:36];FormalsForEntryPoints(?method,?formal) :-     TopLevelEntryPoint(?method),    _FormalParam(_,?method,?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2560:1-2562:36];FormalsForEntryPoints(?method,?formal) :- \n   TopLevelEntryPoint(?method),\n   _FormalParam(_,?method,?formal).;)" <<  rel_80_FormalsForEntryPoints->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;FormalsForEntryPoints;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2559:1-2559:57];)" <<  rel_80_FormalsForEntryPoints->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2898:1-2898:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2971:1-2973:41];Stats_Simple_ApplicationConcreteMethod(?method) :- \n   ApplicationMethod(?method),\n   !_Method_Modifier(\"abstract\",?method).;)",profile);
if (!rel_11_ApplicationMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_259_Stats_Simple_ApplicationConcreteMethod_op_ctxt,rel_259_Stats_Simple_ApplicationConcreteMethod->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({3,env0[0]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_259_Stats_Simple_ApplicationConcreteMethod->insert(tuple,READ_OP_CONTEXT(rel_259_Stats_Simple_ApplicationConcreteMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2971:1-2973:41];Stats_Simple_ApplicationConcreteMethod(?method) :-     ApplicationMethod(?method),    !_Method_Modifier('abstract',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2971:1-2973:41];Stats_Simple_ApplicationConcreteMethod(?method) :- \n   ApplicationMethod(?method),\n   !_Method_Modifier(\"abstract\",?method).;)" <<  rel_259_Stats_Simple_ApplicationConcreteMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_ApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2898:1-2898:61];)" <<  rel_259_Stats_Simple_ApplicationConcreteMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [50:1-50:26];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isMethod(?method) :- \n   _FormalParam(?index,?method,?var).;)",profile);
if (!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_422_FormalParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isMethod(?method) :-     _FormalParam(?index,?method,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isMethod(?method) :- \n   _FormalParam(?index,?method,?var).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isMethod(?method) :- \n   _Method_DeclaresException(?exceptionType,?method).;)",profile);
if (!rel_434_Method_DeclaresException->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_434_Method_DeclaresException->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_434_Method_DeclaresException_op_ctxt,rel_434_Method_DeclaresException->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isMethod(?method) :-     _Method_DeclaresException(?exceptionType,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [338:1-342:54];isMethod(?method) :- \n   _Method_DeclaresException(?exceptionType,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [345:1-348:35];isMethod(?method) :- \n   _Method_Modifier(?mod,?method).;)",profile);
if (!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_435_Method_Modifier->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [345:1-348:35];isMethod(?method) :-     _Method_Modifier(?mod,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [345:1-348:35];isMethod(?method) :- \n   _Method_Modifier(?mod,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isMethod(?method) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_436_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_436_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_436_NativeReturnVar_op_ctxt,rel_436_NativeReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isMethod(?method) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isMethod(?method) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isMethod(?method) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_455_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_455_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_455_Var_DeclaringMethod_op_ctxt,rel_455_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isMethod(?method) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isMethod(?method) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isMethod(?method) :- \n   _ThisVar(?method,?var).;)",profile);
if (!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_451_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isMethod(?method) :-     _ThisVar(?method,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isMethod(?method) :- \n   _ThisVar(?method,?var).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethod(?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethod(?signature) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethod(?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethod(?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethod(?signature) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethod(?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethod(?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethod(?signature) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethod(?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];isMethod(?method) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)",profile);
if (!rel_431_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_431_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_431_Method_op_ctxt,rel_431_Method->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];isMethod(?method) :-     _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [657:1-665:91];isMethod(?method) :- \n   _Method(?method,?simplename,?descriptor,?declaringType,?returnType,?jvmDescriptor).;)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [852:1-854:24];isMethod(?id) :- \n   _CallbackMethod(?id).;)",profile);
if (!rel_404_CallbackMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_404_CallbackMethod_op_ctxt,rel_404_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_485_isMethod->insert(tuple,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [852:1-854:24];isMethod(?id) :-     _CallbackMethod(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [852:1-854:24];isMethod(?id) :- \n   _CallbackMethod(?id).;)" <<  rel_485_isMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [50:1-50:26];)" <<  rel_485_isMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [88:1-88:62];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Method(?instruction,?method) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Method(?instruction,?method) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Method(?instruction,?method) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Method(?instruction,?method) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Method(?instruction,?method) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Method(?instruction,?method) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Method(?instruction,?method) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_389_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_389_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_389_AssignBinop_op_ctxt,rel_389_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Method(?instruction,?method) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Method(?instruction,?method) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Method(?instruction,?method) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_400_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_400_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_400_AssignUnop_op_ctxt,rel_400_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Method(?instruction,?method) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Method(?instruction,?method) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Method(?instruction,?method) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Method(?instruction,?method) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Method(?instruction,?method) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Method(?instruction,?method) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Method(?instruction,?method) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Method(?instruction,?method) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Method(?instruction,?method) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Method(?instruction,?method) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Method(?instruction,?method) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Method(?instruction,?method) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Method(?instruction,?method) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Method(?instruction,?method) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Method(?instruction,?method) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_396_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_396_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_396_AssignNull_op_ctxt,rel_396_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Method(?instruction,?method) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Method(?instruction,?method) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Method(?instruction,?method) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_394_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_394_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_394_AssignInstanceOf_op_ctxt,rel_394_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Method(?instruction,?method) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Method(?instruction,?method) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Method(?instruction,?method) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_415_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_415_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_415_EnterMonitor_op_ctxt,rel_415_EnterMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Method(?instruction,?method) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Method(?instruction,?method) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Method(?instruction,?method) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_418_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_418_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_418_ExitMonitor_op_ctxt,rel_418_ExitMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Method(?instruction,?method) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Method(?instruction,?method) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Method(?instruction,?method) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Method(?instruction,?method) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Method(?instruction,?method) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Method(?instruction,?method) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Method(?instruction,?method) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Method(?instruction,?method) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Method(?instruction,?method) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Method(?instruction,?method) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Method(?instruction,?method) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Method(?instruction,?method) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_413_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_413_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_413_DynamicMethodInvocation_op_ctxt,rel_413_DynamicMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Method(?instruction,?method) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Method(?instruction,?method) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Method(?instruction,?method) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Method(?instruction,?method) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Method(?instruction,?method) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Method(?instruction,?method) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_453_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_453_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_453_ThrowNull_op_ctxt,rel_453_ThrowNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Method(?instruction,?method) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Method(?instruction,?method) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Method(?instruction,?method) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Method(?instruction,?method) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Method(?instruction,?method) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Method(?instruction,?method) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Method(?instruction,?method) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Method(?instruction,?method) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Method(?instruction,?method) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Method(?instruction,?method) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Method(?instruction,?method) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Method(?instruction,?method) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Method(?instruction,?method) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Method(?instruction,?method) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Method(?instruction,?method) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Method(?instruction,?method) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Method(?instruction,?method) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Method(?instruction,?method) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Method(?instruction,?method) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Method(?instruction,?method) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Method(?instruction,?method) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_423_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_423_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_423_Goto_op_ctxt,rel_423_Goto->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Method(?instruction,?method) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Method(?instruction,?method) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Method(?instruction,?method) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_424_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_424_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_424_If_op_ctxt,rel_424_If->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Method(?instruction,?method) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Method(?instruction,?method) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Method(?instruction,?method) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_448_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_448_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_448_TableSwitch_op_ctxt,rel_448_TableSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Method(?instruction,?method) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Method(?instruction,?method) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Method(?instruction,?method) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_430_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_430_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_430_LookupSwitch_op_ctxt,rel_430_LookupSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Method(?instruction,?method) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Method(?instruction,?method) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Method(?instruction,?method) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_439_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_439_Return_op_ctxt,rel_439_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Method(?instruction,?method) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Method(?instruction,?method) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Method(?instruction,?method) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_440_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_440_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_440_ReturnVoid_op_ctxt,rel_440_ReturnVoid->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Method(?instruction,?method) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Method(?instruction,?method) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Method(?instruction,?method) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_398_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_398_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_398_AssignPhantomInvoke_op_ctxt,rel_398_AssignPhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Method(?instruction,?method) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Method(?instruction,?method) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Method(?instruction,?method) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_438_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_438_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_438_PhantomInvoke_op_ctxt,rel_438_PhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Method(?instruction,?method) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Method(?instruction,?method) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Method(?instruction,?method) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_402_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_402_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_402_BreakpointStmt_op_ctxt,rel_402_BreakpointStmt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Method(?instruction,?method) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Method(?instruction,?method) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Method(?instruction,?method) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_454_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_454_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_454_UnsupportedInstruction_op_ctxt,rel_454_UnsupportedInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Method(?instruction,?method) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Method(?instruction,?method) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(130)});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Method(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(132)});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(134)});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(135)});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_109_Instruction_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(137)});
if (!(rel_109_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_109_Instruction_Method->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [88:1-88:62];)" <<  rel_109_Instruction_Method->size() << "\n";
}rel_110_delta_Instruction_Method->insertAll(*rel_109_Instruction_Method);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [257:1-257:42];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [940:1-941:34];ReturnVar(?var,?method) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_436_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_436_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_436_NativeReturnVar_op_ctxt,rel_436_NativeReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_242_ReturnVar->insert(tuple,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [940:1-941:34];ReturnVar(?var,?method) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [940:1-941:34];ReturnVar(?var,?method) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_242_ReturnVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [257:1-257:42];)" <<  rel_242_ReturnVar->size() << "\n";
}rel_243_delta_ReturnVar->insertAll(*rel_242_ReturnVar);
for(;;) {
SECTIONS_START;
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [88:1-88:62];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Method;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];Instruction_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_243_delta_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_243_delta_ReturnVar_op_ctxt,rel_243_delta_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_111_new_Instruction_Method_op_ctxt,rel_111_new_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
if( !rel_109_Instruction_Method->contains(Tuple<RamDomain,2>({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()),125}),READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt))) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_243_delta_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_243_delta_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(125)});
if (!(rel_111_new_Instruction_Method->insert(tuple,READ_OP_CONTEXT(rel_111_new_Instruction_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];@new_Instruction_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.FileSystem: java.io.FileSystem getFileSystem()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    @delta_ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>'),    !Instruction_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.FileSystem: java.io.FileSystem getFileSystem()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Instruction_Method;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];Instruction_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_111_new_Instruction_Method->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [88:1-88:62];)" <<  rel_111_new_Instruction_Method->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [257:1-257:42];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReturnVar;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [936:1-939:34];ReturnVar(?var,?method) :- \n   isReturnNonvoid_Insn(?insn),\n   Instruction_Method(?insn,?method),\n   ReturnNonvoid_Var(?insn,?var).;)",profile);
if (!rel_110_delta_Instruction_Method->empty()&&!rel_241_ReturnNonvoid_Var->empty()&&!rel_490_isReturnNonvoid_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_490_isReturnNonvoid_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_110_delta_Instruction_Method_op_ctxt,rel_110_delta_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_244_new_ReturnVar_op_ctxt,rel_244_new_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_241_ReturnNonvoid_Var_op_ctxt,rel_241_ReturnNonvoid_Var->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_490_isReturnNonvoid_Insn_op_ctxt,rel_490_isReturnNonvoid_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_110_delta_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_110_delta_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_241_ReturnNonvoid_Var->equalRange<0>(key,READ_OP_CONTEXT(rel_241_ReturnNonvoid_Var_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_242_ReturnVar->contains(Tuple<RamDomain,2>({env2[1],env1[1]}),READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_244_new_ReturnVar->insert(tuple,READ_OP_CONTEXT(rel_244_new_ReturnVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [936:1-939:34];@new_ReturnVar(?var,?method) :-     isReturnNonvoid_Insn(?insn),    @delta_Instruction_Method(?insn,?method),    ReturnNonvoid_Var(?insn,?var),    !ReturnVar(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReturnVar;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [936:1-939:34];ReturnVar(?var,?method) :- \n   isReturnNonvoid_Insn(?insn),\n   Instruction_Method(?insn,?method),\n   ReturnNonvoid_Var(?insn,?var).;)" <<  rel_244_new_ReturnVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [257:1-257:42];)" <<  rel_244_new_ReturnVar->size() << "\n";
}SECTION_END
SECTIONS_END;
if(((rel_111_new_Instruction_Method->empty()) && (rel_244_new_ReturnVar->empty()))) break;
{
	RamLogger logger(R"(@c-recursive-relation;Instruction_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [88:1-88:62];)",profile);
rel_109_Instruction_Method->insertAll(*rel_111_new_Instruction_Method);
{
auto rel_0 = rel_110_delta_Instruction_Method;
rel_110_delta_Instruction_Method = rel_111_new_Instruction_Method;
rel_111_new_Instruction_Method = rel_0;
}
rel_111_new_Instruction_Method->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReturnVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [257:1-257:42];)",profile);
rel_242_ReturnVar->insertAll(*rel_244_new_ReturnVar);
{
auto rel_0 = rel_243_delta_ReturnVar;
rel_243_delta_ReturnVar = rel_244_new_ReturnVar;
rel_244_new_ReturnVar = rel_0;
}
rel_244_new_ReturnVar->purge();
}
}
rel_110_delta_Instruction_Method->purge();
rel_111_new_Instruction_Method->purge();
rel_243_delta_ReturnVar->purge();
rel_244_new_ReturnVar->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [208:1-208:79];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];MethodInvocation_Method(?instruction,?signature) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];MethodInvocation_Method(?instruction,?signature) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];MethodInvocation_Method(?instruction,?signature) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];MethodInvocation_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.UnixFileSystem: void <init>()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(127)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];MethodInvocation_Method(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),'<java.io.UnixFileSystem: void <init>()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];MethodInvocation_Method(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),\"<java.io.UnixFileSystem: void <init>()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];MethodInvocation_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(60)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];MethodInvocation_Method(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.Object: void finalize()>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];MethodInvocation_Method(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136)});
if (!(rel_149_MethodInvocation_Method->insert(tuple,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];MethodInvocation_Method(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];MethodInvocation_Method(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodInvocation_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [208:1-208:79];)" <<  rel_149_MethodInvocation_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [259:1-259:96];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :- \n   isStaticMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_491_isStaticMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_491_isStaticMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_491_isStaticMethodInvocation_Insn_op_ctxt,rel_491_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_256_StaticMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :-     isStaticMethodInvocation_Insn(?invocation),    Instruction_Method(?invocation,?inmethod),    MethodInvocation_Method(?invocation,?signature).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [946:1-949:52];StaticMethodInvocation(?invocation,?signature,?inmethod) :- \n   isStaticMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)" <<  rel_256_StaticMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StaticMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [259:1-259:96];)" <<  rel_256_StaticMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2772:1-2772:75];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\",?inmethod).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt,rel_176_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({172});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,172,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2])});
if (!(rel_176_OptForNameInvocation->insert(tuple,READ_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :-     isMethod('<java.lang.Class: java.lang.Class forName(java.lang.String)>'),    StaticMethodInvocation(?invocation,'<java.lang.Class: java.lang.Class forName(java.lang.String)>',?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String)>\",?inmethod).;)" <<  rel_176_OptForNameInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\",?inmethod).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt,rel_176_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({173});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,173,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2])});
if (!(rel_176_OptForNameInvocation->insert(tuple,READ_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :-     isMethod('<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>'),    StaticMethodInvocation(?invocation,'<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>',?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2773:1-2777:56];OptForNameInvocation(?invocation,?inmethod) :- \n   isMethod(\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>\",?inmethod).;)" <<  rel_176_OptForNameInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OptForNameInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2772:1-2772:75];)" <<  rel_176_OptForNameInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1274:1-1274:66];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"inflate\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_149_MethodInvocation_Method->empty()&&!rel_155_Method_ReturnType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt,rel_155_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_379_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,2> key({0,86});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_155_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_379_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'inflate'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"inflate\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_379_ViewRetrievalByArg0MethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"getView\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_149_MethodInvocation_Method->empty()&&!rel_155_Method_ReturnType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt,rel_155_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_379_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,2> key({0,87});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_155_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_379_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'getView'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"getView\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_379_ViewRetrievalByArg0MethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"findViewById\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)",profile);
if (!rel_149_MethodInvocation_Method->empty()&&!rel_155_Method_ReturnType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt,rel_155_Method_ReturnType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_379_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,2> key({0,88});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({env0[0],81});
auto range = rel_155_Method_ReturnType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_155_Method_ReturnType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({81});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_379_ViewRetrievalByArg0MethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :-     Method_SimpleName(?method,'findViewById'),    Method_ReturnType(?method,'android.view.View'),    isType('android.view.View'),    MethodInvocation_Method(?invo,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1559:1-1567:43];ViewRetrievalByArg0MethodInvocation(?invo) :- \n   Method_SimpleName(?method,\"findViewById\"),\n   Method_ReturnType(?method,\"android.view.View\"),\n   isType(\"android.view.View\"),\n   MethodInvocation_Method(?invo,?method).;)" <<  rel_379_ViewRetrievalByArg0MethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ViewRetrievalByArg0MethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1274:1-1274:66];)" <<  rel_379_ViewRetrievalByArg0MethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2065:1-2065:49];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2066:1-2069:33];SpecialLibraryObject(?heap) :- \n   AssignHeapAllocation_Heap(?insn,?heap),\n   Instruction_Method(?insn,?method),\n   SpecialLibraryMethod(?method).;)",profile);
if (!rel_28_AssignHeapAllocation_Heap->empty()&&!rel_109_Instruction_Method->empty()&&!rel_250_SpecialLibraryMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_28_AssignHeapAllocation_Heap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_28_AssignHeapAllocation_Heap_op_ctxt,rel_28_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_250_SpecialLibraryMethod_op_ctxt,rel_250_SpecialLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_251_SpecialLibraryObject_op_ctxt,rel_251_SpecialLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_250_SpecialLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_250_SpecialLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_251_SpecialLibraryObject->insert(tuple,READ_OP_CONTEXT(rel_251_SpecialLibraryObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2066:1-2069:33];SpecialLibraryObject(?heap) :-     AssignHeapAllocation_Heap(?insn,?heap),    Instruction_Method(?insn,?method),    SpecialLibraryMethod(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2066:1-2069:33];SpecialLibraryObject(?heap) :- \n   AssignHeapAllocation_Heap(?insn,?heap),\n   Instruction_Method(?insn,?method),\n   SpecialLibraryMethod(?method).;)" <<  rel_251_SpecialLibraryObject->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SpecialLibraryObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2065:1-2065:49];)" <<  rel_251_SpecialLibraryObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [221:1-221:88];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt,rel_252_SpecialMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_252_SpecialMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];SpecialMethodInvocation_Base(?instruction,?base) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_252_SpecialMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];SpecialMethodInvocation_Base(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),?return) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt,rel_252_SpecialMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_252_SpecialMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];SpecialMethodInvocation_Base(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),?return) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];SpecialMethodInvocation_Base(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),?return) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_252_SpecialMethodInvocation_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SpecialMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [221:1-221:88];)" <<  rel_252_SpecialMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNull;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [255:1-255:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNull;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [927:1-930:40];AssignNull(?to,?inmethod) :- \n   isAssignNull_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod).;)",profile);
if (!rel_29_AssignInstruction_To->empty()&&!rel_109_Instruction_Method->empty()&&!rel_462_isAssignNull_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_462_isAssignNull_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_33_AssignNull_op_ctxt,rel_33_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_462_isAssignNull_Insn_op_ctxt,rel_462_isAssignNull_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[1])});
if (!(rel_33_AssignNull->insert(tuple,READ_OP_CONTEXT(rel_33_AssignNull_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignNull;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [927:1-930:40];AssignNull(?to,?inmethod) :-     isAssignNull_Insn(?insn),    AssignInstruction_To(?insn,?to),    Instruction_Method(?insn,?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignNull;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [927:1-930:40];AssignNull(?to,?inmethod) :- \n   isAssignNull_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod).;)" <<  rel_33_AssignNull->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignNull;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [255:1-255:44];)" <<  rel_33_AssignNull->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [87:1-87:58];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Index(?instruction,?index) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Index(?instruction,?index) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];Instruction_Index(?instruction,?index) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Index(?instruction,?index) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Index(?instruction,?index) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];Instruction_Index(?instruction,?index) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Index(?instruction,?index) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_389_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_389_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_389_AssignBinop_op_ctxt,rel_389_AssignBinop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Index(?instruction,?index) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];Instruction_Index(?instruction,?index) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Index(?instruction,?index) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_400_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_400_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_400_AssignUnop_op_ctxt,rel_400_AssignUnop->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Index(?instruction,?index) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];Instruction_Index(?instruction,?index) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Index(?instruction,?index) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Index(?instruction,?index) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];Instruction_Index(?instruction,?index) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Index(?instruction,?index) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Index(?instruction,?index) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];Instruction_Index(?instruction,?index) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Index(?instruction,?index) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Index(?instruction,?index) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];Instruction_Index(?instruction,?index) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Index(?instruction,?index) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Index(?instruction,?index) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];Instruction_Index(?instruction,?index) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Index(?instruction,?index) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_396_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_396_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_396_AssignNull_op_ctxt,rel_396_AssignNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Index(?instruction,?index) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];Instruction_Index(?instruction,?index) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Index(?instruction,?index) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_394_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_394_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_394_AssignInstanceOf_op_ctxt,rel_394_AssignInstanceOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Index(?instruction,?index) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];Instruction_Index(?instruction,?index) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Index(?instruction,?index) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_415_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_415_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_415_EnterMonitor_op_ctxt,rel_415_EnterMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Index(?instruction,?index) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];Instruction_Index(?instruction,?index) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Index(?instruction,?index) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_418_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_418_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_418_ExitMonitor_op_ctxt,rel_418_ExitMonitor->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Index(?instruction,?index) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];Instruction_Index(?instruction,?index) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Index(?instruction,?index) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Index(?instruction,?index) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];Instruction_Index(?instruction,?index) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Index(?instruction,?index) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Index(?instruction,?index) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];Instruction_Index(?instruction,?index) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Index(?instruction,?index) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Index(?instruction,?index) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];Instruction_Index(?instruction,?index) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Index(?instruction,?index) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_413_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_413_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_413_DynamicMethodInvocation_op_ctxt,rel_413_DynamicMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Index(?instruction,?index) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];Instruction_Index(?instruction,?index) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Index(?instruction,?index) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Index(?instruction,?index) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];Instruction_Index(?instruction,?index) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Index(?instruction,?index) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_453_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_453_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_453_ThrowNull_op_ctxt,rel_453_ThrowNull->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Index(?instruction,?index) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];Instruction_Index(?instruction,?index) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Index(?instruction,?index) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Index(?instruction,?index) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];Instruction_Index(?instruction,?index) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Index(?instruction,?index) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Index(?instruction,?index) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];Instruction_Index(?instruction,?index) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Index(?instruction,?index) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Index(?instruction,?index) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];Instruction_Index(?instruction,?index) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Index(?instruction,?index) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Index(?instruction,?index) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];Instruction_Index(?instruction,?index) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Index(?instruction,?index) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Index(?instruction,?index) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];Instruction_Index(?instruction,?index) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Index(?instruction,?index) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Index(?instruction,?index) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];Instruction_Index(?instruction,?index) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Index(?instruction,?index) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_423_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_423_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_423_Goto_op_ctxt,rel_423_Goto->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Index(?instruction,?index) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];Instruction_Index(?instruction,?index) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Index(?instruction,?index) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_424_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_424_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_424_If_op_ctxt,rel_424_If->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Index(?instruction,?index) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];Instruction_Index(?instruction,?index) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Index(?instruction,?index) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_448_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_448_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_448_TableSwitch_op_ctxt,rel_448_TableSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Index(?instruction,?index) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];Instruction_Index(?instruction,?index) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Index(?instruction,?index) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_430_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_430_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_430_LookupSwitch_op_ctxt,rel_430_LookupSwitch->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Index(?instruction,?index) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];Instruction_Index(?instruction,?index) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Index(?instruction,?index) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_439_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_439_Return_op_ctxt,rel_439_Return->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Index(?instruction,?index) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];Instruction_Index(?instruction,?index) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Index(?instruction,?index) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_440_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_440_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_440_ReturnVoid_op_ctxt,rel_440_ReturnVoid->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Index(?instruction,?index) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];Instruction_Index(?instruction,?index) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Index(?instruction,?index) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_398_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_398_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_398_AssignPhantomInvoke_op_ctxt,rel_398_AssignPhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Index(?instruction,?index) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];Instruction_Index(?instruction,?index) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Index(?instruction,?index) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_438_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_438_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_438_PhantomInvoke_op_ctxt,rel_438_PhantomInvoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Index(?instruction,?index) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];Instruction_Index(?instruction,?index) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Index(?instruction,?index) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_402_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_402_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_402_BreakpointStmt_op_ctxt,rel_402_BreakpointStmt->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Index(?instruction,?index) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];Instruction_Index(?instruction,?index) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Index(?instruction,?index) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_454_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_454_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_454_UnsupportedInstruction_op_ctxt,rel_454_UnsupportedInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Index(?instruction,?index) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];Instruction_Index(?instruction,?index) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];Instruction_Index(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),1) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];Instruction_Index(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>')),1) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];Instruction_Index(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\")),1) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Index(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),1) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Index(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),1) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];Instruction_Index(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),1) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(1)});
if (!(rel_108_Instruction_Index->insert(tuple,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Index(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),1) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];Instruction_Index(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),1) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_108_Instruction_Index->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Instruction_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [87:1-87:58];)" <<  rel_108_Instruction_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [253:1-253:67];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :- \n   isAssignCast_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignCast_From(?insn,?from),\n   AssignInstruction_To(?insn,?to),\n   AssignCast_Type(?insn,?type).;)",profile);
if (!rel_24_AssignCast_From->empty()&&!rel_25_AssignCast_Type->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_109_Instruction_Method->empty()&&!rel_459_isAssignCast_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_459_isAssignCast_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignCast_op_ctxt,rel_22_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_24_AssignCast_From_op_ctxt,rel_24_AssignCast_From->createContext());
CREATE_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt,rel_25_AssignCast_Type->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_459_isAssignCast_Insn_op_ctxt,rel_459_isAssignCast_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_24_AssignCast_From->equalRange<0>(key,READ_OP_CONTEXT(rel_24_AssignCast_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_25_AssignCast_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_25_AssignCast_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_22_AssignCast->insert(tuple,READ_OP_CONTEXT(rel_22_AssignCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :-     isAssignCast_Insn(?insn),    Instruction_Method(?insn,?inmethod),    AssignCast_From(?insn,?from),    AssignInstruction_To(?insn,?to),    AssignCast_Type(?insn,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [916:1-921:33];AssignCast(?type,?from,?to,?inmethod) :- \n   isAssignCast_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignCast_From(?insn,?from),\n   AssignInstruction_To(?insn,?to),\n   AssignCast_Type(?insn,?type).;)" <<  rel_22_AssignCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [253:1-253:67];)" <<  rel_22_AssignCast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2925:1-2925:86];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3025:1-3027:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :- \n   ApplicationMethod(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_22_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_22_AssignCast_op_ctxt,rel_22_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_261_Stats_Simple_Application_Cast_op_ctxt,rel_261_Stats_Simple_Application_Cast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_22_AssignCast->equalRange<3>(key,READ_OP_CONTEXT(rel_22_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_261_Stats_Simple_Application_Cast->insert(tuple,READ_OP_CONTEXT(rel_261_Stats_Simple_Application_Cast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3025:1-3027:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :-     ApplicationMethod(?inmethod),    AssignCast(?type,?from,?to,?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3025:1-3027:44];Stats_Simple_Application_Cast(?type,?from,?to,?inmethod) :- \n   ApplicationMethod(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)" <<  rel_261_Stats_Simple_Application_Cast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_Cast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2925:1-2925:86];)" <<  rel_261_Stats_Simple_Application_Cast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [161:1-161:73];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isVirtualMethodInvocation_Insn(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isVirtualMethodInvocation_Insn(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isVirtualMethodInvocation_Insn(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isVirtualMethodInvocation_Insn(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_500_isVirtualMethodInvocation_Insn->insert(tuple,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isVirtualMethodInvocation_Insn(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isVirtualMethodInvocation_Insn(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isVirtualMethodInvocation_Insn;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [161:1-161:73];)" <<  rel_500_isVirtualMethodInvocation_Insn->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [258:1-258:97];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_500_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :-     isVirtualMethodInvocation_Insn(?invocation),    Instruction_Method(?invocation,?inmethod),    MethodInvocation_Method(?invocation,?signature).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [942:1-945:52];VirtualMethodInvocation(?invocation,?signature,?inmethod) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   MethodInvocation_Method(?invocation,?signature).;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\",\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(60),(RamDomain)(130)});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),'<java.lang.Object: void finalize()>','<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>') :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),\"<java.lang.Object: void finalize()>\",\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\") :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133),(RamDomain)(132)});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(133),(RamDomain)(134)});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),'<java.security.PrivilegedAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),\"<java.security.PrivilegedAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136),(RamDomain)(135)});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(136),(RamDomain)(137)});
if (!(rel_380_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),'<java.security.PrivilegedExceptionAction: java.lang.Object run()>','<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>') :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\",\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\") :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [258:1-258:97];)" <<  rel_380_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [215:1-215:101];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)",profile);
if (!rel_149_MethodInvocation_Method->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_500_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_382_VirtualMethodInvocation_Descriptor_op_ctxt,rel_382_VirtualMethodInvocation_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_154_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_382_VirtualMethodInvocation_Descriptor->insert(tuple,READ_OP_CONTEXT(rel_382_VirtualMethodInvocation_Descriptor_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :-     isVirtualMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_SimpleName(?signature,?simplename),    Method_Descriptor(?signature,?descriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_Descriptor(?invocation,?descriptor) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)" <<  rel_382_VirtualMethodInvocation_Descriptor->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_Descriptor;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [215:1-215:101];)" <<  rel_382_VirtualMethodInvocation_Descriptor->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [214:1-214:91];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)",profile);
if (!rel_149_MethodInvocation_Method->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_500_isVirtualMethodInvocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_383_VirtualMethodInvocation_SimpleName_op_ctxt,rel_383_VirtualMethodInvocation_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_154_Method_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_383_VirtualMethodInvocation_SimpleName->insert(tuple,READ_OP_CONTEXT(rel_383_VirtualMethodInvocation_SimpleName_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :-     isVirtualMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_SimpleName(?signature,?simplename),    Method_Descriptor(?signature,?descriptor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [971:1-976:46];VirtualMethodInvocation_SimpleName(?invocation,?simplename) :- \n   isVirtualMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_SimpleName(?signature,?simplename),\n   Method_Descriptor(?signature,?descriptor).;)" <<  rel_383_VirtualMethodInvocation_SimpleName->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_SimpleName;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [214:1-214:91];)" <<  rel_383_VirtualMethodInvocation_SimpleName->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2913:1-2913:85];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3000:1-3003:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :- \n   ApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_109_Instruction_Method->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_274_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt,rel_274_Stats_Simple_Application_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_500_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_274_Stats_Simple_Application_VirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_274_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3000:1-3003:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :-     ApplicationMethod(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3000:1-3003:47];Stats_Simple_Application_VirtualMethodInvocation(?invocation) :- \n   ApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_274_Stats_Simple_Application_VirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_VirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2913:1-2913:85];)" <<  rel_274_Stats_Simple_Application_VirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [213:1-213:88];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];VirtualMethodInvocation_Base(?instruction,?base) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation_Base(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?base) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation_Base(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),?base) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];VirtualMethodInvocation_Base(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?base) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[2])});
if (!(rel_381_VirtualMethodInvocation_Base->insert(tuple,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation_Base(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?base) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];VirtualMethodInvocation_Base(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?base) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VirtualMethodInvocation_Base;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [213:1-213:88];)" <<  rel_381_VirtualMethodInvocation_Base->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1801:1-1801:48];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Keep(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_83_HeapAllocation_Keep->insert(tuple,READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Keep(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Keep(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_83_HeapAllocation_Keep->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_Keep;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1801:1-1801:48];)" <<  rel_83_HeapAllocation_Keep->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [72:1-72:42];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isHeapAllocation(?id) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_437_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_437_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_437_NormalHeap_op_ctxt,rel_437_NormalHeap->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isHeapAllocation(?id) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];isHeapAllocation(?id) :- \n   _NormalHeap(?id,?type).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isHeapAllocation(?id) :- \n   _StringConstant(?id).;)",profile);
if (!rel_447_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_447_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_447_StringConstant_op_ctxt,rel_447_StringConstant->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isHeapAllocation(?id) :-     _StringConstant(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isHeapAllocation(?id) :- \n   _StringConstant(?id).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isHeapAllocation(?id) :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_405_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_405_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_405_ClassHeap_op_ctxt,rel_405_ClassHeap->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isHeapAllocation(?id) :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];isHeapAllocation(?id) :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];isHeapAllocation(?id) :- \n   _MethodHandleConstant(?id).;)",profile);
if (!rel_432_MethodHandleConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_432_MethodHandleConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_432_MethodHandleConstant_op_ctxt,rel_432_MethodHandleConstant->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];isHeapAllocation(?id) :-     _MethodHandleConstant(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];isHeapAllocation(?id) :- \n   _MethodHandleConstant(?id).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];isHeapAllocation(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)",profile);
if (!rel_365_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_365_Type_null_op_ctxt,rel_365_Type_null->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(19)});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];isHeapAllocation('<<null pseudo heap>>') :-     Type_null(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];isHeapAllocation(\"<<null pseudo heap>>\") :- \n   Type_null(?type).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];isHeapAllocation(\"<<main method array>>\").;)",profile);
rel_474_isHeapAllocation->insert(20);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];isHeapAllocation(\"<<main method array>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];isHeapAllocation(\"<<main method array content>>\").;)",profile);
rel_474_isHeapAllocation->insert(22);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];isHeapAllocation(\"<<main method array content>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [992:1-994:37];isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)",profile);
rel_474_isHeapAllocation->insert(23);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [992:1-994:37];isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [995:1-997:33];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)",profile);
rel_474_isHeapAllocation->insert(25);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [995:1-997:33];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [998:1-1000:31];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
rel_474_isHeapAllocation->insert(26);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [998:1-1000:31];isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];isHeapAllocation(\"<<string-constant>>\").;)",profile);
rel_474_isHeapAllocation->insert(27);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];isHeapAllocation(\"<<string-constant>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];isHeapAllocation(\"<<reflection-string-constant>>\").;)",profile);
rel_474_isHeapAllocation->insert(28);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];isHeapAllocation(\"<<reflection-string-constant>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1005:1-1007:37];isHeapAllocation(\"<<string-buffer>>\").;)",profile);
rel_474_isHeapAllocation->insert(29);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1005:1-1007:37];isHeapAllocation(\"<<string-buffer>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1008:1-1010:38];isHeapAllocation(\"<<string-builder>>\").;)",profile);
rel_474_isHeapAllocation->insert(31);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1008:1-1010:38];isHeapAllocation(\"<<string-builder>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];isHeapAllocation(\"<<system-thread-group>>\").;)",profile);
rel_474_isHeapAllocation->insert(33);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];isHeapAllocation(\"<<system-thread-group>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];isHeapAllocation(\"<<main-thread-group>>\").;)",profile);
rel_474_isHeapAllocation->insert(34);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];isHeapAllocation(\"<<main-thread-group>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1015:1-1017:31];isHeapAllocation(\"<<main-thread>>\").;)",profile);
rel_474_isHeapAllocation->insert(36);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1015:1-1017:31];isHeapAllocation(\"<<main-thread>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1018:1-1020:31];isHeapAllocation(\"<<initial-context>>\").;)",profile);
rel_474_isHeapAllocation->insert(38);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1018:1-1020:31];isHeapAllocation(\"<<initial-context>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1021:1-1023:31];isHeapAllocation(\"<<jvm-startup-context>>\").;)",profile);
rel_474_isHeapAllocation->insert(39);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1021:1-1023:31];isHeapAllocation(\"<<jvm-startup-context>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1024:1-1026:31];isHeapAllocation(\"<<jvm-startup-hcontext>>\").;)",profile);
rel_474_isHeapAllocation->insert(40);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1024:1-1026:31];isHeapAllocation(\"<<jvm-startup-hcontext>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1027:1-1029:31];isHeapAllocation(\"<<clinit-context>>\").;)",profile);
rel_474_isHeapAllocation->insert(41);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1027:1-1029:31];isHeapAllocation(\"<<clinit-context>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1030:1-1032:31];isHeapAllocation(\"<<immutable-context>>\").;)",profile);
rel_474_isHeapAllocation->insert(42);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1030:1-1032:31];isHeapAllocation(\"<<immutable-context>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1033:1-1035:31];isHeapAllocation(\"<<immutable-hcontext>>\").;)",profile);
rel_474_isHeapAllocation->insert(43);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1033:1-1035:31];isHeapAllocation(\"<<immutable-hcontext>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1036:1-1038:31];isHeapAllocation(\"<<immutable>>\").;)",profile);
rel_474_isHeapAllocation->insert(44);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1036:1-1038:31];isHeapAllocation(\"<<immutable>>\").;)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isHeapAllocation(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_474_isHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isHeapAllocation(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isHeapAllocation(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_474_isHeapAllocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [72:1-72:42];)" <<  rel_474_isHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [256:1-256:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :- \n   isAssignHeapAllocation_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignHeapAllocation_Heap(?insn,?heap),\n   AssignInstruction_To(?insn,?to).;)",profile);
if (!rel_28_AssignHeapAllocation_Heap->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_109_Instruction_Method->empty()&&!rel_460_isAssignHeapAllocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_460_isAssignHeapAllocation_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_28_AssignHeapAllocation_Heap_op_ctxt,rel_28_AssignHeapAllocation_Heap->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_460_isAssignHeapAllocation_Insn_op_ctxt,rel_460_isAssignHeapAllocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_28_AssignHeapAllocation_Heap->equalRange<0>(key,READ_OP_CONTEXT(rel_28_AssignHeapAllocation_Heap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_27_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :-     isAssignHeapAllocation_Insn(?insn),    Instruction_Method(?insn,?inmethod),    AssignHeapAllocation_Heap(?insn,?heap),    AssignInstruction_To(?insn,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [931:1-935:36];AssignHeapAllocation(?heap,?to,?inmethod) :- \n   isAssignHeapAllocation_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   AssignHeapAllocation_Heap(?insn,?heap),\n   AssignInstruction_To(?insn,?to).;)" <<  rel_27_AssignHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:1-1781:387];AssignHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({23});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(23),(RamDomain)(env1[0]),(RamDomain)(125)});
if (!(rel_27_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:1-1781:387];AssignHeapAllocation('java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem',?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>') :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isHeapAllocation('java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:1-1781:387];AssignHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\") :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isHeapAllocation(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\").;)" <<  rel_27_AssignHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:1-1782:390];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\",?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({25});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(25),(RamDomain)(env1[0]),(RamDomain)(128)});
if (!(rel_27_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:1-1782:390];AssignHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String[]',?return,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?return,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:1-1782:390];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\",?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?return,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String[]\").;)" <<  rel_27_AssignHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\",cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(26),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(128)});
if (!(rel_27_AssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];AssignHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String',cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];AssignHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\",cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_27_AssignHeapAllocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [256:1-256:76];)" <<  rel_27_AssignHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1907:1-1907:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1908:1-1909:45];OptAssignHeapAllocation(?inmethod,?heap) :- \n   AssignHeapAllocation(?heap,_,?inmethod).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_175_OptAssignHeapAllocation_op_ctxt,rel_175_OptAssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[0])});
if (!(rel_175_OptAssignHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_175_OptAssignHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1908:1-1909:45];OptAssignHeapAllocation(?inmethod,?heap) :-     AssignHeapAllocation(?heap,_,?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1908:1-1909:45];OptAssignHeapAllocation(?inmethod,?heap) :- \n   AssignHeapAllocation(?heap,_,?inmethod).;)" <<  rel_175_OptAssignHeapAllocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OptAssignHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1907:1-1907:70];)" <<  rel_175_OptAssignHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1910:1-1910:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1911:1-1914:28];ObjectMultipleAllocated(?heap) :- \n   OptAssignHeapAllocation(?inmethod1,?heap),\n   OptAssignHeapAllocation(?inmethod2,?heap),\n   ?inmethod1 != ?inmethod2.;)",profile);
if (!rel_175_OptAssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_175_OptAssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_170_ObjectMultipleAllocated_op_ctxt,rel_170_ObjectMultipleAllocated->createContext());
CREATE_OP_CONTEXT(rel_175_OptAssignHeapAllocation_op_ctxt,rel_175_OptAssignHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_175_OptAssignHeapAllocation->equalRange<1>(key,READ_OP_CONTEXT(rel_175_OptAssignHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((env0[0]) != (env1[0]))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_170_ObjectMultipleAllocated->insert(tuple,READ_OP_CONTEXT(rel_170_ObjectMultipleAllocated_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1911:1-1914:28];ObjectMultipleAllocated(?heap) :-     OptAssignHeapAllocation(?inmethod1,?heap),    OptAssignHeapAllocation(?inmethod2,?heap),    ?inmethod1 != ?inmethod2.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1911:1-1914:28];ObjectMultipleAllocated(?heap) :- \n   OptAssignHeapAllocation(?inmethod1,?heap),\n   OptAssignHeapAllocation(?inmethod2,?heap),\n   ?inmethod1 != ?inmethod2.;)" <<  rel_170_ObjectMultipleAllocated->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ObjectMultipleAllocated;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1910:1-1910:52];)" <<  rel_170_ObjectMultipleAllocated->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [78:1-78:60];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :- \n   _NormalHeap(?id,?type).;)",profile);
if (!rel_437_NormalHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_437_NormalHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_437_NormalHeap_op_ctxt,rel_437_NormalHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :-     _NormalHeap(?id,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [394:1-398:27];HeapAllocation_Type(?id,?type) :- \n   _NormalHeap(?id,?type).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];HeapAllocation_Type(?id,\"java.lang.String\") :- \n   _StringConstant(?id).;)",profile);
if (!rel_447_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_447_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_447_StringConstant_op_ctxt,rel_447_StringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(0)});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];HeapAllocation_Type(?id,'java.lang.String') :-     _StringConstant(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];HeapAllocation_Type(?id,\"java.lang.String\") :- \n   _StringConstant(?id).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];HeapAllocation_Type(?id,\"java.lang.Class\") :- \n   _ClassHeap(?id,?instanceType).;)",profile);
if (!rel_405_ClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_405_ClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_405_ClassHeap_op_ctxt,rel_405_ClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(1)});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];HeapAllocation_Type(?id,'java.lang.Class') :-     _ClassHeap(?id,?instanceType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [414:1-419:34];HeapAllocation_Type(?id,\"java.lang.Class\") :- \n   _ClassHeap(?id,?instanceType).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];HeapAllocation_Type(?id,\"java.lang.invoke.MethodHandle\") :- \n   _MethodHandleConstant(?id).;)",profile);
if (!rel_432_MethodHandleConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_432_MethodHandleConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_432_MethodHandleConstant_op_ctxt,rel_432_MethodHandleConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(2)});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];HeapAllocation_Type(?id,'java.lang.invoke.MethodHandle') :-     _MethodHandleConstant(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [425:1-428:30];HeapAllocation_Type(?id,\"java.lang.invoke.MethodHandle\") :- \n   _MethodHandleConstant(?id).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Type(\"<<null pseudo heap>>\",?type) :- \n   Type_null(?type).;)",profile);
if (!rel_365_Type_null->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_365_Type_null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_365_Type_null_op_ctxt,rel_365_Type_null->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(19),(RamDomain)(env0[0])});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Type('<<null pseudo heap>>',?type) :-     Type_null(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [950:1-953:20];HeapAllocation_Type(\"<<null pseudo heap>>\",?type) :- \n   Type_null(?type).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];HeapAllocation_Type(\"<<main method array>>\",\"java.lang.String[]\").;)",profile);
rel_87_HeapAllocation_Type->insert(20,21);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];HeapAllocation_Type(\"<<main method array>>\",\"java.lang.String[]\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];HeapAllocation_Type(\"<<main method array content>>\",\"java.lang.String\").;)",profile);
rel_87_HeapAllocation_Type->insert(22,0);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];HeapAllocation_Type(\"<<main method array content>>\",\"java.lang.String\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [992:1-994:37];HeapAllocation_Type(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",\"java.io.UnixFileSystem\").;)",profile);
rel_87_HeapAllocation_Type->insert(23,24);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [992:1-994:37];HeapAllocation_Type(\"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem\",\"java.io.UnixFileSystem\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [995:1-997:33];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String[]\",\"java.lang.String[]\").;)",profile);
rel_87_HeapAllocation_Type->insert(25,21);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [995:1-997:33];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String[]\",\"java.lang.String[]\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [998:1-1000:31];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String\",\"java.lang.String\").;)",profile);
rel_87_HeapAllocation_Type->insert(26,0);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [998:1-1000:31];HeapAllocation_Type(\"java.io.UnixFileSystem.list/new java.lang.String\",\"java.lang.String\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];HeapAllocation_Type(\"<<string-constant>>\",\"java.lang.String\").;)",profile);
rel_87_HeapAllocation_Type->insert(27,0);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];HeapAllocation_Type(\"<<string-constant>>\",\"java.lang.String\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];HeapAllocation_Type(\"<<reflection-string-constant>>\",\"java.lang.String\").;)",profile);
rel_87_HeapAllocation_Type->insert(28,0);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1001:1-1004:31];HeapAllocation_Type(\"<<reflection-string-constant>>\",\"java.lang.String\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1005:1-1007:37];HeapAllocation_Type(\"<<string-buffer>>\",\"java.lang.StringBuffer\").;)",profile);
rel_87_HeapAllocation_Type->insert(29,30);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1005:1-1007:37];HeapAllocation_Type(\"<<string-buffer>>\",\"java.lang.StringBuffer\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1008:1-1010:38];HeapAllocation_Type(\"<<string-builder>>\",\"java.lang.StringBuilder\").;)",profile);
rel_87_HeapAllocation_Type->insert(31,32);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1008:1-1010:38];HeapAllocation_Type(\"<<string-builder>>\",\"java.lang.StringBuilder\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];HeapAllocation_Type(\"<<system-thread-group>>\",\"java.lang.ThreadGroup\").;)",profile);
rel_87_HeapAllocation_Type->insert(33,35);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];HeapAllocation_Type(\"<<system-thread-group>>\",\"java.lang.ThreadGroup\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];HeapAllocation_Type(\"<<main-thread-group>>\",\"java.lang.ThreadGroup\").;)",profile);
rel_87_HeapAllocation_Type->insert(34,35);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1011:1-1014:36];HeapAllocation_Type(\"<<main-thread-group>>\",\"java.lang.ThreadGroup\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1015:1-1017:31];HeapAllocation_Type(\"<<main-thread>>\",\"java.lang.Thread\").;)",profile);
rel_87_HeapAllocation_Type->insert(36,37);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1015:1-1017:31];HeapAllocation_Type(\"<<main-thread>>\",\"java.lang.Thread\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1018:1-1020:31];HeapAllocation_Type(\"<<initial-context>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(38,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1018:1-1020:31];HeapAllocation_Type(\"<<initial-context>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1021:1-1023:31];HeapAllocation_Type(\"<<jvm-startup-context>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(39,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1021:1-1023:31];HeapAllocation_Type(\"<<jvm-startup-context>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1024:1-1026:31];HeapAllocation_Type(\"<<jvm-startup-hcontext>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(40,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1024:1-1026:31];HeapAllocation_Type(\"<<jvm-startup-hcontext>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1027:1-1029:31];HeapAllocation_Type(\"<<clinit-context>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(41,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1027:1-1029:31];HeapAllocation_Type(\"<<clinit-context>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1030:1-1032:31];HeapAllocation_Type(\"<<immutable-context>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(42,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1030:1-1032:31];HeapAllocation_Type(\"<<immutable-context>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1033:1-1035:31];HeapAllocation_Type(\"<<immutable-hcontext>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(43,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1033:1-1035:31];HeapAllocation_Type(\"<<immutable-hcontext>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1036:1-1038:31];HeapAllocation_Type(\"<<immutable>>\",\"java.lang.Object\").;)",profile);
rel_87_HeapAllocation_Type->insert(44,18);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1036:1-1038:31];HeapAllocation_Type(\"<<immutable>>\",\"java.lang.Object\").;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Type(?heap,\"java.lang.String\") :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(0)});
if (!(rel_87_HeapAllocation_Type->insert(tuple,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Type(?heap,'java.lang.String') :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];HeapAllocation_Type(?heap,\"java.lang.String\") :- \n   _Dacapo(?heap,?method).;)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [78:1-78:60];)" <<  rel_87_HeapAllocation_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1076:1-1076:78];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :- \n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class),\n   OverridesFinalize(?class).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()&&!rel_87_HeapAllocation_Type->empty()&&!rel_194_OverridesFinalize->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_194_OverridesFinalize_op_ctxt,rel_194_OverridesFinalize->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_194_OverridesFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_194_OverridesFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_2_AllocatedObjectSupportsFinalize->insert(tuple,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :-     AssignHeapAllocation(?heap,_,?inmethod),    HeapAllocation_Type(?heap,?class),    OverridesFinalize(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1092:1-1095:31];AllocatedObjectSupportsFinalize(?heap,?inmethod) :- \n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class),\n   OverridesFinalize(?class).;)" <<  rel_2_AllocatedObjectSupportsFinalize->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AllocatedObjectSupportsFinalize;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1076:1-1076:78];)" <<  rel_2_AllocatedObjectSupportsFinalize->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1292:1-1292:85];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_71_FakeInvocation_RegisterFinalize0->insert(tuple,READ_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];FakeInvocation_RegisterFinalize0(?val2,cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_71_FakeInvocation_RegisterFinalize0->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_71_FakeInvocation_RegisterFinalize0->insert(tuple,READ_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];FakeInvocation_RegisterFinalize0(?val2,cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];FakeInvocation_RegisterFinalize0(?val2,cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_71_FakeInvocation_RegisterFinalize0->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;FakeInvocation_RegisterFinalize0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1292:1-1292:85];)" <<  rel_71_FakeInvocation_RegisterFinalize0->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2109:1-2109:60];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2110:1-2113:28];ExceptionTypeToHeap(?heap,?heaptype) :- \n   AssignHeapAllocation(?heap,_,_),\n   HeapAllocation_Type(?heap,?heaptype),\n   ExceptionType(?heaptype).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()&&!rel_69_ExceptionType->empty()&&!rel_87_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_69_ExceptionType_op_ctxt,rel_69_ExceptionType->createContext());
CREATE_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt,rel_70_ExceptionTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_69_ExceptionType->equalRange<0>(key,READ_OP_CONTEXT(rel_69_ExceptionType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_70_ExceptionTypeToHeap->insert(tuple,READ_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2110:1-2113:28];ExceptionTypeToHeap(?heap,?heaptype) :-     AssignHeapAllocation(?heap,_,_),    HeapAllocation_Type(?heap,?heaptype),    ExceptionType(?heaptype).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2110:1-2113:28];ExceptionTypeToHeap(?heap,?heaptype) :- \n   AssignHeapAllocation(?heap,_,_),\n   HeapAllocation_Type(?heap,?heaptype),\n   ExceptionType(?heaptype).;)" <<  rel_70_ExceptionTypeToHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2109:1-2109:60];)" <<  rel_70_ExceptionTypeToHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2114:1-2114:78];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2115:1-2117:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :- \n   ExceptionTypeToHeap(_,?type).;)",profile);
if (!rel_70_ExceptionTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_70_ExceptionTypeToHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_68_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt,rel_68_ExceptionHeapTypeRepresentativeOrdinal->createContext());
CREATE_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt,rel_70_ExceptionTypeToHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_70_ExceptionTypeToHeap->equalRange<1>(key,READ_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_68_ExceptionHeapTypeRepresentativeOrdinal->insert(tuple,READ_OP_CONTEXT(rel_68_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2115:1-2117:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :-     ExceptionTypeToHeap(_,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2115:1-2117:79];ExceptionHeapTypeRepresentativeOrdinal(?type,min ord( ?heap0) : ExceptionTypeToHeap( ?heap0,?type)) :- \n   ExceptionTypeToHeap(_,?type).;)" <<  rel_68_ExceptionHeapTypeRepresentativeOrdinal->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHeapTypeRepresentativeOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2114:1-2114:78];)" <<  rel_68_ExceptionHeapTypeRepresentativeOrdinal->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1296:1-1296:33];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_isHeap(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_474_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_369_Value_isHeap_op_ctxt,rel_369_Value_isHeap->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_369_Value_isHeap->insert(tuple,READ_OP_CONTEXT(rel_369_Value_isHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_isHeap(?heapValue) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_isHeap(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_369_Value_isHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Value_isHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1296:1-1296:33];)" <<  rel_369_Value_isHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [74:1-74:42];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isStringConstant(?id) :- \n   _StringConstant(?id).;)",profile);
if (!rel_447_StringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_447_StringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_447_StringConstant_op_ctxt,rel_447_StringConstant->createContext());
CREATE_OP_CONTEXT(rel_495_isStringConstant_op_ctxt,rel_495_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_495_isStringConstant->insert(tuple,READ_OP_CONTEXT(rel_495_isStringConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isStringConstant(?id) :-     _StringConstant(?id).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [402:1-405:24];isStringConstant(?id) :- \n   _StringConstant(?id).;)" <<  rel_495_isStringConstant->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isStringConstant(?heap) :- \n   _Dacapo(?heap,?method).;)",profile);
if (!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
CREATE_OP_CONTEXT(rel_495_isStringConstant_op_ctxt,rel_495_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_495_isStringConstant->insert(tuple,READ_OP_CONTEXT(rel_495_isStringConstant_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isStringConstant(?heap) :-     _Dacapo(?heap,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2624:1-2627:27];isStringConstant(?heap) :- \n   _Dacapo(?heap,?method).;)" <<  rel_495_isStringConstant->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isStringConstant;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [74:1-74:42];)" <<  rel_495_isStringConstant->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2093:1-2093:36];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2095:1-2097:37];StringFactoryType(\"java.lang.StringBuffer\").;)",profile);
rel_309_StringFactoryType->insert(30);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2095:1-2097:37];StringFactoryType(\"java.lang.StringBuffer\").;)" <<  rel_309_StringFactoryType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2095:1-2097:37];StringFactoryType(\"java.lang.StringBuilder\").;)",profile);
rel_309_StringFactoryType->insert(32);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2095:1-2097:37];StringFactoryType(\"java.lang.StringBuilder\").;)" <<  rel_309_StringFactoryType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StringFactoryType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2093:1-2093:36];)" <<  rel_309_StringFactoryType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StringFactoryHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2094:1-2094:46];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StringFactoryHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2098:1-2100:32];StringFactoryHeap(?heap) :- \n   HeapAllocation_Type(?heap,?heaptype),\n   StringFactoryType(?heaptype).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()&&!rel_309_StringFactoryType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_87_HeapAllocation_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_308_StringFactoryHeap_op_ctxt,rel_308_StringFactoryHeap->createContext());
CREATE_OP_CONTEXT(rel_309_StringFactoryType_op_ctxt,rel_309_StringFactoryType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_309_StringFactoryType->equalRange<0>(key,READ_OP_CONTEXT(rel_309_StringFactoryType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_308_StringFactoryHeap->insert(tuple,READ_OP_CONTEXT(rel_308_StringFactoryHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StringFactoryHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2098:1-2100:32];StringFactoryHeap(?heap) :-     HeapAllocation_Type(?heap,?heaptype),    StringFactoryType(?heaptype).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StringFactoryHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2098:1-2100:32];StringFactoryHeap(?heap) :- \n   HeapAllocation_Type(?heap,?heaptype),\n   StringFactoryType(?heaptype).;)" <<  rel_308_StringFactoryHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StringFactoryHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2094:1-2094:46];)" <<  rel_308_StringFactoryHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1915:1-1915:80];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1916:1-1923:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :- \n   AssignHeapAllocation(?heap,_,?meth),\n   HeapAllocation_Type(?heap,?heaptype),\n   !isStringConstant(?heap),\n   !StringFactoryHeap(?heap),\n   !_EmptyArray(?heap),\n   !ObjectMultipleAllocated(?heap),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()&&!rel_87_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt,rel_142_MethodAndTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_170_ObjectMultipleAllocated_op_ctxt,rel_170_ObjectMultipleAllocated->createContext());
CREATE_OP_CONTEXT(rel_308_StringFactoryHeap_op_ctxt,rel_308_StringFactoryHeap->createContext());
CREATE_OP_CONTEXT(rel_414_EmptyArray_op_ctxt,rel_414_EmptyArray->createContext());
CREATE_OP_CONTEXT(rel_495_isStringConstant_op_ctxt,rel_495_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((((((((!rel_495_isStringConstant->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_495_isStringConstant_op_ctxt))) && (!rel_308_StringFactoryHeap->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_308_StringFactoryHeap_op_ctxt))))) && (!rel_414_EmptyArray->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_414_EmptyArray_op_ctxt))))) && (!rel_170_ObjectMultipleAllocated->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_170_ObjectMultipleAllocated_op_ctxt))))) && (!rel_83_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt))))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env0[2])});
if (!(rel_142_MethodAndTypeToHeap->insert(tuple,READ_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1916:1-1923:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :-     AssignHeapAllocation(?heap,_,?meth),    HeapAllocation_Type(?heap,?heaptype),    !isStringConstant(?heap),    !StringFactoryHeap(?heap),    !_EmptyArray(?heap),    !ObjectMultipleAllocated(?heap),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1916:1-1923:31];MethodAndTypeToHeap(?heap,?heaptype,?meth) :- \n   AssignHeapAllocation(?heap,_,?meth),\n   HeapAllocation_Type(?heap,?heaptype),\n   !isStringConstant(?heap),\n   !StringFactoryHeap(?heap),\n   !_EmptyArray(?heap),\n   !ObjectMultipleAllocated(?heap),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_142_MethodAndTypeToHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodAndTypeToHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1915:1-1915:80];)" <<  rel_142_MethodAndTypeToHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1924:1-1924:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1925:1-1927:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :- \n   MethodAndTypeToHeap(_,?type,?meth).;)",profile);
if (!rel_142_MethodAndTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_142_MethodAndTypeToHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_4_AllocationsPerMethodAndType_op_ctxt,rel_4_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt,rel_142_MethodAndTypeToHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,3> env1;
RamDomain res = 0;
const ram::Tuple<RamDomain,3> key({0,env0[1],env0[2]});
auto range = rel_142_MethodAndTypeToHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt));
for(const auto& cur : range) {
++res
;}
env1[0] = res;
{
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[0])});
if (!(rel_4_AllocationsPerMethodAndType->insert(tuple,READ_OP_CONTEXT(rel_4_AllocationsPerMethodAndType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1925:1-1927:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :-     MethodAndTypeToHeap(_,?type,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1925:1-1927:53];AllocationsPerMethodAndType(?type,?meth,count : MethodAndTypeToHeap(_,?type,?meth)) :- \n   MethodAndTypeToHeap(_,?type,?meth).;)" <<  rel_4_AllocationsPerMethodAndType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AllocationsPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1924:1-1924:71];)" <<  rel_4_AllocationsPerMethodAndType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1900:1-1900:48];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1901:1-1901:36];MethodAllocationMergeThreshold(50).;)",profile);
rel_141_MethodAllocationMergeThreshold->insert(50);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1901:1-1901:36];MethodAllocationMergeThreshold(50).;)" <<  rel_141_MethodAllocationMergeThreshold->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodAllocationMergeThreshold;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1900:1-1900:48];)" <<  rel_141_MethodAllocationMergeThreshold->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1928:1-1928:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1929:1-1932:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   MethodAllocationMergeThreshold(?t),\n   ?n > ?t.;)",profile);
if (!rel_4_AllocationsPerMethodAndType->empty()&&!rel_141_MethodAllocationMergeThreshold->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AllocationsPerMethodAndType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_3_AllocationShouldBeMergedPerMethod_op_ctxt,rel_3_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_4_AllocationsPerMethodAndType_op_ctxt,rel_4_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_141_MethodAllocationMergeThreshold_op_ctxt,rel_141_MethodAllocationMergeThreshold->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_141_MethodAllocationMergeThreshold) {
if( ((env0[2]) > (env1[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_3_AllocationShouldBeMergedPerMethod->insert(tuple,READ_OP_CONTEXT(rel_3_AllocationShouldBeMergedPerMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1929:1-1932:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :-     AllocationsPerMethodAndType(?heaptype,?meth,?n),    MethodAllocationMergeThreshold(?t),    ?n > ?t.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1929:1-1932:11];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   MethodAllocationMergeThreshold(?t),\n   ?n > ?t.;)" <<  rel_3_AllocationShouldBeMergedPerMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2088:1-2092:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   Method_DeclaringType(?meth,?class),\n   SpecialLibraryClass(?class),\n   ?n > 1.;)",profile);
if (!rel_4_AllocationsPerMethodAndType->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_249_SpecialLibraryClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_4_AllocationsPerMethodAndType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_3_AllocationShouldBeMergedPerMethod_op_ctxt,rel_3_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_4_AllocationsPerMethodAndType_op_ctxt,rel_4_AllocationsPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt,rel_249_SpecialLibraryClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((env0[2]) > (1))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_249_SpecialLibraryClass->equalRange<0>(key,READ_OP_CONTEXT(rel_249_SpecialLibraryClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_3_AllocationShouldBeMergedPerMethod->insert(tuple,READ_OP_CONTEXT(rel_3_AllocationShouldBeMergedPerMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2088:1-2092:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :-     AllocationsPerMethodAndType(?heaptype,?meth,?n),    Method_DeclaringType(?meth,?class),    SpecialLibraryClass(?class),    ?n > 1.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2088:1-2092:31];AllocationShouldBeMergedPerMethod(?heaptype,?meth) :- \n   AllocationsPerMethodAndType(?heaptype,?meth,?n),\n   Method_DeclaringType(?meth,?class),\n   SpecialLibraryClass(?class),\n   ?n > 1.;)" <<  rel_3_AllocationShouldBeMergedPerMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AllocationShouldBeMergedPerMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1928:1-1928:70];)" <<  rel_3_AllocationShouldBeMergedPerMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1933:1-1933:84];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1934:1-1936:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :- \n   AllocationShouldBeMergedPerMethod(?heaptype,?meth),\n   MethodAndTypeToHeap(?heap,?heaptype,?meth).;)",profile);
if (!rel_3_AllocationShouldBeMergedPerMethod->empty()&&!rel_142_MethodAndTypeToHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_3_AllocationShouldBeMergedPerMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_3_AllocationShouldBeMergedPerMethod_op_ctxt,rel_3_AllocationShouldBeMergedPerMethod->createContext());
CREATE_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt,rel_142_MethodAndTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt,rel_143_MethodAndTypeToMergedHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],env0[1]});
auto range = rel_142_MethodAndTypeToHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_142_MethodAndTypeToHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_143_MethodAndTypeToMergedHeap->insert(tuple,READ_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1934:1-1936:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :-     AllocationShouldBeMergedPerMethod(?heaptype,?meth),    MethodAndTypeToHeap(?heap,?heaptype,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1934:1-1936:48];MethodAndTypeToMergedHeap(?heap,?heaptype,?meth) :- \n   AllocationShouldBeMergedPerMethod(?heaptype,?meth),\n   MethodAndTypeToHeap(?heap,?heaptype,?meth).;)" <<  rel_143_MethodAndTypeToMergedHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodAndTypeToMergedHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1933:1-1933:84];)" <<  rel_143_MethodAndTypeToMergedHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1937:1-1937:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1939:1-1941:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :- \n   MethodAndTypeToMergedHeap(_,?type,?meth).;)",profile);
if (!rel_143_MethodAndTypeToMergedHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_143_MethodAndTypeToMergedHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt,rel_143_MethodAndTypeToMergedHeap->createContext());
CREATE_OP_CONTEXT(rel_157_MinHeapOrdinalPerMethodAndType_op_ctxt,rel_157_MinHeapOrdinalPerMethodAndType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,3> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,3> key({0,env0[1],env0[2]});
auto range = rel_143_MethodAndTypeToMergedHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_157_MinHeapOrdinalPerMethodAndType->insert(tuple,READ_OP_CONTEXT(rel_157_MinHeapOrdinalPerMethodAndType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1939:1-1941:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :-     MethodAndTypeToMergedHeap(_,?type,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1939:1-1941:80];MinHeapOrdinalPerMethodAndType(min ord( ?heap2) : MethodAndTypeToMergedHeap( ?heap2,?type,?meth),?type,?meth) :- \n   MethodAndTypeToMergedHeap(_,?type,?meth).;)" <<  rel_157_MinHeapOrdinalPerMethodAndType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MinHeapOrdinalPerMethodAndType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1937:1-1937:76];)" <<  rel_157_MinHeapOrdinalPerMethodAndType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1938:1-1938:88];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1942:1-1945:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :- \n   isHeapAllocation(?representativeHeap),\n   MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),\n    _tmp_0 = ord(?representativeHeap).;)",profile);
if (!rel_157_MinHeapOrdinalPerMethodAndType->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_474_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_144_MethodAndTypeToRepresentative_op_ctxt,rel_144_MethodAndTypeToRepresentative->createContext());
CREATE_OP_CONTEXT(rel_157_MinHeapOrdinalPerMethodAndType_op_ctxt,rel_157_MinHeapOrdinalPerMethodAndType->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_157_MinHeapOrdinalPerMethodAndType->equalRange<0>(key,READ_OP_CONTEXT(rel_157_MinHeapOrdinalPerMethodAndType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_144_MethodAndTypeToRepresentative->insert(tuple,READ_OP_CONTEXT(rel_144_MethodAndTypeToRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1942:1-1945:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :-     isHeapAllocation(?representativeHeap),    MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),     _tmp_0 = ord(?representativeHeap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1942:1-1945:42];MethodAndTypeToRepresentative(?type,?meth,?representativeHeap) :- \n   isHeapAllocation(?representativeHeap),\n   MinHeapOrdinalPerMethodAndType( _tmp_0,?type,?meth),\n    _tmp_0 = ord(?representativeHeap).;)" <<  rel_144_MethodAndTypeToRepresentative->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MethodAndTypeToRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1938:1-1938:88];)" <<  rel_144_MethodAndTypeToRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1812:1-1812:65];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1844:1-1848:31];HeapRepresentative(\"<<string-constant>>\",?heap) :- \n   isStringConstant(?heap),\n   isHeapAllocation(\"<<string-constant>>\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_474_isHeapAllocation->empty()&&!rel_495_isStringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_495_isStringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_495_isStringConstant_op_ctxt,rel_495_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_83_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt))) {
const Tuple<RamDomain,1> key({27});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(27),(RamDomain)(env0[0])});
if (!(rel_90_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1844:1-1848:31];HeapRepresentative('<<string-constant>>',?heap) :-     isStringConstant(?heap),    isHeapAllocation('<<string-constant>>'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1844:1-1848:31];HeapRepresentative(\"<<string-constant>>\",?heap) :- \n   isStringConstant(?heap),\n   isHeapAllocation(\"<<string-constant>>\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_90_HeapRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1946:1-1948:50];HeapRepresentative(?representativeHeap,?heap) :- \n   MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),\n   MethodAndTypeToMergedHeap(?heap,?type,?meth).;)",profile);
if (!rel_143_MethodAndTypeToMergedHeap->empty()&&!rel_144_MethodAndTypeToRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_144_MethodAndTypeToRepresentative->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt,rel_143_MethodAndTypeToMergedHeap->createContext());
CREATE_OP_CONTEXT(rel_144_MethodAndTypeToRepresentative_op_ctxt,rel_144_MethodAndTypeToRepresentative->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[0],env0[1]});
auto range = rel_143_MethodAndTypeToMergedHeap->equalRange<1,2>(key,READ_OP_CONTEXT(rel_143_MethodAndTypeToMergedHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env1[0])});
if (!(rel_90_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1946:1-1948:50];HeapRepresentative(?representativeHeap,?heap) :-     MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),    MethodAndTypeToMergedHeap(?heap,?type,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1946:1-1948:50];HeapRepresentative(?representativeHeap,?heap) :- \n   MethodAndTypeToRepresentative(?type,?meth,?representativeHeap),\n   MethodAndTypeToMergedHeap(?heap,?type,?meth).;)" <<  rel_90_HeapRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2103:1-2105:31];HeapRepresentative(\"<<string-buffer>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuffer\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({0,30});
auto range = rel_87_HeapAllocation_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( !rel_83_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(29),(RamDomain)(env0[0])});
if (!(rel_90_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2103:1-2105:31];HeapRepresentative('<<string-buffer>>',?heap) :-     HeapAllocation_Type(?heap,'java.lang.StringBuffer'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2103:1-2105:31];HeapRepresentative(\"<<string-buffer>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuffer\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_90_HeapRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2106:1-2108:31];HeapRepresentative(\"<<string-builder>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuilder\"),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({0,32});
auto range = rel_87_HeapAllocation_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
if( !rel_83_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(31),(RamDomain)(env0[0])});
if (!(rel_90_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2106:1-2108:31];HeapRepresentative('<<string-builder>>',?heap) :-     HeapAllocation_Type(?heap,'java.lang.StringBuilder'),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2106:1-2108:31];HeapRepresentative(\"<<string-builder>>\",?heap) :- \n   HeapAllocation_Type(?heap,\"java.lang.StringBuilder\"),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_90_HeapRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2118:1-2122:41];HeapRepresentative(?representativeHeap,?heap) :- \n   ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),\n   ExceptionTypeToHeap(?heap,?heaptype),\n   isHeapAllocation(?representativeHeap),\n    _tmp_0 = ord(?representativeHeap).;)",profile);
if (!rel_68_ExceptionHeapTypeRepresentativeOrdinal->empty()&&!rel_70_ExceptionTypeToHeap->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_68_ExceptionHeapTypeRepresentativeOrdinal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_68_ExceptionHeapTypeRepresentativeOrdinal_op_ctxt,rel_68_ExceptionHeapTypeRepresentativeOrdinal->createContext());
CREATE_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt,rel_70_ExceptionTypeToHeap->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_70_ExceptionTypeToHeap->equalRange<1>(key,READ_OP_CONTEXT(rel_70_ExceptionTypeToHeap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_474_isHeapAllocation) {
if( ((env0[1]) == (env2[0]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0])});
if (!(rel_90_HeapRepresentative->insert(tuple,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2118:1-2122:41];HeapRepresentative(?representativeHeap,?heap) :-     ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),    ExceptionTypeToHeap(?heap,?heaptype),    isHeapAllocation(?representativeHeap),     _tmp_0 = ord(?representativeHeap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2118:1-2122:41];HeapRepresentative(?representativeHeap,?heap) :- \n   ExceptionHeapTypeRepresentativeOrdinal(?heaptype, _tmp_0),\n   ExceptionTypeToHeap(?heap,?heaptype),\n   isHeapAllocation(?representativeHeap),\n    _tmp_0 = ord(?representativeHeap).;)" <<  rel_90_HeapRepresentative->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapRepresentative;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1812:1-1812:65];)" <<  rel_90_HeapRepresentative->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapIsMergedString;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1813:1-1813:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedString;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1814:1-1815:52];HeapIsMergedString(?heap) :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_88_HeapIsMergedString_op_ctxt,rel_88_HeapIsMergedString->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({27,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_88_HeapIsMergedString->insert(tuple,READ_OP_CONTEXT(rel_88_HeapIsMergedString_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapIsMergedString;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1814:1-1815:52];HeapIsMergedString(?heap) :-     HeapRepresentative('<<string-constant>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapIsMergedString;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1814:1-1815:52];HeapIsMergedString(?heap) :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)" <<  rel_88_HeapIsMergedString->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapIsMergedString;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1813:1-1813:47];)" <<  rel_88_HeapIsMergedString->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1819:1-1819:54];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt,rel_89_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({29,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_89_HeapIsMergedStringFactory->insert(tuple,READ_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :-     HeapRepresentative('<<string-buffer>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)" <<  rel_89_HeapIsMergedStringFactory->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt,rel_89_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({31,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_89_HeapIsMergedStringFactory->insert(tuple,READ_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :-     HeapRepresentative('<<string-builder>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1820:1-1822:51];HeapIsMergedStringFactory(?heap) :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)" <<  rel_89_HeapIsMergedStringFactory->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapIsMergedStringFactory;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1819:1-1819:54];)" <<  rel_89_HeapIsMergedStringFactory->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1828:1-1828:80];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1829:1-1833:31];RepresentativesToPickFrom(?heapRepr,?heap) :- \n   HeapRepresentative(?heapRepr,?heap),\n   !HeapIsMergedString(?heap),\n   !HeapIsMergedStringFactory(?heap),\n   !HeapAllocation_Keep(?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_90_HeapRepresentative->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt,rel_83_HeapAllocation_Keep->createContext());
CREATE_OP_CONTEXT(rel_88_HeapIsMergedString_op_ctxt,rel_88_HeapIsMergedString->createContext());
CREATE_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt,rel_89_HeapIsMergedStringFactory->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_239_RepresentativesToPickFrom_op_ctxt,rel_239_RepresentativesToPickFrom->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((((!rel_88_HeapIsMergedString->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_88_HeapIsMergedString_op_ctxt))) && (!rel_89_HeapIsMergedStringFactory->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_89_HeapIsMergedStringFactory_op_ctxt))))) && (!rel_83_HeapAllocation_Keep->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_83_HeapAllocation_Keep_op_ctxt))))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_239_RepresentativesToPickFrom->insert(tuple,READ_OP_CONTEXT(rel_239_RepresentativesToPickFrom_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1829:1-1833:31];RepresentativesToPickFrom(?heapRepr,?heap) :-     HeapRepresentative(?heapRepr,?heap),    !HeapIsMergedString(?heap),    !HeapIsMergedStringFactory(?heap),    !HeapAllocation_Keep(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1829:1-1833:31];RepresentativesToPickFrom(?heapRepr,?heap) :- \n   HeapRepresentative(?heapRepr,?heap),\n   !HeapIsMergedString(?heap),\n   !HeapIsMergedStringFactory(?heap),\n   !HeapAllocation_Keep(?heap).;)" <<  rel_239_RepresentativesToPickFrom->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;RepresentativesToPickFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1828:1-1828:80];)" <<  rel_239_RepresentativesToPickFrom->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1834:1-1834:91];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1835:1-1837:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :- \n   RepresentativesToPickFrom(_,?heap).;)",profile);
if (!rel_239_RepresentativesToPickFrom->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_239_RepresentativesToPickFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_158_MinRepresentativeHeapToPickFromOrdinal_op_ctxt,rel_158_MinRepresentativeHeapToPickFromOrdinal->createContext());
CREATE_OP_CONTEXT(rel_239_RepresentativesToPickFrom_op_ctxt,rel_239_RepresentativesToPickFrom->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = MAX_RAM_DOMAIN;
const ram::Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_239_RepresentativesToPickFrom->equalRange<1>(key,READ_OP_CONTEXT(rel_239_RepresentativesToPickFrom_op_ctxt));
if(!range.empty()) {
for(const auto& cur : range) {
env1 = cur;
res = std::min(res,env1[0]);
}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_158_MinRepresentativeHeapToPickFromOrdinal->insert(tuple,READ_OP_CONTEXT(rel_158_MinRepresentativeHeapToPickFromOrdinal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1835:1-1837:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :-     RepresentativesToPickFrom(_,?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1835:1-1837:85];MinRepresentativeHeapToPickFromOrdinal(min ord( ?heapRepr5) : RepresentativesToPickFrom( ?heapRepr5,?heap),?heap) :- \n   RepresentativesToPickFrom(_,?heap).;)" <<  rel_158_MinRepresentativeHeapToPickFromOrdinal->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MinRepresentativeHeapToPickFromOrdinal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1834:1-1834:91];)" <<  rel_158_MinRepresentativeHeapToPickFromOrdinal->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1800:1-1800:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1816:1-1818:40];HeapAllocation_Merge(?heap,\"<<string-constant>>\") :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({27,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(27)});
if (!(rel_84_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1816:1-1818:40];HeapAllocation_Merge(?heap,'<<string-constant>>') :-     HeapRepresentative('<<string-constant>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1816:1-1818:40];HeapAllocation_Merge(?heap,\"<<string-constant>>\") :- \n   HeapRepresentative(\"<<string-constant>>\",?heap).;)" <<  rel_84_HeapAllocation_Merge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,\"<<string-buffer>>\") :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({29,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(29)});
if (!(rel_84_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,'<<string-buffer>>') :-     HeapRepresentative('<<string-buffer>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,\"<<string-buffer>>\") :- \n   HeapRepresentative(\"<<string-buffer>>\",?heap).;)" <<  rel_84_HeapAllocation_Merge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,\"<<string-builder>>\") :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)",profile);
if (!rel_90_HeapRepresentative->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
const Tuple<RamDomain,2> key({31,0});
auto range = rel_90_HeapRepresentative->equalRange<0>(key,READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(31)});
if (!(rel_84_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,'<<string-builder>>') :-     HeapRepresentative('<<string-builder>>',?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1823:1-1827:42];HeapAllocation_Merge(?heap,\"<<string-builder>>\") :- \n   HeapRepresentative(\"<<string-builder>>\",?heap).;)" <<  rel_84_HeapAllocation_Merge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1838:1-1841:66];HeapAllocation_Merge(?heap,?mergeHeap) :- \n   isHeapAllocation(?mergeHeap),\n   MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),\n    _tmp_0 = ord(?mergeHeap).;)",profile);
if (!rel_158_MinRepresentativeHeapToPickFromOrdinal->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_474_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_158_MinRepresentativeHeapToPickFromOrdinal_op_ctxt,rel_158_MinRepresentativeHeapToPickFromOrdinal->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_158_MinRepresentativeHeapToPickFromOrdinal->equalRange<0>(key,READ_OP_CONTEXT(rel_158_MinRepresentativeHeapToPickFromOrdinal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_84_HeapAllocation_Merge->insert(tuple,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1838:1-1841:66];HeapAllocation_Merge(?heap,?mergeHeap) :-     isHeapAllocation(?mergeHeap),    MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),     _tmp_0 = ord(?mergeHeap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1838:1-1841:66];HeapAllocation_Merge(?heap,?mergeHeap) :- \n   isHeapAllocation(?mergeHeap),\n   MinRepresentativeHeapToPickFromOrdinal( _tmp_0,?heap),\n    _tmp_0 = ord(?mergeHeap).;)" <<  rel_84_HeapAllocation_Merge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_Merge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1800:1-1800:76];)" <<  rel_84_HeapAllocation_Merge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1799:1-1799:62];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1849:1-1851:33];HeapAllocation_ContextInsensitive(?heap) :- \n   isStringConstant(?heap),\n   !HeapRepresentative(_,?heap).;)",profile);
if (!rel_495_isStringConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_495_isStringConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_495_isStringConstant_op_ctxt,rel_495_isStringConstant->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_90_HeapRepresentative->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_82_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1849:1-1851:33];HeapAllocation_ContextInsensitive(?heap) :-     isStringConstant(?heap),    !HeapRepresentative(_,?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1849:1-1851:33];HeapAllocation_ContextInsensitive(?heap) :- \n   isStringConstant(?heap),\n   !HeapRepresentative(_,?heap).;)" <<  rel_82_HeapAllocation_ContextInsensitive->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1898:1-1899:22];HeapAllocation_ContextInsensitive(?heap) :- \n   isClassHeap(?heap).;)",profile);
if (!rel_463_isClassHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_463_isClassHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_463_isClassHeap_op_ctxt,rel_463_isClassHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_82_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1898:1-1899:22];HeapAllocation_ContextInsensitive(?heap) :-     isClassHeap(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1898:1-1899:22];HeapAllocation_ContextInsensitive(?heap) :- \n   isClassHeap(?heap).;)" <<  rel_82_HeapAllocation_ContextInsensitive->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2085:1-2087:33];HeapAllocation_ContextInsensitive(?heap) :- \n   SpecialLibraryObject(?heap),\n   !HeapRepresentative(_,?heap).;)",profile);
if (!rel_251_SpecialLibraryObject->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_251_SpecialLibraryObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt,rel_90_HeapRepresentative->createContext());
CREATE_OP_CONTEXT(rel_251_SpecialLibraryObject_op_ctxt,rel_251_SpecialLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_90_HeapRepresentative->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_90_HeapRepresentative_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_82_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2085:1-2087:33];HeapAllocation_ContextInsensitive(?heap) :-     SpecialLibraryObject(?heap),    !HeapRepresentative(_,?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2085:1-2087:33];HeapAllocation_ContextInsensitive(?heap) :- \n   SpecialLibraryObject(?heap),\n   !HeapRepresentative(_,?heap).;)" <<  rel_82_HeapAllocation_ContextInsensitive->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2123:1-2127:35];HeapAllocation_ContextInsensitive(?heap) :- \n   HeapAllocation_Type(?heap,?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   isPrimitiveType(?componentType).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()&&!rel_408_ComponentType->empty()&&!rel_458_isArrayType->empty()&&!rel_488_isPrimitiveType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_87_HeapAllocation_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
CREATE_OP_CONTEXT(rel_488_isPrimitiveType_op_ctxt,rel_488_isPrimitiveType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_458_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_458_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_408_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_488_isPrimitiveType->equalRange<0>(key,READ_OP_CONTEXT(rel_488_isPrimitiveType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_82_HeapAllocation_ContextInsensitive->insert(tuple,READ_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2123:1-2127:35];HeapAllocation_ContextInsensitive(?heap) :-     HeapAllocation_Type(?heap,?type),    isArrayType(?type),    _ComponentType(?type,?componentType),    isPrimitiveType(?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2123:1-2127:35];HeapAllocation_ContextInsensitive(?heap) :- \n   HeapAllocation_Type(?heap,?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   isPrimitiveType(?componentType).;)" <<  rel_82_HeapAllocation_ContextInsensitive->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_ContextInsensitive;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1799:1-1799:62];)" <<  rel_82_HeapAllocation_ContextInsensitive->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1794:1-1794:51];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1795:1-1796:44];HeapAllocation_Special(?heap) :- \n   HeapAllocation_ContextInsensitive(?heap).;)",profile);
if (!rel_82_HeapAllocation_ContextInsensitive->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_82_HeapAllocation_ContextInsensitive->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt,rel_86_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_86_HeapAllocation_Special->insert(tuple,READ_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1795:1-1796:44];HeapAllocation_Special(?heap) :-     HeapAllocation_ContextInsensitive(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1795:1-1796:44];HeapAllocation_Special(?heap) :- \n   HeapAllocation_ContextInsensitive(?heap).;)" <<  rel_86_HeapAllocation_Special->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1797:1-1798:34];HeapAllocation_Special(?heap) :- \n   HeapAllocation_Merge(?heap,_).;)",profile);
if (!rel_84_HeapAllocation_Merge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_84_HeapAllocation_Merge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt,rel_86_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_86_HeapAllocation_Special->insert(tuple,READ_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1797:1-1798:34];HeapAllocation_Special(?heap) :-     HeapAllocation_Merge(?heap,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1797:1-1798:34];HeapAllocation_Special(?heap) :- \n   HeapAllocation_Merge(?heap,_).;)" <<  rel_86_HeapAllocation_Special->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HeapAllocation_Special;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1794:1-1794:51];)" <<  rel_86_HeapAllocation_Special->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1342:1-1342:83];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1802:1-1804:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   !HeapAllocation_Special(?heap).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt,rel_86_HeapAllocation_Special->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_86_HeapAllocation_Special->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_86_HeapAllocation_Special_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_32_AssignNormalHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1802:1-1804:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    !HeapAllocation_Special(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1802:1-1804:34];AssignNormalHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   !HeapAllocation_Special(?heap).;)" <<  rel_32_AssignNormalHeapAllocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignNormalHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1342:1-1342:83];)" <<  rel_32_AssignNormalHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1344:1-1344:95];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1805:1-1807:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_Merge(?heap,?mergeHeap).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()&&!rel_84_HeapAllocation_Merge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_26_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_84_HeapAllocation_Merge->equalRange<0>(key,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_26_AssignContextInsensitiveHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1805:1-1807:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    HeapAllocation_Merge(?heap,?mergeHeap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1805:1-1807:43];AssignContextInsensitiveHeapAllocation(?mergeHeap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_Merge(?heap,?mergeHeap).;)" <<  rel_26_AssignContextInsensitiveHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1808:1-1811:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_ContextInsensitive(?heap),\n   !HeapAllocation_Merge(?heap,_).;)",profile);
if (!rel_27_AssignHeapAllocation->empty()&&!rel_82_HeapAllocation_ContextInsensitive->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_27_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_26_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt,rel_82_HeapAllocation_ContextInsensitive->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_84_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_82_HeapAllocation_ContextInsensitive->equalRange<0>(key,READ_OP_CONTEXT(rel_82_HeapAllocation_ContextInsensitive_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_26_AssignContextInsensitiveHeapAllocation->insert(tuple,READ_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1808:1-1811:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :-     AssignHeapAllocation(?heap,?var,?inmethod),    HeapAllocation_ContextInsensitive(?heap),    !HeapAllocation_Merge(?heap,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1808:1-1811:37];AssignContextInsensitiveHeapAllocation(?heap,?var,?inmethod) :- \n   AssignHeapAllocation(?heap,?var,?inmethod),\n   HeapAllocation_ContextInsensitive(?heap),\n   !HeapAllocation_Merge(?heap,_).;)" <<  rel_26_AssignContextInsensitiveHeapAllocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignContextInsensitiveHeapAllocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1344:1-1344:95];)" <<  rel_26_AssignContextInsensitiveHeapAllocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Field_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [43:1-43:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Field_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)",profile);
if (!rel_419_Field->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_419_Field->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_419_Field_op_ctxt,rel_419_Field->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_73_Field_DeclaringType->insert(tuple,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Field_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :-     _Field(?signature,?declaringType,?simplename,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Field_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];Field_DeclaringType(?signature,?declaringType) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)" <<  rel_73_Field_DeclaringType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Field_DeclaringType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [43:1-43:71];)" <<  rel_73_Field_DeclaringType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [242:1-242:65];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :- \n   _LayoutControl(?id,?type,?parent),\n   isType(?type).;)",profile);
if (!rel_426_LayoutControl->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_426_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_426_LayoutControl_op_ctxt,rel_426_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_116_LayoutControl->insert(tuple,READ_OP_CONTEXT(rel_116_LayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :-     _LayoutControl(?id,?type,?parent),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [989:1-991:17];LayoutControl(?id,?type,?parent) :- \n   _LayoutControl(?id,?type,?parent),\n   isType(?type).;)" <<  rel_116_LayoutControl->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [242:1-242:65];)" <<  rel_116_LayoutControl->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1261:1-1261:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1483:1-1488:39];ProtectedOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_145_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_204_ProtectedOnMethodOfLayoutControl_op_ctxt,rel_204_ProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_116_LayoutControl->equalRange<1>(key,READ_OP_CONTEXT(rel_116_LayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({61,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_204_ProtectedOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_204_ProtectedOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1483:1-1488:39];ProtectedOnMethodOfLayoutControl(?meth) :-     MethodDeclaredOrInherited(?meth,?type),    LayoutControl(_,?type,_),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('protected',?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1483:1-1488:39];ProtectedOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_204_ProtectedOnMethodOfLayoutControl->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1261:1-1261:53];)" <<  rel_204_ProtectedOnMethodOfLayoutControl->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1262:1-1262:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1489:1-1491:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :- \n   ProtectedOnMethodOfLayoutControl(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_10_AppMethodOverridesAndroidLibraryMethod->empty()&&!rel_204_ProtectedOnMethodOfLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_204_ProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_10_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_196_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_196_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_204_ProtectedOnMethodOfLayoutControl_op_ctxt,rel_204_ProtectedOnMethodOfLayoutControl->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_10_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_196_OverridingProtectedOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_196_OverridingProtectedOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1489:1-1491:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :-     ProtectedOnMethodOfLayoutControl(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1489:1-1491:49];OverridingProtectedOnMethodOfLayoutControl(?meth) :- \n   ProtectedOnMethodOfLayoutControl(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_196_OverridingProtectedOnMethodOfLayoutControl->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OverridingProtectedOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1262:1-1262:63];)" <<  rel_196_OverridingProtectedOnMethodOfLayoutControl->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1260:1-1260:50];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1477:1-1482:36];PublicOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_145_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_209_PublicOnMethodOfLayoutControl_op_ctxt,rel_209_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_116_LayoutControl->equalRange<1>(key,READ_OP_CONTEXT(rel_116_LayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_209_PublicOnMethodOfLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_209_PublicOnMethodOfLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1477:1-1482:36];PublicOnMethodOfLayoutControl(?meth) :-     MethodDeclaredOrInherited(?meth,?type),    LayoutControl(_,?type,_),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('public',?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1477:1-1482:36];PublicOnMethodOfLayoutControl(?meth) :- \n   MethodDeclaredOrInherited(?meth,?type),\n   LayoutControl(_,?type,_),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_209_PublicOnMethodOfLayoutControl->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;PublicOnMethodOfLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1260:1-1260:50];)" <<  rel_209_PublicOnMethodOfLayoutControl->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1246:1-1246:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];ReifiedLayoutControl(?type,?id,cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_237_ReifiedLayoutControl_op_ctxt,rel_237_ReifiedLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_237_ReifiedLayoutControl->insert(tuple,READ_OP_CONTEXT(rel_237_ReifiedLayoutControl_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];ReifiedLayoutControl(?type,?id,cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];ReifiedLayoutControl(?type,?id,cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_237_ReifiedLayoutControl->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReifiedLayoutControl;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1246:1-1246:70];)" <<  rel_237_ReifiedLayoutControl->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1270:1-1270:58];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedComponent(?type,?value).;)",profile);
if (!rel_236_ReifiedComponent->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_236_ReifiedComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_236_ReifiedComponent_op_ctxt,rel_236_ReifiedComponent->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_235_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedComponent(?type,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedComponent(?type,?value).;)" <<  rel_235_ReifiedAndroidObjectValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLayoutControl(?type,_,?value).;)",profile);
if (!rel_237_ReifiedLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_237_ReifiedLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_237_ReifiedLayoutControl_op_ctxt,rel_237_ReifiedLayoutControl->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[0])});
if (!(rel_235_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedLayoutControl(?type,_,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLayoutControl(?type,_,?value).;)" <<  rel_235_ReifiedAndroidObjectValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLibraryObject(?type,?value).;)",profile);
if (!rel_238_ReifiedLibraryObject->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_238_ReifiedLibraryObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_238_ReifiedLibraryObject_op_ctxt,rel_238_ReifiedLibraryObject->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_235_ReifiedAndroidObjectValue->insert(tuple,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :-     ReifiedLibraryObject(?type,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1525:1-1528:39];ReifiedAndroidObjectValue(?value,?type) :- \n   ReifiedLibraryObject(?type,?value).;)" <<  rel_235_ReifiedAndroidObjectValue->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReifiedAndroidObjectValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1270:1-1270:58];)" <<  rel_235_ReifiedAndroidObjectValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1276:1-1276:66];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1572:1-1574:51];ViewObjectValueFromId(?viewValue,?numId) :- \n   LayoutControl(?numId,?type,_),\n   ReifiedLayoutControl(?type,?numId,?viewValue).;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_237_ReifiedLayoutControl->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_237_ReifiedLayoutControl_op_ctxt,rel_237_ReifiedLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_378_ViewObjectValueFromId_op_ctxt,rel_378_ViewObjectValueFromId->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[1],env0[0],0});
auto range = rel_237_ReifiedLayoutControl->equalRange<0,1>(key,READ_OP_CONTEXT(rel_237_ReifiedLayoutControl_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_378_ViewObjectValueFromId->insert(tuple,READ_OP_CONTEXT(rel_378_ViewObjectValueFromId_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1572:1-1574:51];ViewObjectValueFromId(?viewValue,?numId) :-     LayoutControl(?numId,?type,_),    ReifiedLayoutControl(?type,?numId,?viewValue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1572:1-1574:51];ViewObjectValueFromId(?viewValue,?numId) :- \n   LayoutControl(?numId,?type,_),\n   ReifiedLayoutControl(?type,?numId,?viewValue).;)" <<  rel_378_ViewObjectValueFromId->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ViewObjectValueFromId;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1276:1-1276:66];)" <<  rel_378_ViewObjectValueFromId->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [28:1-28:34];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2863:1-2863:22];MainClass(\"Harness\").;)",profile);
rel_135_MainClass->insert(176);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2863:1-2863:22];MainClass(\"Harness\").;)" <<  rel_135_MainClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [28:1-28:34];)" <<  rel_135_MainClass->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1091:1-1091:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1237:1-1243:39];MainMethodDeclaration(?method) :- \n   MainClass(?type),\n   Method_DeclaringType(?method,?type),\n   Method_SimpleName(?method,\"main\"),\n   Method_Descriptor(?method,\"void(java.lang.String[])\"),\n   _Method_Modifier(\"public\",?method),\n   _Method_Modifier(\"static\",?method).;)",profile);
if (!rel_135_MainClass->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_154_Method_Descriptor->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_135_MainClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_135_MainClass_op_ctxt,rel_135_MainClass->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt,rel_154_Method_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_153_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],67});
auto range = rel_156_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],68});
auto range = rel_154_Method_Descriptor->equalRange<0,1>(key,READ_OP_CONTEXT(rel_154_Method_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({4,env1[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env1[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_138_MainMethodDeclaration->insert(tuple,READ_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1237:1-1243:39];MainMethodDeclaration(?method) :-     MainClass(?type),    Method_DeclaringType(?method,?type),    Method_SimpleName(?method,'main'),    Method_Descriptor(?method,'void(java.lang.String[])'),    _Method_Modifier('public',?method),    _Method_Modifier('static',?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1237:1-1243:39];MainMethodDeclaration(?method) :- \n   MainClass(?type),\n   Method_DeclaringType(?method,?type),\n   Method_SimpleName(?method,\"main\"),\n   Method_Descriptor(?method,\"void(java.lang.String[])\"),\n   _Method_Modifier(\"public\",?method),\n   _Method_Modifier(\"static\",?method).;)" <<  rel_138_MainMethodDeclaration->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainMethodDeclaration;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1091:1-1091:44];)" <<  rel_138_MainMethodDeclaration->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [211:1-211:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_399_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_399_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_399_AssignReturnValue_op_ctxt,rel_399_AssignReturnValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];AssignReturnValue(?invocation,?to) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];AssignReturnValue(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?return) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];AssignReturnValue(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>')),?return) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];AssignReturnValue(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\")),?return) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str())),(RamDomain)(env1[0])});
if (!(rel_35_AssignReturnValue->insert(tuple,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];AssignReturnValue(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>')),?return) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];AssignReturnValue(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\")),?return) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_35_AssignReturnValue->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignReturnValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [211:1-211:63];)" <<  rel_35_AssignReturnValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1275:1-1275:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1568:1-1571:31];VarsAtInvocationRetrievingView(?ret,?var) :- \n   ViewRetrievalByArg0MethodInvocation(?invo),\n   AssignReturnValue(?invo,?ret),\n   _ActualParam(0,?invo,?var).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_379_ViewRetrievalByArg0MethodInvocation->empty()&&!rel_385_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_379_ViewRetrievalByArg0MethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_377_VarsAtInvocationRetrievingView_op_ctxt,rel_377_VarsAtInvocationRetrievingView->createContext());
CREATE_OP_CONTEXT(rel_379_ViewRetrievalByArg0MethodInvocation_op_ctxt,rel_379_ViewRetrievalByArg0MethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[2])});
if (!(rel_377_VarsAtInvocationRetrievingView->insert(tuple,READ_OP_CONTEXT(rel_377_VarsAtInvocationRetrievingView_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1568:1-1571:31];VarsAtInvocationRetrievingView(?ret,?var) :-     ViewRetrievalByArg0MethodInvocation(?invo),    AssignReturnValue(?invo,?ret),    _ActualParam(0,?invo,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1568:1-1571:31];VarsAtInvocationRetrievingView(?ret,?var) :- \n   ViewRetrievalByArg0MethodInvocation(?invo),\n   AssignReturnValue(?invo,?ret),\n   _ActualParam(0,?invo,?var).;)" <<  rel_377_VarsAtInvocationRetrievingView->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VarsAtInvocationRetrievingView;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1275:1-1275:57];)" <<  rel_377_VarsAtInvocationRetrievingView->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [86:1-86:39];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isInstruction(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_385_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_385_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isInstruction(?invocation) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isInstruction(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isInstruction(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_401_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_401_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_BootstrapParam_op_ctxt,rel_401_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isInstruction(?invocation) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isInstruction(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isInstruction(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_399_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_399_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_399_AssignReturnValue_op_ctxt,rel_399_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isInstruction(?invocation) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isInstruction(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isInstruction(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)",profile);
if (!rel_393_AssignHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_393_AssignHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_393_AssignHeapAllocation_op_ctxt,rel_393_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isInstruction(?instruction) :-     _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [435:1-442:68];isInstruction(?instruction) :- \n   _AssignHeapAllocation(?instruction,?index,?heap,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isInstruction(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)",profile);
if (!rel_395_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_395_AssignLocal->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_395_AssignLocal_op_ctxt,rel_395_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isInstruction(?instruction) :-     _AssignLocal(?instruction,?index,?from,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [449:1-457:59];isInstruction(?instruction) :- \n   _AssignLocal(?instruction,?index,?from,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];isInstruction(?instruction) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)",profile);
if (!rel_389_AssignBinop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_389_AssignBinop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_389_AssignBinop_op_ctxt,rel_389_AssignBinop->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];isInstruction(?instruction) :-     _AssignBinop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [460:1-467:52];isInstruction(?instruction) :- \n   _AssignBinop(?instruction,?index,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];isInstruction(?instruction) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)",profile);
if (!rel_400_AssignUnop->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_400_AssignUnop->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_400_AssignUnop_op_ctxt,rel_400_AssignUnop->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];isInstruction(?instruction) :-     _AssignUnop(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [470:1-477:51];isInstruction(?instruction) :- \n   _AssignUnop(?instruction,?index,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isInstruction(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_390_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_390_AssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_390_AssignCast_op_ctxt,rel_390_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isInstruction(?instruction) :-     _AssignCast(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [492:1-500:65];isInstruction(?instruction) :- \n   _AssignCast(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isInstruction(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)",profile);
if (!rel_392_AssignCastNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_392_AssignCastNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_392_AssignCastNumConstant_op_ctxt,rel_392_AssignCastNumConstant->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isInstruction(?instruction) :-     _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [503:1-513:77];isInstruction(?instruction) :- \n   _AssignCastNumConstant(?instruction,?index,?const,?to,?type,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isInstruction(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)",profile);
if (!rel_391_AssignCastNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_391_AssignCastNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_391_AssignCastNull_op_ctxt,rel_391_AssignCastNull->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isInstruction(?instruction) :-     _AssignCastNull(?instruction,?index,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [516:1-524:62];isInstruction(?instruction) :- \n   _AssignCastNull(?instruction,?index,?to,?type,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isInstruction(?instruction) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)",profile);
if (!rel_397_AssignNumConstant->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_397_AssignNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_397_AssignNumConstant_op_ctxt,rel_397_AssignNumConstant->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isInstruction(?instruction) :-     _AssignNumConstant(?instruction,?index,?const,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [527:1-535:66];isInstruction(?instruction) :- \n   _AssignNumConstant(?instruction,?index,?const,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isInstruction(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)",profile);
if (!rel_396_AssignNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_396_AssignNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_396_AssignNull_op_ctxt,rel_396_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isInstruction(?instruction) :-     _AssignNull(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [538:1-544:51];isInstruction(?instruction) :- \n   _AssignNull(?instruction,?index,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];isInstruction(?instruction) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)",profile);
if (!rel_394_AssignInstanceOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_394_AssignInstanceOf->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_394_AssignInstanceOf_op_ctxt,rel_394_AssignInstanceOf->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];isInstruction(?instruction) :-     _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [547:1-555:71];isInstruction(?instruction) :- \n   _AssignInstanceOf(?instruction,?index,?from,?to,?type,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];isInstruction(?instruction) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_415_EnterMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_415_EnterMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_415_EnterMonitor_op_ctxt,rel_415_EnterMonitor->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];isInstruction(?instruction) :-     _EnterMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [565:1-571:54];isInstruction(?instruction) :- \n   _EnterMonitor(?instruction,?index,?var,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];isInstruction(?instruction) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)",profile);
if (!rel_418_ExitMonitor->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_418_ExitMonitor->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_418_ExitMonitor_op_ctxt,rel_418_ExitMonitor->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];isInstruction(?instruction) :-     _ExitMonitor(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [574:1-580:53];isInstruction(?instruction) :- \n   _ExitMonitor(?instruction,?index,?var,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isInstruction(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isInstruction(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isInstruction(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isInstruction(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isInstruction(?instruction) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isInstruction(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isInstruction(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isInstruction(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isInstruction(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isInstruction(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_413_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_413_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_413_DynamicMethodInvocation_op_ctxt,rel_413_DynamicMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isInstruction(?instruction) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isInstruction(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isInstruction(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)",profile);
if (!rel_452_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_452_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_452_Throw_op_ctxt,rel_452_Throw->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isInstruction(?instruction) :-     _Throw(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [630:1-636:47];isInstruction(?instruction) :- \n   _Throw(?instruction,?index,?var,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isInstruction(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)",profile);
if (!rel_453_ThrowNull->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_453_ThrowNull->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_453_ThrowNull_op_ctxt,rel_453_ThrowNull->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isInstruction(?instruction) :-     _ThrowNull(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [639:1-644:45];isInstruction(?instruction) :- \n   _ThrowNull(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isInstruction(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)",profile);
if (!rel_445_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_445_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_445_StoreInstanceField_op_ctxt,rel_445_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isInstruction(?instruction) :-     _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [668:1-676:80];isInstruction(?instruction) :- \n   _StoreInstanceField(?instruction,?index,?from,?base,?signature,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isInstruction(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)",profile);
if (!rel_428_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_428_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_428_LoadInstanceField_op_ctxt,rel_428_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isInstruction(?instruction) :-     _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [679:1-687:77];isInstruction(?instruction) :- \n   _LoadInstanceField(?instruction,?index,?to,?base,?signature,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isInstruction(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)",profile);
if (!rel_446_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_446_StoreStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_446_StoreStaticField_op_ctxt,rel_446_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isInstruction(?instruction) :-     _StoreStaticField(?instruction,?index,?from,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [690:1-697:71];isInstruction(?instruction) :- \n   _StoreStaticField(?instruction,?index,?from,?signature,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isInstruction(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)",profile);
if (!rel_429_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_429_LoadStaticField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_429_LoadStaticField_op_ctxt,rel_429_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isInstruction(?instruction) :-     _LoadStaticField(?instruction,?index,?to,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [700:1-707:68];isInstruction(?instruction) :- \n   _LoadStaticField(?instruction,?index,?to,?signature,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isInstruction(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)",profile);
if (!rel_444_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_444_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_444_StoreArrayIndex_op_ctxt,rel_444_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isInstruction(?instruction) :-     _StoreArrayIndex(?instruction,?index,?from,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [710:1-717:65];isInstruction(?instruction) :- \n   _StoreArrayIndex(?instruction,?index,?from,?base,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isInstruction(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)",profile);
if (!rel_427_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_427_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_427_LoadArrayIndex_op_ctxt,rel_427_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isInstruction(?instruction) :-     _LoadArrayIndex(?instruction,?index,?to,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [720:1-727:62];isInstruction(?instruction) :- \n   _LoadArrayIndex(?instruction,?index,?to,?base,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];isInstruction(?instruction) :- \n   _Goto(?instruction,?index,?to,?method).;)",profile);
if (!rel_423_Goto->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_423_Goto->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_423_Goto_op_ctxt,rel_423_Goto->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];isInstruction(?instruction) :-     _Goto(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [734:1-739:45];isInstruction(?instruction) :- \n   _Goto(?instruction,?index,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];isInstruction(?instruction) :- \n   _If(?instruction,?index,?to,?method).;)",profile);
if (!rel_424_If->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_424_If->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_424_If_op_ctxt,rel_424_If->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];isInstruction(?instruction) :-     _If(?instruction,?index,?to,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [742:1-747:43];isInstruction(?instruction) :- \n   _If(?instruction,?index,?to,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];isInstruction(?instruction) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_448_TableSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_448_TableSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_448_TableSwitch_op_ctxt,rel_448_TableSwitch->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];isInstruction(?instruction) :-     _TableSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [750:1-756:53];isInstruction(?instruction) :- \n   _TableSwitch(?instruction,?index,?key,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];isInstruction(?instruction) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)",profile);
if (!rel_430_LookupSwitch->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_430_LookupSwitch->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_430_LookupSwitch_op_ctxt,rel_430_LookupSwitch->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];isInstruction(?instruction) :-     _LookupSwitch(?instruction,?index,?key,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [759:1-765:54];isInstruction(?instruction) :- \n   _LookupSwitch(?instruction,?index,?key,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isInstruction(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)",profile);
if (!rel_439_Return->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_439_Return->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_439_Return_op_ctxt,rel_439_Return->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isInstruction(?instruction) :-     _Return(?instruction,?index,?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [784:1-790:48];isInstruction(?instruction) :- \n   _Return(?instruction,?index,?var,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];isInstruction(?instruction) :- \n   _ReturnVoid(?instruction,?index,?method).;)",profile);
if (!rel_440_ReturnVoid->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_440_ReturnVoid->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_440_ReturnVoid_op_ctxt,rel_440_ReturnVoid->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];isInstruction(?instruction) :-     _ReturnVoid(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [793:1-798:46];isInstruction(?instruction) :- \n   _ReturnVoid(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];isInstruction(?instruction) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_398_AssignPhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_398_AssignPhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_398_AssignPhantomInvoke_op_ctxt,rel_398_AssignPhantomInvoke->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];isInstruction(?instruction) :-     _AssignPhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [801:1-806:55];isInstruction(?instruction) :- \n   _AssignPhantomInvoke(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];isInstruction(?instruction) :- \n   _PhantomInvoke(?instruction,?index,?method).;)",profile);
if (!rel_438_PhantomInvoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_438_PhantomInvoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_438_PhantomInvoke_op_ctxt,rel_438_PhantomInvoke->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];isInstruction(?instruction) :-     _PhantomInvoke(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [809:1-814:49];isInstruction(?instruction) :- \n   _PhantomInvoke(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];isInstruction(?instruction) :- \n   _BreakpointStmt(?instruction,?index,?method).;)",profile);
if (!rel_402_BreakpointStmt->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_402_BreakpointStmt->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_402_BreakpointStmt_op_ctxt,rel_402_BreakpointStmt->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];isInstruction(?instruction) :-     _BreakpointStmt(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [817:1-822:50];isInstruction(?instruction) :- \n   _BreakpointStmt(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];isInstruction(?instruction) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)",profile);
if (!rel_454_UnsupportedInstruction->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_454_UnsupportedInstruction->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_454_UnsupportedInstruction_op_ctxt,rel_454_UnsupportedInstruction->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];isInstruction(?instruction) :-     _UnsupportedInstruction(?instruction,?index,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [825:1-829:58];isInstruction(?instruction) :- \n   _UnsupportedInstruction(?instruction,?index,?method).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isInstruction(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isInstruction(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isInstruction(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>'))) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isInstruction(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isInstruction(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isInstruction(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isInstruction(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isInstruction(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isInstruction(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_478_isInstruction->insert(tuple,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isInstruction(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isInstruction(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_478_isInstruction->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isInstruction;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [86:1-86:39];)" <<  rel_478_isInstruction->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [160:1-160:49];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isMethodInvocation(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_385_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_385_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isMethodInvocation(?invocation) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isMethodInvocation(?invocation) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isMethodInvocation(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_401_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_401_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_BootstrapParam_op_ctxt,rel_401_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isMethodInvocation(?invocation) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isMethodInvocation(?invocation) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isMethodInvocation(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_399_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_399_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_399_AssignReturnValue_op_ctxt,rel_399_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isMethodInvocation(?invocation) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isMethodInvocation(?invocation) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [583:1-585:47];isMethodInvocation(?instruction) :- \n   _MethodInvocation_Line(?instruction,?line).;)",profile);
if (!rel_433_MethodInvocation_Line->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_433_MethodInvocation_Line->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_433_MethodInvocation_Line_op_ctxt,rel_433_MethodInvocation_Line->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [583:1-585:47];isMethodInvocation(?instruction) :-     _MethodInvocation_Line(?instruction,?line).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [583:1-585:47];isMethodInvocation(?instruction) :- \n   _MethodInvocation_Line(?instruction,?line).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethodInvocation(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)",profile);
if (!rel_443_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_443_StaticMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_443_StaticMethodInvocation_op_ctxt,rel_443_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethodInvocation(?instruction) :-     _StaticMethodInvocation(?instruction,?index,?signature,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [588:1-595:70];isMethodInvocation(?instruction) :- \n   _StaticMethodInvocation(?instruction,?index,?signature,?method).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethodInvocation(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_442_SpecialMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_442_SpecialMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_442_SpecialMethodInvocation_op_ctxt,rel_442_SpecialMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethodInvocation(?instruction) :-     _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [598:1-606:78];isMethodInvocation(?instruction) :- \n   _SpecialMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethodInvocation(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)",profile);
if (!rel_457_VirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_457_VirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_457_VirtualMethodInvocation_op_ctxt,rel_457_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethodInvocation(?instruction) :-     _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [609:1-617:78];isMethodInvocation(?instruction) :- \n   _VirtualMethodInvocation(?instruction,?index,?signature,?base,?method).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isMethodInvocation(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)",profile);
if (!rel_413_DynamicMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_413_DynamicMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_413_DynamicMethodInvocation_op_ctxt,rel_413_DynamicMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isMethodInvocation(?instruction) :-     _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [620:1-627:85];isMethodInvocation(?instruction) :- \n   _DynamicMethodInvocation(?instruction,?index,?bootSignature,?dynName,?method).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isMethodInvocation(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1385:1-1389:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isMethodInvocation(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({125});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,125});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({127});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)125)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)126)) + std::string(symTable.resolve((size_t)127))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isMethodInvocation(cat('<java.io.FileSystem: java.io.FileSystem getFileSystem()>',cat('/native','<java.io.UnixFileSystem: void <init>()>'))) :-     isMethod('<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    ReturnVar(?return,'<java.io.FileSystem: java.io.FileSystem getFileSystem()>'),    isMethod('<java.io.UnixFileSystem: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1781:388-1781:1754];isMethodInvocation(cat(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\",cat(\"/native\",\"<java.io.UnixFileSystem: void <init>()>\"))) :- \n   isMethod(\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   ReturnVar(?return,\"<java.io.FileSystem: java.io.FileSystem getFileSystem()>\"),\n   isMethod(\"<java.io.UnixFileSystem: void <init>()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,130,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({60});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',?base),    isMethod('<java.lang.Object: void finalize()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1-1783:1751];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",?base),\n   isMethod(\"<java.lang.Object: void finalize()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({130});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,130});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)130)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)60))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isMethodInvocation(cat('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>',cat('/native ','<java.lang.Object: void finalize()>'))) :-     isMethod('<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>'),    ReturnVar(?return,'<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1783:1752-1783:2399];isMethodInvocation(cat(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\",cat(\"/native \",\"<java.lang.Object: void finalize()>\"))) :- \n   isMethod(\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\"),\n   ReturnVar(?return,\"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,132,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:1-1784:2282];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({132});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,132});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)132)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1784:2283-1784:3118];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,134,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({133});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:1-1785:2702];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedAction: java.lang.Object run()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({134});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,134});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)134)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)133))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1785:2703-1785:3713];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,135,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:1-1786:2489];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({135});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,135});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)135)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1786:2490-1786:3397];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)",profile);
if (!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,137,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({136});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    _FormalParam(0,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',?base),    isMethod('<java.security.PrivilegedExceptionAction: java.lang.Object run()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:1-1787:2909];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   _FormalParam(0,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",?base),\n   isMethod(\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
const Tuple<RamDomain,1> key({137});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,137});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)137)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)131)) + std::string(symTable.resolve((size_t)136))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isMethodInvocation(cat('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>',cat('/native ','<java.security.PrivilegedExceptionAction: java.lang.Object run()>'))) :-     isMethod('<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>'),    ReturnVar(?return,'<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1787:2910-1787:3992];isMethodInvocation(cat(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\",cat(\"/native \",\"<java.security.PrivilegedExceptionAction: java.lang.Object run()>\"))) :- \n   isMethod(\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\"),\n   ReturnVar(?return,\"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>\").;)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)",profile);
if (!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_2_AllocatedObjectSupportsFinalize->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)70)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)71)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)72))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_486_isMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isMethodInvocation(cat('<register-finalize ',cat(?val1,cat('/',cat(?val2,'  >'))))) :-     AllocatedObjectSupportsFinalize(?val2,?val1),    isMethod(?val1),    isHeapAllocation(?val2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2181:1-2185:29];isMethodInvocation(cat(\"<register-finalize \",cat(?val1,cat(\"/\",cat(?val2,\"  >\"))))) :- \n   AllocatedObjectSupportsFinalize(?val2,?val1),\n   isMethod(?val1),\n   isHeapAllocation(?val2).;)" <<  rel_486_isMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [160:1-160:49];)" <<  rel_486_isMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [64:1-64:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];Var_Type(?var,?type) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_456_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_456_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_456_Var_Type_op_ctxt,rel_456_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_376_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];Var_Type(?var,?type) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];Var_Type(?var,?type) :- \n   _Var_Type(?var,?type).;)" <<  rel_376_Var_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_Type(cat(?invocation,\"/@tmp-arraycopy\"),\"java.lang.Object\") :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()&&!rel_486_isMethodInvocation->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_486_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(18)});
if (!(rel_376_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_Type(cat(?invocation,'/@tmp-arraycopy'),'java.lang.Object') :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_Type(cat(?invocation,\"/@tmp-arraycopy\"),\"java.lang.Object\") :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_376_Var_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_Type(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"java.lang.String\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(0)});
if (!(rel_376_Var_Type->insert(tuple,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_Type(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'java.lang.String') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_Type(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"java.lang.String\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_376_Var_Type->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Var_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [64:1-64:37];)" <<  rel_376_Var_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2531:1-2531:38];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2534:1-2539:38];ObjToMock(?class) :- \n   TopLevelEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   isReferenceType(?class),\n   !_ClassModifier(\"abstract\",?class).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_356_TopLevelEntryPoint->empty()&&!rel_489_isReferenceType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_356_TopLevelEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt,rel_356_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_406_ClassModifier_op_ctxt,rel_406_ClassModifier->createContext());
CREATE_OP_CONTEXT(rel_489_isReferenceType_op_ctxt,rel_489_isReferenceType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_406_ClassModifier->contains(Tuple<RamDomain,2>({3,env1[1]}),READ_OP_CONTEXT(rel_406_ClassModifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_489_isReferenceType->equalRange<0>(key,READ_OP_CONTEXT(rel_489_isReferenceType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_167_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_167_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2534:1-2539:38];ObjToMock(?class) :-     TopLevelEntryPoint(?method),    Method_DeclaringType(?method,?class),    isReferenceType(?class),    !_ClassModifier('abstract',?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2534:1-2539:38];ObjToMock(?class) :- \n   TopLevelEntryPoint(?method),\n   Method_DeclaringType(?method,?class),\n   isReferenceType(?class),\n   !_ClassModifier(\"abstract\",?class).;)" <<  rel_167_ObjToMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];ObjToMock(?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)",profile);
if (!rel_80_FormalsForEntryPoints->empty()&&!rel_257_StaticToActualType->empty()&&!rel_376_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_80_FormalsForEntryPoints->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_FormalsForEntryPoints_op_ctxt,rel_80_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_257_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_167_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_167_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];ObjToMock(?subtype) :-     FormalsForEntryPoints(?method,?formal),    Var_Type(?formal,?staticType),    StaticToActualType(?subtype,?staticType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];ObjToMock(?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)" <<  rel_167_ObjToMock->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2531:1-2531:38];)" <<  rel_167_ObjToMock->size() << "\n";
}rel_168_delta_ObjToMock->insertAll(*rel_167_ObjToMock);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2531:1-2531:38];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ObjToMock;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2540:1-2545:46];ObjToMock(?class) :- \n   ObjToMock(?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   StaticToActualType(?class,?componentType).;)",profile);
if (!rel_168_delta_ObjToMock->empty()&&!rel_257_StaticToActualType->empty()&&!rel_408_ComponentType->empty()&&!rel_458_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_168_delta_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_168_delta_ObjToMock_op_ctxt,rel_168_delta_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_169_new_ObjToMock_op_ctxt,rel_169_new_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_458_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_458_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_408_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_257_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_167_ObjToMock->contains(Tuple<RamDomain,1>({env3[0]}),READ_OP_CONTEXT(rel_167_ObjToMock_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env3[0])});
if (!(rel_169_new_ObjToMock->insert(tuple,READ_OP_CONTEXT(rel_169_new_ObjToMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2540:1-2545:46];@new_ObjToMock(?class) :-     @delta_ObjToMock(?type),    isArrayType(?type),    _ComponentType(?type,?componentType),    StaticToActualType(?class,?componentType),    !ObjToMock(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ObjToMock;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2540:1-2545:46];ObjToMock(?class) :- \n   ObjToMock(?type),\n   isArrayType(?type),\n   _ComponentType(?type,?componentType),\n   StaticToActualType(?class,?componentType).;)" <<  rel_169_new_ObjToMock->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2531:1-2531:38];)" <<  rel_169_new_ObjToMock->size() << "\n";
}if(rel_169_new_ObjToMock->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ObjToMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2531:1-2531:38];)",profile);
rel_167_ObjToMock->insertAll(*rel_169_new_ObjToMock);
{
auto rel_0 = rel_168_delta_ObjToMock;
rel_168_delta_ObjToMock = rel_169_new_ObjToMock;
rel_169_new_ObjToMock = rel_0;
}
rel_169_new_ObjToMock->purge();
}
}
rel_168_delta_ObjToMock->purge();
rel_169_new_ObjToMock->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2575:1-2575:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];MockObject(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_167_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_167_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_160_MockObject_op_ctxt,rel_160_MockObject->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((rel_138_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt)).empty()) && (rel_5_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str())),(RamDomain)(env0[0])});
if (!(rel_160_MockObject->insert(tuple,READ_OP_CONTEXT(rel_160_MockObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];MockObject(cat(?class,'::: (Mock)'),?class) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];MockObject(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_160_MockObject->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MockObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2575:1-2575:53];)" <<  rel_160_MockObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectForType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2547:1-2547:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectForType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2548:1-2550:43];MockObjectForType(?value,?staticType) :- \n   MockObject(?value,?class),\n   StaticToActualType(?class,?staticType).;)",profile);
if (!rel_160_MockObject->empty()&&!rel_257_StaticToActualType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_160_MockObject->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_160_MockObject_op_ctxt,rel_160_MockObject->createContext());
CREATE_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt,rel_163_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_257_StaticToActualType->equalRange<0>(key,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_163_MockObjectForType->insert(tuple,READ_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockObjectForType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2548:1-2550:43];MockObjectForType(?value,?staticType) :-     MockObject(?value,?class),    StaticToActualType(?class,?staticType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockObjectForType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2548:1-2550:43];MockObjectForType(?value,?staticType) :- \n   MockObject(?value,?class),\n   StaticToActualType(?class,?staticType).;)" <<  rel_163_MockObjectForType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MockObjectForType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2547:1-2547:56];)" <<  rel_163_MockObjectForType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2551:1-2551:69];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2552:1-2554:45];MockObjectForComponentType(?value,?arrayType) :- \n   _ComponentType(?arrayType,?componentType),\n   MockObjectForType(?value,?componentType).;)",profile);
if (!rel_163_MockObjectForType->empty()&&!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_408_ComponentType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_162_MockObjectForComponentType_op_ctxt,rel_162_MockObjectForComponentType->createContext());
CREATE_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt,rel_163_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_163_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_162_MockObjectForComponentType->insert(tuple,READ_OP_CONTEXT(rel_162_MockObjectForComponentType_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2552:1-2554:45];MockObjectForComponentType(?value,?arrayType) :-     _ComponentType(?arrayType,?componentType),    MockObjectForType(?value,?componentType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2552:1-2554:45];MockObjectForComponentType(?value,?arrayType) :- \n   _ComponentType(?arrayType,?componentType),\n   MockObjectForType(?value,?componentType).;)" <<  rel_162_MockObjectForComponentType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MockObjectForComponentType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2551:1-2551:69];)" <<  rel_162_MockObjectForComponentType->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ResolveInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1080:1-1080:84];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ResolveInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :- \n   VirtualMethodInvocation_SimpleName(?invocation,?simplename),\n   VirtualMethodInvocation_Descriptor(?invocation,?descriptor),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Var_Type(?base,?basetype),\n   SubtypeOf(?type,?basetype),\n   MethodLookup(?simplename,?descriptor,?type,?tomethod).;)",profile);
if (!rel_150_MethodLookup->empty()&&!rel_313_SubtypeOf->empty()&&!rel_376_Var_Type->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()&&!rel_382_VirtualMethodInvocation_Descriptor->empty()&&!rel_383_VirtualMethodInvocation_SimpleName->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_383_VirtualMethodInvocation_SimpleName->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_382_VirtualMethodInvocation_Descriptor_op_ctxt,rel_382_VirtualMethodInvocation_Descriptor->createContext());
CREATE_OP_CONTEXT(rel_383_VirtualMethodInvocation_SimpleName_op_ctxt,rel_383_VirtualMethodInvocation_SimpleName->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_382_VirtualMethodInvocation_Descriptor->equalRange<0>(key,READ_OP_CONTEXT(rel_382_VirtualMethodInvocation_Descriptor_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,4> key({env0[1],env1[1],env4[0],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env5[3])});
if (!(rel_240_ResolveInvocation->insert(tuple,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ResolveInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :-     VirtualMethodInvocation_SimpleName(?invocation,?simplename),    VirtualMethodInvocation_Descriptor(?invocation,?descriptor),    VirtualMethodInvocation_Base(?invocation,?base),    Var_Type(?base,?basetype),    SubtypeOf(?type,?basetype),    MethodLookup(?simplename,?descriptor,?type,?tomethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ResolveInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1115:1-1121:62];ResolveInvocation(?type,?invocation,?tomethod) :- \n   VirtualMethodInvocation_SimpleName(?invocation,?simplename),\n   VirtualMethodInvocation_Descriptor(?invocation,?descriptor),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Var_Type(?base,?basetype),\n   SubtypeOf(?type,?basetype),\n   MethodLookup(?simplename,?descriptor,?type,?tomethod).;)" <<  rel_240_ResolveInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ResolveInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1080:1-1080:84];)" <<  rel_240_ResolveInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;TypeForFormals;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2564:1-2564:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;TypeForFormals;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];TypeForFormals(?formal,?method,?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)",profile);
if (!rel_80_FormalsForEntryPoints->empty()&&!rel_257_StaticToActualType->empty()&&!rel_376_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_80_FormalsForEntryPoints->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_80_FormalsForEntryPoints_op_ctxt,rel_80_FormalsForEntryPoints->createContext());
CREATE_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt,rel_257_StaticToActualType->createContext());
CREATE_OP_CONTEXT(rel_357_TypeForFormals_op_ctxt,rel_357_TypeForFormals->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_257_StaticToActualType->equalRange<1>(key,READ_OP_CONTEXT(rel_257_StaticToActualType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0]),(RamDomain)(env2[0])});
if (!(rel_357_TypeForFormals->insert(tuple,READ_OP_CONTEXT(rel_357_TypeForFormals_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;TypeForFormals;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];TypeForFormals(?formal,?method,?subtype) :-     FormalsForEntryPoints(?method,?formal),    Var_Type(?formal,?staticType),    StaticToActualType(?subtype,?staticType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;TypeForFormals;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2565:1-2570:45];TypeForFormals(?formal,?method,?subtype) :- \n   FormalsForEntryPoints(?method,?formal),\n   Var_Type(?formal,?staticType),\n   StaticToActualType(?subtype,?staticType).;)" <<  rel_357_TypeForFormals->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;TypeForFormals;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2564:1-2564:71];)" <<  rel_357_TypeForFormals->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockForFormal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2571:1-2571:84];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockForFormal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2572:1-2574:29];MockForFormal(?value,?formal,?type,?method) :- \n   TypeForFormals(?formal,?method,?type),\n   MockObject(?value,?type).;)",profile);
if (!rel_160_MockObject->empty()&&!rel_357_TypeForFormals->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_357_TypeForFormals->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_159_MockForFormal_op_ctxt,rel_159_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_160_MockObject_op_ctxt,rel_160_MockObject->createContext());
CREATE_OP_CONTEXT(rel_357_TypeForFormals_op_ctxt,rel_357_TypeForFormals->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_160_MockObject->equalRange<1>(key,READ_OP_CONTEXT(rel_160_MockObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[2]),(RamDomain)(env0[1])});
if (!(rel_159_MockForFormal->insert(tuple,READ_OP_CONTEXT(rel_159_MockForFormal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockForFormal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2572:1-2574:29];MockForFormal(?value,?formal,?type,?method) :-     TypeForFormals(?formal,?method,?type),    MockObject(?value,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockForFormal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2572:1-2574:29];MockForFormal(?value,?formal,?type,?method) :- \n   TypeForFormals(?formal,?method,?type),\n   MockObject(?value,?type).;)" <<  rel_159_MockForFormal->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MockForFormal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2571:1-2571:84];)" <<  rel_159_MockForFormal->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [63:1-63:19];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isVar(?var) :- \n   _ActualParam(?index,?invocation,?var).;)",profile);
if (!rel_385_ActualParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_385_ActualParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isVar(?var) :-     _ActualParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [288:1-292:43];isVar(?var) :- \n   _ActualParam(?index,?invocation,?var).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isVar(?var) :- \n   _BootstrapParam(?index,?invocation,?var).;)",profile);
if (!rel_401_BootstrapParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_401_BootstrapParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_401_BootstrapParam_op_ctxt,rel_401_BootstrapParam->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isVar(?var) :-     _BootstrapParam(?index,?invocation,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [295:1-300:46];isVar(?var) :- \n   _BootstrapParam(?index,?invocation,?var).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isVar(?var) :- \n   _FormalParam(?index,?method,?var).;)",profile);
if (!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_422_FormalParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[2])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isVar(?var) :-     _FormalParam(?index,?method,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [332:1-335:39];isVar(?var) :- \n   _FormalParam(?index,?method,?var).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isVar(?var) :- \n   _NativeReturnVar(?var,?method).;)",profile);
if (!rel_436_NativeReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_436_NativeReturnVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_436_NativeReturnVar_op_ctxt,rel_436_NativeReturnVar->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isVar(?var) :-     _NativeReturnVar(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [351:1-354:35];isVar(?var) :- \n   _NativeReturnVar(?var,?method).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isVar(?var) :- \n   _Var_Type(?var,?type).;)",profile);
if (!rel_456_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_456_Var_Type->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_456_Var_Type_op_ctxt,rel_456_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isVar(?var) :-     _Var_Type(?var,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [357:1-360:26];isVar(?var) :- \n   _Var_Type(?var,?type).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isVar(?var) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_455_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_455_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_455_Var_DeclaringMethod_op_ctxt,rel_455_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isVar(?var) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];isVar(?var) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isVar(?var) :- \n   _ThisVar(?method,?var).;)",profile);
if (!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_451_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isVar(?var) :-     _ThisVar(?method,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [375:1-378:27];isVar(?var) :- \n   _ThisVar(?method,?var).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isVar(?to) :- \n   _AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_399_AssignReturnValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_399_AssignReturnValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_399_AssignReturnValue_op_ctxt,rel_399_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isVar(?to) :-     _AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [387:1-391:40];isVar(?to) :- \n   _AssignReturnValue(?invocation,?to).;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];isVar(cat(?invocation,\"/@tmp-arraycopy\")) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()&&!rel_486_isMethodInvocation->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_486_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str()))});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];isVar(cat(?invocation,'/@tmp-arraycopy')) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];isVar(cat(?invocation,\"/@tmp-arraycopy\")) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];isVar(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\")) :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str()))});
if (!(rel_499_isVar->insert(tuple,READ_OP_CONTEXT(rel_499_isVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];isVar(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element')) :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];isVar(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\")) :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_499_isVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [63:1-63:19];)" <<  rel_499_isVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [254:1-254:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :- \n   isAssignLocal_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod),\n   AssignLocal_From(?insn,?from).;)",profile);
if (!rel_29_AssignInstruction_To->empty()&&!rel_31_AssignLocal_From->empty()&&!rel_109_Instruction_Method->empty()&&!rel_461_isAssignLocal_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_461_isAssignLocal_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_30_AssignLocal_op_ctxt,rel_30_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_31_AssignLocal_From_op_ctxt,rel_31_AssignLocal_From->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_461_isAssignLocal_Insn_op_ctxt,rel_461_isAssignLocal_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_31_AssignLocal_From->equalRange<0>(key,READ_OP_CONTEXT(rel_31_AssignLocal_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[1]),(RamDomain)(env2[1])});
if (!(rel_30_AssignLocal->insert(tuple,READ_OP_CONTEXT(rel_30_AssignLocal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :-     isAssignLocal_Insn(?insn),    AssignInstruction_To(?insn,?to),    Instruction_Method(?insn,?inmethod),    AssignLocal_From(?insn,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [922:1-926:34];AssignLocal(?from,?to,?inmethod) :- \n   isAssignLocal_Insn(?insn),\n   AssignInstruction_To(?insn,?to),\n   Instruction_Method(?insn,?inmethod),\n   AssignLocal_From(?insn,?from).;)" <<  rel_30_AssignLocal->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1743:1-1743:281];AssignLocal(\"java.lang.Object.clone/@this\",\"java.lang.Object.clone/@native-return\",\"<java.lang.Object: java.lang.Object clone()>\") :- \n   isVar(\"java.lang.Object.clone/@this\"),\n   isVar(\"java.lang.Object.clone/@native-return\"),\n   isMethod(\"<java.lang.Object: java.lang.Object clone()>\").;)",profile);
if (!rel_485_isMethod->empty()&&!rel_499_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_30_AssignLocal_op_ctxt,rel_30_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({103});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({104});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({105});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(103),(RamDomain)(104),(RamDomain)(105)});
if (!(rel_30_AssignLocal->insert(tuple,READ_OP_CONTEXT(rel_30_AssignLocal_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1743:1-1743:281];AssignLocal('java.lang.Object.clone/@this','java.lang.Object.clone/@native-return','<java.lang.Object: java.lang.Object clone()>') :-     isVar('java.lang.Object.clone/@this'),    isVar('java.lang.Object.clone/@native-return'),    isMethod('<java.lang.Object: java.lang.Object clone()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1743:1-1743:281];AssignLocal(\"java.lang.Object.clone/@this\",\"java.lang.Object.clone/@native-return\",\"<java.lang.Object: java.lang.Object clone()>\") :- \n   isVar(\"java.lang.Object.clone/@this\"),\n   isVar(\"java.lang.Object.clone/@native-return\"),\n   isMethod(\"<java.lang.Object: java.lang.Object clone()>\").;)" <<  rel_30_AssignLocal->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;AssignLocal;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [254:1-254:56];)" <<  rel_30_AssignLocal->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2466:1-2466:59];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2467:1-2470:30];SiteShouldNotBeRefined(?invocation) :- \n   isMethodInvocation(?invocation).;)",profile);
if (!rel_486_isMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_486_isMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_248_SiteShouldNotBeRefined->insert(tuple,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2467:1-2470:30];SiteShouldNotBeRefined(?invocation) :-     isMethodInvocation(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2467:1-2470:30];SiteShouldNotBeRefined(?invocation) :- \n   isMethodInvocation(?invocation).;)" <<  rel_248_SiteShouldNotBeRefined->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SiteShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2466:1-2466:59];)" <<  rel_248_SiteShouldNotBeRefined->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [252:1-252:62];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isStoreArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreArrayIndex_From(?insn,?from),\n   StoreArrayIndex_Base(?insn,?base).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_295_StoreArrayIndex_Base->empty()&&!rel_296_StoreArrayIndex_From->empty()&&!rel_492_isStoreArrayIndex_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_492_isStoreArrayIndex_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_295_StoreArrayIndex_Base_op_ctxt,rel_295_StoreArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_296_StoreArrayIndex_From_op_ctxt,rel_296_StoreArrayIndex_From->createContext());
CREATE_OP_CONTEXT(rel_492_isStoreArrayIndex_Insn_op_ctxt,rel_492_isStoreArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_296_StoreArrayIndex_From->equalRange<0>(key,READ_OP_CONTEXT(rel_296_StoreArrayIndex_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_295_StoreArrayIndex_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_295_StoreArrayIndex_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :-     isStoreArrayIndex_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreArrayIndex_From(?insn,?from),    StoreArrayIndex_Base(?insn,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [911:1-915:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isStoreArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreArrayIndex_From(?insn,?from),\n   StoreArrayIndex_Base(?insn,?base).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];StoreArrayIndex(cat(?invocation,\"/@tmp-arraycopy\"),?dest,?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()&&!rel_486_isMethodInvocation->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_486_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env3[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];StoreArrayIndex(cat(?invocation,'/@tmp-arraycopy'),?dest,?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];StoreArrayIndex(cat(?invocation,\"/@tmp-arraycopy\"),?dest,?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1758:1-1763:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(3,?invocation,?from).;)",profile);
if (!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({117});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,117,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({3,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1758:1-1763:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(3,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1758:1-1763:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(3,?invocation,?from).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({118});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,118,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({119});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,119,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({120});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,120,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)",profile);
if (!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({121});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,121,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :-     isMethod('<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?base),    _ActualParam(2,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1764:1-1772:38];StoreArrayIndex(?from,?base,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(2,?invocation,?from).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];StoreArrayIndex(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(env1[0]),(RamDomain)(128)});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];StoreArrayIndex(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];StoreArrayIndex(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2650:1-2655:39];StoreArrayIndex(?value,?array,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   _ActualParam(2,?invocation,?value).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({153});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,153,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env3[2]),(RamDomain)(env2[2]),(RamDomain)(env1[2])});
if (!(rel_294_StoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2650:1-2655:39];StoreArrayIndex(?value,?array,?inmethod) :-     isMethod('<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>',?inmethod),    _ActualParam(0,?invocation,?array),    _ActualParam(2,?invocation,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2650:1-2655:39];StoreArrayIndex(?value,?array,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   _ActualParam(2,?invocation,?value).;)" <<  rel_294_StoreArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [252:1-252:62];)" <<  rel_294_StoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1336:1-1336:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2398:1-2399:36];OptStoreArrayIndex(?from,?base) :- \n   StoreArrayIndex(?from,?base,_).;)",profile);
if (!rel_294_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_294_StoreArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt,rel_187_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_187_OptStoreArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2398:1-2399:36];OptStoreArrayIndex(?from,?base) :-     StoreArrayIndex(?from,?base,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2398:1-2399:36];OptStoreArrayIndex(?from,?base) :- \n   StoreArrayIndex(?from,?base,_).;)" <<  rel_187_OptStoreArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OptStoreArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1336:1-1336:47];)" <<  rel_187_OptStoreArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [251:1-251:59];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :- \n   isLoadArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadArrayIndex_Base(?insn,?base),\n   LoadArrayIndex_To(?insn,?to).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_122_LoadArrayIndex_Base->empty()&&!rel_123_LoadArrayIndex_To->empty()&&!rel_482_isLoadArrayIndex_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_482_isLoadArrayIndex_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_122_LoadArrayIndex_Base_op_ctxt,rel_122_LoadArrayIndex_Base->createContext());
CREATE_OP_CONTEXT(rel_123_LoadArrayIndex_To_op_ctxt,rel_123_LoadArrayIndex_To->createContext());
CREATE_OP_CONTEXT(rel_482_isLoadArrayIndex_Insn_op_ctxt,rel_482_isLoadArrayIndex_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_122_LoadArrayIndex_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_122_LoadArrayIndex_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_123_LoadArrayIndex_To->equalRange<0>(key,READ_OP_CONTEXT(rel_123_LoadArrayIndex_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :-     isLoadArrayIndex_Insn(?insn),    Instruction_Method(?insn,?inmethod),    LoadArrayIndex_Base(?insn,?base),    LoadArrayIndex_To(?insn,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [906:1-910:33];LoadArrayIndex(?base,?to,?inmethod) :- \n   isLoadArrayIndex_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadArrayIndex_Base(?insn,?base),\n   LoadArrayIndex_To(?insn,?to).;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];LoadArrayIndex(?src,cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()&&!rel_486_isMethodInvocation->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_486_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env1[2])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];LoadArrayIndex(?src,cat(?invocation,'/@tmp-arraycopy'),?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];LoadArrayIndex(?src,cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({122});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,122,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({123});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,123,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({124});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,124,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :-     isMethod('<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>'),    VirtualMethodInvocation(?invocation,'<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>',?inmethod),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1773:1-1780:39];LoadArrayIndex(?base,?to,?inmethod) :- \n   isMethod(\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\"),\n   VirtualMethodInvocation(?invocation,\"<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2644:1-2649:42];LoadArrayIndex(?array,?value,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   AssignReturnValue(?invocation,?value).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({152});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,152,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[2]),(RamDomain)(env3[1]),(RamDomain)(env1[2])});
if (!(rel_121_LoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2644:1-2649:42];LoadArrayIndex(?array,?value,?inmethod) :-     isMethod('<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>',?inmethod),    _ActualParam(0,?invocation,?array),    AssignReturnValue(?invocation,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2644:1-2649:42];LoadArrayIndex(?array,?value,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?array),\n   AssignReturnValue(?invocation,?value).;)" <<  rel_121_LoadArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [251:1-251:59];)" <<  rel_121_LoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1335:1-1335:44];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2373:1-2374:33];OptLoadArrayIndex(?to,?base) :- \n   LoadArrayIndex(?base,?to,_).;)",profile);
if (!rel_121_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_121_LoadArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt,rel_180_OptLoadArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_180_OptLoadArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2373:1-2374:33];OptLoadArrayIndex(?to,?base) :-     LoadArrayIndex(?base,?to,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2373:1-2374:33];OptLoadArrayIndex(?to,?base) :- \n   LoadArrayIndex(?base,?to,_).;)" <<  rel_180_OptLoadArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;OptLoadArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1335:1-1335:44];)" <<  rel_180_OptLoadArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [65:1-65:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :- \n   _Var_DeclaringMethod(?var,?method).;)",profile);
if (!rel_455_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_455_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_455_Var_DeclaringMethod_op_ctxt,rel_455_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_375_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :-     _Var_DeclaringMethod(?var,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [363:1-366:39];Var_DeclaringMethod(?var,?method) :- \n   _Var_DeclaringMethod(?var,?method).;)" <<  rel_375_Var_DeclaringMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_DeclaringMethod(cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_485_isMethod->empty()&&!rel_486_isMethodInvocation->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt,rel_486_isMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({116});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,116,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,3> key({2,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_486_isMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_486_isMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({18});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env1[0])) + std::string(symTable.resolve((size_t)115))).c_str())),(RamDomain)(env1[2])});
if (!(rel_375_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_DeclaringMethod(cat(?invocation,'/@tmp-arraycopy'),?inmethod) :-     isMethod('<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>',?inmethod),    _ActualParam(0,?invocation,?src),    _ActualParam(2,?invocation,?dest),    isMethodInvocation(?invocation),    isType('java.lang.Object').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1747:1-1757:21];Var_DeclaringMethod(cat(?invocation,\"/@tmp-arraycopy\"),?inmethod) :- \n   isMethod(\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>\",?inmethod),\n   _ActualParam(0,?invocation,?src),\n   _ActualParam(2,?invocation,?dest),\n   isMethodInvocation(?invocation),\n   isType(\"java.lang.Object\").;)" <<  rel_375_Var_DeclaringMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_DeclaringMethod(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)",profile);
if (!rel_242_ReturnVar->empty()&&!rel_474_isHeapAllocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({128});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,128});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({0});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({26});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)128)) + std::string(symTable.resolve((size_t)129))).c_str())),(RamDomain)(128)});
if (!(rel_375_Var_DeclaringMethod->insert(tuple,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_DeclaringMethod(cat('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>','/@native-array-element'),'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>') :-     isMethod('<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    ReturnVar(?base,'<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>'),    isType('java.lang.String'),    isHeapAllocation('java.io.UnixFileSystem.list/new java.lang.String').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1782:391-1782:1499];Var_DeclaringMethod(cat(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\",\"/@native-array-element\"),\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\") :- \n   isMethod(\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   ReturnVar(?base,\"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>\"),\n   isType(\"java.lang.String\"),\n   isHeapAllocation(\"java.io.UnixFileSystem.list/new java.lang.String\").;)" <<  rel_375_Var_DeclaringMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Var_DeclaringMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [65:1-65:52];)" <<  rel_375_Var_DeclaringMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ApplicationVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [66:1-66:31];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ApplicationVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [965:1-967:30];ApplicationVar(?var) :- \n   Var_DeclaringMethod(?var,?method),\n   ApplicationMethod(?method).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_375_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_375_Var_DeclaringMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_18_ApplicationVar_op_ctxt,rel_18_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_11_ApplicationMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_18_ApplicationVar->insert(tuple,READ_OP_CONTEXT(rel_18_ApplicationVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ApplicationVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [965:1-967:30];ApplicationVar(?var) :-     Var_DeclaringMethod(?var,?method),    ApplicationMethod(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ApplicationVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [965:1-967:30];ApplicationVar(?var) :- \n   Var_DeclaringMethod(?var,?method),\n   ApplicationMethod(?method).;)" <<  rel_18_ApplicationVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ApplicationVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [66:1-66:31];)" <<  rel_18_ApplicationVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1045:1-1045:62];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1046:1-1046:52];_Tamiflex_ToDoopFormat(\"Class\",\"java.lang.Class\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(45,1);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1046:1-1046:52];_Tamiflex_ToDoopFormat(\"Class\",\"java.lang.Class\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1047:1-1047:72];_Tamiflex_ToDoopFormat(\"Constructor\",\"java.lang.reflect.Constructor\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(46,47);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1047:1-1047:72];_Tamiflex_ToDoopFormat(\"Constructor\",\"java.lang.reflect.Constructor\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1048:1-1048:60];_Tamiflex_ToDoopFormat(\"Field\",\"java.lang.reflect.Field\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(48,49);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1048:1-1048:60];_Tamiflex_ToDoopFormat(\"Field\",\"java.lang.reflect.Field\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1049:1-1049:62];_Tamiflex_ToDoopFormat(\"Method\",\"java.lang.reflect.Method\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(50,51);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1049:1-1049:62];_Tamiflex_ToDoopFormat(\"Method\",\"java.lang.reflect.Method\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1050:1-1050:60];_Tamiflex_ToDoopFormat(\"Array\",\"java.lang.reflect.Array\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(52,53);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1050:1-1050:60];_Tamiflex_ToDoopFormat(\"Array\",\"java.lang.reflect.Array\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1051:1-1051:39];_Tamiflex_ToDoopFormat(\"get*\",\"get\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(54,55);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1051:1-1051:39];_Tamiflex_ToDoopFormat(\"get*\",\"get\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1052:1-1052:39];_Tamiflex_ToDoopFormat(\"set*\",\"set\").;)",profile);
rel_450_Tamiflex_ToDoopFormat->insert(56,57);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1052:1-1052:39];_Tamiflex_ToDoopFormat(\"set*\",\"set\").;)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;_Tamiflex_ToDoopFormat;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1045:1-1045:62];)" <<  rel_450_Tamiflex_ToDoopFormat->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1042:1-1043:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr),\n   _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;)",profile);
if (!rel_449_Tamiflex_ReflectionData->empty()&&!rel_450_Tamiflex_ToDoopFormat->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_449_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt,rel_339_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_449_Tamiflex_ReflectionData_op_ctxt,rel_449_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_450_Tamiflex_ToDoopFormat_op_ctxt,rel_450_Tamiflex_ToDoopFormat->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_450_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_450_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_450_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_450_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,6> tuple({(RamDomain)(env1[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3]),(RamDomain)(env0[4]),(RamDomain)(env0[5])});
if (!(rel_339_Tamiflex_ReflectionData->insert(tuple,READ_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :-     _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),    _Tamiflex_ToDoopFormat(?classStr0,?classStr),    _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr0,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr),\n   _Tamiflex_ToDoopFormat(?methodStr0,?methodStr).;)" <<  rel_339_Tamiflex_ReflectionData->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr).;)",profile);
if (!rel_449_Tamiflex_ReflectionData->empty()&&!rel_450_Tamiflex_ToDoopFormat->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_449_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt,rel_339_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_449_Tamiflex_ReflectionData_op_ctxt,rel_449_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_450_Tamiflex_ToDoopFormat_op_ctxt,rel_450_Tamiflex_ToDoopFormat->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_450_Tamiflex_ToDoopFormat->equalRange<0>(key,READ_OP_CONTEXT(rel_450_Tamiflex_ToDoopFormat_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,6> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[3]),(RamDomain)(env0[4]),(RamDomain)(env0[5])});
if (!(rel_339_Tamiflex_ReflectionData->insert(tuple,READ_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :-     _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),    _Tamiflex_ToDoopFormat(?classStr0,?classStr).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1056:1-1060:30];Tamiflex_ReflectionData(?classStr,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber) :- \n   _Tamiflex_ReflectionData(?classStr0,?methodStr,?mapped,?inClassStr,?inMethodStr,?lineNumber),\n   _Tamiflex_ToDoopFormat(?classStr0,?classStr).;)" <<  rel_339_Tamiflex_ReflectionData->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReflectionData;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1042:1-1043:71];)" <<  rel_339_Tamiflex_ReflectionData->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1044:1-1044:75];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   _MethodInvocation_Line(?invocation,?line),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod),\n   ?line > 0.;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_339_Tamiflex_ReflectionData->empty()&&!rel_433_MethodInvocation_Line->empty()&&!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_339_Tamiflex_ReflectionData->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt,rel_339_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_433_MethodInvocation_Line_op_ctxt,rel_433_MethodInvocation_Line->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((env0[5]) > (0))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_464_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],env0[0]});
auto range = rel_153_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_464_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[4]});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env0[3]});
auto range = rel_153_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[5]});
auto range = rel_433_MethodInvocation_Line->equalRange<1>(key,READ_OP_CONTEXT(rel_433_MethodInvocation_Line_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env7 : range) {
const Tuple<RamDomain,2> key({env7[0],env2[0]});
auto range = rel_149_MethodInvocation_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env7[0],env5[0]});
auto range = rel_109_Instruction_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env7[0])});
if (!(rel_340_Tamiflex_ReflectionMap->insert(tuple,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :-     Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),    isClassType(?class),    Method_SimpleName(?method,?methodStr),    Method_DeclaringType(?method,?class),    isClassType(?inClass),    Method_SimpleName(?inMethod,?inMethodStr),    Method_DeclaringType(?inMethod,?inClass),    _MethodInvocation_Line(?invocation,?line),    MethodInvocation_Method(?invocation,?method),    Instruction_Method(?invocation,?inMethod),    ?line > 0.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,?line),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   _MethodInvocation_Line(?invocation,?line),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod),\n   ?line > 0.;)" <<  rel_340_Tamiflex_ReflectionMap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_339_Tamiflex_ReflectionData->empty()&&!rel_464_isClassType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt,rel_339_Tamiflex_ReflectionData->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_464_isClassType_op_ctxt,rel_464_isClassType->createContext());
const Tuple<RamDomain,6> key({0,0,0,0,0,0});
auto range = rel_339_Tamiflex_ReflectionData->equalRange<5>(key,READ_OP_CONTEXT(rel_339_Tamiflex_ReflectionData_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_464_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],env0[0]});
auto range = rel_153_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_464_isClassType->equalRange<0>(key,READ_OP_CONTEXT(rel_464_isClassType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[4]});
auto range = rel_156_Method_SimpleName->equalRange<1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env0[3]});
auto range = rel_153_Method_DeclaringType->equalRange<0,1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env7 : range) {
const Tuple<RamDomain,2> key({env7[0],env5[0]});
auto range = rel_109_Instruction_Method->equalRange<0,1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env7[0])});
if (!(rel_340_Tamiflex_ReflectionMap->insert(tuple,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :-     Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),    isClassType(?class),    Method_SimpleName(?method,?methodStr),    Method_DeclaringType(?method,?class),    isClassType(?inClass),    Method_SimpleName(?inMethod,?inMethodStr),    Method_DeclaringType(?inMethod,?inClass),    MethodInvocation_Method(?invocation,?method),    Instruction_Method(?invocation,?inMethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1061:1-1075:47];Tamiflex_ReflectionMap(?mapped,?invocation) :- \n   Tamiflex_ReflectionData(?class,?methodStr,?mapped,?inClass,?inMethodStr,0),\n   isClassType(?class),\n   Method_SimpleName(?method,?methodStr),\n   Method_DeclaringType(?method,?class),\n   isClassType(?inClass),\n   Method_SimpleName(?inMethod,?inMethodStr),\n   Method_DeclaringType(?inMethod,?inClass),\n   MethodInvocation_Method(?invocation,?method),\n   Instruction_Method(?invocation,?inMethod).;)" <<  rel_340_Tamiflex_ReflectionMap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReflectionMap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1044:1-1044:75];)" <<  rel_340_Tamiflex_ReflectionMap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2637:1-2637:104];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_335_Tamiflex_Constructor_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Tamiflex_Constructor_NewInstance(?invocation,?constructor,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_335_Tamiflex_Constructor_NewInstance->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_Constructor_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2637:1-2637:104];)" <<  rel_335_Tamiflex_Constructor_NewInstance->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2638:1-2638:77];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_333_Tamiflex_Array_NewInstance_op_ctxt,rel_333_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_333_Tamiflex_Array_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_333_Tamiflex_Array_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Tamiflex_Array_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_333_Tamiflex_Array_NewInstance->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_Array_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2638:1-2638:77];)" <<  rel_333_Tamiflex_Array_NewInstance->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2636:1-2636:77];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_334_Tamiflex_Class_NewInstance_op_ctxt,rel_334_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_334_Tamiflex_Class_NewInstance->insert(tuple,READ_OP_CONTEXT(rel_334_Tamiflex_Class_NewInstance_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Tamiflex_Class_NewInstance(?invocation,cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_334_Tamiflex_Class_NewInstance->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_Class_NewInstance;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2636:1-2636:77];)" <<  rel_334_Tamiflex_Class_NewInstance->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2641:1-2641:89];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt,rel_342_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(env1[0])});
if (!(rel_342_Tamiflex_ReifiedFieldArray->insert(tuple,READ_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat('<(Tamiflex) ',?type),'/Field[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_342_Tamiflex_ReifiedFieldArray->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt,rel_342_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(env1[0])});
if (!(rel_342_Tamiflex_ReifiedFieldArray->insert(tuple,READ_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat('<(Tamiflex) ',?type),'/Field[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Tamiflex_ReifiedFieldArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_342_Tamiflex_ReifiedFieldArray->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedFieldArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2641:1-2641:89];)" <<  rel_342_Tamiflex_ReifiedFieldArray->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2642:1-2642:89];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt,rel_343_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_343_Tamiflex_ReifiedMethod->insert(tuple,READ_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat('<(Tamiflex) ',?method),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_343_Tamiflex_ReifiedMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt,rel_343_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_343_Tamiflex_ReifiedMethod->insert(tuple,READ_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat('<(Tamiflex) ',?method),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Tamiflex_ReifiedMethod(?method,cat(cat(\"<(Tamiflex) \",?method),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_343_Tamiflex_ReifiedMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2642:1-2642:89];)" <<  rel_343_Tamiflex_ReifiedMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2643:1-2643:90];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt,rel_344_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(env1[0])});
if (!(rel_344_Tamiflex_ReifiedMethodArray->insert(tuple,READ_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat('<(Tamiflex) ',?type),'/Method[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_344_Tamiflex_ReifiedMethodArray->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt,rel_344_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(env1[0])});
if (!(rel_344_Tamiflex_ReifiedMethodArray->insert(tuple,READ_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat('<(Tamiflex) ',?type),'/Method[]>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Tamiflex_ReifiedMethodArray(?type,cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_344_Tamiflex_ReifiedMethodArray->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedMethodArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2643:1-2643:90];)" <<  rel_344_Tamiflex_ReifiedMethodArray->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1298:1-1298:50];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_34_AssignNumConstant_Id->empty()&&!rel_109_Instruction_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_363_Type_int->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_34_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_156_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env0[0])});
if (!(rel_367_Value_Num->insert(tuple,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Num(cat('num-constant-',?const),?const) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_367_Value_Num->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_73_Field_DeclaringType->empty()&&!rel_363_Type_int->empty()&&!rel_420_FieldInitialValue->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt,rel_420_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_420_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_73_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env0[0])});
if (!(rel_367_Value_Num->insert(tuple,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Num(cat('num-constant-',?const),?const) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Num(cat(\"num-constant-\",?const),?const) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_367_Value_Num->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Value_Num;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1298:1-1298:50];)" <<  rel_367_Value_Num->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [42:1-42:28];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [322:1-325:38];isField(?field) :- \n   _Field_Modifier(?modifier,?field).;)",profile);
if (!rel_421_Field_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_421_Field_Modifier->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt,rel_421_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_470_isField->insert(tuple,READ_OP_CONTEXT(rel_470_isField_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [322:1-325:38];isField(?field) :-     _Field_Modifier(?modifier,?field).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [322:1-325:38];isField(?field) :- \n   _Field_Modifier(?modifier,?field).;)" <<  rel_470_isField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];isField(?signature) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)",profile);
if (!rel_419_Field->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_419_Field->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_419_Field_op_ctxt,rel_419_Field->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_470_isField->insert(tuple,READ_OP_CONTEXT(rel_470_isField_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];isField(?signature) :-     _Field(?signature,?declaringType,?simplename,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [558:1-562:58];isField(?signature) :- \n   _Field(?signature,?declaringType,?simplename,?type).;)" <<  rel_470_isField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [42:1-42:28];)" <<  rel_470_isField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1301:1-1301:43];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_Type(cat(\"<android component object \",cat(?type,\">\")),?type) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())),(RamDomain)(env0[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_Type(cat('<android component object ',cat(?type,'>')),?type) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_Type(cat(\"<android component object \",cat(?type,\">\")),?type) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_Type(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\")))),?type) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str())),(RamDomain)(env0[1])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_Type(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>')))),?type) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_Type(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\")))),?type) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_Type(cat(\"<android library object \",cat(?type,\">\")),?type) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_101_ImplicitlyInstantiatedLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_101_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())),(RamDomain)(env0[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_Type(cat('<android library object ',cat(?type,'>')),?type) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_Type(cat(\"<android library object \",cat(?type,\">\")),?type) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_Type(?heapValue,?type) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_474_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_Type(?heapValue,?type) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];Value_Type(?heapValue,?type) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_34_AssignNumConstant_Id->empty()&&!rel_109_Instruction_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_363_Type_int->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_34_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_156_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env6[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Type(cat('num-constant-',?const),?type) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_73_Field_DeclaringType->empty()&&!rel_363_Type_int->empty()&&!rel_420_FieldInitialValue->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt,rel_420_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_420_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_73_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_363_Type_int) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str())),(RamDomain)(env4[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Type(cat('num-constant-',?const),?type) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];Value_Type(cat(\"num-constant-\",?const),?type) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_Type(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_167_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_167_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((rel_138_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt)).empty()) && (rel_5_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str())),(RamDomain)(env0[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_Type(cat(?class,'::: (Mock)'),?class) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_Type(cat(?class,\"::: (Mock)\"),?class) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env2[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env5[1])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env2[0])});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_Type(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>'),?type) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_Type(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\"),?type) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(49)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat('<(Tamiflex) ',?fld),'>'),'java.lang.reflect.Field') :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(49)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat('<(Tamiflex) ',?fld),'>'),'java.lang.reflect.Field') :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_Type(cat(cat(\"<(Tamiflex) \",?fld),\">\"),\"java.lang.reflect.Field\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(165)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Field[]>'),'java.lang.reflect.Field[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str())),(RamDomain)(165)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Field[]>'),'java.lang.reflect.Field[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\"),\"java.lang.reflect.Field[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(51)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat('<(Tamiflex) ',?method),'>'),'java.lang.reflect.Method') :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(51)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat('<(Tamiflex) ',?method),'>'),'java.lang.reflect.Method') :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_Type(cat(cat(\"<(Tamiflex) \",?method),\">\"),\"java.lang.reflect.Method\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(171)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Method[]>'),'java.lang.reflect.Method[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str())),(RamDomain)(171)});
if (!(rel_368_Value_Type->insert(tuple,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat('<(Tamiflex) ',?type),'/Method[]>'),'java.lang.reflect.Method[]') :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_Type(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\"),\"java.lang.reflect.Method[]\") :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_368_Value_Type->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Value_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1301:1-1301:43];)" <<  rel_368_Value_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1295:1-1295:28];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];isValue(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];isValue(cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];isValue(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];isValue(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];isValue(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];isValue(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];isValue(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_101_ImplicitlyInstantiatedLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_101_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];isValue(cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];isValue(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];isValue(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)",profile);
if (!rel_87_HeapAllocation_Type->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_474_isHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];isValue(?heapValue) :-     isHeapAllocation(?heapValue),    HeapAllocation_Type(?heapValue,?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2188:1-2192:42];isValue(?heapValue) :- \n   isHeapAllocation(?heapValue),\n   HeapAllocation_Type(?heapValue,?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_34_AssignNumConstant_Id->empty()&&!rel_109_Instruction_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_363_Type_int->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_34_AssignNumConstant_Id->equalRange<1>(key,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],89});
auto range = rel_156_Method_SimpleName->equalRange<0,1>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( (std::string(symTable.resolve((size_t)env4[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env4[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env6 : *rel_363_Type_int) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];isValue(cat('num-constant-',?const)) :-     isNumConstant(?const),    AssignNumConstant_Id(?insn,?const),    Instruction_Method(?insn,?meth),    Method_SimpleName(?meth,'<clinit>'),    Method_DeclaringType(?meth,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2193:1-2203:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   AssignNumConstant_Id(?insn,?const),\n   Instruction_Method(?insn,?meth),\n   Method_SimpleName(?meth,\"<clinit>\"),\n   Method_DeclaringType(?meth,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)",profile);
if (!rel_73_Field_DeclaringType->empty()&&!rel_363_Type_int->empty()&&!rel_420_FieldInitialValue->empty()&&!rel_487_isNumConstant->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_487_isNumConstant->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_363_Type_int_op_ctxt,rel_363_Type_int->createContext());
CREATE_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt,rel_420_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_487_isNumConstant_op_ctxt,rel_487_isNumConstant->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_420_FieldInitialValue->equalRange<1>(key,READ_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_73_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( (std::string(symTable.resolve((size_t)env2[1])).find(symTable.resolve((size_t)149))!=std::string::npos)) {
const Tuple<RamDomain,1> key({env2[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
for(const auto& env4 : *rel_363_Type_int) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)148)) + std::string(symTable.resolve((size_t)env0[0]))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];isValue(cat('num-constant-',?const)) :-     isNumConstant(?const),    _FieldInitialValue(?fld,?const),    Field_DeclaringType(?fld,?className),    isType(?className),    Type_int(?type),    '.R$' contains ?className.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2204:1-2212:19];isValue(cat(\"num-constant-\",?const)) :- \n   isNumConstant(?const),\n   _FieldInitialValue(?fld,?const),\n   Field_DeclaringType(?fld,?className),\n   isType(?className),\n   Type_int(?type),\n   \".R$\" contains ?className.;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];isValue(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_167_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_167_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((rel_138_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt)).empty()) && (rel_5_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];isValue(cat(?class,'::: (Mock)')) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];isValue(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];isValue(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];isValue(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];isValue(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];isValue(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_498_isValue->insert(tuple,READ_OP_CONTEXT(rel_498_isValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];isValue(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_498_isValue->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1295:1-1295:28];)" <<  rel_498_isValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2450:1-2450:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2454:1-2457:25];ObjectShouldNotBeRefined(?heap) :- \n   isValue(?heap).;)",profile);
if (!rel_498_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_498_isValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt,rel_171_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_171_ObjectShouldNotBeRefined->insert(tuple,READ_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2454:1-2457:25];ObjectShouldNotBeRefined(?heap) :-     isValue(?heap).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2454:1-2457:25];ObjectShouldNotBeRefined(?heap) :- \n   isValue(?heap).;)" <<  rel_171_ObjectShouldNotBeRefined->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ObjectShouldNotBeRefined;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2450:1-2450:53];)" <<  rel_171_ObjectShouldNotBeRefined->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [249:1-249:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :- \n   isLoadStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadStaticField_To(?insn,?to).;)",profile);
if (!rel_72_FieldInstruction_Signature->empty()&&!rel_109_Instruction_Method->empty()&&!rel_134_LoadStaticField_To->empty()&&!rel_484_isLoadStaticField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_484_isLoadStaticField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt,rel_133_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_134_LoadStaticField_To_op_ctxt,rel_134_LoadStaticField_To->createContext());
CREATE_OP_CONTEXT(rel_484_isLoadStaticField_Insn_op_ctxt,rel_484_isLoadStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_72_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_134_LoadStaticField_To->equalRange<0>(key,READ_OP_CONTEXT(rel_134_LoadStaticField_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_133_LoadStaticField->insert(tuple,READ_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :-     isLoadStaticField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    FieldInstruction_Signature(?insn,?sig),    LoadStaticField_To(?insn,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [896:1-900:34];LoadStaticField(?sig,?to,?inmethod) :- \n   isLoadStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadStaticField_To(?insn,?to).;)" <<  rel_133_LoadStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2665:1-2672:39];LoadStaticField(?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   AssignReturnValue(?invocation,?to).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_421_Field_Modifier->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt,rel_133_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt,rel_421_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({154});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,154,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env2[0]});
auto range = rel_421_Field_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env5[1]),(RamDomain)(env1[2])});
if (!(rel_133_LoadStaticField->insert(tuple,READ_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2665:1-2672:39];LoadStaticField(?fld,?to,?inmethod) :-     isMethod('<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _Field_Modifier('static',?fld),    AssignReturnValue(?invocation,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2665:1-2672:39];LoadStaticField(?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   AssignReturnValue(?invocation,?to).;)" <<  rel_133_LoadStaticField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [249:1-249:61];)" <<  rel_133_LoadStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [250:1-250:70];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :- \n   isStoreStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreStaticField_From(?insn,?from),\n   FieldInstruction_Signature(?insn,?sig).;)",profile);
if (!rel_72_FieldInstruction_Signature->empty()&&!rel_109_Instruction_Method->empty()&&!rel_307_StoreStaticField_From->empty()&&!rel_494_isStoreStaticField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_494_isStoreStaticField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_307_StoreStaticField_From_op_ctxt,rel_307_StoreStaticField_From->createContext());
CREATE_OP_CONTEXT(rel_494_isStoreStaticField_Insn_op_ctxt,rel_494_isStoreStaticField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_307_StoreStaticField_From->equalRange<0>(key,READ_OP_CONTEXT(rel_307_StoreStaticField_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_72_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env1[1])});
if (!(rel_306_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :-     isStoreStaticField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreStaticField_From(?insn,?from),    FieldInstruction_Signature(?insn,?sig).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [901:1-905:43];StoreStaticField(?from,?sig,?inmethod) :- \n   isStoreStaticField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreStaticField_From(?insn,?from),\n   FieldInstruction_Signature(?insn,?sig).;)" <<  rel_306_StoreStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1744:1-1744:320];StoreStaticField(\"java.lang.System.setIn0/@param0\",\"<java.lang.System: java.io.InputStream in>\",\"<java.lang.System: void setIn0(java.io.InputStream)>\") :- \n   isMethod(\"<java.lang.System: void setIn0(java.io.InputStream)>\"),\n   isVar(\"java.lang.System.setIn0/@param0\"),\n   isField(\"<java.lang.System: java.io.InputStream in>\").;)",profile);
if (!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_499_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({108});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({106});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({107});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(106),(RamDomain)(107),(RamDomain)(108)});
if (!(rel_306_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1744:1-1744:320];StoreStaticField('java.lang.System.setIn0/@param0','<java.lang.System: java.io.InputStream in>','<java.lang.System: void setIn0(java.io.InputStream)>') :-     isMethod('<java.lang.System: void setIn0(java.io.InputStream)>'),    isVar('java.lang.System.setIn0/@param0'),    isField('<java.lang.System: java.io.InputStream in>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1744:1-1744:320];StoreStaticField(\"java.lang.System.setIn0/@param0\",\"<java.lang.System: java.io.InputStream in>\",\"<java.lang.System: void setIn0(java.io.InputStream)>\") :- \n   isMethod(\"<java.lang.System: void setIn0(java.io.InputStream)>\"),\n   isVar(\"java.lang.System.setIn0/@param0\"),\n   isField(\"<java.lang.System: java.io.InputStream in>\").;)" <<  rel_306_StoreStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1745:1-1745:326];StoreStaticField(\"java.lang.System.setOut0/@param0\",\"<java.lang.System: java.io.PrintStream out>\",\"<java.lang.System: void setOut0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setOut0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setOut0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream out>\").;)",profile);
if (!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_499_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({111});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({109});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({110});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(109),(RamDomain)(110),(RamDomain)(111)});
if (!(rel_306_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1745:1-1745:326];StoreStaticField('java.lang.System.setOut0/@param0','<java.lang.System: java.io.PrintStream out>','<java.lang.System: void setOut0(java.io.PrintStream)>') :-     isMethod('<java.lang.System: void setOut0(java.io.PrintStream)>'),    isVar('java.lang.System.setOut0/@param0'),    isField('<java.lang.System: java.io.PrintStream out>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1745:1-1745:326];StoreStaticField(\"java.lang.System.setOut0/@param0\",\"<java.lang.System: java.io.PrintStream out>\",\"<java.lang.System: void setOut0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setOut0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setOut0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream out>\").;)" <<  rel_306_StoreStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1746:1-1746:326];StoreStaticField(\"java.lang.System.setErr0/@param0\",\"<java.lang.System: java.io.PrintStream err>\",\"<java.lang.System: void setErr0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setErr0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setErr0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream err>\").;)",profile);
if (!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_499_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({114});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({112});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({113});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(112),(RamDomain)(113),(RamDomain)(114)});
if (!(rel_306_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1746:1-1746:326];StoreStaticField('java.lang.System.setErr0/@param0','<java.lang.System: java.io.PrintStream err>','<java.lang.System: void setErr0(java.io.PrintStream)>') :-     isMethod('<java.lang.System: void setErr0(java.io.PrintStream)>'),    isVar('java.lang.System.setErr0/@param0'),    isField('<java.lang.System: java.io.PrintStream err>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1746:1-1746:326];StoreStaticField(\"java.lang.System.setErr0/@param0\",\"<java.lang.System: java.io.PrintStream err>\",\"<java.lang.System: void setErr0(java.io.PrintStream)>\") :- \n   isMethod(\"<java.lang.System: void setErr0(java.io.PrintStream)>\"),\n   isVar(\"java.lang.System.setErr0/@param0\"),\n   isField(\"<java.lang.System: java.io.PrintStream err>\").;)" <<  rel_306_StoreStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2682:1-2689:38];StoreStaticField(?from,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   _ActualParam(1,?invocation,?from).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_421_Field_Modifier->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt,rel_421_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({155});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,155,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({7,env2[0]});
auto range = rel_421_Field_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({1,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[2]),(RamDomain)(env2[0]),(RamDomain)(env1[2])});
if (!(rel_306_StoreStaticField->insert(tuple,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2682:1-2689:38];StoreStaticField(?from,?fld,?inmethod) :-     isMethod('<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _Field_Modifier('static',?fld),    _ActualParam(1,?invocation,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2682:1-2689:38];StoreStaticField(?from,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _Field_Modifier(\"static\",?fld),\n   _ActualParam(1,?invocation,?from).;)" <<  rel_306_StoreStaticField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreStaticField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [250:1-250:70];)" <<  rel_306_StoreStaticField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1297:1-1297:33];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_isMock(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)",profile);
if (!rel_5_AndroidAppComponent->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_5_AndroidAppComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)73)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_isMock(cat('<android component object ',cat(?type,'>'))) :-     AndroidAppComponent(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1404:1-1407:17];Value_isMock(cat(\"<android component object \",cat(?type,\">\"))) :- \n   AndroidAppComponent(?type),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_isMock(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)",profile);
if (!rel_116_LayoutControl->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_116_LayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_116_LayoutControl_op_ctxt,rel_116_LayoutControl->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)75)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)76)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[1])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str())))).c_str())))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_isMock(cat('<layout control object ',cat(?id,cat(' of type ',cat(?type,'>'))))) :-     LayoutControl(?id,?type,_),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1408:1-1411:17];Value_isMock(cat(\"<layout control object \",cat(?id,cat(\" of type \",cat(?type,\">\"))))) :- \n   LayoutControl(?id,?type,_),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_isMock(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)",profile);
if (!rel_101_ImplicitlyInstantiatedLibraryType->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_101_ImplicitlyInstantiatedLibraryType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_101_ImplicitlyInstantiatedLibraryType_op_ctxt,rel_101_ImplicitlyInstantiatedLibraryType->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)79)) + std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)74))).c_str())))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_isMock(cat('<android library object ',cat(?type,'>'))) :-     ImplicitlyInstantiatedLibraryType(?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1416:1-1419:17];Value_isMock(cat(\"<android library object \",cat(?type,\">\"))) :- \n   ImplicitlyInstantiatedLibraryType(?type),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_isMock(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)",profile);
if (!rel_167_ObjToMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_167_ObjToMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt,rel_5_AndroidAppComponent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_167_ObjToMock_op_ctxt,rel_167_ObjToMock->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((rel_138_MainMethodDeclaration->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt)).empty()) && (rel_5_AndroidAppComponent->equalRange<>(Tuple<RamDomain,1>({0}),READ_OP_CONTEXT(rel_5_AndroidAppComponent_op_ctxt)).empty()))) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)env0[0])) + std::string(symTable.resolve((size_t)151))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_isMock(cat(?class,'::: (Mock)')) :-     ObjToMock(?class),    !MainMethodDeclaration(_),    !AndroidAppComponent(_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2617:1-2622:21];Value_isMock(cat(?class,\"::: (Mock)\")) :- \n   ObjToMock(?class),\n   !MainMethodDeclaration(_),\n   !AndroidAppComponent(_).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({157});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,157,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.Class: java.lang.Object newInstance()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.Object newInstance()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2702:1-2709:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.Object newInstance()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.Object newInstance()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({158});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,158,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env5[1]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env5[1]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>',_),    Tamiflex_ReflectionMap(?constructor,?invocation),    isInstruction(?invocation),    isMethod(?constructor),    Method_DeclaringType(?constructor,?type),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2710:1-2719:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?constructor,?invocation),\n   isInstruction(?invocation),\n   isMethod(?constructor),\n   Method_DeclaringType(?constructor,?type),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)",profile);
if (!rel_256_StaticMethodInvocation->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_478_isInstruction->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_478_isInstruction_op_ctxt,rel_478_isInstruction->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({159});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,159,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_478_isInstruction->equalRange<0>(key,READ_OP_CONTEXT(rel_478_isInstruction_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env1[0]))).c_str()))) + std::string(symTable.resolve((size_t)71))).c_str()))) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_isMock(cat(cat(cat(cat('<(Tamiflex) ',?invocation),'/'),?type),'>')) :-     isMethod('<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>'),    StaticMethodInvocation(?invocation,'<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isInstruction(?invocation),    isType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2720:1-2727:17];Value_isMock(cat(cat(cat(cat(\"<(Tamiflex) \",?invocation),\"/\"),?type),\">\")) :- \n   isMethod(\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\"),\n   StaticMethodInvocation(?invocation,\"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isInstruction(?invocation),\n   isType(?type).;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat('<(Tamiflex) ',?fld),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?fld),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({163});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,163,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({164});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,164,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({165});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)162))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Field[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Field[] getFields()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field[] getFields()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Field[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2738:1-2747:31];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Field[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field[] getFields()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Field[]\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({166});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,166,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({167});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,167,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({51});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat('<(Tamiflex) ',?method),'>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>',_),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    isType('java.lang.reflect.Method').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2748:1-2757:17];Value_isMock(cat(cat(\"<(Tamiflex) \",?method),\">\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   isType(\"java.lang.reflect.Method\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({169});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,169,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({170});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,170,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({171});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)168))).c_str()))});
if (!(rel_370_Value_isMock->insert(tuple,READ_OP_CONTEXT(rel_370_Value_isMock_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat('<(Tamiflex) ',?type),'/Method[]>')) :-     isMethod('<java.lang.Class: java.lang.reflect.Method[] getMethods()>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Method[] getMethods()>',_),    Tamiflex_ReflectionMap(?type,?invocation),    isType(?type),    isType('java.lang.reflect.Method[]').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2758:1-2767:32];Value_isMock(cat(cat(\"<(Tamiflex) \",?type),\"/Method[]>\")) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Method[] getMethods()>\",_),\n   Tamiflex_ReflectionMap(?type,?invocation),\n   isType(?type),\n   isType(\"java.lang.reflect.Method[]\").;)" <<  rel_370_Value_isMock->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Value_isMock;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1297:1-1297:33];)" <<  rel_370_Value_isMock->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1299:1-1299:36];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :- \n   Value_isMock(?value).;)",profile);
if (!rel_370_Value_isMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_370_Value_isMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
CREATE_OP_CONTEXT(rel_371_Value_isNonHeap_op_ctxt,rel_371_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_371_Value_isNonHeap->insert(tuple,READ_OP_CONTEXT(rel_371_Value_isNonHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :-     Value_isMock(?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :- \n   Value_isMock(?value).;)" <<  rel_371_Value_isNonHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :- \n   Value_Num(?value,_).;)",profile);
if (!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_367_Value_Num->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_371_Value_isNonHeap_op_ctxt,rel_371_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_371_Value_isNonHeap->insert(tuple,READ_OP_CONTEXT(rel_371_Value_isNonHeap_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :-     Value_Num(?value,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2213:1-2215:24];Value_isNonHeap(?value) :- \n   Value_Num(?value,_).;)" <<  rel_371_Value_isNonHeap->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Value_isNonHeap;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1299:1-1299:36];)" <<  rel_371_Value_isNonHeap->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2363:1-2363:39];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2364:1-2366:42];NotEmptyArrayValue(?heapValue) :- \n   Value_isHeap(?heapValue),\n   !_EmptyArray(?heapValue).;)",profile);
if (!rel_369_Value_isHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_369_Value_isHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt,rel_164_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_369_Value_isHeap_op_ctxt,rel_369_Value_isHeap->createContext());
CREATE_OP_CONTEXT(rel_414_EmptyArray_op_ctxt,rel_414_EmptyArray->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_414_EmptyArray->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_414_EmptyArray_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_164_NotEmptyArrayValue->insert(tuple,READ_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2364:1-2366:42];NotEmptyArrayValue(?heapValue) :-     Value_isHeap(?heapValue),    !_EmptyArray(?heapValue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2364:1-2366:42];NotEmptyArrayValue(?heapValue) :- \n   Value_isHeap(?heapValue),\n   !_EmptyArray(?heapValue).;)" <<  rel_164_NotEmptyArrayValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2367:1-2368:27];NotEmptyArrayValue(?value) :- \n   Value_isNonHeap(?value).;)",profile);
if (!rel_371_Value_isNonHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_371_Value_isNonHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt,rel_164_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_371_Value_isNonHeap_op_ctxt,rel_371_Value_isNonHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_164_NotEmptyArrayValue->insert(tuple,READ_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2367:1-2368:27];NotEmptyArrayValue(?value) :-     Value_isNonHeap(?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2367:1-2368:27];NotEmptyArrayValue(?value) :- \n   Value_isNonHeap(?value).;)" <<  rel_164_NotEmptyArrayValue->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;NotEmptyArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2363:1-2363:39];)" <<  rel_164_NotEmptyArrayValue->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1300:1-1300:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_isHeap(?value).;)",profile);
if (!rel_369_Value_isHeap->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_369_Value_isHeap->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_369_Value_isHeap_op_ctxt,rel_369_Value_isHeap->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_166_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :-     Value_isHeap(?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_isHeap(?value).;)" <<  rel_166_NotSpecialObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_isMock(?value).;)",profile);
if (!rel_370_Value_isMock->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_370_Value_isMock->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_370_Value_isMock_op_ctxt,rel_370_Value_isMock->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_166_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :-     Value_isMock(?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_isMock(?value).;)" <<  rel_166_NotSpecialObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_Num(?value,_).;)",profile);
if (!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_367_Value_Num->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_166_NotSpecialObject->insert(tuple,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :-     Value_Num(?value,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2234:1-2237:24];NotSpecialObject(?value) :- \n   Value_Num(?value,_).;)" <<  rel_166_NotSpecialObject->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;NotSpecialObject;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1300:1-1300:37];)" <<  rel_166_NotSpecialObject->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [248:1-248:83];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :- \n   isStoreInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreInstanceField_From(?insn,?from),\n   StoreInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig).;)",profile);
if (!rel_72_FieldInstruction_Signature->empty()&&!rel_109_Instruction_Method->empty()&&!rel_304_StoreInstanceField_Base->empty()&&!rel_305_StoreInstanceField_From->empty()&&!rel_493_isStoreInstanceField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_493_isStoreInstanceField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_303_StoreInstanceField_op_ctxt,rel_303_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_304_StoreInstanceField_Base_op_ctxt,rel_304_StoreInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_305_StoreInstanceField_From_op_ctxt,rel_305_StoreInstanceField_From->createContext());
CREATE_OP_CONTEXT(rel_493_isStoreInstanceField_Insn_op_ctxt,rel_493_isStoreInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_305_StoreInstanceField_From->equalRange<0>(key,READ_OP_CONTEXT(rel_305_StoreInstanceField_From_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_304_StoreInstanceField_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_304_StoreInstanceField_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_72_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env4[1]),(RamDomain)(env1[1])});
if (!(rel_303_StoreInstanceField->insert(tuple,READ_OP_CONTEXT(rel_303_StoreInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :-     isStoreInstanceField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    StoreInstanceField_From(?insn,?from),    StoreInstanceField_Base(?insn,?base),    FieldInstruction_Signature(?insn,?sig).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [890:1-895:43];StoreInstanceField(?from,?base,?sig,?inmethod) :- \n   isStoreInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   StoreInstanceField_From(?insn,?from),\n   StoreInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig).;)" <<  rel_303_StoreInstanceField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2673:1-2681:38];StoreInstanceField(?from,?base,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(1,?invocation,?from),\n   !_Field_Modifier(\"static\",?fld).;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_303_StoreInstanceField_op_ctxt,rel_303_StoreInstanceField->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt,rel_421_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({155});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,155,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_421_Field_Modifier->contains(Tuple<RamDomain,2>({7,env2[0]}),READ_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,3> key({1,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[2]),(RamDomain)(env4[2]),(RamDomain)(env2[0]),(RamDomain)(env1[2])});
if (!(rel_303_StoreInstanceField->insert(tuple,READ_OP_CONTEXT(rel_303_StoreInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2673:1-2681:38];StoreInstanceField(?from,?base,?fld,?inmethod) :-     isMethod('<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _ActualParam(0,?invocation,?base),    _ActualParam(1,?invocation,?from),    !_Field_Modifier('static',?fld).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2673:1-2681:38];StoreInstanceField(?from,?base,?fld,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   _ActualParam(1,?invocation,?from),\n   !_Field_Modifier(\"static\",?fld).;)" <<  rel_303_StoreInstanceField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StoreInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [248:1-248:83];)" <<  rel_303_StoreInstanceField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [247:1-247:74];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :- \n   isLoadInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadInstanceField_To(?insn,?to).;)",profile);
if (!rel_72_FieldInstruction_Signature->empty()&&!rel_109_Instruction_Method->empty()&&!rel_131_LoadInstanceField_Base->empty()&&!rel_132_LoadInstanceField_To->empty()&&!rel_483_isLoadInstanceField_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_483_isLoadInstanceField_Insn->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt,rel_72_FieldInstruction_Signature->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_130_LoadInstanceField_op_ctxt,rel_130_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_131_LoadInstanceField_Base_op_ctxt,rel_131_LoadInstanceField_Base->createContext());
CREATE_OP_CONTEXT(rel_132_LoadInstanceField_To_op_ctxt,rel_132_LoadInstanceField_To->createContext());
CREATE_OP_CONTEXT(rel_483_isLoadInstanceField_Insn_op_ctxt,rel_483_isLoadInstanceField_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_131_LoadInstanceField_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_131_LoadInstanceField_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_72_FieldInstruction_Signature->equalRange<0>(key,READ_OP_CONTEXT(rel_72_FieldInstruction_Signature_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_132_LoadInstanceField_To->equalRange<0>(key,READ_OP_CONTEXT(rel_132_LoadInstanceField_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)(env3[1]),(RamDomain)(env4[1]),(RamDomain)(env1[1])});
if (!(rel_130_LoadInstanceField->insert(tuple,READ_OP_CONTEXT(rel_130_LoadInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :-     isLoadInstanceField_Insn(?insn),    Instruction_Method(?insn,?inmethod),    LoadInstanceField_Base(?insn,?base),    FieldInstruction_Signature(?insn,?sig),    LoadInstanceField_To(?insn,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [884:1-889:36];LoadInstanceField(?base,?sig,?to,?inmethod) :- \n   isLoadInstanceField_Insn(?insn),\n   Instruction_Method(?insn,?inmethod),\n   LoadInstanceField_Base(?insn,?base),\n   FieldInstruction_Signature(?insn,?sig),\n   LoadInstanceField_To(?insn,?to).;)" <<  rel_130_LoadInstanceField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2656:1-2664:39];LoadInstanceField(?base,?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to),\n   !_Field_Modifier(\"static\",?fld).;)",profile);
if (!rel_35_AssignReturnValue->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_385_ActualParam->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_130_LoadInstanceField_op_ctxt,rel_130_LoadInstanceField->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt,rel_421_Field_Modifier->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({154});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,154,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_421_Field_Modifier->contains(Tuple<RamDomain,2>({7,env2[0]}),READ_OP_CONTEXT(rel_421_Field_Modifier_op_ctxt))) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[2]),(RamDomain)(env2[0]),(RamDomain)(env5[1]),(RamDomain)(env1[2])});
if (!(rel_130_LoadInstanceField->insert(tuple,READ_OP_CONTEXT(rel_130_LoadInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2656:1-2664:39];LoadInstanceField(?base,?fld,?to,?inmethod) :-     isMethod('<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>',?inmethod),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    _ActualParam(0,?invocation,?base),    AssignReturnValue(?invocation,?to),    !_Field_Modifier('static',?fld).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2656:1-2664:39];LoadInstanceField(?base,?fld,?to,?inmethod) :- \n   isMethod(\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>\",?inmethod),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   _ActualParam(0,?invocation,?base),\n   AssignReturnValue(?invocation,?to),\n   !_Field_Modifier(\"static\",?fld).;)" <<  rel_130_LoadInstanceField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;LoadInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [247:1-247:74];)" <<  rel_130_LoadInstanceField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2640:1-2640:84];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt,rel_341_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({160});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,160,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_341_Tamiflex_ReifiedField->insert(tuple,READ_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat('<(Tamiflex) ',?fld),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_341_Tamiflex_ReifiedField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)",profile);
if (!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_470_isField->empty()&&!rel_485_isMethod->empty()&&!rel_497_isType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt,rel_341_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
CREATE_OP_CONTEXT(rel_497_isType_op_ctxt,rel_497_isType->createContext());
const Tuple<RamDomain,1> key({161});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,161,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({49});
auto range = rel_497_isType->equalRange<0>(key,READ_OP_CONTEXT(rel_497_isType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)156)) + std::string(symTable.resolve((size_t)env2[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0])});
if (!(rel_341_Tamiflex_ReifiedField->insert(tuple,READ_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat('<(Tamiflex) ',?fld),'>'),?invocation) :-     isMethod('<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>'),    VirtualMethodInvocation(?invocation,'<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>',_),    Tamiflex_ReflectionMap(?fld,?invocation),    isField(?fld),    isType('java.lang.reflect.Field').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2728:1-2737:17];Tamiflex_ReifiedField(?fld,cat(cat(\"<(Tamiflex) \",?fld),\">\"),?invocation) :- \n   isMethod(\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>\",_),\n   Tamiflex_ReflectionMap(?fld,?invocation),\n   isField(?fld),\n   isType(\"java.lang.reflect.Field\").;)" <<  rel_341_Tamiflex_ReifiedField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Tamiflex_ReifiedField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2640:1-2640:84];)" <<  rel_341_Tamiflex_ReifiedField->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1311:1-1311:43];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2253:1-2253:85];isJVMStartupHContext([\"<<jvm-startup-hcontext>>\"]).;)",profile);
rel_481_isJVMStartupHContext->insert(pack(ram::Tuple<RamDomain,1>({40})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2253:1-2253:85];isJVMStartupHContext([\"<<jvm-startup-hcontext>>\"]).;)" <<  rel_481_isJVMStartupHContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isJVMStartupHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1311:1-1311:43];)" <<  rel_481_isJVMStartupHContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1347:1-1347:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2262:1-2265:19];MainThread(?hctx,\"<<main-thread>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread>>\").;)",profile);
if (!rel_481_isJVMStartupHContext->empty()&&!rel_498_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_481_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_481_isJVMStartupHContext_op_ctxt,rel_481_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({36});
auto range = rel_498_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_498_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(36)});
if (!(rel_139_MainThread->insert(tuple,READ_OP_CONTEXT(rel_139_MainThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MainThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2262:1-2265:19];MainThread(?hctx,'<<main-thread>>') :-     isJVMStartupHContext(?hctx),    isValue('<<main-thread>>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2262:1-2265:19];MainThread(?hctx,\"<<main-thread>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread>>\").;)" <<  rel_139_MainThread->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1347:1-1347:47];)" <<  rel_139_MainThread->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1346:1-1346:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2258:1-2261:19];MainThreadGroup(?hctx,\"<<main-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread-group>>\").;)",profile);
if (!rel_481_isJVMStartupHContext->empty()&&!rel_498_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_481_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_481_isJVMStartupHContext_op_ctxt,rel_481_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({34});
auto range = rel_498_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_498_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(34)});
if (!(rel_140_MainThreadGroup->insert(tuple,READ_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MainThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2258:1-2261:19];MainThreadGroup(?hctx,'<<main-thread-group>>') :-     isJVMStartupHContext(?hctx),    isValue('<<main-thread-group>>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2258:1-2261:19];MainThreadGroup(?hctx,\"<<main-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<main-thread-group>>\").;)" <<  rel_140_MainThreadGroup->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1346:1-1346:52];)" <<  rel_140_MainThreadGroup->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;SystemThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1345:1-1345:54];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;SystemThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2254:1-2257:19];SystemThreadGroup(?hctx,\"<<system-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<system-thread-group>>\").;)",profile);
if (!rel_481_isJVMStartupHContext->empty()&&!rel_498_isValue->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_481_isJVMStartupHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_481_isJVMStartupHContext_op_ctxt,rel_481_isJVMStartupHContext->createContext());
CREATE_OP_CONTEXT(rel_498_isValue_op_ctxt,rel_498_isValue->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({33});
auto range = rel_498_isValue->equalRange<0>(key,READ_OP_CONTEXT(rel_498_isValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(33)});
if (!(rel_320_SystemThreadGroup->insert(tuple,READ_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;SystemThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2254:1-2257:19];SystemThreadGroup(?hctx,'<<system-thread-group>>') :-     isJVMStartupHContext(?hctx),    isValue('<<system-thread-group>>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;SystemThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2254:1-2257:19];SystemThreadGroup(?hctx,\"<<system-thread-group>>\") :- \n   isJVMStartupHContext(?hctx),\n   isValue(\"<<system-thread-group>>\").;)" <<  rel_320_SystemThreadGroup->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;SystemThreadGroup;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1345:1-1345:54];)" <<  rel_320_SystemThreadGroup->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isImmutableHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1310:1-1310:42];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isImmutableHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2252:1-2252:82];isImmutableHContext([\"<<immutable-hcontext>>\"]).;)",profile);
rel_476_isImmutableHContext->insert(pack(ram::Tuple<RamDomain,1>({43})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isImmutableHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2252:1-2252:82];isImmutableHContext([\"<<immutable-hcontext>>\"]).;)" <<  rel_476_isImmutableHContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isImmutableHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1310:1-1310:42];)" <<  rel_476_isImmutableHContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2577:1-2577:57];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ContextForEntryPoint([hctxValue,?value],?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_163_MockObjectForType->empty()&&!rel_356_TopLevelEntryPoint->empty()&&!rel_451_ThisVar->empty()&&!rel_476_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_451_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_ContextForEntryPoint_op_ctxt,rel_50_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt,rel_163_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt,rel_356_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_476_isImmutableHContext_op_ctxt,rel_476_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_163_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
for(const auto& env3 : *rel_476_isImmutableHContext) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_356_TopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env2[0]}))),(RamDomain)(env0[0])});
if (!(rel_50_ContextForEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_50_ContextForEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ContextForEntryPoint([hctxValue,?value],?method) :-     _ThisVar(?method,?receiver),    Method_DeclaringType(?method,?class),    MockObjectForType(?value,?class),    isImmutableHContext([hctxValue]),    TopLevelEntryPoint(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ContextForEntryPoint([hctxValue,?value],?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)" <<  rel_50_ContextForEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2577:1-2577:57];)" <<  rel_50_ContextForEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2584:1-2584:104];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)",profile);
if (!rel_153_Method_DeclaringType->empty()&&!rel_163_MockObjectForType->empty()&&!rel_356_TopLevelEntryPoint->empty()&&!rel_451_ThisVar->empty()&&!rel_476_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_451_ThisVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt,rel_163_MockObjectForType->createContext());
CREATE_OP_CONTEXT(rel_234_ReceiverPointsTo_op_ctxt,rel_234_ReceiverPointsTo->createContext());
CREATE_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt,rel_356_TopLevelEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_476_isImmutableHContext_op_ctxt,rel_476_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_163_MockObjectForType->equalRange<1>(key,READ_OP_CONTEXT(rel_163_MockObjectForType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
for(const auto& env3 : *rel_476_isImmutableHContext) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_356_TopLevelEntryPoint->equalRange<0>(key,READ_OP_CONTEXT(rel_356_TopLevelEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env2[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env2[0]}))),(RamDomain)(env0[1]),(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_234_ReceiverPointsTo->insert(tuple,READ_OP_CONTEXT(rel_234_ReceiverPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :-     _ThisVar(?method,?receiver),    Method_DeclaringType(?method,?class),    MockObjectForType(?value,?class),    isImmutableHContext([hctxValue]),    TopLevelEntryPoint(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2590:1-2597:23];ReceiverPointsTo(?value,[hctxValue,?value],?receiver,?class,?method) :- \n   _ThisVar(?method,?receiver),\n   Method_DeclaringType(?method,?class),\n   MockObjectForType(?value,?class),\n   isImmutableHContext([hctxValue]),\n   TopLevelEntryPoint(?method).;)" <<  rel_234_ReceiverPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReceiverPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2584:1-2584:104];)" <<  rel_234_ReceiverPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2578:1-2578:60];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];HContextForEntryPoint([ctxValue2],?method) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_234_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_234_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt,rel_81_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_234_ReceiverPointsTo_op_ctxt,rel_234_ReceiverPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[4])});
if (!(rel_81_HContextForEntryPoint->insert(tuple,READ_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];HContextForEntryPoint([ctxValue2],?method) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];HContextForEntryPoint([ctxValue2],?method) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_81_HContextForEntryPoint->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;HContextForEntryPoint;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2578:1-2578:60];)" <<  rel_81_HContextForEntryPoint->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2576:1-2576:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];MockObjectContext(?hctx,?value,?class) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)",profile);
if (!rel_50_ContextForEntryPoint->empty()&&!rel_81_HContextForEntryPoint->empty()&&!rel_159_MockForFormal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_ContextForEntryPoint_op_ctxt,rel_50_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt,rel_81_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_159_MockForFormal_op_ctxt,rel_159_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_161_MockObjectContext_op_ctxt,rel_161_MockObjectContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_81_HContextForEntryPoint->equalRange<1>(key,READ_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_159_MockForFormal->equalRange<3>(key,READ_OP_CONTEXT(rel_159_MockForFormal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[2])});
if (!(rel_161_MockObjectContext->insert(tuple,READ_OP_CONTEXT(rel_161_MockObjectContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];MockObjectContext(?hctx,?value,?class) :-     ContextForEntryPoint(?ctx,?method),    HContextForEntryPoint(?hctx,?method),    MockForFormal(?value,?formal,?class,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];MockObjectContext(?hctx,?value,?class) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)" <<  rel_161_MockObjectContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];MockObjectContext([ctxValue2],?value,?class) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_234_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_234_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_161_MockObjectContext_op_ctxt,rel_161_MockObjectContext->createContext());
CREATE_OP_CONTEXT(rel_234_ReceiverPointsTo_op_ctxt,rel_234_ReceiverPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,3> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_161_MockObjectContext->insert(tuple,READ_OP_CONTEXT(rel_161_MockObjectContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];MockObjectContext([ctxValue2],?value,?class) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];MockObjectContext([ctxValue2],?value,?class) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_161_MockObjectContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MockObjectContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2576:1-2576:76];)" <<  rel_161_MockObjectContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1289:1-1289:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1697:1-1698:28];ImplicitReachable(sig) :- \n   _AndroidEntryPoint(sig).;)",profile);
if (!rel_386_AndroidEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_386_AndroidEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_386_AndroidEntryPoint_op_ctxt,rel_386_AndroidEntryPoint->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1697:1-1698:28];ImplicitReachable(sig) :-     _AndroidEntryPoint(sig).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1697:1-1698:28];ImplicitReachable(sig) :- \n   _AndroidEntryPoint(sig).;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1699:1-1701:16];ImplicitReachable(\"<java.lang.System: void initializeSystemClass()>\") :- \n   isMethod(\"<java.lang.System: void initializeSystemClass()>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({91});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(91)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1699:1-1701:16];ImplicitReachable('<java.lang.System: void initializeSystemClass()>') :-     isMethod('<java.lang.System: void initializeSystemClass()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1699:1-1701:16];ImplicitReachable(\"<java.lang.System: void initializeSystemClass()>\") :- \n   isMethod(\"<java.lang.System: void initializeSystemClass()>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1702:1-1704:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({92});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(92)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1702:1-1704:16];ImplicitReachable('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>') :-     isMethod('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1702:1-1704:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1705:1-1707:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({93});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(93)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1705:1-1707:16];ImplicitReachable('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     isMethod('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1705:1-1707:16];ImplicitReachable(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   isMethod(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1708:1-1710:16];ImplicitReachable(\"<java.lang.ThreadGroup: void <init>()>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void <init>()>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({94});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(94)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1708:1-1710:16];ImplicitReachable('<java.lang.ThreadGroup: void <init>()>') :-     isMethod('<java.lang.ThreadGroup: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1708:1-1710:16];ImplicitReachable(\"<java.lang.ThreadGroup: void <init>()>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void <init>()>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1711:1-1713:16];ImplicitReachable(\"<java.lang.Thread: void exit()>\") :- \n   isMethod(\"<java.lang.Thread: void exit()>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({95});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(95)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1711:1-1713:16];ImplicitReachable('<java.lang.Thread: void exit()>') :-     isMethod('<java.lang.Thread: void exit()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1711:1-1713:16];ImplicitReachable(\"<java.lang.Thread: void exit()>\") :- \n   isMethod(\"<java.lang.Thread: void exit()>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1714:1-1716:16];ImplicitReachable(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({96});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(96)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1714:1-1716:16];ImplicitReachable('<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>') :-     isMethod('<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1714:1-1716:16];ImplicitReachable(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\") :- \n   isMethod(\"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1717:1-1719:16];ImplicitReachable(\"<java.lang.ClassLoader: void <init>()>\") :- \n   isMethod(\"<java.lang.ClassLoader: void <init>()>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({97});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(97)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1717:1-1719:16];ImplicitReachable('<java.lang.ClassLoader: void <init>()>') :-     isMethod('<java.lang.ClassLoader: void <init>()>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1717:1-1719:16];ImplicitReachable(\"<java.lang.ClassLoader: void <init>()>\") :- \n   isMethod(\"<java.lang.ClassLoader: void <init>()>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1720:1-1722:16];ImplicitReachable(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({98});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(98)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1720:1-1722:16];ImplicitReachable('<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>') :-     isMethod('<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1720:1-1722:16];ImplicitReachable(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1723:1-1725:16];ImplicitReachable(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({99});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(99)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1723:1-1725:16];ImplicitReachable('<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>') :-     isMethod('<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1723:1-1725:16];ImplicitReachable(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1726:1-1728:16];ImplicitReachable(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({100});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(100)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1726:1-1728:16];ImplicitReachable('<java.lang.ClassLoader: void addClass(java.lang.Class)>') :-     isMethod('<java.lang.ClassLoader: void addClass(java.lang.Class)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1726:1-1728:16];ImplicitReachable(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\") :- \n   isMethod(\"<java.lang.ClassLoader: void addClass(java.lang.Class)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1729:1-1731:16];ImplicitReachable(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({101});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(101)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1729:1-1731:16];ImplicitReachable('<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>') :-     isMethod('<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1729:1-1731:16];ImplicitReachable(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\") :- \n   isMethod(\"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1732:1-1734:16];ImplicitReachable(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\") :- \n   isMethod(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\").;)",profile);
if (!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({102});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(102)});
if (!(rel_100_ImplicitReachable->insert(tuple,READ_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1732:1-1734:16];ImplicitReachable('<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>') :-     isMethod('<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1732:1-1734:16];ImplicitReachable(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\") :- \n   isMethod(\"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>\").;)" <<  rel_100_ImplicitReachable->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ImplicitReachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1289:1-1289:37];)" <<  rel_100_ImplicitReachable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isImmutableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1306:1-1306:39];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isImmutableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2238:1-2238:101];isImmutableContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)",profile);
rel_475_isImmutableContext->insert(pack(ram::Tuple<RamDomain,2>({42,42})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isImmutableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2238:1-2238:101];isImmutableContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)" <<  rel_475_isImmutableContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isImmutableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1306:1-1306:39];)" <<  rel_475_isImmutableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isClinitContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1309:1-1309:36];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isClinitContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2241:1-2241:92];isClinitContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)",profile);
rel_465_isClinitContext->insert(pack(ram::Tuple<RamDomain,2>({41,41})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isClinitContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2241:1-2241:92];isClinitContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)" <<  rel_465_isClinitContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isClinitContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1309:1-1309:36];)" <<  rel_465_isClinitContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isInitialContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1307:1-1307:37];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isInitialContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2239:1-2239:95];isInitialContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)",profile);
rel_477_isInitialContext->insert(pack(ram::Tuple<RamDomain,2>({38,38})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isInitialContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2239:1-2239:95];isInitialContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)" <<  rel_477_isInitialContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isInitialContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1307:1-1307:37];)" <<  rel_477_isInitialContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isJVMStartupContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1308:1-1308:40];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isJVMStartupContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2240:1-2240:106];isJVMStartupContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)",profile);
rel_480_isJVMStartupContext->insert(pack(ram::Tuple<RamDomain,2>({39,39})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isJVMStartupContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2240:1-2240:106];isJVMStartupContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)" <<  rel_480_isJVMStartupContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isJVMStartupContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1308:1-1308:40];)" <<  rel_480_isJVMStartupContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodArgArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [81:1-81:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodArgArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];MainMethodArgArray(\"<<main method array>>\").;)",profile);
rel_136_MainMethodArgArray->insert(20);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainMethodArgArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [954:1-957:32];MainMethodArgArray(\"<<main method array>>\").;)" <<  rel_136_MainMethodArgArray->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainMethodArgArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [81:1-81:47];)" <<  rel_136_MainMethodArgArray->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [82:1-82:54];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];MainMethodArgArrayContent(\"<<main method array content>>\").;)",profile);
rel_137_MainMethodArgArrayContent->insert(22);
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [958:1-961:30];MainMethodArgArrayContent(\"<<main method array content>>\").;)" <<  rel_137_MainMethodArgArrayContent->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;MainMethodArgArrayContent;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [82:1-82:54];)" <<  rel_137_MainMethodArgArrayContent->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [229:1-229:72];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_57_ExceptionHandler_FormalParam_op_ctxt,rel_57_ExceptionHandler_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[4])});
if (!(rel_57_ExceptionHandler_FormalParam->insert(tuple,READ_OP_CONTEXT(rel_57_ExceptionHandler_FormalParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_FormalParam(?handler,?var) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_57_ExceptionHandler_FormalParam->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_FormalParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [229:1-229:72];)" <<  rel_57_ExceptionHandler_FormalParam->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [230:1-230:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_55_ExceptionHandler_Begin_op_ctxt,rel_55_ExceptionHandler_Begin->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[5])});
if (!(rel_55_ExceptionHandler_Begin->insert(tuple,READ_OP_CONTEXT(rel_55_ExceptionHandler_Begin_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Begin(?handler,?begin) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_55_ExceptionHandler_Begin->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Begin;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [230:1-230:71];)" <<  rel_55_ExceptionHandler_Begin->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [231:1-231:69];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_56_ExceptionHandler_End_op_ctxt,rel_56_ExceptionHandler_End->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[6])});
if (!(rel_56_ExceptionHandler_End->insert(tuple,READ_OP_CONTEXT(rel_56_ExceptionHandler_End_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_End(?handler,?end) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_56_ExceptionHandler_End->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_End;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [231:1-231:69];)" <<  rel_56_ExceptionHandler_End->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [226:1-226:75];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_61_ExceptionHandler_Method_op_ctxt,rel_61_ExceptionHandler_Method->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_61_ExceptionHandler_Method->insert(tuple,READ_OP_CONTEXT(rel_61_ExceptionHandler_Method_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Method(?handler,?method) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_61_ExceptionHandler_Method->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Method;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [226:1-226:75];)" <<  rel_61_ExceptionHandler_Method->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1280:1-1280:84];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1652:1-1659:22];ExceptionHandler_InRange(?handler,?instruction) :- \n   ExceptionHandler_Method(?handler,?method),\n   Instruction_Method(?instruction,?method),\n   Instruction_Index(?instruction,?index),\n   ExceptionHandler_Begin(?handler,?beginIndex),\n   ExceptionHandler_End(?handler,?endIndex),\n   ?beginIndex <= ?index,\n   ?endIndex > ?index.;)",profile);
if (!rel_55_ExceptionHandler_Begin->empty()&&!rel_56_ExceptionHandler_End->empty()&&!rel_61_ExceptionHandler_Method->empty()&&!rel_108_Instruction_Index->empty()&&!rel_109_Instruction_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_61_ExceptionHandler_Method->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_55_ExceptionHandler_Begin_op_ctxt,rel_55_ExceptionHandler_Begin->createContext());
CREATE_OP_CONTEXT(rel_56_ExceptionHandler_End_op_ctxt,rel_56_ExceptionHandler_End->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_61_ExceptionHandler_Method_op_ctxt,rel_61_ExceptionHandler_Method->createContext());
CREATE_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt,rel_108_Instruction_Index->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_108_Instruction_Index->equalRange<0>(key,READ_OP_CONTEXT(rel_108_Instruction_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_55_ExceptionHandler_Begin->equalRange<0>(key,READ_OP_CONTEXT(rel_55_ExceptionHandler_Begin_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((env3[1]) <= (env2[1]))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_56_ExceptionHandler_End->equalRange<0>(key,READ_OP_CONTEXT(rel_56_ExceptionHandler_End_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((env4[1]) > (env2[1]))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_59_ExceptionHandler_InRange->insert(tuple,READ_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1652:1-1659:22];ExceptionHandler_InRange(?handler,?instruction) :-     ExceptionHandler_Method(?handler,?method),    Instruction_Method(?instruction,?method),    Instruction_Index(?instruction,?index),    ExceptionHandler_Begin(?handler,?beginIndex),    ExceptionHandler_End(?handler,?endIndex),    ?beginIndex <= ?index,    ?endIndex > ?index.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1652:1-1659:22];ExceptionHandler_InRange(?handler,?instruction) :- \n   ExceptionHandler_Method(?handler,?method),\n   Instruction_Method(?instruction,?method),\n   Instruction_Index(?instruction,?index),\n   ExceptionHandler_Begin(?handler,?beginIndex),\n   ExceptionHandler_End(?handler,?endIndex),\n   ?beginIndex <= ?index,\n   ?endIndex > ?index.;)" <<  rel_59_ExceptionHandler_InRange->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_InRange;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1280:1-1280:84];)" <<  rel_59_ExceptionHandler_InRange->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [228:1-228:67];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt,rel_66_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3])});
if (!(rel_66_ExceptionHandler_Type->insert(tuple,READ_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Type(?handler,?type) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_66_ExceptionHandler_Type->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Type;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [228:1-228:67];)" <<  rel_66_ExceptionHandler_Type->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [227:1-227:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_60_ExceptionHandler_Index_op_ctxt,rel_60_ExceptionHandler_Index->createContext());
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[2])});
if (!(rel_60_ExceptionHandler_Index->insert(tuple,READ_OP_CONTEXT(rel_60_ExceptionHandler_Index_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];ExceptionHandler_Index(?handler,?index) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_60_ExceptionHandler_Index->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Index;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [227:1-227:71];)" <<  rel_60_ExceptionHandler_Index->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1281:1-1281:83];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1660:1-1661:50];ExceptionHandler_Before(?previous,?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_417_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_417_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt,rel_52_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_417_ExceptionHandler_Previous_op_ctxt,rel_417_ExceptionHandler_Previous->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_52_ExceptionHandler_Before->insert(tuple,READ_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1660:1-1661:50];ExceptionHandler_Before(?previous,?handler) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1660:1-1661:50];ExceptionHandler_Before(?previous,?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_52_ExceptionHandler_Before->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1281:1-1281:83];)" <<  rel_52_ExceptionHandler_Before->size() << "\n";
}rel_53_delta_ExceptionHandler_Before->insertAll(*rel_52_ExceptionHandler_Before);
for(;;) {
{
	RamLogger logger(R"(@t-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1281:1-1281:83];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ExceptionHandler_Before;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1662:1-1664:47];ExceptionHandler_Before(?before,?handler) :- \n   ExceptionHandler_Before(?middle,?handler),\n   _ExceptionHandler_Previous(?middle,?before).;)",profile);
if (!rel_53_delta_ExceptionHandler_Before->empty()&&!rel_417_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_53_delta_ExceptionHandler_Before->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_53_delta_ExceptionHandler_Before_op_ctxt,rel_53_delta_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_54_new_ExceptionHandler_Before_op_ctxt,rel_54_new_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt,rel_52_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_417_ExceptionHandler_Previous_op_ctxt,rel_417_ExceptionHandler_Previous->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_417_ExceptionHandler_Previous->equalRange<0>(key,READ_OP_CONTEXT(rel_417_ExceptionHandler_Previous_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_52_ExceptionHandler_Before->contains(Tuple<RamDomain,2>({env1[1],env0[1]}),READ_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[1])});
if (!(rel_54_new_ExceptionHandler_Before->insert(tuple,READ_OP_CONTEXT(rel_54_new_ExceptionHandler_Before_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1662:1-1664:47];@new_ExceptionHandler_Before(?before,?handler) :-     @delta_ExceptionHandler_Before(?middle,?handler),    _ExceptionHandler_Previous(?middle,?before),    !ExceptionHandler_Before(?before,?handler).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ExceptionHandler_Before;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1662:1-1664:47];ExceptionHandler_Before(?before,?handler) :- \n   ExceptionHandler_Before(?middle,?handler),\n   _ExceptionHandler_Previous(?middle,?before).;)" <<  rel_54_new_ExceptionHandler_Before->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1281:1-1281:83];)" <<  rel_54_new_ExceptionHandler_Before->size() << "\n";
}if(rel_54_new_ExceptionHandler_Before->empty()) break;
{
	RamLogger logger(R"(@c-recursive-relation;ExceptionHandler_Before;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1281:1-1281:83];)",profile);
rel_52_ExceptionHandler_Before->insertAll(*rel_54_new_ExceptionHandler_Before);
{
auto rel_0 = rel_53_delta_ExceptionHandler_Before;
rel_53_delta_ExceptionHandler_Before = rel_54_new_ExceptionHandler_Before;
rel_54_new_ExceptionHandler_Before = rel_0;
}
rel_54_new_ExceptionHandler_Before->purge();
}
}
rel_53_delta_ExceptionHandler_Before->purge();
rel_54_new_ExceptionHandler_Before->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1288:1-1288:87];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1643:1-1651:24];ExceptionHandler_Impossible(?type,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Type(?h1,?h1Type),\n   ExceptionHandler_Type(?h2,?h2Type),\n   SubtypeOf(?type,?h1Type),\n   SubtypeOf(?type,?h2Type),\n   ConcreteClass(?type).;)",profile);
if (!rel_47_ConcreteClass->empty()&&!rel_52_ExceptionHandler_Before->empty()&&!rel_59_ExceptionHandler_InRange->empty()&&!rel_66_ExceptionHandler_Type->empty()&&!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_59_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt,rel_47_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt,rel_52_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_58_ExceptionHandler_Impossible_op_ctxt,rel_58_ExceptionHandler_Impossible->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt,rel_66_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_59_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_52_ExceptionHandler_Before->equalRange<0,1>(key,READ_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_66_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_66_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[0],env4[1]});
auto range = rel_313_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env5[0]});
auto range = rel_47_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[0]),(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_58_ExceptionHandler_Impossible->insert(tuple,READ_OP_CONTEXT(rel_58_ExceptionHandler_Impossible_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1643:1-1651:24];ExceptionHandler_Impossible(?type,?h2,?insn) :-     ExceptionHandler_InRange(?h1,?insn),    ExceptionHandler_InRange(?h2,?insn),    ExceptionHandler_Before(?h1,?h2),    ExceptionHandler_Type(?h1,?h1Type),    ExceptionHandler_Type(?h2,?h2Type),    SubtypeOf(?type,?h1Type),    SubtypeOf(?type,?h2Type),    ConcreteClass(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1643:1-1651:24];ExceptionHandler_Impossible(?type,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Type(?h1,?h1Type),\n   ExceptionHandler_Type(?h2,?h2Type),\n   SubtypeOf(?type,?h1Type),\n   SubtypeOf(?type,?h2Type),\n   ConcreteClass(?type).;)" <<  rel_58_ExceptionHandler_Impossible->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_Impossible;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1288:1-1288:87];)" <<  rel_58_ExceptionHandler_Impossible->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1286:1-1286:97];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1672:1-1676:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :- \n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Index(?h1,?h2Index),\n   ExceptionHandler_Index(?h2,?h2Index).;)",profile);
if (!rel_52_ExceptionHandler_Before->empty()&&!rel_60_ExceptionHandler_Index->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_52_ExceptionHandler_Before->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt,rel_52_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_60_ExceptionHandler_Index_op_ctxt,rel_60_ExceptionHandler_Index->createContext());
CREATE_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_62_ExceptionHandler_SameBlock_PartialOrder->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_60_ExceptionHandler_Index->equalRange<0>(key,READ_OP_CONTEXT(rel_60_ExceptionHandler_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[1],env1[1]});
auto range = rel_60_ExceptionHandler_Index->equalRange<0,1>(key,READ_OP_CONTEXT(rel_60_ExceptionHandler_Index_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_62_ExceptionHandler_SameBlock_PartialOrder->insert(tuple,READ_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1672:1-1676:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :-     ExceptionHandler_Before(?h1,?h2),    ExceptionHandler_Index(?h1,?h2Index),    ExceptionHandler_Index(?h2,?h2Index).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1672:1-1676:23];ExceptionHandler_SameBlock_PartialOrder(?h1,?h2) :- \n   ExceptionHandler_Before(?h1,?h2),\n   ExceptionHandler_Index(?h1,?h2Index),\n   ExceptionHandler_Index(?h2,?h2Index).;)" <<  rel_62_ExceptionHandler_SameBlock_PartialOrder->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameBlock_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1286:1-1286:97];)" <<  rel_62_ExceptionHandler_SameBlock_PartialOrder->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1284:1-1284:108];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1665:1-1668:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2).;)",profile);
if (!rel_52_ExceptionHandler_Before->empty()&&!rel_59_ExceptionHandler_InRange->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_59_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt,rel_52_ExceptionHandler_Before->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_64_ExceptionHandler_SameInsn_PartialOrder_op_ctxt,rel_64_ExceptionHandler_SameInsn_PartialOrder->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_59_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_52_ExceptionHandler_Before->equalRange<0,1>(key,READ_OP_CONTEXT(rel_52_ExceptionHandler_Before_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0]),(RamDomain)(env0[1])});
if (!(rel_64_ExceptionHandler_SameInsn_PartialOrder->insert(tuple,READ_OP_CONTEXT(rel_64_ExceptionHandler_SameInsn_PartialOrder_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1665:1-1668:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :-     ExceptionHandler_InRange(?h1,?insn),    ExceptionHandler_InRange(?h2,?insn),    ExceptionHandler_Before(?h1,?h2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1665:1-1668:37];ExceptionHandler_SameInsn_PartialOrder(?h1,?h2,?insn) :- \n   ExceptionHandler_InRange(?h1,?insn),\n   ExceptionHandler_InRange(?h2,?insn),\n   ExceptionHandler_Before(?h1,?h2).;)" <<  rel_64_ExceptionHandler_SameInsn_PartialOrder->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameInsn_PartialOrder;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1284:1-1284:108];)" <<  rel_64_ExceptionHandler_SameInsn_PartialOrder->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1283:1-1283:80];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1669:1-1671:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;)",profile);
if (!rel_59_ExceptionHandler_InRange->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_59_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_64_ExceptionHandler_SameInsn_PartialOrder_op_ctxt,rel_64_ExceptionHandler_SameInsn_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_65_ExceptionHandler_SameInsn_Repr->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_64_ExceptionHandler_SameInsn_PartialOrder->equalRange<1,2>(Tuple<RamDomain,3>({0,env0[0],env0[1]}),READ_OP_CONTEXT(rel_64_ExceptionHandler_SameInsn_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_65_ExceptionHandler_SameInsn_Repr->insert(tuple,READ_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1669:1-1671:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :-     ExceptionHandler_InRange(?handler,?insn),    !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1669:1-1671:63];ExceptionHandler_SameInsn_Repr(?insn,?handler) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   !ExceptionHandler_SameInsn_PartialOrder(_,?handler,?insn).;)" <<  rel_65_ExceptionHandler_SameInsn_Repr->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameInsn_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1283:1-1283:80];)" <<  rel_65_ExceptionHandler_SameInsn_Repr->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [225:1-225:52];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_417_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_417_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_417_ExceptionHandler_Previous_op_ctxt,rel_417_ExceptionHandler_Previous->createContext());
CREATE_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt,rel_469_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_469_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?handler) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?handler) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_469_isExceptionHandler->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?previous) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)",profile);
if (!rel_417_ExceptionHandler_Previous->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_417_ExceptionHandler_Previous->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_417_ExceptionHandler_Previous_op_ctxt,rel_417_ExceptionHandler_Previous->createContext());
CREATE_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt,rel_469_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_469_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?previous) :-     _ExceptionHandler_Previous(?handler,?previous).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [381:1-384:51];isExceptionHandler(?previous) :- \n   _ExceptionHandler_Previous(?handler,?previous).;)" <<  rel_469_isExceptionHandler->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];isExceptionHandler(?handler) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)",profile);
if (!rel_416_ExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_416_ExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_416_ExceptionHandler_op_ctxt,rel_416_ExceptionHandler->createContext());
CREATE_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt,rel_469_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_469_isExceptionHandler->insert(tuple,READ_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];isExceptionHandler(?handler) :-     _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [647:1-654:75];isExceptionHandler(?handler) :- \n   _ExceptionHandler(?handler,?method,?index,?type,?var,?begin,?end).;)" <<  rel_469_isExceptionHandler->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isExceptionHandler;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [225:1-225:52];)" <<  rel_469_isExceptionHandler->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1285:1-1285:89];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1677:1-1679:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :- \n   isExceptionHandler(?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;)",profile);
if (!rel_469_isExceptionHandler->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_469_isExceptionHandler->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_62_ExceptionHandler_SameBlock_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_63_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_469_isExceptionHandler_op_ctxt,rel_469_isExceptionHandler->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_62_ExceptionHandler_SameBlock_PartialOrder->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[0])});
if (!(rel_63_ExceptionHandler_SameBlock_Repr->insert(tuple,READ_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1677:1-1679:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :-     isExceptionHandler(?handler),    !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1677:1-1679:57];ExceptionHandler_SameBlock_Repr(?handler,?handler) :- \n   isExceptionHandler(?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?handler).;)" <<  rel_63_ExceptionHandler_SameBlock_Repr->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1680:1-1682:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :- \n   ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;)",profile);
if (!rel_62_ExceptionHandler_SameBlock_PartialOrder->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_62_ExceptionHandler_SameBlock_PartialOrder->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt,rel_62_ExceptionHandler_SameBlock_PartialOrder->createContext());
CREATE_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_63_ExceptionHandler_SameBlock_Repr->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_62_ExceptionHandler_SameBlock_PartialOrder->equalRange<1>(Tuple<RamDomain,2>({0,env0[0]}),READ_OP_CONTEXT(rel_62_ExceptionHandler_SameBlock_PartialOrder_op_ctxt)).empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[0])});
if (!(rel_63_ExceptionHandler_SameBlock_Repr->insert(tuple,READ_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1680:1-1682:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :-     ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),    !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1680:1-1682:54];ExceptionHandler_SameBlock_Repr(?handler,?repr) :- \n   ExceptionHandler_SameBlock_PartialOrder(?repr,?handler),\n   !ExceptionHandler_SameBlock_PartialOrder(_,?repr).;)" <<  rel_63_ExceptionHandler_SameBlock_Repr->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_SameBlock_Repr;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1285:1-1285:89];)" <<  rel_63_ExceptionHandler_SameBlock_Repr->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1287:1-1287:73];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1636:1-1642:24];ExceptionHandler_TypeIsCaught(?type,?block) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?type,?handlerType),\n   ConcreteClass(?type).;)",profile);
if (!rel_47_ConcreteClass->empty()&&!rel_59_ExceptionHandler_InRange->empty()&&!rel_63_ExceptionHandler_SameBlock_Repr->empty()&&!rel_65_ExceptionHandler_SameInsn_Repr->empty()&&!rel_66_ExceptionHandler_Type->empty()&&!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_59_ExceptionHandler_InRange->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt,rel_47_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_63_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_65_ExceptionHandler_SameInsn_Repr->createContext());
CREATE_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt,rel_66_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_67_ExceptionHandler_TypeIsCaught_op_ctxt,rel_67_ExceptionHandler_TypeIsCaught->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_65_ExceptionHandler_SameInsn_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_63_ExceptionHandler_SameBlock_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_66_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,1> key({env4[0]});
auto range = rel_47_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env4[0]),(RamDomain)(env2[1])});
if (!(rel_67_ExceptionHandler_TypeIsCaught->insert(tuple,READ_OP_CONTEXT(rel_67_ExceptionHandler_TypeIsCaught_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1636:1-1642:24];ExceptionHandler_TypeIsCaught(?type,?block) :-     ExceptionHandler_InRange(?handler,?insn),    ExceptionHandler_SameInsn_Repr(?insn,?repr),    ExceptionHandler_SameBlock_Repr(?repr,?block),    ExceptionHandler_Type(?handler,?handlerType),    SubtypeOf(?type,?handlerType),    ConcreteClass(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1636:1-1642:24];ExceptionHandler_TypeIsCaught(?type,?block) :- \n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?type,?handlerType),\n   ConcreteClass(?type).;)" <<  rel_67_ExceptionHandler_TypeIsCaught->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ExceptionHandler_TypeIsCaught;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1287:1-1287:73];)" <<  rel_67_ExceptionHandler_TypeIsCaught->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1259:1-1259:64];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_208_PublicMethodOfComponent->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_208_PublicMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_208_PublicMethodOfComponent_op_ctxt,rel_208_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_74_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :-     PublicMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_195_OverridingProtectedMethodOfComponent->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_195_OverridingProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_195_OverridingProtectedMethodOfComponent_op_ctxt,rel_195_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_74_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :-     OverridingProtectedMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_404_CallbackMethod->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_404_CallbackMethod_op_ctxt,rel_404_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_74_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :-     _CallbackMethod(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_209_PublicOnMethodOfLayoutControl->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_209_PublicOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_209_PublicOnMethodOfLayoutControl_op_ctxt,rel_209_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_74_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :-     PublicOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_196_OverridingProtectedOnMethodOfLayoutControl->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_196_OverridingProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_196_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_196_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_74_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :-     OverridingProtectedOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1259:1-1259:64];)" <<  rel_74_ForcedReachableAndroidContext->size() << "\n";
}rel_75_delta_ForcedReachableAndroidContext->insertAll(*rel_74_ForcedReachableAndroidContext);
rel_217_delta_ReachableApplicationObjectOfType->insertAll(*rel_216_ReachableApplicationObjectOfType);
rel_13_delta_ApplicationObjectFlowingToLibrary->insertAll(*rel_12_ApplicationObjectFlowingToLibrary);
rel_211_delta_PublicOnMethodOfReachableListener->insertAll(*rel_210_PublicOnMethodOfReachableListener);
rel_118_delta_LibraryReachableAppListenerType->insertAll(*rel_117_LibraryReachableAppListenerType);
rel_206_delta_ProtectedOnMethodOfReachableListener->insertAll(*rel_205_ProtectedOnMethodOfReachableListener);
rel_198_delta_OverridingProtectedOnMethodOfReachableListener->insertAll(*rel_197_OverridingProtectedOnMethodOfReachableListener);
rel_78_delta_FormalOfForcedReachableContext->insertAll(*rel_77_FormalOfForcedReachableContext);
rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->insertAll(*rel_15_ApplicationObjectFlowingToLibraryStaticType);
{
	RamLogger logger(R"(@t-nonrecursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1278:1-1278:47];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1588:1-1590:42];InitializedClass(?class) :- \n   MainMethodDeclaration(?method),\n   Method_DeclaringType(?method,?class).;)",profile);
if (!rel_138_MainMethodDeclaration->empty()&&!rel_153_Method_DeclaringType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_138_MainMethodDeclaration->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_102_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1588:1-1590:42];InitializedClass(?class) :-     MainMethodDeclaration(?method),    Method_DeclaringType(?method,?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1588:1-1590:42];InitializedClass(?class) :- \n   MainMethodDeclaration(?method),\n   Method_DeclaringType(?method,?class).;)" <<  rel_102_InitializedClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1278:1-1278:47];)" <<  rel_102_InitializedClass->size() << "\n";
}rel_103_delta_InitializedClass->insertAll(*rel_102_InitializedClass);
rel_113_delta_Instruction_Throws->insertAll(*rel_112_Instruction_Throws);
rel_353_delta_ThrowPointsTo->insertAll(*rel_352_ThrowPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1290:1-1290:50];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2128:1-2129:31];RunningThread(?hctx,?value) :- \n   MainThread(?hctx,?value).;)",profile);
if (!rel_139_MainThread->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_139_MainThread->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_245_RunningThread_op_ctxt,rel_245_RunningThread->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_245_RunningThread->insert(tuple,READ_OP_CONTEXT(rel_245_RunningThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2128:1-2129:31];RunningThread(?hctx,?value) :-     MainThread(?hctx,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2128:1-2129:31];RunningThread(?hctx,?value) :- \n   MainThread(?hctx,?value).;)" <<  rel_245_RunningThread->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1290:1-1290:50];)" <<  rel_245_RunningThread->size() << "\n";
}rel_246_delta_RunningThread->insertAll(*rel_245_RunningThread);
rel_223_delta_ReachableCurrentThreadInvocation->insertAll(*rel_222_ReachableCurrentThreadInvocation);
{
	RamLogger logger(R"(@t-nonrecursive-relation;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1304:1-1304:30];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_320_SystemThreadGroup->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_320_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_466_isContext->insert(tuple,READ_OP_CONTEXT(rel_466_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_140_MainThreadGroup->empty()&&!rel_320_SystemThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_140_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_320_SystemThreadGroup) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_466_isContext->insert(tuple,READ_OP_CONTEXT(rel_466_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_139_MainThread->empty()&&!rel_140_MainThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_139_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_140_MainThreadGroup) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_466_isContext->insert(tuple,READ_OP_CONTEXT(rel_466_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2238:1-2238:101];isContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)",profile);
rel_466_isContext->insert(pack(ram::Tuple<RamDomain,2>({42,42})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2238:1-2238:101];isContext([\"<<immutable-context>>\",\"<<immutable-context>>\"]).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2239:1-2239:95];isContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)",profile);
rel_466_isContext->insert(pack(ram::Tuple<RamDomain,2>({38,38})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2239:1-2239:95];isContext([\"<<initial-context>>\",\"<<initial-context>>\"]).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2240:1-2240:106];isContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)",profile);
rel_466_isContext->insert(pack(ram::Tuple<RamDomain,2>({39,39})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2240:1-2240:106];isContext([\"<<jvm-startup-context>>\",\"<<jvm-startup-context>>\"]).;)" <<  rel_466_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2241:1-2241:92];isContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)",profile);
rel_466_isContext->insert(pack(ram::Tuple<RamDomain,2>({41,41})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2241:1-2241:92];isContext([\"<<clinit-context>>\",\"<<clinit-context>>\"]).;)" <<  rel_466_isContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1304:1-1304:30];)" <<  rel_466_isContext->size() << "\n";
}rel_467_delta_isContext->insertAll(*rel_466_isContext);
{
	RamLogger logger(R"(@t-nonrecursive-relation;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1305:1-1305:33];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2252:1-2252:82];isHContext([\"<<immutable-hcontext>>\"]).;)",profile);
rel_471_isHContext->insert(pack(ram::Tuple<RamDomain,1>({43})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2252:1-2252:82];isHContext([\"<<immutable-hcontext>>\"]).;)" <<  rel_471_isHContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2253:1-2253:85];isHContext([\"<<jvm-startup-hcontext>>\"]).;)",profile);
rel_471_isHContext->insert(pack(ram::Tuple<RamDomain,1>({40})));
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2253:1-2253:85];isHContext([\"<<jvm-startup-hcontext>>\"]).;)" <<  rel_471_isHContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1305:1-1305:33];)" <<  rel_471_isHContext->size() << "\n";
}rel_472_delta_isHContext->insertAll(*rel_471_isHContext);
rel_95_delta_ImmutableContextFromHContext->insertAll(*rel_94_ImmutableContextFromHContext);
rel_98_delta_ImmutableHContextFromContext->insertAll(*rel_97_ImmutableHContextFromContext);
rel_92_delta_ImmutableContextFromContext->insertAll(*rel_91_ImmutableContextFromContext);
{
	RamLogger logger(R"(@t-nonrecursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1319:1-1319:72];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_320_SystemThreadGroup->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_320_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_140_MainThreadGroup->empty()&&!rel_320_SystemThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_140_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_320_SystemThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_140_MainThreadGroup->empty()&&!rel_320_SystemThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_140_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_320_SystemThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[0]),(RamDomain)(env4[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env3[2])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_139_MainThread->empty()&&!rel_140_MainThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_139_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_140_MainThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env0[1])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_139_MainThread->empty()&&!rel_140_MainThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_139_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_140_MainThreadGroup) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[0]),(RamDomain)(env4[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env3[2])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];VarPointsTo(?groupHCtx,?group,[hctxValue,?value],?groupParam) :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)",profile);
if (!rel_50_ContextForEntryPoint->empty()&&!rel_81_HContextForEntryPoint->empty()&&!rel_159_MockForFormal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_ContextForEntryPoint_op_ctxt,rel_50_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt,rel_81_HContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_159_MockForFormal_op_ctxt,rel_159_MockForFormal->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_81_HContextForEntryPoint->equalRange<1>(key,READ_OP_CONTEXT(rel_81_HContextForEntryPoint_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_159_MockForFormal->equalRange<3>(key,READ_OP_CONTEXT(rel_159_MockForFormal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];VarPointsTo(?hctx,?value,?ctx,?formal) :-     ContextForEntryPoint(?ctx,?method),    HContextForEntryPoint(?hctx,?method),    MockForFormal(?value,?formal,?class,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2579:1-2583:51];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   ContextForEntryPoint(?ctx,?method),\n   HContextForEntryPoint(?hctx,?method),\n   MockForFormal(?value,?formal,?class,?method).;)" <<  rel_372_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)",profile);
if (!rel_234_ReceiverPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_234_ReceiverPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_234_ReceiverPointsTo_op_ctxt,rel_234_ReceiverPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
auto ref = env0[1];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env1 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env1[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env1[0],env1[1]}))),(RamDomain)(env0[2])});
if (!(rel_372_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :-     ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2585:1-2589:68];VarPointsTo([ctxValue2],?value,[ctxValue1,ctxValue2],?receiver) :- \n   ReceiverPointsTo(?value,[ctxValue1,ctxValue2],?receiver,?class,?method).;)" <<  rel_372_VarPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1319:1-1319:72];)" <<  rel_372_VarPointsTo->size() << "\n";
}rel_373_delta_VarPointsTo->insertAll(*rel_372_VarPointsTo);
rel_106_delta_InstanceFieldPointsTo->insertAll(*rel_105_InstanceFieldPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1321:1-1321:68];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2341:1-2344:30];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   _FieldInitialValue(?signature,?const),\n   Value_Num(?value,?const),\n   isImmutableHContext(?hctx).;)",profile);
if (!rel_367_Value_Num->empty()&&!rel_420_FieldInitialValue->empty()&&!rel_476_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_420_FieldInitialValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_420_FieldInitialValue_op_ctxt,rel_420_FieldInitialValue->createContext());
CREATE_OP_CONTEXT(rel_476_isImmutableHContext_op_ctxt,rel_476_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_367_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_476_isImmutableHContext) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_253_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2341:1-2344:30];StaticFieldPointsTo(?hctx,?value,?signature) :-     _FieldInitialValue(?signature,?const),    Value_Num(?value,?const),    isImmutableHContext(?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2341:1-2344:30];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   _FieldInitialValue(?signature,?const),\n   Value_Num(?value,?const),\n   isImmutableHContext(?hctx).;)" <<  rel_253_StaticFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1321:1-1321:68];)" <<  rel_253_StaticFieldPointsTo->size() << "\n";
}rel_254_delta_StaticFieldPointsTo->insertAll(*rel_253_StaticFieldPointsTo);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1322:1-1322:93];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2555:1-2558:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :- \n   MockObjectContext(?hctx,?arrayValue,?arrayType),\n   isArrayType(?arrayType),\n   MockObjectForComponentType(?componentValue,?arrayType).;)",profile);
if (!rel_161_MockObjectContext->empty()&&!rel_162_MockObjectForComponentType->empty()&&!rel_458_isArrayType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_161_MockObjectContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_161_MockObjectContext_op_ctxt,rel_161_MockObjectContext->createContext());
CREATE_OP_CONTEXT(rel_162_MockObjectForComponentType_op_ctxt,rel_162_MockObjectForComponentType->createContext());
CREATE_OP_CONTEXT(rel_458_isArrayType_op_ctxt,rel_458_isArrayType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[2]});
auto range = rel_458_isArrayType->equalRange<0>(key,READ_OP_CONTEXT(rel_458_isArrayType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_162_MockObjectForComponentType->equalRange<1>(key,READ_OP_CONTEXT(rel_162_MockObjectForComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_19_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2555:1-2558:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :-     MockObjectContext(?hctx,?arrayValue,?arrayType),    isArrayType(?arrayType),    MockObjectForComponentType(?componentValue,?arrayType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2555:1-2558:59];ArrayIndexPointsTo(?hctx,?componentValue,?hctx,?arrayValue) :- \n   MockObjectContext(?hctx,?arrayValue,?arrayType),\n   isArrayType(?arrayType),\n   MockObjectForComponentType(?componentValue,?arrayType).;)" <<  rel_19_ArrayIndexPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1322:1-1322:93];)" <<  rel_19_ArrayIndexPointsTo->size() << "\n";
}rel_20_delta_ArrayIndexPointsTo->insertAll(*rel_19_ArrayIndexPointsTo);
rel_37_delta_CallGraphEdge->insertAll(*rel_36_CallGraphEdge);
rel_214_delta_Reachable->insertAll(*rel_213_Reachable);
{
	RamLogger logger(R"(@t-nonrecursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1327:1-1327:53];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_208_PublicMethodOfComponent->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_208_PublicMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_208_PublicMethodOfComponent_op_ctxt,rel_208_PublicMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :-     PublicMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   PublicMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_195_OverridingProtectedMethodOfComponent->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_195_OverridingProtectedMethodOfComponent->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_195_OverridingProtectedMethodOfComponent_op_ctxt,rel_195_OverridingProtectedMethodOfComponent->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :-     OverridingProtectedMethodOfComponent(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedMethodOfComponent(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_404_CallbackMethod->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_404_CallbackMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_404_CallbackMethod_op_ctxt,rel_404_CallbackMethod->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :-     _CallbackMethod(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1471:1-1476:28];ReachableContext(?ctx,?meth) :- \n   _CallbackMethod(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_209_PublicOnMethodOfLayoutControl->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_209_PublicOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_209_PublicOnMethodOfLayoutControl_op_ctxt,rel_209_PublicOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :-     PublicOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_196_OverridingProtectedOnMethodOfLayoutControl->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_196_OverridingProtectedOnMethodOfLayoutControl->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_196_OverridingProtectedOnMethodOfLayoutControl_op_ctxt,rel_196_OverridingProtectedOnMethodOfLayoutControl->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :-     OverridingProtectedOnMethodOfLayoutControl(?meth),    isImmutableContext(?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1492:1-1496:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfLayoutControl(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>()>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)",profile);
if (!rel_320_SystemThreadGroup->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({94,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_320_SystemThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(94)});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];ReachableContext([hctxValue,?value],'<java.lang.ThreadGroup: void <init>()>') :-     _ThisVar('<java.lang.ThreadGroup: void <init>()>',?this),    SystemThreadGroup([hctxValue],?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2152:1-2158:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>()>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>()>\",?this),\n   SystemThreadGroup([hctxValue],?value).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_140_MainThreadGroup->empty()&&!rel_320_SystemThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_320_SystemThreadGroup_op_ctxt,rel_320_SystemThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({147,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_140_MainThreadGroup) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,147,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_320_SystemThreadGroup) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(147)});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];ReachableContext([hctxValue,?value],'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     _ThisVar('<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThreadGroup([hctxValue],?value),    _FormalParam(0,'<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    SystemThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2159:1-2169:59];ReachableContext([hctxValue,?value],\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThreadGroup([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   SystemThreadGroup(?groupHCtx,?group).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];ReachableContext([hctxValue,?value],\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)",profile);
if (!rel_139_MainThread->empty()&&!rel_140_MainThreadGroup->empty()&&!rel_422_FormalParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_139_MainThread_op_ctxt,rel_139_MainThread->createContext());
CREATE_OP_CONTEXT(rel_140_MainThreadGroup_op_ctxt,rel_140_MainThreadGroup->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({93,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
for(const auto& env1 : *rel_139_MainThread) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,3> key({0,93,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_140_MainThreadGroup) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(93)});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];ReachableContext([hctxValue,?value],'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>') :-     _ThisVar('<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?this),    MainThread([hctxValue],?value),    _FormalParam(0,'<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>',?groupParam),    MainThreadGroup(?groupHCtx,?group).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2170:1-2180:59];ReachableContext([hctxValue,?value],\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\") :- \n   _ThisVar(\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?this),\n   MainThread([hctxValue],?value),\n   _FormalParam(0,\"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>\",?groupParam),\n   MainThreadGroup(?groupHCtx,?group).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2242:1-2244:34];ReachableContext(?initialContext,?method) :- \n   isInitialContext(?initialContext),\n   MainMethodDeclaration(?method).;)",profile);
if (!rel_138_MainMethodDeclaration->empty()&&!rel_477_isInitialContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_477_isInitialContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_477_isInitialContext_op_ctxt,rel_477_isInitialContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_138_MainMethodDeclaration) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2242:1-2244:34];ReachableContext(?initialContext,?method) :-     isInitialContext(?initialContext),    MainMethodDeclaration(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2242:1-2244:34];ReachableContext(?initialContext,?method) :- \n   isInitialContext(?initialContext),\n   MainMethodDeclaration(?method).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2245:1-2247:30];ReachableContext(?jvmStartUpContext,?method) :- \n   isJVMStartupContext(?jvmStartUpContext),\n   ImplicitReachable(?method).;)",profile);
if (!rel_100_ImplicitReachable->empty()&&!rel_480_isJVMStartupContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_480_isJVMStartupContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_100_ImplicitReachable_op_ctxt,rel_100_ImplicitReachable->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_480_isJVMStartupContext_op_ctxt,rel_480_isJVMStartupContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_100_ImplicitReachable) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2245:1-2247:30];ReachableContext(?jvmStartUpContext,?method) :-     isJVMStartupContext(?jvmStartUpContext),    ImplicitReachable(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2245:1-2247:30];ReachableContext(?jvmStartUpContext,?method) :- \n   isJVMStartupContext(?jvmStartUpContext),\n   ImplicitReachable(?method).;)" <<  rel_219_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2598:1-2599:39];ReachableContext(?ctx,?method) :- \n   ContextForEntryPoint(?ctx,?method).;)",profile);
if (!rel_50_ContextForEntryPoint->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_50_ContextForEntryPoint->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_50_ContextForEntryPoint_op_ctxt,rel_50_ContextForEntryPoint->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_219_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2598:1-2599:39];ReachableContext(?ctx,?method) :-     ContextForEntryPoint(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2598:1-2599:39];ReachableContext(?ctx,?method) :- \n   ContextForEntryPoint(?ctx,?method).;)" <<  rel_219_ReachableContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1327:1-1327:53];)" <<  rel_219_ReachableContext->size() << "\n";
}rel_220_delta_ReachableContext->insertAll(*rel_219_ReachableContext);
rel_178_delta_OptInterproceduralAssign->insertAll(*rel_177_OptInterproceduralAssign);
rel_189_delta_OptStoreIntoArray->insertAll(*rel_188_OptStoreIntoArray);
rel_128_delta_LoadHeapInstanceField->insertAll(*rel_127_LoadHeapInstanceField);
rel_301_delta_StoreHeapInstanceField->insertAll(*rel_300_StoreHeapInstanceField);
rel_125_delta_LoadHeapArrayIndex->insertAll(*rel_124_LoadHeapArrayIndex);
rel_298_delta_StoreHeapArrayIndex->insertAll(*rel_297_StoreHeapArrayIndex);
rel_173_delta_OptAssignCast->insertAll(*rel_172_OptAssignCast);
rel_232_delta_ReachableStoreStaticFieldFrom->insertAll(*rel_231_ReachableStoreStaticFieldFrom);
rel_182_delta_OptLoadHeapArrayIndex->insertAll(*rel_181_OptLoadHeapArrayIndex);
rel_346_delta_Temp1->insertAll(*rel_345_Temp1);
rel_349_delta_Temp2->insertAll(*rel_348_Temp2);
rel_226_delta_ReachableLoadArrayIndexBase->insertAll(*rel_225_ReachableLoadArrayIndexBase);
rel_229_delta_ReachableStoreArrayIndexBase->insertAll(*rel_228_ReachableStoreArrayIndexBase);
rel_192_delta_OptVirtualMethodInvocationBase->insertAll(*rel_191_OptVirtualMethodInvocationBase);
rel_185_delta_OptSpecialMethodInvocationBase->insertAll(*rel_184_OptSpecialMethodInvocationBase);
rel_337_delta_Tamiflex_Invoke->insertAll(*rel_336_Tamiflex_Invoke);
rel_322_delta_TamiflexCallGraphEdge->insertAll(*rel_321_TamiflexCallGraphEdge);
rel_325_delta_TamiflexConstructorCallGraphEdge->insertAll(*rel_324_TamiflexConstructorCallGraphEdge);
rel_331_delta_TamiflexInvocationFirstParam->insertAll(*rel_330_TamiflexInvocationFirstParam);
rel_328_delta_TamiflexInvocationArgumentArrayValue->insertAll(*rel_327_TamiflexInvocationArgumentArrayValue);
for(;;) {
SECTIONS_START;
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1259:1-1259:64];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_211_delta_PublicOnMethodOfReachableListener->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_211_delta_PublicOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_211_delta_PublicOnMethodOfReachableListener_op_ctxt,rel_211_delta_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_76_new_ForcedReachableAndroidContext_op_ctxt,rel_76_new_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
if( !rel_74_ForcedReachableAndroidContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_76_new_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_76_new_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];@new_ForcedReachableAndroidContext(?ctx,?meth) :-     @delta_PublicOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ForcedReachableAndroidContext(?ctx,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_76_new_ForcedReachableAndroidContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_198_delta_OverridingProtectedOnMethodOfReachableListener->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_198_delta_OverridingProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_198_delta_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_198_delta_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_76_new_ForcedReachableAndroidContext_op_ctxt,rel_76_new_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
if( !rel_74_ForcedReachableAndroidContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_76_new_ForcedReachableAndroidContext->insert(tuple,READ_OP_CONTEXT(rel_76_new_ForcedReachableAndroidContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];@new_ForcedReachableAndroidContext(?ctx,?meth) :-     @delta_OverridingProtectedOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ForcedReachableAndroidContext(?ctx,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ForcedReachableAndroidContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ForcedReachableAndroidContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_76_new_ForcedReachableAndroidContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1259:1-1259:64];)" <<  rel_76_new_ForcedReachableAndroidContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1263:1-1263:81];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableApplicationObjectOfType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1497:1-1500:36];ReachableApplicationObjectOfType(?hctx,?value,?ofType) :- \n   _ApplicationClass(?ofType),\n   Value_Type(?value,?ofType),\n   VarPointsTo(?hctx,?value,_,_).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_368_Value_Type->empty()&&!rel_387_ApplicationClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_387_ApplicationClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_218_new_ReachableApplicationObjectOfType_op_ctxt,rel_218_new_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_216_ReachableApplicationObjectOfType_op_ctxt,rel_216_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_387_ApplicationClass_op_ctxt,rel_387_ApplicationClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_368_Value_Type->equalRange<1>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,env1[0],0,0});
auto range = rel_373_delta_VarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_216_ReachableApplicationObjectOfType->contains(Tuple<RamDomain,3>({env2[0],env1[0],env0[0]}),READ_OP_CONTEXT(rel_216_ReachableApplicationObjectOfType_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_218_new_ReachableApplicationObjectOfType->insert(tuple,READ_OP_CONTEXT(rel_218_new_ReachableApplicationObjectOfType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1497:1-1500:36];@new_ReachableApplicationObjectOfType(?hctx,?value,?ofType) :-     _ApplicationClass(?ofType),    Value_Type(?value,?ofType),    @delta_VarPointsTo(?hctx,?value, _unnamed_var1, _unnamed_var2),    !ReachableApplicationObjectOfType(?hctx,?value,?ofType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableApplicationObjectOfType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1497:1-1500:36];ReachableApplicationObjectOfType(?hctx,?value,?ofType) :- \n   _ApplicationClass(?ofType),\n   Value_Type(?value,?ofType),\n   VarPointsTo(?hctx,?value,_,_).;)" <<  rel_218_new_ReachableApplicationObjectOfType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1263:1-1263:81];)" <<  rel_218_new_ReachableApplicationObjectOfType->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1264:1-1264:84];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ApplicationObjectFlowingToLibrary;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)",profile);
if (!rel_217_delta_ReachableApplicationObjectOfType->empty()&&!rel_7_AndroidApplicationListenerClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_217_delta_ReachableApplicationObjectOfType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_delta_ReachableApplicationObjectOfType_op_ctxt,rel_217_delta_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_14_new_ApplicationObjectFlowingToLibrary_op_ctxt,rel_14_new_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_7_AndroidApplicationListenerClass_op_ctxt,rel_7_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_12_ApplicationObjectFlowingToLibrary_op_ctxt,rel_12_ApplicationObjectFlowingToLibrary->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_12_ApplicationObjectFlowingToLibrary->contains(Tuple<RamDomain,3>({env0[0],env0[1],env0[2]}),READ_OP_CONTEXT(rel_12_ApplicationObjectFlowingToLibrary_op_ctxt))) {
for(const auto& env1 : *rel_7_AndroidApplicationListenerClass) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_14_new_ApplicationObjectFlowingToLibrary->insert(tuple,READ_OP_CONTEXT(rel_14_new_ApplicationObjectFlowingToLibrary_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];@new_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :-     @delta_ReachableApplicationObjectOfType(?hctx,?value,?ofType),    AndroidApplicationListenerClass(?type),    !ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ApplicationObjectFlowingToLibrary;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)" <<  rel_14_new_ApplicationObjectFlowingToLibrary->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1264:1-1264:84];)" <<  rel_14_new_ApplicationObjectFlowingToLibrary->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1265:1-1265:54];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;PublicOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1505:1-1510:36];PublicOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_118_delta_LibraryReachableAppListenerType->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_145_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_delta_LibraryReachableAppListenerType_op_ctxt,rel_118_delta_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_212_new_PublicOnMethodOfReachableListener_op_ctxt,rel_212_new_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_210_PublicOnMethodOfReachableListener_op_ctxt,rel_210_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_210_PublicOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_210_PublicOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_118_delta_LibraryReachableAppListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_118_delta_LibraryReachableAppListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({4,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_212_new_PublicOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_212_new_PublicOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1505:1-1510:36];@new_PublicOnMethodOfReachableListener(?meth) :-     MethodDeclaredOrInherited(?meth,?class),    @delta_LibraryReachableAppListenerType(?class),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('public',?meth),    !PublicOnMethodOfReachableListener(?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;PublicOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1505:1-1510:36];PublicOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"public\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_212_new_PublicOnMethodOfReachableListener->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1265:1-1265:54];)" <<  rel_212_new_PublicOnMethodOfReachableListener->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1267:1-1267:50];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;LibraryReachableAppListenerType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];LibraryReachableAppListenerType(?type) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)",profile);
if (!rel_217_delta_ReachableApplicationObjectOfType->empty()&&!rel_7_AndroidApplicationListenerClass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_217_delta_ReachableApplicationObjectOfType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_217_delta_ReachableApplicationObjectOfType_op_ctxt,rel_217_delta_ReachableApplicationObjectOfType->createContext());
CREATE_OP_CONTEXT(rel_119_new_LibraryReachableAppListenerType_op_ctxt,rel_119_new_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_7_AndroidApplicationListenerClass_op_ctxt,rel_7_AndroidApplicationListenerClass->createContext());
CREATE_OP_CONTEXT(rel_117_LibraryReachableAppListenerType_op_ctxt,rel_117_LibraryReachableAppListenerType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_AndroidApplicationListenerClass) {
if( !rel_117_LibraryReachableAppListenerType->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_117_LibraryReachableAppListenerType_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_119_new_LibraryReachableAppListenerType->insert(tuple,READ_OP_CONTEXT(rel_119_new_LibraryReachableAppListenerType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];@new_LibraryReachableAppListenerType(?type) :-     @delta_ReachableApplicationObjectOfType(?hctx,?value,?ofType),    AndroidApplicationListenerClass(?type),    !LibraryReachableAppListenerType(?type).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;LibraryReachableAppListenerType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1501:1-1504:42];LibraryReachableAppListenerType(?type) :- \n   ReachableApplicationObjectOfType(?hctx,?value,?ofType),\n   AndroidApplicationListenerClass(?type).;)" <<  rel_119_new_LibraryReachableAppListenerType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1267:1-1267:50];)" <<  rel_119_new_LibraryReachableAppListenerType->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1268:1-1268:57];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1511:1-1516:39];ProtectedOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)",profile);
if (!rel_118_delta_LibraryReachableAppListenerType->empty()&&!rel_145_MethodDeclaredOrInherited->empty()&&!rel_156_Method_SimpleName->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_145_MethodDeclaredOrInherited->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_118_delta_LibraryReachableAppListenerType_op_ctxt,rel_118_delta_LibraryReachableAppListenerType->createContext());
CREATE_OP_CONTEXT(rel_207_new_ProtectedOnMethodOfReachableListener_op_ctxt,rel_207_new_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_145_MethodDeclaredOrInherited_op_ctxt,rel_145_MethodDeclaredOrInherited->createContext());
CREATE_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt,rel_156_Method_SimpleName->createContext());
CREATE_OP_CONTEXT(rel_205_ProtectedOnMethodOfReachableListener_op_ctxt,rel_205_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_205_ProtectedOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_205_ProtectedOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_118_delta_LibraryReachableAppListenerType->equalRange<0>(key,READ_OP_CONTEXT(rel_118_delta_LibraryReachableAppListenerType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_156_Method_SimpleName->equalRange<0>(key,READ_OP_CONTEXT(rel_156_Method_SimpleName_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( regex_wrapper(symTable.resolve((size_t)85),symTable.resolve((size_t)env2[1]))) {
const Tuple<RamDomain,2> key({61,env0[0]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_207_new_ProtectedOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_207_new_ProtectedOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1511:1-1516:39];@new_ProtectedOnMethodOfReachableListener(?meth) :-     MethodDeclaredOrInherited(?meth,?class),    @delta_LibraryReachableAppListenerType(?class),    Method_SimpleName(?meth,?simplename),    _Method_Modifier('protected',?meth),    !ProtectedOnMethodOfReachableListener(?meth),    '^on.*' match ?simplename.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1511:1-1516:39];ProtectedOnMethodOfReachableListener(?meth) :- \n   MethodDeclaredOrInherited(?meth,?class),\n   LibraryReachableAppListenerType(?class),\n   Method_SimpleName(?meth,?simplename),\n   _Method_Modifier(\"protected\",?meth),\n   \"^on.*\" match ?simplename.;)" <<  rel_207_new_ProtectedOnMethodOfReachableListener->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1268:1-1268:57];)" <<  rel_207_new_ProtectedOnMethodOfReachableListener->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1269:1-1269:67];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OverridingProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1517:1-1519:49];OverridingProtectedOnMethodOfReachableListener(?meth) :- \n   ProtectedOnMethodOfReachableListener(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)",profile);
if (!rel_206_delta_ProtectedOnMethodOfReachableListener->empty()&&!rel_10_AppMethodOverridesAndroidLibraryMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_206_delta_ProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_206_delta_ProtectedOnMethodOfReachableListener_op_ctxt,rel_206_delta_ProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_199_new_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_199_new_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt,rel_10_AppMethodOverridesAndroidLibraryMethod->createContext());
CREATE_OP_CONTEXT(rel_197_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_197_OverridingProtectedOnMethodOfReachableListener->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_197_OverridingProtectedOnMethodOfReachableListener->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_197_OverridingProtectedOnMethodOfReachableListener_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_10_AppMethodOverridesAndroidLibraryMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_10_AppMethodOverridesAndroidLibraryMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_199_new_OverridingProtectedOnMethodOfReachableListener->insert(tuple,READ_OP_CONTEXT(rel_199_new_OverridingProtectedOnMethodOfReachableListener_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1517:1-1519:49];@new_OverridingProtectedOnMethodOfReachableListener(?meth) :-     @delta_ProtectedOnMethodOfReachableListener(?meth),    AppMethodOverridesAndroidLibraryMethod(?meth),    !OverridingProtectedOnMethodOfReachableListener(?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OverridingProtectedOnMethodOfReachableListener;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1517:1-1519:49];OverridingProtectedOnMethodOfReachableListener(?meth) :- \n   ProtectedOnMethodOfReachableListener(?meth),\n   AppMethodOverridesAndroidLibraryMethod(?meth).;)" <<  rel_199_new_OverridingProtectedOnMethodOfReachableListener->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1269:1-1269:67];)" <<  rel_199_new_OverridingProtectedOnMethodOfReachableListener->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1272:1-1272:82];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;FormalOfForcedReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1542:1-1545:34];FormalOfForcedReachableContext(?ctx,?formal,?formalType) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   _FormalParam(_,?meth,?formal),\n   Var_Type(?formal,?formalType).;)",profile);
if (!rel_75_delta_ForcedReachableAndroidContext->empty()&&!rel_376_Var_Type->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_75_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_75_delta_ForcedReachableAndroidContext_op_ctxt,rel_75_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_79_new_FormalOfForcedReachableContext_op_ctxt,rel_79_new_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt,rel_77_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_422_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[2],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_77_FormalOfForcedReachableContext->contains(Tuple<RamDomain,3>({env0[0],env1[2],env2[1]}),READ_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[2]),(RamDomain)(env2[1])});
if (!(rel_79_new_FormalOfForcedReachableContext->insert(tuple,READ_OP_CONTEXT(rel_79_new_FormalOfForcedReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1542:1-1545:34];@new_FormalOfForcedReachableContext(?ctx,?formal,?formalType) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    _FormalParam( _unnamed_var1,?meth,?formal),    Var_Type(?formal,?formalType),    !FormalOfForcedReachableContext(?ctx,?formal,?formalType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;FormalOfForcedReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1542:1-1545:34];FormalOfForcedReachableContext(?ctx,?formal,?formalType) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   _FormalParam(_,?meth,?formal),\n   Var_Type(?formal,?formalType).;)" <<  rel_79_new_FormalOfForcedReachableContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1272:1-1272:82];)" <<  rel_79_new_FormalOfForcedReachableContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1273:1-1273:100];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ApplicationObjectFlowingToLibraryStaticType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1552:1-1554:39];ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :- \n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   SupertypeOf(?possibleType,?ofType).;)",profile);
if (!rel_13_delta_ApplicationObjectFlowingToLibrary->empty()&&!rel_319_SupertypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_delta_ApplicationObjectFlowingToLibrary->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_13_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_13_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_17_new_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_17_new_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_15_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_15_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_319_SupertypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_15_ApplicationObjectFlowingToLibraryStaticType->contains(Tuple<RamDomain,3>({env0[0],env0[1],env1[0]}),READ_OP_CONTEXT(rel_15_ApplicationObjectFlowingToLibraryStaticType_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0])});
if (!(rel_17_new_ApplicationObjectFlowingToLibraryStaticType->insert(tuple,READ_OP_CONTEXT(rel_17_new_ApplicationObjectFlowingToLibraryStaticType_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1552:1-1554:39];@new_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :-     @delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    SupertypeOf(?possibleType,?ofType),    !ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ApplicationObjectFlowingToLibraryStaticType;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1552:1-1554:39];ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?possibleType) :- \n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   SupertypeOf(?possibleType,?ofType).;)" <<  rel_17_new_ApplicationObjectFlowingToLibraryStaticType->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1273:1-1273:100];)" <<  rel_17_new_ApplicationObjectFlowingToLibraryStaticType->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1278:1-1278:47];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1585:1-1587:53];InitializedClass(?superclass) :- \n   InitializedClass(?classOrInterface),\n   _DirectSuperclass(?classOrInterface,?superclass).;)",profile);
if (!rel_103_delta_InitializedClass->empty()&&!rel_411_DirectSuperclass->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_delta_InitializedClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_103_delta_InitializedClass_op_ctxt,rel_103_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt,rel_104_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt,rel_411_DirectSuperclass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_411_DirectSuperclass->equalRange<0>(key,READ_OP_CONTEXT(rel_411_DirectSuperclass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_102_InitializedClass->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_104_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1585:1-1587:53];@new_InitializedClass(?superclass) :-     @delta_InitializedClass(?classOrInterface),    _DirectSuperclass(?classOrInterface,?superclass),    !InitializedClass(?superclass).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1585:1-1587:53];InitializedClass(?superclass) :- \n   InitializedClass(?classOrInterface),\n   _DirectSuperclass(?classOrInterface,?superclass).;)" <<  rel_104_new_InitializedClass->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1591:1-1594:39];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_27_AssignHeapAllocation->empty()&&!rel_87_HeapAllocation_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt,rel_104_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt,rel_27_AssignHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_27_AssignHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_27_AssignHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_87_HeapAllocation_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_102_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_104_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1591:1-1594:39];@new_InitializedClass(?class) :-     @delta_Reachable(?inmethod),    AssignHeapAllocation(?heap, _unnamed_var1,?inmethod),    HeapAllocation_Type(?heap,?class),    !InitializedClass(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1591:1-1594:39];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   AssignHeapAllocation(?heap,_,?inmethod),\n   HeapAllocation_Type(?heap,?class).;)" <<  rel_104_new_InitializedClass->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1595:1-1600:45];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   isStaticMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_DeclaringType(?signature,?class).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_109_Instruction_Method->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_491_isStaticMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt,rel_104_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_491_isStaticMethodInvocation_Insn_op_ctxt,rel_491_isStaticMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_491_isStaticMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_491_isStaticMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_102_InitializedClass->contains(Tuple<RamDomain,1>({env4[1]}),READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env4[1])});
if (!(rel_104_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1595:1-1600:45];@new_InitializedClass(?class) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    isStaticMethodInvocation_Insn(?invocation),    MethodInvocation_Method(?invocation,?signature),    Method_DeclaringType(?signature,?class),    !InitializedClass(?class).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1595:1-1600:45];InitializedClass(?class) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   isStaticMethodInvocation_Insn(?invocation),\n   MethodInvocation_Method(?invocation,?signature),\n   Method_DeclaringType(?signature,?class).;)" <<  rel_104_new_InitializedClass->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1601:1-1604:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   StoreStaticField(_,?signature,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_73_Field_DeclaringType->empty()&&!rel_306_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt,rel_104_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_306_StoreStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_73_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_102_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_104_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1601:1-1604:55];@new_InitializedClass(?classOrInterface) :-     @delta_Reachable(?inmethod),    StoreStaticField( _unnamed_var1,?signature,?inmethod),    Field_DeclaringType(?signature,?classOrInterface),    !InitializedClass(?classOrInterface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1601:1-1604:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   StoreStaticField(_,?signature,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)" <<  rel_104_new_InitializedClass->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1605:1-1608:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   LoadStaticField(?signature,_,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_73_Field_DeclaringType->empty()&&!rel_133_LoadStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt,rel_104_new_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt,rel_73_Field_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_102_InitializedClass_op_ctxt,rel_102_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt,rel_133_LoadStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_133_LoadStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_73_Field_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_73_Field_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_102_InitializedClass->contains(Tuple<RamDomain,1>({env2[1]}),READ_OP_CONTEXT(rel_102_InitializedClass_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[1])});
if (!(rel_104_new_InitializedClass->insert(tuple,READ_OP_CONTEXT(rel_104_new_InitializedClass_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1605:1-1608:55];@new_InitializedClass(?classOrInterface) :-     @delta_Reachable(?inmethod),    LoadStaticField(?signature, _unnamed_var1,?inmethod),    Field_DeclaringType(?signature,?classOrInterface),    !InitializedClass(?classOrInterface).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InitializedClass;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1605:1-1608:55];InitializedClass(?classOrInterface) :- \n   Reachable(?inmethod),\n   LoadStaticField(?signature,_,?inmethod),\n   Field_DeclaringType(?signature,?classOrInterface).;)" <<  rel_104_new_InitializedClass->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1278:1-1278:47];)" <<  rel_104_new_InitializedClass->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1279:1-1279:88];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1609:1-1611:42];Instruction_Throws(?hctx,?value,?ctx,?insn) :- \n   Throw(?insn,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_351_Throw->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_351_Throw->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt,rel_114_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt,rel_112_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_351_Throw_op_ctxt,rel_351_Throw->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_112_Instruction_Throws->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_114_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1609:1-1611:42];@new_Instruction_Throws(?hctx,?value,?ctx,?insn) :-     Throw(?insn,?var),    @delta_VarPointsTo(?hctx,?value,?ctx,?var),    !Instruction_Throws(?hctx,?value,?ctx,?insn).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1609:1-1611:42];Instruction_Throws(?hctx,?value,?ctx,?insn) :- \n   Throw(?insn,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_114_new_Instruction_Throws->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),\n   ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod).\n\n   .plan 1:(2,1);)",profile);
if (!rel_37_delta_CallGraphEdge->empty()&&!rel_352_ThrowPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_37_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_37_delta_CallGraphEdge_op_ctxt,rel_37_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_353_delta_ThrowPointsTo_op_ctxt,rel_353_delta_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt,rel_114_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt,rel_112_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt,rel_352_ThrowPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_352_ThrowPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_112_Instruction_Throws->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt))) && (!rel_353_delta_ThrowPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_353_delta_ThrowPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_114_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];@new_Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :-     @delta_CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),    ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod),    !Instruction_Throws(?hctx,?value,?callerCtx,?invocation),    !@delta_ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod).     .plan 1:(2,1);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Instruction_Throws;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),\n   ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod).\n\n   .plan 1:(2,1);)" <<  rel_114_new_Instruction_Throws->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;Instruction_Throws;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),\n   ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod).\n\n   .plan 1:(2,1);)",profile);
if (!rel_353_delta_ThrowPointsTo->empty()&&!rel_36_CallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_353_delta_ThrowPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_353_delta_ThrowPointsTo_op_ctxt,rel_353_delta_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt,rel_114_new_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt,rel_112_Instruction_Throws->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_36_CallGraphEdge->equalRange<2,3>(key,READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_112_Instruction_Throws->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_112_Instruction_Throws_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_114_new_Instruction_Throws->insert(tuple,READ_OP_CONTEXT(rel_114_new_Instruction_Throws_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];@new_Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :-     @delta_ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod),    CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),    !Instruction_Throws(?hctx,?value,?callerCtx,?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Instruction_Throws;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1612:1-1614:55];Instruction_Throws(?hctx,?value,?callerCtx,?invocation) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?tomethod),\n   ThrowPointsTo(?hctx,?value,?calleeCtx,?tomethod).\n\n   .plan 1:(2,1);)" <<  rel_114_new_Instruction_Throws->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1279:1-1279:88];)" <<  rel_114_new_Instruction_Throws->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1282:1-1282:80];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1616:1-1619:39];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Instruction_Method(?insn,?method),\n   !ExceptionHandler_InRange(_,?insn).;)",profile);
if (!rel_113_delta_Instruction_Throws->empty()&&!rel_109_Instruction_Method->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_113_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_delta_Instruction_Throws_op_ctxt,rel_113_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_354_new_ThrowPointsTo_op_ctxt,rel_354_new_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt,rel_352_ThrowPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_59_ExceptionHandler_InRange->equalRange<1>(Tuple<RamDomain,2>({0,env0[3]}),READ_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_352_ThrowPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env1[1]}),READ_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[1])});
if (!(rel_354_new_ThrowPointsTo->insert(tuple,READ_OP_CONTEXT(rel_354_new_ThrowPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ThrowPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1616:1-1619:39];@new_ThrowPointsTo(?hctx,?value,?ctx,?method) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Instruction_Method(?insn,?method),    !ExceptionHandler_InRange(_,?insn),    !ThrowPointsTo(?hctx,?value,?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1616:1-1619:39];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Instruction_Method(?insn,?method),\n   !ExceptionHandler_InRange(_,?insn).;)" <<  rel_354_new_ThrowPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1620:1-1626:54];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   Instruction_Method(?insn,?method),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   !ExceptionHandler_TypeIsCaught(?valueType,?block).;)",profile);
if (!rel_113_delta_Instruction_Throws->empty()&&!rel_63_ExceptionHandler_SameBlock_Repr->empty()&&!rel_65_ExceptionHandler_SameInsn_Repr->empty()&&!rel_109_Instruction_Method->empty()&&!rel_368_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_113_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_delta_Instruction_Throws_op_ctxt,rel_113_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_354_new_ThrowPointsTo_op_ctxt,rel_354_new_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt,rel_63_ExceptionHandler_SameBlock_Repr->createContext());
CREATE_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt,rel_65_ExceptionHandler_SameInsn_Repr->createContext());
CREATE_OP_CONTEXT(rel_67_ExceptionHandler_TypeIsCaught_op_ctxt,rel_67_ExceptionHandler_TypeIsCaught->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt,rel_352_ThrowPointsTo->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_352_ThrowPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env2[1]}),READ_OP_CONTEXT(rel_352_ThrowPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_65_ExceptionHandler_SameInsn_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_65_ExceptionHandler_SameInsn_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[1],0});
auto range = rel_63_ExceptionHandler_SameBlock_Repr->equalRange<0>(key,READ_OP_CONTEXT(rel_63_ExceptionHandler_SameBlock_Repr_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_67_ExceptionHandler_TypeIsCaught->contains(Tuple<RamDomain,2>({env1[1],env4[1]}),READ_OP_CONTEXT(rel_67_ExceptionHandler_TypeIsCaught_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env2[1])});
if (!(rel_354_new_ThrowPointsTo->insert(tuple,READ_OP_CONTEXT(rel_354_new_ThrowPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ThrowPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1620:1-1626:54];@new_ThrowPointsTo(?hctx,?value,?ctx,?method) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Value_Type(?value,?valueType),    Instruction_Method(?insn,?method),    ExceptionHandler_SameInsn_Repr(?insn,?repr),    ExceptionHandler_SameBlock_Repr(?repr,?block),    !ExceptionHandler_TypeIsCaught(?valueType,?block),    !ThrowPointsTo(?hctx,?value,?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ThrowPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1620:1-1626:54];ThrowPointsTo(?hctx,?value,?ctx,?method) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   Instruction_Method(?insn,?method),\n   ExceptionHandler_SameInsn_Repr(?insn,?repr),\n   ExceptionHandler_SameBlock_Repr(?repr,?block),\n   !ExceptionHandler_TypeIsCaught(?valueType,?block).;)" <<  rel_354_new_ThrowPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1282:1-1282:80];)" <<  rel_354_new_ThrowPointsTo->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1290:1-1290:50];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;RunningThread;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];RunningThread([hctxValue],?value) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_150_MethodLookup->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_247_new_RunningThread_op_ctxt,rel_247_new_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_245_RunningThread_op_ctxt,rel_245_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_245_RunningThread->contains(Tuple<RamDomain,2>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1]}),READ_OP_CONTEXT(rel_245_RunningThread_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1])});
if (!(rel_247_new_RunningThread->insert(tuple,READ_OP_CONTEXT(rel_247_new_RunningThread_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];@new_RunningThread([hctxValue],?value) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !RunningThread([hctxValue],?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;RunningThread;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];RunningThread([hctxValue],?value) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_247_new_RunningThread->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1290:1-1290:50];)" <<  rel_247_new_RunningThread->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1291:1-1291:71];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableCurrentThreadInvocation;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2147:1-2151:43];ReachableCurrentThreadInvocation(?callerCtx,?local) :- \n   StaticMethodInvocation(?invocation,\"<java.lang.Thread: java.lang.Thread currentThread()>\",?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?local).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_256_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_224_new_ReachableCurrentThreadInvocation_op_ctxt,rel_224_new_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_222_ReachableCurrentThreadInvocation_op_ctxt,rel_222_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
const Tuple<RamDomain,3> key({0,146,0});
auto range = rel_256_StaticMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_222_ReachableCurrentThreadInvocation->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_222_ReachableCurrentThreadInvocation_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_224_new_ReachableCurrentThreadInvocation->insert(tuple,READ_OP_CONTEXT(rel_224_new_ReachableCurrentThreadInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2147:1-2151:43];@new_ReachableCurrentThreadInvocation(?callerCtx,?local) :-     StaticMethodInvocation(?invocation,'<java.lang.Thread: java.lang.Thread currentThread()>',?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?local),    !ReachableCurrentThreadInvocation(?callerCtx,?local).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableCurrentThreadInvocation;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2147:1-2151:43];ReachableCurrentThreadInvocation(?callerCtx,?local) :- \n   StaticMethodInvocation(?invocation,\"<java.lang.Thread: java.lang.Thread currentThread()>\",?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?local).;)" <<  rel_224_new_ReachableCurrentThreadInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1291:1-1291:71];)" <<  rel_224_new_ReachableCurrentThreadInvocation->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1304:1-1304:30];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_84_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_isContext([ctxValue2,?heapValue]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !isContext([ctxValue2,?heapValue]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_84_HeapAllocation_Merge->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_84_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_isContext([ctxValue2,?heapValue]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !isContext([ctxValue2,?heapValue]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isContext([ctxValue2,?heapValue]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_150_MethodLookup->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];@new_isContext([hctxValue,?value]) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];isContext([hctxValue,?value]) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_192_delta_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_192_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_192_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_192_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_isContext([hctxValue,?value]) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_191_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_191_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_191_OptVirtualMethodInvocationBase_op_ctxt,rel_191_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_isContext([hctxValue,?value]) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];isContext([hctxValue,?value]) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];isContext(?callerCtx) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_256_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_256_StaticMethodInvocation->equalRange<2>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];@new_isContext(?callerCtx) :-     @delta_ReachableContext(?callerCtx,?inmethod),    StaticMethodInvocation(?invocation,?tomethod,?inmethod),    !isContext(?callerCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];isContext(?callerCtx) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_185_delta_OptSpecialMethodInvocationBase->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_185_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_185_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_185_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_isContext([hctxValue,?value]) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_468_new_isContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_184_OptSpecialMethodInvocationBase->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_184_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_468_new_isContext_op_ctxt,rel_468_new_isContext->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_184_OptSpecialMethodInvocationBase_op_ctxt,rel_184_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
CREATE_OP_CONTEXT(rel_466_isContext_op_ctxt,rel_466_isContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_466_isContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))}),READ_OP_CONTEXT(rel_466_isContext_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})))});
if (!(rel_468_new_isContext->insert(tuple,READ_OP_CONTEXT(rel_468_new_isContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_isContext([hctxValue,?value]) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !isContext([hctxValue,?value]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isContext;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];isContext([hctxValue,?value]) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_468_new_isContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1304:1-1304:30];)" <<  rel_468_new_isContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1305:1-1305:33];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_473_new_isHContext_op_ctxt,rel_473_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_471_isHContext_op_ctxt,rel_471_isHContext->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_84_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_471_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env3[1]}))}),READ_OP_CONTEXT(rel_471_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env3[1]})))});
if (!(rel_473_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_473_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_isHContext([ctxValue2]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_473_new_isHContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_84_HeapAllocation_Merge->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_473_new_isHContext_op_ctxt,rel_473_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_471_isHContext_op_ctxt,rel_471_isHContext->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_84_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_471_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env4[1]}))}),READ_OP_CONTEXT(rel_471_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[1]})))});
if (!(rel_473_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_473_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_isHContext([ctxValue2]) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];isHContext([ctxValue2]) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_473_new_isHContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];isHContext([ctxValue2]) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_32_AssignNormalHeapAllocation->empty()&&!rel_171_ObjectShouldNotBeRefined->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_32_AssignNormalHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_473_new_isHContext_op_ctxt,rel_473_new_isHContext->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt,rel_171_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_471_isHContext_op_ctxt,rel_471_isHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env2 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_471_isHContext->contains(Tuple<RamDomain,1>({pack(ram::Tuple<RamDomain,1>({env2[1]}))}),READ_OP_CONTEXT(rel_471_isHContext_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_171_ObjectShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[1]})))});
if (!(rel_473_new_isHContext->insert(tuple,READ_OP_CONTEXT(rel_473_new_isHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];@new_isHContext([ctxValue2]) :-     AssignNormalHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    ObjectShouldNotBeRefined(?heapValue),    !isHContext([ctxValue2]).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;isHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];isHContext([ctxValue2]) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)" <<  rel_473_new_isHContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1305:1-1305:33];)" <<  rel_473_new_isHContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1312:1-1312:65];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableContextFromHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1390:1-1392:21];ImmutableContextFromHContext(?hctx,?ctx) :- \n   isImmutableContext(?ctx),\n   isHContext(?hctx).;)",profile);
if (!rel_472_delta_isHContext->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_475_isImmutableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_472_delta_isHContext_op_ctxt,rel_472_delta_isHContext->createContext());
CREATE_OP_CONTEXT(rel_96_new_ImmutableContextFromHContext_op_ctxt,rel_96_new_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt,rel_94_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_472_delta_isHContext) {
if( !rel_94_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_96_new_ImmutableContextFromHContext->insert(tuple,READ_OP_CONTEXT(rel_96_new_ImmutableContextFromHContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1390:1-1392:21];@new_ImmutableContextFromHContext(?hctx,?ctx) :-     isImmutableContext(?ctx),    @delta_isHContext(?hctx),    !ImmutableContextFromHContext(?hctx,?ctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ImmutableContextFromHContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1390:1-1392:21];ImmutableContextFromHContext(?hctx,?ctx) :- \n   isImmutableContext(?ctx),\n   isHContext(?hctx).;)" <<  rel_96_new_ImmutableContextFromHContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1312:1-1312:65];)" <<  rel_96_new_ImmutableContextFromHContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1313:1-1313:65];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableHContextFromContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1393:1-1395:19];ImmutableHContextFromContext(?ctx,?hctx) :- \n   isImmutableHContext(?hctx),\n   isContext(?ctx).;)",profile);
if (!rel_467_delta_isContext->empty()&&!rel_476_isImmutableHContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_476_isImmutableHContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_467_delta_isContext_op_ctxt,rel_467_delta_isContext->createContext());
CREATE_OP_CONTEXT(rel_99_new_ImmutableHContextFromContext_op_ctxt,rel_99_new_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_476_isImmutableHContext_op_ctxt,rel_476_isImmutableHContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_467_delta_isContext) {
if( !rel_97_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_99_new_ImmutableHContextFromContext->insert(tuple,READ_OP_CONTEXT(rel_99_new_ImmutableHContextFromContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1393:1-1395:19];@new_ImmutableHContextFromContext(?ctx,?hctx) :-     isImmutableHContext(?hctx),    @delta_isContext(?ctx),    !ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ImmutableHContextFromContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1393:1-1395:19];ImmutableHContextFromContext(?ctx,?hctx) :- \n   isImmutableHContext(?hctx),\n   isContext(?ctx).;)" <<  rel_99_new_ImmutableHContextFromContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1313:1-1313:65];)" <<  rel_99_new_ImmutableHContextFromContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1314:1-1314:64];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ImmutableContextFromContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1396:1-1398:20];ImmutableContextFromContext(?ctx1,?ctx2) :- \n   isImmutableContext(?ctx2),\n   isContext(?ctx1).;)",profile);
if (!rel_467_delta_isContext->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_475_isImmutableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_467_delta_isContext_op_ctxt,rel_467_delta_isContext->createContext());
CREATE_OP_CONTEXT(rel_93_new_ImmutableContextFromContext_op_ctxt,rel_93_new_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_467_delta_isContext) {
if( !rel_91_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_93_new_ImmutableContextFromContext->insert(tuple,READ_OP_CONTEXT(rel_93_new_ImmutableContextFromContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1396:1-1398:20];@new_ImmutableContextFromContext(?ctx1,?ctx2) :-     isImmutableContext(?ctx2),    @delta_isContext(?ctx1),    !ImmutableContextFromContext(?ctx1,?ctx2).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ImmutableContextFromContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1396:1-1398:20];ImmutableContextFromContext(?ctx1,?ctx2) :- \n   isImmutableContext(?ctx2),\n   isContext(?ctx1).;)" <<  rel_93_new_ImmutableContextFromContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1314:1-1314:64];)" <<  rel_93_new_ImmutableContextFromContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1319:1-1319:72];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)",profile);
if (!rel_75_delta_ForcedReachableAndroidContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_235_ReifiedAndroidObjectValue->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_75_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_75_delta_ForcedReachableAndroidContext_op_ctxt,rel_75_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env1[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_235_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[1],env3[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    ImmutableHContextFromContext(?ctx,?hctx),    Method_DeclaringType(?meth,?class),    ReifiedAndroidObjectValue(?value,?class),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 1:(2,1,3,4,5);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_74_ForcedReachableAndroidContext->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_235_ReifiedAndroidObjectValue->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_74_ForcedReachableAndroidContext->equalRange<0>(key,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_235_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    ForcedReachableAndroidContext(?ctx,?meth),    Method_DeclaringType(?meth,?class),    ReifiedAndroidObjectValue(?value,?class),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1529:1-1534:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Method_DeclaringType(?meth,?class),\n   ReifiedAndroidObjectValue(?value,?class),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(2,1,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_75_delta_ForcedReachableAndroidContext->empty()&&!rel_12_ApplicationObjectFlowingToLibrary->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_75_delta_ForcedReachableAndroidContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_13_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_13_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_75_delta_ForcedReachableAndroidContext_op_ctxt,rel_75_delta_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_12_ApplicationObjectFlowingToLibrary_op_ctxt,rel_12_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_153_Method_DeclaringType->equalRange<0>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,0,env1[1]});
auto range = rel_12_ApplicationObjectFlowingToLibrary->equalRange<2>(key,READ_OP_CONTEXT(rel_12_ApplicationObjectFlowingToLibrary_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_13_delta_ApplicationObjectFlowingToLibrary->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_13_delta_ApplicationObjectFlowingToLibrary_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ForcedReachableAndroidContext(?ctx,?meth),    Method_DeclaringType(?meth,?ofType),    ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this),    !@delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType).     .plan 1:(3,2,1,4);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)",profile);
if (!rel_13_delta_ApplicationObjectFlowingToLibrary->empty()&&!rel_74_ForcedReachableAndroidContext->empty()&&!rel_153_Method_DeclaringType->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_13_delta_ApplicationObjectFlowingToLibrary->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_13_delta_ApplicationObjectFlowingToLibrary_op_ctxt,rel_13_delta_ApplicationObjectFlowingToLibrary->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt,rel_74_ForcedReachableAndroidContext->createContext());
CREATE_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt,rel_153_Method_DeclaringType->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_153_Method_DeclaringType->equalRange<1>(key,READ_OP_CONTEXT(rel_153_Method_DeclaringType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_74_ForcedReachableAndroidContext->equalRange<1>(key,READ_OP_CONTEXT(rel_74_ForcedReachableAndroidContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];@new_VarPointsTo(?hctx,?value,?ctx,?this) :-     @delta_ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),    Method_DeclaringType(?meth,?ofType),    ForcedReachableAndroidContext(?ctx,?meth),    _ThisVar(?meth,?this),    !VarPointsTo(?hctx,?value,?ctx,?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1536:1-1540:25];VarPointsTo(?hctx,?value,?ctx,?this) :- \n   ForcedReachableAndroidContext(?ctx,?meth),\n   Method_DeclaringType(?meth,?ofType),\n   ApplicationObjectFlowingToLibrary(?hctx,?value,?ofType),\n   _ThisVar(?meth,?this).\n\n   .plan 1:(3,2,1,4);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)",profile);
if (!rel_78_delta_FormalOfForcedReachableContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_235_ReifiedAndroidObjectValue->empty()&&!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_78_delta_FormalOfForcedReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_78_delta_FormalOfForcedReachableContext_op_ctxt,rel_78_delta_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env1[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_235_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[1],env3[0],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_FormalOfForcedReachableContext(?ctx,?formal,?formalType),    ImmutableHContextFromContext(?ctx,?hctx),    SubtypeOf(?type,?formalType),    ReifiedAndroidObjectValue(?value,?type),    !VarPointsTo(?hctx,?value,?ctx,?formal),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 1:(2,1,3,4);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_77_FormalOfForcedReachableContext->empty()&&!rel_235_ReifiedAndroidObjectValue->empty()&&!rel_313_SubtypeOf->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt,rel_77_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt,rel_235_ReifiedAndroidObjectValue->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_77_FormalOfForcedReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[2]});
auto range = rel_313_SubtypeOf->equalRange<1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[0]});
auto range = rel_235_ReifiedAndroidObjectValue->equalRange<1>(key,READ_OP_CONTEXT(rel_235_ReifiedAndroidObjectValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    FormalOfForcedReachableContext(?ctx,?formal,?formalType),    SubtypeOf(?type,?formalType),    ReifiedAndroidObjectValue(?value,?type),    !VarPointsTo(?hctx,?value,?ctx,?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1546:1-1550:44];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   SubtypeOf(?type,?formalType),\n   ReifiedAndroidObjectValue(?value,?type).\n\n   .plan 1:(2,1,3,4);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)",profile);
if (!rel_78_delta_FormalOfForcedReachableContext->empty()&&!rel_15_ApplicationObjectFlowingToLibraryStaticType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_78_delta_FormalOfForcedReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_16_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_78_delta_FormalOfForcedReachableContext_op_ctxt,rel_78_delta_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_15_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_15_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[2]});
auto range = rel_15_ApplicationObjectFlowingToLibraryStaticType->equalRange<2>(key,READ_OP_CONTEXT(rel_15_ApplicationObjectFlowingToLibraryStaticType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->contains(Tuple<RamDomain,3>({env1[0],env1[1],env0[2]}),READ_OP_CONTEXT(rel_16_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_FormalOfForcedReachableContext(?ctx,?formal,?formalType),    ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType),    !VarPointsTo(?hctx,?value,?ctx,?formal),    !@delta_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).     .plan 1:(2,1);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)",profile);
if (!rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->empty()&&!rel_77_FormalOfForcedReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_16_delta_ApplicationObjectFlowingToLibraryStaticType_op_ctxt,rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt,rel_77_FormalOfForcedReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[2]});
auto range = rel_77_FormalOfForcedReachableContext->equalRange<2>(key,READ_OP_CONTEXT(rel_77_FormalOfForcedReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];@new_VarPointsTo(?hctx,?value,?ctx,?formal) :-     @delta_ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType),    FormalOfForcedReachableContext(?ctx,?formal,?formalType),    !VarPointsTo(?hctx,?value,?ctx,?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1555:1-1557:75];VarPointsTo(?hctx,?value,?ctx,?formal) :- \n   FormalOfForcedReachableContext(?ctx,?formal,?formalType),\n   ApplicationObjectFlowingToLibraryStaticType(?hctx,?value,?formalType).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1575:1-1579:45];VarPointsTo(?hctx,?viewValue,?ctx,?ret) :- \n   VarsAtInvocationRetrievingView(?ret,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var),\n   Value_Num(?value,?numId),\n   ViewObjectValueFromId(?viewValue,?numId).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_367_Value_Num->empty()&&!rel_377_VarsAtInvocationRetrievingView->empty()&&!rel_378_ViewObjectValueFromId->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_377_VarsAtInvocationRetrievingView->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_377_VarsAtInvocationRetrievingView_op_ctxt,rel_377_VarsAtInvocationRetrievingView->createContext());
CREATE_OP_CONTEXT(rel_378_ViewObjectValueFromId_op_ctxt,rel_378_ViewObjectValueFromId->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_367_Value_Num->equalRange<0>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_378_ViewObjectValueFromId->equalRange<1>(key,READ_OP_CONTEXT(rel_378_ViewObjectValueFromId_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env3[0],env1[2],env0[0]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env3[0]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1575:1-1579:45];@new_VarPointsTo(?hctx,?viewValue,?ctx,?ret) :-     VarsAtInvocationRetrievingView(?ret,?var),    @delta_VarPointsTo(?hctx,?value,?ctx,?var),    Value_Num(?value,?numId),    ViewObjectValueFromId(?viewValue,?numId),    !VarPointsTo(?hctx,?viewValue,?ctx,?ret).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1575:1-1579:45];VarPointsTo(?hctx,?viewValue,?ctx,?ret) :- \n   VarsAtInvocationRetrievingView(?ret,?var),\n   VarPointsTo(?hctx,?value,?ctx,?var),\n   Value_Num(?value,?numId),\n   ViewObjectValueFromId(?viewValue,?numId).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1627:1-1635:61];VarPointsTo(?hctx,?value,?ctx,?param) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?valueType,?handlerType),\n   ConcreteClass(?valueType),\n   ExceptionHandler_FormalParam(?handler,?param),\n   !ExceptionHandler_Impossible(?valueType,?handler,?insn).;)",profile);
if (!rel_113_delta_Instruction_Throws->empty()&&!rel_47_ConcreteClass->empty()&&!rel_57_ExceptionHandler_FormalParam->empty()&&!rel_59_ExceptionHandler_InRange->empty()&&!rel_66_ExceptionHandler_Type->empty()&&!rel_313_SubtypeOf->empty()&&!rel_368_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_113_delta_Instruction_Throws->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_113_delta_Instruction_Throws_op_ctxt,rel_113_delta_Instruction_Throws->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt,rel_47_ConcreteClass->createContext());
CREATE_OP_CONTEXT(rel_57_ExceptionHandler_FormalParam_op_ctxt,rel_57_ExceptionHandler_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_58_ExceptionHandler_Impossible_op_ctxt,rel_58_ExceptionHandler_Impossible->createContext());
CREATE_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt,rel_59_ExceptionHandler_InRange->createContext());
CREATE_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt,rel_66_ExceptionHandler_Type->createContext());
CREATE_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt,rel_313_SubtypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_59_ExceptionHandler_InRange->equalRange<1>(key,READ_OP_CONTEXT(rel_59_ExceptionHandler_InRange_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_58_ExceptionHandler_Impossible->contains(Tuple<RamDomain,3>({env1[1],env2[0],env0[3]}),READ_OP_CONTEXT(rel_58_ExceptionHandler_Impossible_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_66_ExceptionHandler_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_66_ExceptionHandler_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[1],env3[1]});
auto range = rel_313_SubtypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_313_SubtypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_47_ConcreteClass->equalRange<0>(key,READ_OP_CONTEXT(rel_47_ConcreteClass_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_57_ExceptionHandler_FormalParam->equalRange<0>(key,READ_OP_CONTEXT(rel_57_ExceptionHandler_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env6[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1627:1-1635:61];@new_VarPointsTo(?hctx,?value,?ctx,?param) :-     @delta_Instruction_Throws(?hctx,?value,?ctx,?insn),    Value_Type(?value,?valueType),    ExceptionHandler_InRange(?handler,?insn),    ExceptionHandler_Type(?handler,?handlerType),    SubtypeOf(?valueType,?handlerType),    ConcreteClass(?valueType),    ExceptionHandler_FormalParam(?handler,?param),    !ExceptionHandler_Impossible(?valueType,?handler,?insn),    !VarPointsTo(?hctx,?value,?ctx,?param).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1627:1-1635:61];VarPointsTo(?hctx,?value,?ctx,?param) :- \n   Instruction_Throws(?hctx,?value,?ctx,?insn),\n   Value_Type(?value,?valueType),\n   ExceptionHandler_InRange(?handler,?insn),\n   ExceptionHandler_Type(?handler,?handlerType),\n   SubtypeOf(?valueType,?handlerType),\n   ConcreteClass(?valueType),\n   ExceptionHandler_FormalParam(?handler,?param),\n   !ExceptionHandler_Impossible(?valueType,?handler,?insn).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_84_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env3[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})),env5[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env3[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))),(RamDomain)(env5[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_84_HeapAllocation_Merge->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_84_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})),env6[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))),(RamDomain)(env6[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];VarPointsTo([ctxValue2],?heapValue,[ctxValue2,?heapValue],?formal) :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_136_MainMethodArgArray->empty()&&!rel_137_MainMethodArgArrayContent->empty()&&!rel_138_MainMethodDeclaration->empty()&&!rel_219_ReachableContext->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_136_MainMethodArgArray_op_ctxt,rel_136_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_137_MainMethodArgArrayContent_op_ctxt,rel_137_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_138_MainMethodDeclaration) {
if( !rel_220_delta_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_219_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_136_MainMethodArgArray) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
for(const auto& env5 : *rel_137_MainMethodArgArrayContent) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];@new_VarPointsTo(?hctx,?argArray,?ctx,?args) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !VarPointsTo(?hctx,?argArray,?ctx,?args),    !@delta_ReachableContext(?ctx,?mainMethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_136_MainMethodArgArray->empty()&&!rel_137_MainMethodArgArrayContent->empty()&&!rel_138_MainMethodDeclaration->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_97_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_136_MainMethodArgArray_op_ctxt,rel_136_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_137_MainMethodArgArrayContent_op_ctxt,rel_137_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_138_MainMethodDeclaration) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_220_delta_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_136_MainMethodArgArray) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
for(const auto& env5 : *rel_137_MainMethodArgArrayContent) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];@new_VarPointsTo(?hctx,?argArray,?ctx,?args) :-     ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    @delta_ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !VarPointsTo(?hctx,?argArray,?ctx,?args).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];VarPointsTo(?hctx,?argArray,?ctx,?args) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_150_MethodLookup->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];VarPointsTo([hctxValue],?value,[hctxValue,?value],?runThis) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)",profile);
if (!rel_223_delta_ReachableCurrentThreadInvocation->empty()&&!rel_245_RunningThread->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_223_delta_ReachableCurrentThreadInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_223_delta_ReachableCurrentThreadInvocation_op_ctxt,rel_223_delta_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_246_delta_RunningThread_op_ctxt,rel_246_delta_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_245_RunningThread_op_ctxt,rel_245_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_245_RunningThread) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_246_delta_RunningThread->contains(Tuple<RamDomain,2>({env1[0],env1[1]}),READ_OP_CONTEXT(rel_246_delta_RunningThread_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];@new_VarPointsTo(?hctx,?value,?callerCtx,?local) :-     @delta_ReachableCurrentThreadInvocation(?callerCtx,?local),    RunningThread(?hctx,?value),    !VarPointsTo(?hctx,?value,?callerCtx,?local),    !@delta_RunningThread(?hctx,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)",profile);
if (!rel_246_delta_RunningThread->empty()&&!rel_222_ReachableCurrentThreadInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_222_ReachableCurrentThreadInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_246_delta_RunningThread_op_ctxt,rel_246_delta_RunningThread->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_222_ReachableCurrentThreadInvocation_op_ctxt,rel_222_ReachableCurrentThreadInvocation->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_246_delta_RunningThread) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];@new_VarPointsTo(?hctx,?value,?callerCtx,?local) :-     ReachableCurrentThreadInvocation(?callerCtx,?local),    @delta_RunningThread(?hctx,?value),    !VarPointsTo(?hctx,?value,?callerCtx,?local).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2143:1-2146:43];VarPointsTo(?hctx,?value,?callerCtx,?local) :- \n   ReachableCurrentThreadInvocation(?callerCtx,?local),\n   RunningThread(?hctx,?value).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_32_AssignNormalHeapAllocation->empty()&&!rel_171_ObjectShouldNotBeRefined->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_32_AssignNormalHeapAllocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt,rel_171_ObjectShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env2 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[1]})),env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env2[1]})),env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_171_ObjectShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_171_ObjectShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[1]}))),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env2[1]}))),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];@new_VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :-     AssignNormalHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    ObjectShouldNotBeRefined(?heapValue),    !VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2266:1-2271:40];VarPointsTo([ctxValue2],?heapValue,[ctxValue1,ctxValue2],?var) :- \n   AssignNormalHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   ObjectShouldNotBeRefined(?heapValue).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_26_AssignContextInsensitiveHeapAllocation->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_26_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_26_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_220_delta_ReachableContext->contains(Tuple<RamDomain,2>({env2[0],env0[0]}),READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env1[0],env2[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     @delta_Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?heapValue,?ctx,?var),    !@delta_ReachableContext(?ctx,?inmethod),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 2:(4,3,1,2);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_26_AssignContextInsensitiveHeapAllocation->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_213_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_26_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_26_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env1[0],env2[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?heapValue,?ctx,?var),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).     .plan 2:(4,3,1,2);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_26_AssignContextInsensitiveHeapAllocation->empty()&&!rel_213_Reachable->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt,rel_26_AssignContextInsensitiveHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_213_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_213_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,0,env1[1]});
auto range = rel_26_AssignContextInsensitiveHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_26_AssignContextInsensitiveHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env3[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];@new_VarPointsTo(?hctx,?heapValue,?ctx,?var) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    ReachableContext(?ctx,?inmethod),    Reachable(?inmethod),    AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),    !VarPointsTo(?hctx,?heapValue,?ctx,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2277:1-2281:45];VarPointsTo(?hctx,?heapValue,?ctx,?var) :- \n   Reachable(?inmethod),\n   AssignContextInsensitiveHeapAllocation(?heapValue,?var,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).\n\n   .plan 2:(4,3,1,2);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_33_AssignNull->empty()&&!rel_85_HeapAllocation_Null->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_33_AssignNull_op_ctxt,rel_33_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_33_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_33_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_85_HeapAllocation_Null) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_220_delta_ReachableContext->contains(Tuple<RamDomain,2>({env3[0],env0[0]}),READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env2[0],env3[0],env1[0]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[0]),(RamDomain)(env3[0]),(RamDomain)(env1[0])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     @delta_Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    ReachableContext(?toCtx,?inmethod),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?null,?toCtx,?to),    !@delta_ReachableContext(?toCtx,?inmethod),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 2:(5,4,1,2,3);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_33_AssignNull->empty()&&!rel_85_HeapAllocation_Null->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_213_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_33_AssignNull_op_ctxt,rel_33_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_33_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_33_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
for(const auto& env2 : *rel_85_HeapAllocation_Null) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env2[0],env3[0],env1[0]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env2[0]),(RamDomain)(env3[0]),(RamDomain)(env1[0])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    @delta_ReachableContext(?toCtx,?inmethod),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?null,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 2:(5,4,1,2,3);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_33_AssignNull->empty()&&!rel_85_HeapAllocation_Null->empty()&&!rel_213_Reachable->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_33_AssignNull_op_ctxt,rel_33_AssignNull->createContext());
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_213_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_213_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_33_AssignNull->equalRange<1>(key,READ_OP_CONTEXT(rel_33_AssignNull_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_85_HeapAllocation_Null) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env4[0],env0[0],env3[0]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[0])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];@new_VarPointsTo(?hctx,?null,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Reachable(?inmethod),    AssignNull(?to,?inmethod),    HeapAllocation_Null(?null),    !VarPointsTo(?hctx,?null,?toCtx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2283:1-2288:48];VarPointsTo(?hctx,?null,?toCtx,?to) :- \n   Reachable(?inmethod),\n   AssignNull(?to,?inmethod),\n   HeapAllocation_Null(?null),\n   ReachableContext(?toCtx,?inmethod),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 2:(5,4,1,2,3);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_34_AssignNumConstant_Id->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_34_AssignNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_367_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env4[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 1:(6,1,2,3,4,5);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_34_AssignNumConstant_Id->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt,rel_34_AssignNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_34_AssignNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_34_AssignNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_367_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_23_AssignCastNumConstant_Id->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt,rel_23_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_23_AssignCastNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env2[1]});
auto range = rel_367_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env4[0],env0[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env4[0]),(RamDomain)(env0[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignCastNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    ImmutableHContextFromContext(?toCtx,?hctx),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_ImmutableHContextFromContext(?toCtx,?hctx).     .plan 1:(6,1,2,3,4,5);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_23_AssignCastNumConstant_Id->empty()&&!rel_29_AssignInstruction_To->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_367_Value_Num->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt,rel_23_AssignCastNumConstant_Id->createContext());
CREATE_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt,rel_29_AssignInstruction_To->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_367_Value_Num_op_ctxt,rel_367_Value_Num->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_219_ReachableContext->equalRange<0>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_23_AssignCastNumConstant_Id->equalRange<0>(key,READ_OP_CONTEXT(rel_23_AssignCastNumConstant_Id_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_29_AssignInstruction_To->equalRange<0>(key,READ_OP_CONTEXT(rel_29_AssignInstruction_To_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_367_Value_Num->equalRange<1>(key,READ_OP_CONTEXT(rel_367_Value_Num_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_ImmutableHContextFromContext(?toCtx,?hctx),    ReachableContext(?toCtx,?inmethod),    Instruction_Method(?insn,?inmethod),    AssignCastNumConstant_Id(?insn,?const),    AssignInstruction_To(?insn,?to),    Value_Num(?value,?const),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2290:1-2297:48];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   ReachableContext(?toCtx,?inmethod),\n   Instruction_Method(?insn,?inmethod),\n   AssignCastNumConstant_Id(?insn,?const),\n   AssignInstruction_To(?insn,?to),\n   Value_Num(?value,?const),\n   ImmutableHContextFromContext(?toCtx,?hctx).\n\n   .plan 1:(6,1,2,3,4,5);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2299:1-2301:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   VarPointsTo(?hctx,?value,?ctx,?from),\n   AssignLocal(?from,?to,_).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_30_AssignLocal->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_373_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_30_AssignLocal_op_ctxt,rel_30_AssignLocal->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[3],0,0});
auto range = rel_30_AssignLocal->equalRange<0>(key,READ_OP_CONTEXT(rel_30_AssignLocal_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env0[2],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2299:1-2301:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_VarPointsTo(?hctx,?value,?ctx,?from),    AssignLocal(?from,?to, _unnamed_var1),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2299:1-2301:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   VarPointsTo(?hctx,?value,?ctx,?from),\n   AssignLocal(?from,?to,_).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_173_delta_OptAssignCast->empty()&&!rel_319_SupertypeOf->empty()&&!rel_368_Value_Type->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_173_delta_OptAssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_173_delta_OptAssignCast_op_ctxt,rel_173_delta_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[2]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[2]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],env2[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_OptAssignCast(?type,?to,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_172_OptAssignCast->empty()&&!rel_319_SupertypeOf->empty()&&!rel_368_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_172_OptAssignCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_172_OptAssignCast_op_ctxt,rel_172_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[2]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],env2[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     OptAssignCast(?type,?to,?from),    @delta_VarPointsTo(?hctx,?value,?ctx,?from),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2306:1-2310:34];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   OptAssignCast(?type,?to,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)",profile);
if (!rel_128_delta_LoadHeapInstanceField->empty()&&!rel_105_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_128_delta_LoadHeapInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_106_delta_InstanceFieldPointsTo_op_ctxt,rel_106_delta_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_128_delta_LoadHeapInstanceField_op_ctxt,rel_128_delta_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,env0[2],env0[3],env0[4]});
auto range = rel_105_InstanceFieldPointsTo->equalRange<2,3,4>(key,READ_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_106_delta_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env1[0],env1[1],env0[2],env0[3],env0[4]}),READ_OP_CONTEXT(rel_106_delta_InstanceFieldPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),    InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).     .plan 1:(2,1);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)",profile);
if (!rel_106_delta_InstanceFieldPointsTo->empty()&&!rel_127_LoadHeapInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_106_delta_InstanceFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_106_delta_InstanceFieldPointsTo_op_ctxt,rel_106_delta_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_127_LoadHeapInstanceField_op_ctxt,rel_127_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,env0[2],env0[3],env0[4]});
auto range = rel_127_LoadHeapInstanceField->equalRange<2,3,4>(key,READ_OP_CONTEXT(rel_127_LoadHeapInstanceField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2311:1-2313:75];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   LoadHeapInstanceField(?ctx,?to,?signature,?basehctx,?basevalue),\n   InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)",profile);
if (!rel_254_delta_StaticFieldPointsTo->empty()&&!rel_133_LoadStaticField->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_254_delta_StaticFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_254_delta_StaticFieldPointsTo_op_ctxt,rel_254_delta_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt,rel_133_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[2],0,0});
auto range = rel_133_LoadStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[2]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_220_delta_ReachableContext->contains(Tuple<RamDomain,2>({env2[0],env1[2]}),READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_StaticFieldPointsTo(?hctx,?value,?sig),    LoadStaticField(?sig,?to,?inmethod),    ReachableContext(?ctx,?inmethod),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_ReachableContext(?ctx,?inmethod).     .plan 1:(3,2,1);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_133_LoadStaticField->empty()&&!rel_253_StaticFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt,rel_133_LoadStaticField->createContext());
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_133_LoadStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_133_LoadStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,0,env1[0]});
auto range = rel_253_StaticFieldPointsTo->equalRange<2>(key,READ_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_ReachableContext(?ctx,?inmethod),    LoadStaticField(?sig,?to,?inmethod),    StaticFieldPointsTo(?hctx,?value,?sig),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2327:1-2331:30];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   StaticFieldPointsTo(?hctx,?value,?sig),\n   LoadStaticField(?sig,?to,?inmethod),\n   ReachableContext(?ctx,?inmethod).\n\n   .plan 1:(3,2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)",profile);
if (!rel_349_delta_Temp2->empty()&&!rel_19_ArrayIndexPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_349_delta_Temp2->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt,rel_20_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_349_delta_Temp2_op_ctxt,rel_349_delta_Temp2->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_19_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_20_delta_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     @delta_Temp2(?ctx,?to,?basehctx,?basevalue),    ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to),    !@delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)",profile);
if (!rel_20_delta_ArrayIndexPointsTo->empty()&&!rel_348_Temp2->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_348_Temp2->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt,rel_20_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_348_Temp2_op_ctxt,rel_348_Temp2->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_20_delta_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];@new_VarPointsTo(?hctx,?value,?ctx,?to) :-     Temp2(?ctx,?to,?basehctx,?basevalue),    @delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    !VarPointsTo(?hctx,?value,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2360:1-2362:60];VarPointsTo(?hctx,?value,?ctx,?to) :- \n   Temp2(?ctx,?to,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)",profile);
if (!rel_178_delta_OptInterproceduralAssign->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_178_delta_OptInterproceduralAssign->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_178_delta_OptInterproceduralAssign_op_ctxt,rel_178_delta_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),    VarPointsTo(?hctx,?value,?fromCtx,?from),    !VarPointsTo(?hctx,?value,?toCtx,?to),    !@delta_VarPointsTo(?hctx,?value,?fromCtx,?from).     .plan 1:(2,1);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_177_OptInterproceduralAssign->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_373_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt,rel_177_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_177_OptInterproceduralAssign->equalRange<2,3>(key,READ_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];@new_VarPointsTo(?hctx,?value,?toCtx,?to) :-     @delta_VarPointsTo(?hctx,?value,?fromCtx,?from),    OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),    !VarPointsTo(?hctx,?value,?toCtx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2408:1-2410:47];VarPointsTo(?hctx,?value,?toCtx,?to) :- \n   OptInterproceduralAssign(?toCtx,?to,?fromCtx,?from),\n   VarPointsTo(?hctx,?value,?fromCtx,?from).\n\n   .plan 1:(2,1);)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_192_delta_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_192_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_192_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_192_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_191_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_191_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_191_OptVirtualMethodInvocationBase_op_ctxt,rel_191_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env5[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env2[0]}))),(RamDomain)(env1[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env5[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_185_delta_OptSpecialMethodInvocationBase->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_185_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_185_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_185_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[0]}))),(RamDomain)(env3[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_184_OptSpecialMethodInvocationBase->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_184_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_184_OptSpecialMethodInvocationBase_op_ctxt,rel_184_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,1>({env4[0]}))),(RamDomain)(env3[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !VarPointsTo([hctxValue],?value,[hctxValue,?value],?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];VarPointsTo([hctxValue],?value,[hctxValue,?value],?this) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_375_Var_DeclaringMethod->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()&&!rel_385_ActualParam->empty()&&!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_375_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env4[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[0],env4[0],env6[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[0]),(RamDomain)(env4[0]),(RamDomain)(env6[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];@new_VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :-     _Dacapo(?classNameHeap,?dacapoMethod),    MethodInvocation_Method(?invo,?dacapoMethod),    VirtualMethodInvocation_Base(?invo,?base),    Var_DeclaringMethod(?base,?method),    @delta_ReachableContext(?ctx,?method),    ImmutableHContextFromContext(?ctx,?hctx),    _ActualParam(0,?invo,?to),    !VarPointsTo(?hctx,?classNameHeap,?ctx,?to),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_375_Var_DeclaringMethod->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()&&!rel_385_ActualParam->empty()&&!rel_410_Dacapo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_410_Dacapo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_410_Dacapo_op_ctxt,rel_410_Dacapo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_149_MethodInvocation_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_375_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({0,env3[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[0],env4[0],env6[2]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[0]),(RamDomain)(env4[0]),(RamDomain)(env6[2])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];@new_VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :-     _Dacapo(?classNameHeap,?dacapoMethod),    MethodInvocation_Method(?invo,?dacapoMethod),    VirtualMethodInvocation_Base(?invo,?base),    Var_DeclaringMethod(?base,?method),    ReachableContext(?ctx,?method),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    _ActualParam(0,?invo,?to),    !VarPointsTo(?hctx,?classNameHeap,?ctx,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2628:1-2635:30];VarPointsTo(?hctx,?classNameHeap,?ctx,?to) :- \n   _Dacapo(?classNameHeap,?dacapoMethod),\n   MethodInvocation_Method(?invo,?dacapoMethod),\n   VirtualMethodInvocation_Base(?invo,?base),\n   Var_DeclaringMethod(?base,?method),\n   ReachableContext(?ctx,?method),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   _ActualParam(0,?invo,?to).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_87_HeapAllocation_Type->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_176_OptForNameInvocation->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_176_OptForNameInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt,rel_176_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],1});
auto range = rel_87_HeapAllocation_Type->equalRange<0,1>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[1],(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()),env1[0],env6[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0]),(RamDomain)(env6[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];@new_VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return) :-     OptForNameInvocation(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    Tamiflex_ReflectionMap(?class,?invocation),    isHeapAllocation( _tmp_0),    HeapAllocation_Type( _tmp_0,'java.lang.Class'),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx),     _tmp_0 = cat(cat('<class ',?class),'>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_87_HeapAllocation_Type->empty()&&!rel_176_OptForNameInvocation->empty()&&!rel_219_ReachableContext->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_474_isHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_176_OptForNameInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt,rel_87_HeapAllocation_Type->createContext());
CREATE_OP_CONTEXT(rel_176_OptForNameInvocation_op_ctxt,rel_176_OptForNameInvocation->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt,rel_474_isHeapAllocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,1> key({(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())});
auto range = rel_474_isHeapAllocation->equalRange<0>(key,READ_OP_CONTEXT(rel_474_isHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[0],1});
auto range = rel_87_HeapAllocation_Type->equalRange<0,1>(key,READ_OP_CONTEXT(rel_87_HeapAllocation_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[1],(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str()),env1[0],env6[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[1]),(RamDomain)((RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)(RamDomain)symTable.lookup((std::string(symTable.resolve((size_t)174)) + std::string(symTable.resolve((size_t)env3[0]))).c_str()))) + std::string(symTable.resolve((size_t)74))).c_str())),(RamDomain)(env1[0]),(RamDomain)(env6[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];@new_VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return) :-     OptForNameInvocation(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    Tamiflex_ReflectionMap(?class,?invocation),    isHeapAllocation( _tmp_0),    HeapAllocation_Type( _tmp_0,'java.lang.Class'),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,cat(cat('<class ',?class),'>'),?ctx,?return),     _tmp_0 = cat(cat('<class ',?class),'>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2778:1-2786:43];VarPointsTo(?hctx,cat(cat(\"<class \",?class),\">\"),?ctx,?return) :- \n   OptForNameInvocation(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   Tamiflex_ReflectionMap(?class,?invocation),\n   isHeapAllocation( _tmp_0),\n   HeapAllocation_Type( _tmp_0,\"java.lang.Class\"),\n   AssignReturnValue(?invocation,?return),\n    _tmp_0 = cat(cat(\"<class \",?class),\">\").;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_334_Tamiflex_Class_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_334_Tamiflex_Class_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_334_Tamiflex_Class_NewInstance_op_ctxt,rel_334_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Class_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_334_Tamiflex_Class_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_334_Tamiflex_Class_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_334_Tamiflex_Class_NewInstance_op_ctxt,rel_334_Tamiflex_Class_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Class_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Class_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_333_Tamiflex_Array_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_333_Tamiflex_Array_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_333_Tamiflex_Array_NewInstance_op_ctxt,rel_333_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env3[0],env4[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Array_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_333_Tamiflex_Array_NewInstance->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_333_Tamiflex_Array_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_333_Tamiflex_Array_NewInstance_op_ctxt,rel_333_Tamiflex_Array_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env3[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env4[1],env0[1],env3[0],env2[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env4[1]),(RamDomain)(env0[1]),(RamDomain)(env3[0]),(RamDomain)(env2[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_Array_NewInstance(?invocation,?value),    Instruction_Method(?invocation,?inmethod),    AssignReturnValue(?invocation,?return),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2787:1-2793:45];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_Array_NewInstance(?invocation,?value),\n   Instruction_Method(?invocation,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env2[0],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?callerCtx,?return) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?callerCtx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?callerCtx,?return) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env5[1],env0[2],env6[1],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env5[1]),(RamDomain)(env0[2]),(RamDomain)(env6[1]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !VarPointsTo(?hctx,?value,?calleeCtx,?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_337_delta_Tamiflex_Invoke->empty()&&!rel_94_ImmutableContextFromHContext->empty()&&!rel_372_VarPointsTo->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_337_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_337_delta_Tamiflex_Invoke_op_ctxt,rel_337_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt,rel_94_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[2]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_94_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_95_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_94_ImmutableContextFromHContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt,rel_94_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_373_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_94_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_95_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    @delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_95_delta_ImmutableContextFromHContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_372_VarPointsTo->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_95_delta_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env4[1],env3[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env4[1]),(RamDomain)(env3[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_VarPointsTo(?hctx,?value,?calleeCtx,?this) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    @delta_ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !VarPointsTo(?hctx,?value,?calleeCtx,?this).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];VarPointsTo(?hctx,?value,?calleeCtx,?this) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_328_delta_TamiflexInvocationArgumentArrayValue->empty()&&!rel_19_ArrayIndexPointsTo->empty()&&!rel_319_SupertypeOf->empty()&&!rel_368_Value_Type->empty()&&!rel_376_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_328_delta_TamiflexInvocationArgumentArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt,rel_20_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_328_delta_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_328_delta_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_19_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) && (!rel_20_delta_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt))))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[1],env3[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];@new_VarPointsTo(?hctx,?value,?calleeCtx,?formal) :-     @delta_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    Var_Type(?formal,?type),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?calleeCtx,?formal),    !@delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_20_delta_ArrayIndexPointsTo->empty()&&!rel_319_SupertypeOf->empty()&&!rel_327_TamiflexInvocationArgumentArrayValue->empty()&&!rel_368_Value_Type->empty()&&!rel_376_Var_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_327_TamiflexInvocationArgumentArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt,rel_20_delta_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_327_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_327_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_20_delta_ArrayIndexPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_20_delta_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[0],env0[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[1],env3[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];@new_VarPointsTo(?hctx,?value,?calleeCtx,?formal) :-     TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    @delta_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),    Var_Type(?formal,?type),    Value_Type(?value,?valuetype),    SupertypeOf(?type,?valuetype),    !VarPointsTo(?hctx,?value,?calleeCtx,?formal).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2848:1-2853:34];VarPointsTo(?hctx,?value,?calleeCtx,?formal) :- \n   TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),\n   ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue),\n   Var_Type(?formal,?type),\n   Value_Type(?value,?valuetype),\n   SupertypeOf(?type,?valuetype).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_341_Tamiflex_ReifiedField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_341_Tamiflex_ReifiedField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt,rel_341_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedField( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_341_Tamiflex_ReifiedField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_341_Tamiflex_ReifiedField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_341_Tamiflex_ReifiedField_op_ctxt,rel_341_Tamiflex_ReifiedField->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedField( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedField(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_342_Tamiflex_ReifiedFieldArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_342_Tamiflex_ReifiedFieldArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt,rel_342_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedFieldArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_342_Tamiflex_ReifiedFieldArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_342_Tamiflex_ReifiedFieldArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_342_Tamiflex_ReifiedFieldArray_op_ctxt,rel_342_Tamiflex_ReifiedFieldArray->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedFieldArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedFieldArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_343_Tamiflex_ReifiedMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_343_Tamiflex_ReifiedMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt,rel_343_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethod( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_343_Tamiflex_ReifiedMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_343_Tamiflex_ReifiedMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_343_Tamiflex_ReifiedMethod_op_ctxt,rel_343_Tamiflex_ReifiedMethod->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethod( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethod(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_344_Tamiflex_ReifiedMethodArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_344_Tamiflex_ReifiedMethodArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt,rel_344_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env3[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethodArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?ctx,?inmethod),    ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return),    !@delta_ImmutableHContextFromContext(?ctx,?hctx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_344_Tamiflex_ReifiedMethodArray->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_344_Tamiflex_ReifiedMethodArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt,rel_374_new_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_344_Tamiflex_ReifiedMethodArray_op_ctxt,rel_344_Tamiflex_ReifiedMethodArray->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_372_VarPointsTo->contains(Tuple<RamDomain,4>({env3[1],env0[1],env2[0],env4[1]}),READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env0[1]),(RamDomain)(env2[0]),(RamDomain)(env4[1])});
if (!(rel_374_new_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_374_new_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];@new_VarPointsTo(?hctx,?value,?ctx,?return) :-     Tamiflex_ReifiedMethodArray( _unnamed_var1,?value,?invocation),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?ctx,?inmethod),    @delta_ImmutableHContextFromContext(?ctx,?hctx),    AssignReturnValue(?invocation,?return),    !VarPointsTo(?hctx,?value,?ctx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;VarPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2854:1-2862:43];VarPointsTo(?hctx,?value,?ctx,?return) :- \n   Tamiflex_ReifiedMethodArray(_,?value,?invocation),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?ctx,?inmethod),\n   ImmutableHContextFromContext(?ctx,?hctx),\n   AssignReturnValue(?invocation,?return).;)" <<  rel_374_new_VarPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1319:1-1319:72];)" <<  rel_374_new_VarPointsTo->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1320:1-1320:108];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;InstanceFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)",profile);
if (!rel_301_delta_StoreHeapInstanceField->empty()&&!rel_166_NotSpecialObject->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_301_delta_StoreHeapInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_301_delta_StoreHeapInstanceField_op_ctxt,rel_301_delta_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_107_new_InstanceFieldPointsTo_op_ctxt,rel_107_new_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_85_HeapAllocation_Null->contains(Tuple<RamDomain,1>({env0[2]}),READ_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt))) {
const Tuple<RamDomain,4> key({0,0,env0[3],env0[4]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_105_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env1[0],env1[1],env0[0],env0[1],env0[2]}),READ_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[3],env0[4]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env1[1]});
auto range = rel_166_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_107_new_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_107_new_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];@new_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :-     @delta_StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    NotSpecialObject(?value),    !HeapAllocation_Null(?basevalue),    !InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).     .plan 1:(2,1,3);;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InstanceFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)" <<  rel_107_new_InstanceFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;InstanceFieldPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_166_NotSpecialObject->empty()&&!rel_300_StoreHeapInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_373_delta_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_107_new_InstanceFieldPointsTo_op_ctxt,rel_107_new_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_300_StoreHeapInstanceField_op_ctxt,rel_300_StoreHeapInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,5> key({0,0,0,env0[2],env0[3]});
auto range = rel_300_StoreHeapInstanceField->equalRange<3,4>(key,READ_OP_CONTEXT(rel_300_StoreHeapInstanceField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_85_HeapAllocation_Null->contains(Tuple<RamDomain,1>({env1[2]}),READ_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt))) && (!rel_105_InstanceFieldPointsTo->contains(Tuple<RamDomain,5>({env0[0],env0[1],env1[0],env1[1],env1[2]}),READ_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[1]});
auto range = rel_166_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,5> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2])});
if (!(rel_107_new_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_107_new_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];@new_InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :-     @delta_VarPointsTo(?hctx,?value,?ctx,?from),    StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),    NotSpecialObject(?value),    !HeapAllocation_Null(?basevalue),    !InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;InstanceFieldPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2318:1-2322:27];InstanceFieldPointsTo(?hctx,?value,?signature,?basehctx,?basevalue) :- \n   StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from),\n   NotSpecialObject(?value),\n   !HeapAllocation_Null(?basevalue).\n\n   .plan 1:(2,1,3);)" <<  rel_107_new_InstanceFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1320:1-1320:108];)" <<  rel_107_new_InstanceFieldPointsTo->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1321:1-1321:68];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1788:1-1793:41];StaticFieldPointsTo(?hctx,?value,\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\") :- \n   isField(\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\"),\n   isVar(\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\"),\n   VarPointsTo(?hctx,?value,_,\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\").;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_470_isField->empty()&&!rel_499_isVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt,rel_255_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_470_isField_op_ctxt,rel_470_isField->createContext());
CREATE_OP_CONTEXT(rel_499_isVar_op_ctxt,rel_499_isVar->createContext());
const Tuple<RamDomain,1> key({138});
auto range = rel_470_isField->equalRange<0>(key,READ_OP_CONTEXT(rel_470_isField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({139});
auto range = rel_499_isVar->equalRange<0>(key,READ_OP_CONTEXT(rel_499_isVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,4> key({0,0,0,139});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_253_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],138}),READ_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(138)});
if (!(rel_255_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1788:1-1793:41];@new_StaticFieldPointsTo(?hctx,?value,'<java.lang.ref.Reference: java.lang.ref.Reference pending>') :-     isField('<java.lang.ref.Reference: java.lang.ref.Reference pending>'),    isVar('<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this'),    @delta_VarPointsTo(?hctx,?value, _unnamed_var1,'<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this'),    !StaticFieldPointsTo(?hctx,?value,'<java.lang.ref.Reference: java.lang.ref.Reference pending>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1788:1-1793:41];StaticFieldPointsTo(?hctx,?value,\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\") :- \n   isField(\"<java.lang.ref.Reference: java.lang.ref.Reference pending>\"),\n   isVar(\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\"),\n   VarPointsTo(?hctx,?value,_,\"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/@this\").;)" <<  rel_255_new_StaticFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)",profile);
if (!rel_232_delta_ReachableStoreStaticFieldFrom->empty()&&!rel_306_StoreStaticField->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_232_delta_ReachableStoreStaticFieldFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_232_delta_ReachableStoreStaticFieldFrom_op_ctxt,rel_232_delta_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt,rel_255_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_306_StoreStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_253_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_255_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];@new_StaticFieldPointsTo(?hctx,?value,?signature) :-     @delta_ReachableStoreStaticFieldFrom(?from),    StoreStaticField(?from,?signature, _unnamed_var1),    VarPointsTo(?hctx,?value, _unnamed_var2,?from),    !StaticFieldPointsTo(?hctx,?value,?signature),    !@delta_VarPointsTo(?hctx,?value, _unnamed_var2,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StaticFieldPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)" <<  rel_255_new_StaticFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;StaticFieldPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_231_ReachableStoreStaticFieldFrom->empty()&&!rel_306_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_231_ReachableStoreStaticFieldFrom->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt,rel_255_new_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_231_ReachableStoreStaticFieldFrom_op_ctxt,rel_231_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({env0[0],0,0});
auto range = rel_306_StoreStaticField->equalRange<0>(key,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_253_StaticFieldPointsTo->contains(Tuple<RamDomain,3>({env2[0],env2[1],env1[1]}),READ_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env1[1])});
if (!(rel_255_new_StaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_255_new_StaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];@new_StaticFieldPointsTo(?hctx,?value,?signature) :-     ReachableStoreStaticFieldFrom(?from),    StoreStaticField(?from,?signature, _unnamed_var1),    @delta_VarPointsTo(?hctx,?value, _unnamed_var2,?from),    !StaticFieldPointsTo(?hctx,?value,?signature).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StaticFieldPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2333:1-2336:40];StaticFieldPointsTo(?hctx,?value,?signature) :- \n   ReachableStoreStaticFieldFrom(?from),\n   StoreStaticField(?from,?signature,_),\n   VarPointsTo(?hctx,?value,_,?from).;)" <<  rel_255_new_StaticFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1321:1-1321:68];)" <<  rel_255_new_StaticFieldPointsTo->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1322:1-1322:93];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_136_MainMethodArgArray->empty()&&!rel_137_MainMethodArgArrayContent->empty()&&!rel_138_MainMethodDeclaration->empty()&&!rel_219_ReachableContext->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_98_delta_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt,rel_21_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_136_MainMethodArgArray_op_ctxt,rel_136_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_137_MainMethodArgArrayContent_op_ctxt,rel_137_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_138_MainMethodDeclaration) {
if( !rel_220_delta_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_219_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_136_MainMethodArgArray) {
for(const auto& env5 : *rel_137_MainMethodArgArrayContent) {
if( !rel_19_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[1],env4[0]}),READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[1]),(RamDomain)(env4[0])});
if (!(rel_21_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];@new_ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :-     @delta_ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray),    !@delta_ReachableContext(?ctx,?mainMethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_21_new_ArrayIndexPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_136_MainMethodArgArray->empty()&&!rel_137_MainMethodArgArrayContent->empty()&&!rel_138_MainMethodDeclaration->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_97_ImmutableHContextFromContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt,rel_21_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_136_MainMethodArgArray_op_ctxt,rel_136_MainMethodArgArray->createContext());
CREATE_OP_CONTEXT(rel_137_MainMethodArgArrayContent_op_ctxt,rel_137_MainMethodArgArrayContent->createContext());
CREATE_OP_CONTEXT(rel_138_MainMethodDeclaration_op_ctxt,rel_138_MainMethodDeclaration->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_138_MainMethodDeclaration) {
const Tuple<RamDomain,2> key({env0[0],env1[0]});
auto range = rel_220_delta_ReachableContext->equalRange<0,1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,env1[0],0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
for(const auto& env4 : *rel_136_MainMethodArgArray) {
for(const auto& env5 : *rel_137_MainMethodArgArrayContent) {
if( !rel_19_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[1],env5[0],env0[1],env4[0]}),READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[1]),(RamDomain)(env5[0]),(RamDomain)(env0[1]),(RamDomain)(env4[0])});
if (!(rel_21_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];@new_ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :-     ImmutableHContextFromContext(?ctx,?hctx),    MainMethodDeclaration(?mainMethod),    @delta_ReachableContext(?ctx,?mainMethod),    _FormalParam(0,?mainMethod,?args),    MainMethodArgArray(?argArray),    MainMethodArgArrayContent(?argArrayContent),    !ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1735:1-1742:48];ArrayIndexPointsTo(?hctx,?argArrayContent,?hctx,?argArray) :- \n   ImmutableHContextFromContext(?ctx,?hctx),\n   MainMethodDeclaration(?mainMethod),\n   ReachableContext(?ctx,?mainMethod),\n   _FormalParam(0,?mainMethod,?args),\n   MainMethodArgArray(?argArray),\n   MainMethodArgArrayContent(?argArrayContent).;)" <<  rel_21_new_ArrayIndexPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2382:1-2389:43];ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :- \n   OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),\n   NotSpecialObject(?value),\n   NotEmptyArrayValue(?basevalue),\n   Value_Type(?value,?valuetype),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?componenttype),\n   SupertypeOf(?componenttype,?valuetype).;)",profile);
if (!rel_189_delta_OptStoreIntoArray->empty()&&!rel_164_NotEmptyArrayValue->empty()&&!rel_166_NotSpecialObject->empty()&&!rel_319_SupertypeOf->empty()&&!rel_368_Value_Type->empty()&&!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_189_delta_OptStoreIntoArray->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_189_delta_OptStoreIntoArray_op_ctxt,rel_189_delta_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt,rel_21_new_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt,rel_164_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt,rel_166_NotSpecialObject->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_19_ArrayIndexPointsTo->contains(Tuple<RamDomain,4>({env0[0],env0[3],env0[1],env0[2]}),READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[3]});
auto range = rel_166_NotSpecialObject->equalRange<0>(key,READ_OP_CONTEXT(rel_166_NotSpecialObject_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,1> key({env0[2]});
auto range = rel_164_NotEmptyArrayValue->equalRange<0>(key,READ_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[3],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[1],0});
auto range = rel_408_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env5[1],env3[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[3]),(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_21_new_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_21_new_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2382:1-2389:43];@new_ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :-     @delta_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),    NotSpecialObject(?value),    NotEmptyArrayValue(?basevalue),    Value_Type(?value,?valuetype),    Value_Type(?basevalue,?basevaluetype),    _ComponentType(?basevaluetype,?componenttype),    SupertypeOf(?componenttype,?valuetype),    !ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ArrayIndexPointsTo;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2382:1-2389:43];ArrayIndexPointsTo(?hctx,?value,?basehctx,?basevalue) :- \n   OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),\n   NotSpecialObject(?value),\n   NotEmptyArrayValue(?basevalue),\n   Value_Type(?value,?valuetype),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?componenttype),\n   SupertypeOf(?componenttype,?valuetype).;)" <<  rel_21_new_ArrayIndexPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1322:1-1322:93];)" <<  rel_21_new_ArrayIndexPointsTo->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1324:1-1324:106];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( rel_84_HeapAllocation_Merge->equalRange<0>(Tuple<RamDomain,2>({env0[0],0}),READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt)).empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
auto ref = env2[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env3 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,2>({env3[0],env3[1]})),env0[1],pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]})),90}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[0],env3[1]}))),(RamDomain)(env0[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env3[1],env0[0]}))),(RamDomain)(90)});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>') :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !HeapAllocation_Merge(?heapValue,_),    !CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal),\n   !HeapAllocation_Merge(?heapValue,_).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_2_AllocatedObjectSupportsFinalize->empty()&&!rel_71_FakeInvocation_RegisterFinalize0->empty()&&!rel_84_HeapAllocation_Merge->empty()&&!rel_422_FormalParam->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_71_FakeInvocation_RegisterFinalize0->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt,rel_2_AllocatedObjectSupportsFinalize->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_71_FakeInvocation_RegisterFinalize0_op_ctxt,rel_71_FakeInvocation_RegisterFinalize0->createContext());
CREATE_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt,rel_84_HeapAllocation_Merge->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_2_AllocatedObjectSupportsFinalize->equalRange<0>(key,READ_OP_CONTEXT(rel_2_AllocatedObjectSupportsFinalize_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env0[0],env0[0]});
auto range = rel_84_HeapAllocation_Merge->equalRange<0,1>(key,READ_OP_CONTEXT(rel_84_HeapAllocation_Merge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,2>>(ref)) continue;
ram::Tuple<RamDomain,2> env4 = unpack<ram::Tuple<RamDomain,2>>(ref);
{
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,2>({env4[0],env4[1]})),env0[1],pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]})),90}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({90});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,90,0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env4[1]}))),(RamDomain)(env0[1]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[1],env0[0]}))),(RamDomain)(90)});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];@new_CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>') :-     FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),    AllocatedObjectSupportsFinalize(?heapValue,?inmethod),    HeapAllocation_Merge(?heapValue,?heapValue),    @delta_ReachableContext([ctxValue1,ctxValue2],?inmethod),    isMethod('<java.lang.ref.Finalizer: void register(java.lang.Object)>'),    _FormalParam(0,'<java.lang.ref.Finalizer: void register(java.lang.Object)>',?formal),    !CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],'<java.lang.ref.Finalizer: void register(java.lang.Object)>').;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1683:1-1696:92];CallGraphEdge([ctxValue1,ctxValue2],?fakeinvo,[ctxValue2,?heapValue],\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\") :- \n   FakeInvocation_RegisterFinalize0(?heapValue,?fakeinvo),\n   AllocatedObjectSupportsFinalize(?heapValue,?inmethod),\n   HeapAllocation_Merge(?heapValue,?heapValue),\n   ReachableContext([ctxValue1,ctxValue2],?inmethod),\n   isMethod(\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\"),\n   _FormalParam(0,\"<java.lang.ref.Finalizer: void register(java.lang.Object)>\",?formal).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_192_delta_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_192_delta_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_192_delta_OptVirtualMethodInvocationBase_op_ctxt,rel_192_delta_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env2[0]})),env1[1],env1[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({env1[2],env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[2]}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[2])});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     @delta_OptVirtualMethodInvocationBase(?invocation,?base),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_191_OptVirtualMethodInvocationBase->empty()&&!rel_240_ResolveInvocation->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_191_OptVirtualMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_191_OptVirtualMethodInvocationBase_op_ctxt,rel_191_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt,rel_240_ResolveInvocation->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,3> key({env3[1],env0[0],0});
auto range = rel_240_ResolveInvocation->equalRange<0,1>(key,READ_OP_CONTEXT(rel_240_ResolveInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({env1[2],env0[0],pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[2]}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[2])});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     OptVirtualMethodInvocationBase(?invocation,?base),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    Value_Type(?value,?valuetype),    ResolveInvocation(?valuetype,?invocation,?tomethod),    _ThisVar(?tomethod,?this),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2417:1-2426:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptVirtualMethodInvocationBase(?invocation,?base),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   Value_Type(?value,?valuetype),\n   ResolveInvocation(?valuetype,?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_256_StaticMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt,rel_256_StaticMethodInvocation->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[1]});
auto range = rel_256_StaticMethodInvocation->equalRange<2>(key,READ_OP_CONTEXT(rel_256_StaticMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env1[0],env0[0],env1[1]}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];@new_CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :-     @delta_ReachableContext(?callerCtx,?inmethod),    StaticMethodInvocation(?invocation,?tomethod,?inmethod),    !CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2427:1-2431:24];CallGraphEdge(?callerCtx,?invocation,?callerCtx,?tomethod) :- \n   ReachableContext(?callerCtx,?inmethod),\n   StaticMethodInvocation(?invocation,?tomethod,?inmethod).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_185_delta_OptSpecialMethodInvocationBase->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_372_VarPointsTo->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_185_delta_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_185_delta_OptSpecialMethodInvocationBase_op_ctxt,rel_185_delta_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( ((!rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({env3[2],env0[0],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env1[1]}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({pack(ram::Tuple<RamDomain,1>({env4[0]})),env3[1],env3[2],env0[1]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env1[1])});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     @delta_OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod),    !@delta_VarPointsTo([hctxValue],?value,?callerCtx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_149_MethodInvocation_Method->empty()&&!rel_184_OptSpecialMethodInvocationBase->empty()&&!rel_248_SiteShouldNotBeRefined->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_184_OptSpecialMethodInvocationBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt,rel_38_new_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt,rel_149_MethodInvocation_Method->createContext());
CREATE_OP_CONTEXT(rel_184_OptSpecialMethodInvocationBase_op_ctxt,rel_184_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt,rel_248_SiteShouldNotBeRefined->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_149_MethodInvocation_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_149_MethodInvocation_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
auto ref = env3[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env4 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
if( !rel_36_CallGraphEdge->contains(Tuple<RamDomain,4>({env3[2],env0[0],pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]})),env1[1]}),READ_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt))) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_248_SiteShouldNotBeRefined->equalRange<0>(key,READ_OP_CONTEXT(rel_248_SiteShouldNotBeRefined_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[2]),(RamDomain)(env0[0]),(RamDomain)(pack(ram::Tuple<RamDomain,2>({env4[0],env3[1]}))),(RamDomain)(env1[1])});
if (!(rel_38_new_CallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_38_new_CallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];@new_CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :-     OptSpecialMethodInvocationBase(?invocation,?base),    MethodInvocation_Method(?invocation,?tomethod),    _ThisVar(?tomethod,?this),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?base),    SiteShouldNotBeRefined(?invocation),    !CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;CallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2437:1-2445:54];CallGraphEdge(?callerCtx,?invocation,[hctxValue,?value],?tomethod) :- \n   OptSpecialMethodInvocationBase(?invocation,?base),\n   MethodInvocation_Method(?invocation,?tomethod),\n   _ThisVar(?tomethod,?this),\n   VarPointsTo([hctxValue],?value,?callerCtx,?base),\n   SiteShouldNotBeRefined(?invocation).;)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1324:1-1324:106];)" <<  rel_38_new_CallGraphEdge->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1325:1-1325:32];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1580:1-1582:38];Reachable(?clinit) :- \n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)",profile);
if (!rel_103_delta_InitializedClass->empty()&&!rel_40_ClassInitializer->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_103_delta_InitializedClass->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_103_delta_InitializedClass_op_ctxt,rel_103_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_215_new_Reachable_op_ctxt,rel_215_new_Reachable->createContext());
CREATE_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt,rel_40_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_40_ClassInitializer->equalRange<0>(key,READ_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_213_Reachable->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_213_Reachable_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_215_new_Reachable->insert(tuple,READ_OP_CONTEXT(rel_215_new_Reachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Reachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1580:1-1582:38];@new_Reachable(?clinit) :-     @delta_InitializedClass(?class),    ClassInitializer(?class,?clinit),    !Reachable(?clinit).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1580:1-1582:38];Reachable(?clinit) :- \n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)" <<  rel_215_new_Reachable->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2448:1-2449:32];Reachable(?method) :- \n   ReachableContext(_,?method).;)",profile);
if (!rel_220_delta_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_220_delta_ReachableContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_215_new_Reachable_op_ctxt,rel_215_new_Reachable->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_213_Reachable->contains(Tuple<RamDomain,1>({env0[1]}),READ_OP_CONTEXT(rel_213_Reachable_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_215_new_Reachable->insert(tuple,READ_OP_CONTEXT(rel_215_new_Reachable_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Reachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2448:1-2449:32];@new_Reachable(?method) :-     @delta_ReachableContext( _unnamed_var1,?method),    !Reachable(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Reachable;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2448:1-2449:32];Reachable(?method) :- \n   ReachableContext(_,?method).;)" <<  rel_215_new_Reachable->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1325:1-1325:32];)" <<  rel_215_new_Reachable->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1327:1-1327:53];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_211_delta_PublicOnMethodOfReachableListener->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_211_delta_PublicOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_211_delta_PublicOnMethodOfReachableListener_op_ctxt,rel_211_delta_PublicOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];@new_ReachableContext(?ctx,?meth) :-     @delta_PublicOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ReachableContext(?ctx,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ReachableContext(?ctx,?meth) :- \n   PublicOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)",profile);
if (!rel_198_delta_OverridingProtectedOnMethodOfReachableListener->empty()&&!rel_475_isImmutableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_198_delta_OverridingProtectedOnMethodOfReachableListener->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_198_delta_OverridingProtectedOnMethodOfReachableListener_op_ctxt,rel_198_delta_OverridingProtectedOnMethodOfReachableListener->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_475_isImmutableContext_op_ctxt,rel_475_isImmutableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_475_isImmutableContext) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({env1[0],env0[0]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];@new_ReachableContext(?ctx,?meth) :-     @delta_OverridingProtectedOnMethodOfReachableListener(?meth),    isImmutableContext(?ctx),    !ReachableContext(?ctx,?meth).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1520:1-1524:28];ReachableContext(?ctx,?meth) :- \n   OverridingProtectedOnMethodOfReachableListener(?meth),\n   isImmutableContext(?ctx).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];ReachableContext([hctxValue,?value],?run) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_150_MethodLookup->empty()&&!rel_368_Value_Type->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_150_MethodLookup_op_ctxt,rel_150_MethodLookup->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
const Tuple<RamDomain,2> key({144,0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env0 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
auto ref = env1[0];
if (isNull<ram::Tuple<RamDomain,1>>(ref)) continue;
ram::Tuple<RamDomain,1> env2 = unpack<ram::Tuple<RamDomain,1>>(ref);
{
const Tuple<RamDomain,2> key({env1[1],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,4> key({145,59,env3[1],0});
auto range = rel_150_MethodLookup->equalRange<0,1,2>(key,READ_OP_CONTEXT(rel_150_MethodLookup_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]})),env4[3]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env4[3],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(pack(ram::Tuple<RamDomain,2>({env2[0],env1[1]}))),(RamDomain)(env4[3])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];@new_ReachableContext([hctxValue,?value],?run) :-     _ThisVar('<java.lang.Thread: void start0()>',?startThis),    @delta_VarPointsTo([hctxValue],?value,?callerCtx,?startThis),    Value_Type(?value,?valuetype),    MethodLookup('run','void()',?valuetype,?run),    _ThisVar(?run,?runThis),    !ReachableContext([hctxValue,?value],?run).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2130:1-2142:59];ReachableContext([hctxValue,?value],?run) :- \n   _ThisVar(\"<java.lang.Thread: void start0()>\",?startThis),\n   VarPointsTo([hctxValue],?value,?callerCtx,?startThis),\n   Value_Type(?value,?valuetype),\n   MethodLookup(\"run\",\"void()\",?valuetype,?run),\n   _ThisVar(?run,?runThis).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2248:1-2251:37];ReachableContext(?clinitContext,?clinit) :- \n   isClinitContext(?clinitContext),\n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)",profile);
if (!rel_103_delta_InitializedClass->empty()&&!rel_40_ClassInitializer->empty()&&!rel_465_isClinitContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_465_isClinitContext->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_103_delta_InitializedClass_op_ctxt,rel_103_delta_InitializedClass->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt,rel_40_ClassInitializer->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_465_isClinitContext_op_ctxt,rel_465_isClinitContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_103_delta_InitializedClass) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_40_ClassInitializer->equalRange<0>(key,READ_OP_CONTEXT(rel_40_ClassInitializer_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({env0[0],env2[1]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env2[1])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2248:1-2251:37];@new_ReachableContext(?clinitContext,?clinit) :-     isClinitContext(?clinitContext),    @delta_InitializedClass(?class),    ClassInitializer(?class,?clinit),    !ReachableContext(?clinitContext,?clinit).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2248:1-2251:37];ReachableContext(?clinitContext,?clinit) :- \n   isClinitContext(?clinitContext),\n   InitializedClass(?class),\n   ClassInitializer(?class,?clinit).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2446:1-2447:38];ReachableContext(?ctx,?method) :- \n   CallGraphEdge(_,_,?ctx,?method).;)",profile);
if (!rel_37_delta_CallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_37_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_37_delta_CallGraphEdge_op_ctxt,rel_37_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({env0[2],env0[3]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2446:1-2447:38];@new_ReachableContext(?ctx,?method) :-     @delta_CallGraphEdge( _unnamed_var1, _unnamed_var2,?ctx,?method),    !ReachableContext(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2446:1-2447:38];ReachableContext(?ctx,?method) :- \n   CallGraphEdge(_,_,?ctx,?method).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2770:1-2771:52];ReachableContext(?calleeCtx,?callee) :- \n   TamiflexCallGraphEdge(_,_,?calleeCtx,?callee).;)",profile);
if (!rel_322_delta_TamiflexCallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_322_delta_TamiflexCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_322_delta_TamiflexCallGraphEdge_op_ctxt,rel_322_delta_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt,rel_221_new_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_219_ReachableContext->contains(Tuple<RamDomain,2>({env0[2],env0[3]}),READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[2]),(RamDomain)(env0[3])});
if (!(rel_221_new_ReachableContext->insert(tuple,READ_OP_CONTEXT(rel_221_new_ReachableContext_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2770:1-2771:52];@new_ReachableContext(?calleeCtx,?callee) :-     @delta_TamiflexCallGraphEdge( _unnamed_var1, _unnamed_var2,?calleeCtx,?callee),    !ReachableContext(?calleeCtx,?callee).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableContext;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2770:1-2771:52];ReachableContext(?calleeCtx,?callee) :- \n   TamiflexCallGraphEdge(_,_,?calleeCtx,?callee).;)" <<  rel_221_new_ReachableContext->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1327:1-1327:53];)" <<  rel_221_new_ReachableContext->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1332:1-1332:85];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2400:1-2403:41];OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   _ActualParam(?index,?invocation,?actual),\n   _FormalParam(?index,?method,?formal).;)",profile);
if (!rel_37_delta_CallGraphEdge->empty()&&!rel_385_ActualParam->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_37_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_37_delta_CallGraphEdge_op_ctxt,rel_37_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt,rel_179_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt,rel_177_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({env1[0],env0[3],0});
auto range = rel_422_FormalParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_177_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[2],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[2]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_179_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2400:1-2403:41];@new_OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :-     @delta_CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),    _ActualParam(?index,?invocation,?actual),    _FormalParam(?index,?method,?formal),    !OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2400:1-2403:41];OptInterproceduralAssign(?calleeCtx,?formal,?callerCtx,?actual) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   _ActualParam(?index,?invocation,?actual),\n   _FormalParam(?index,?method,?formal).;)" <<  rel_179_new_OptInterproceduralAssign->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2404:1-2407:31];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?method).;)",profile);
if (!rel_37_delta_CallGraphEdge->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_242_ReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_37_delta_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_37_delta_CallGraphEdge_op_ctxt,rel_37_delta_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt,rel_179_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt,rel_177_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_177_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env0[2],env2[0]}),READ_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env0[2]),(RamDomain)(env2[0])});
if (!(rel_179_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2404:1-2407:31];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     @delta_CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?method),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2404:1-2407:31];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   CallGraphEdge(?callerCtx,?invocation,?calleeCtx,?method),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?method).;)" <<  rel_179_new_OptInterproceduralAssign->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_337_delta_Tamiflex_Invoke->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_242_ReturnVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_337_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_337_delta_Tamiflex_Invoke_op_ctxt,rel_337_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt,rel_179_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt,rel_177_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_177_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env3[1],env2[0]}),READ_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env3[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env3[1]),(RamDomain)(env2[0])});
if (!(rel_179_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?callee),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptInterproceduralAssign;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_179_new_OptInterproceduralAssign->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;OptInterproceduralAssign;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_242_ReturnVar->empty()&&!rel_336_Tamiflex_Invoke->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt,rel_179_new_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt,rel_177_OptInterproceduralAssign->createContext());
CREATE_OP_CONTEXT(rel_242_ReturnVar_op_ctxt,rel_242_ReturnVar->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env0[2]});
auto range = rel_242_ReturnVar->equalRange<1>(key,READ_OP_CONTEXT(rel_242_ReturnVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_177_OptInterproceduralAssign->contains(Tuple<RamDomain,4>({env0[0],env1[1],env3[1],env2[0]}),READ_OP_CONTEXT(rel_177_OptInterproceduralAssign_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env3[1]),(RamDomain)(env2[0])});
if (!(rel_179_new_OptInterproceduralAssign->insert(tuple,READ_OP_CONTEXT(rel_179_new_OptInterproceduralAssign_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];@new_OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    AssignReturnValue(?invocation,?local),    ReturnVar(?return,?callee),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptInterproceduralAssign;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2827:1-2831:55];OptInterproceduralAssign(?callerCtx,?local,?calleeCtx,?return) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   AssignReturnValue(?invocation,?local),\n   ReturnVar(?return,?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_179_new_OptInterproceduralAssign->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1332:1-1332:85];)" <<  rel_179_new_OptInterproceduralAssign->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1337:1-1337:92];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptStoreIntoArray;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)",profile);
if (!rel_298_delta_StoreHeapArrayIndex->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_298_delta_StoreHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_298_delta_StoreHeapArrayIndex_op_ctxt,rel_298_delta_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_190_new_OptStoreIntoArray_op_ctxt,rel_190_new_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_188_OptStoreIntoArray_op_ctxt,rel_188_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_188_OptStoreIntoArray->contains(Tuple<RamDomain,4>({env1[0],env0[0],env0[1],env1[1]}),READ_OP_CONTEXT(rel_188_OptStoreIntoArray_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[1])});
if (!(rel_190_new_OptStoreIntoArray->insert(tuple,READ_OP_CONTEXT(rel_190_new_OptStoreIntoArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptStoreIntoArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];@new_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :-     @delta_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    VarPointsTo(?hctx,?value,?ctx,?from),    !OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value),    !@delta_VarPointsTo(?hctx,?value,?ctx,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptStoreIntoArray;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)" <<  rel_190_new_OptStoreIntoArray->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;OptStoreIntoArray;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_297_StoreHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_297_StoreHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_190_new_OptStoreIntoArray_op_ctxt,rel_190_new_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_188_OptStoreIntoArray_op_ctxt,rel_188_OptStoreIntoArray->createContext());
CREATE_OP_CONTEXT(rel_297_StoreHeapArrayIndex_op_ctxt,rel_297_StoreHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_373_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_188_OptStoreIntoArray->contains(Tuple<RamDomain,4>({env1[0],env0[0],env0[1],env1[1]}),READ_OP_CONTEXT(rel_188_OptStoreIntoArray_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[1])});
if (!(rel_190_new_OptStoreIntoArray->insert(tuple,READ_OP_CONTEXT(rel_190_new_OptStoreIntoArray_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptStoreIntoArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];@new_OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :-     StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    @delta_VarPointsTo(?hctx,?value,?ctx,?from),    !OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptStoreIntoArray;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2379:1-2381:43];OptStoreIntoArray(?hctx,?basehctx,?basevalue,?value) :- \n   StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),\n   VarPointsTo(?hctx,?value,?ctx,?from).;)" <<  rel_190_new_OptStoreIntoArray->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1337:1-1337:92];)" <<  rel_190_new_OptStoreIntoArray->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1338:1-1338:101];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapInstanceField;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2315:1-2317:51];LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :- \n   LoadInstanceField(?base,?sig,?to,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_130_LoadInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_130_LoadInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_129_new_LoadHeapInstanceField_op_ctxt,rel_129_new_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_127_LoadHeapInstanceField_op_ctxt,rel_127_LoadHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_130_LoadInstanceField_op_ctxt,rel_130_LoadInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_127_LoadHeapInstanceField->contains(Tuple<RamDomain,5>({env1[2],env0[2],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_127_LoadHeapInstanceField_op_ctxt))) {
Tuple<RamDomain,5> tuple({(RamDomain)(env1[2]),(RamDomain)(env0[2]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_129_new_LoadHeapInstanceField->insert(tuple,READ_OP_CONTEXT(rel_129_new_LoadHeapInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2315:1-2317:51];@new_LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :-     LoadInstanceField(?base,?sig,?to, _unnamed_var1),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;LoadHeapInstanceField;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2315:1-2317:51];LoadHeapInstanceField(?ctx,?to,?sig,?basehctx,?basevalue) :- \n   LoadInstanceField(?base,?sig,?to,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_129_new_LoadHeapInstanceField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1338:1-1338:101];)" <<  rel_129_new_LoadHeapInstanceField->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1339:1-1339:104];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapInstanceField;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2324:1-2326:51];StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :- \n   StoreInstanceField(?from,?base,?signature,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_303_StoreInstanceField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_303_StoreInstanceField->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_302_new_StoreHeapInstanceField_op_ctxt,rel_302_new_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_300_StoreHeapInstanceField_op_ctxt,rel_300_StoreHeapInstanceField->createContext());
CREATE_OP_CONTEXT(rel_303_StoreInstanceField_op_ctxt,rel_303_StoreInstanceField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[1]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_300_StoreHeapInstanceField->contains(Tuple<RamDomain,5>({env0[2],env1[0],env1[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_300_StoreHeapInstanceField_op_ctxt))) {
Tuple<RamDomain,5> tuple({(RamDomain)(env0[2]),(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_302_new_StoreHeapInstanceField->insert(tuple,READ_OP_CONTEXT(rel_302_new_StoreHeapInstanceField_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2324:1-2326:51];@new_StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :-     StoreInstanceField(?from,?base,?signature, _unnamed_var1),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StoreHeapInstanceField;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2324:1-2326:51];StoreHeapInstanceField(?signature,?basehctx,?basevalue,?ctx,?from) :- \n   StoreInstanceField(?from,?base,?signature,_),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_302_new_StoreHeapInstanceField->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1339:1-1339:104];)" <<  rel_302_new_StoreHeapInstanceField->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1340:1-1340:86];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_226_delta_ReachableLoadArrayIndexBase->empty()&&!rel_180_OptLoadArrayIndex->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_226_delta_ReachableLoadArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_226_delta_ReachableLoadArrayIndexBase_op_ctxt,rel_226_delta_ReachableLoadArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_126_new_LoadHeapArrayIndex_op_ctxt,rel_126_new_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt,rel_124_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt,rel_180_OptLoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_180_OptLoadArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_124_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[2],env1[0],env2[0],env2[1]}),READ_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[2]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[1])});
if (!(rel_126_new_LoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_126_new_LoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];@new_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :-     @delta_ReachableLoadArrayIndexBase(?base),    OptLoadArrayIndex(?to,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;LoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_126_new_LoadHeapArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;LoadHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_180_OptLoadArrayIndex->empty()&&!rel_225_ReachableLoadArrayIndexBase->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_225_ReachableLoadArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_126_new_LoadHeapArrayIndex_op_ctxt,rel_126_new_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt,rel_124_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt,rel_180_OptLoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_225_ReachableLoadArrayIndexBase_op_ctxt,rel_225_ReachableLoadArrayIndexBase->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_180_OptLoadArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_180_OptLoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_124_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[2],env1[0],env2[0],env2[1]}),READ_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[2]),(RamDomain)(env1[0]),(RamDomain)(env2[0]),(RamDomain)(env2[1])});
if (!(rel_126_new_LoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_126_new_LoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];@new_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :-     ReachableLoadArrayIndexBase(?base),    OptLoadArrayIndex(?to,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;LoadHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2369:1-2372:51];LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue) :- \n   ReachableLoadArrayIndexBase(?base),\n   OptLoadArrayIndex(?to,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_126_new_LoadHeapArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1340:1-1340:86];)" <<  rel_126_new_LoadHeapArrayIndex->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1341:1-1341:89];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_229_delta_ReachableStoreArrayIndexBase->empty()&&!rel_187_OptStoreArrayIndex->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_229_delta_ReachableStoreArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_229_delta_ReachableStoreArrayIndexBase_op_ctxt,rel_229_delta_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_299_new_StoreHeapArrayIndex_op_ctxt,rel_299_new_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt,rel_187_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_297_StoreHeapArrayIndex_op_ctxt,rel_297_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_187_OptStoreArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_297_StoreHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env1[0]}),READ_OP_CONTEXT(rel_297_StoreHeapArrayIndex_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env0[0]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_299_new_StoreHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_299_new_StoreHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];@new_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :-     @delta_ReachableStoreArrayIndexBase(?base),    OptStoreArrayIndex(?from,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StoreHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_299_new_StoreHeapArrayIndex->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;StoreHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_187_OptStoreArrayIndex->empty()&&!rel_228_ReachableStoreArrayIndexBase->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_228_ReachableStoreArrayIndexBase->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_299_new_StoreHeapArrayIndex_op_ctxt,rel_299_new_StoreHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt,rel_187_OptStoreArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_228_ReachableStoreArrayIndexBase_op_ctxt,rel_228_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_297_StoreHeapArrayIndex_op_ctxt,rel_297_StoreHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_187_OptStoreArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_187_OptStoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_373_delta_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_297_StoreHeapArrayIndex->contains(Tuple<RamDomain,4>({env2[0],env2[1],env2[2],env1[0]}),READ_OP_CONTEXT(rel_297_StoreHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_299_new_StoreHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_299_new_StoreHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];@new_StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :-     ReachableStoreArrayIndexBase(?base),    OptStoreArrayIndex(?from,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;StoreHeapArrayIndex;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2390:1-2393:51];StoreHeapArrayIndex(?basehctx,?basevalue,?ctx,?from) :- \n   ReachableStoreArrayIndexBase(?base),\n   OptStoreArrayIndex(?from,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_299_new_StoreHeapArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1341:1-1341:89];)" <<  rel_299_new_StoreHeapArrayIndex->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2302:1-2302:52];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptAssignCast;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2303:1-2305:44];OptAssignCast(?type,?to,?from) :- \n   Reachable(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_22_AssignCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_174_new_OptAssignCast_op_ctxt,rel_174_new_OptAssignCast->createContext());
CREATE_OP_CONTEXT(rel_22_AssignCast_op_ctxt,rel_22_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_172_OptAssignCast_op_ctxt,rel_172_OptAssignCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_22_AssignCast->equalRange<3>(key,READ_OP_CONTEXT(rel_22_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_172_OptAssignCast->contains(Tuple<RamDomain,3>({env1[0],env1[2],env1[1]}),READ_OP_CONTEXT(rel_172_OptAssignCast_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[2]),(RamDomain)(env1[1])});
if (!(rel_174_new_OptAssignCast->insert(tuple,READ_OP_CONTEXT(rel_174_new_OptAssignCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptAssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2303:1-2305:44];@new_OptAssignCast(?type,?to,?from) :-     @delta_Reachable(?inmethod),    AssignCast(?type,?from,?to,?inmethod),    !OptAssignCast(?type,?to,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptAssignCast;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2303:1-2305:44];OptAssignCast(?type,?to,?from) :- \n   Reachable(?inmethod),\n   AssignCast(?type,?from,?to,?inmethod).;)" <<  rel_174_new_OptAssignCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2302:1-2302:52];)" <<  rel_174_new_OptAssignCast->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2337:1-2337:47];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableStoreStaticFieldFrom;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2338:1-2340:41];ReachableStoreStaticFieldFrom(?from) :- \n   Reachable(?inmethod),\n   StoreStaticField(?from,_,?inmethod).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_306_StoreStaticField->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_233_new_ReachableStoreStaticFieldFrom_op_ctxt,rel_233_new_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_231_ReachableStoreStaticFieldFrom_op_ctxt,rel_231_ReachableStoreStaticFieldFrom->createContext());
CREATE_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt,rel_306_StoreStaticField->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_306_StoreStaticField->equalRange<2>(key,READ_OP_CONTEXT(rel_306_StoreStaticField_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_231_ReachableStoreStaticFieldFrom->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_231_ReachableStoreStaticFieldFrom_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_233_new_ReachableStoreStaticFieldFrom->insert(tuple,READ_OP_CONTEXT(rel_233_new_ReachableStoreStaticFieldFrom_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2338:1-2340:41];@new_ReachableStoreStaticFieldFrom(?from) :-     @delta_Reachable(?inmethod),    StoreStaticField(?from, _unnamed_var1,?inmethod),    !ReachableStoreStaticFieldFrom(?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableStoreStaticFieldFrom;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2338:1-2340:41];ReachableStoreStaticFieldFrom(?from) :- \n   Reachable(?inmethod),\n   StoreStaticField(?from,_,?inmethod).;)" <<  rel_233_new_ReachableStoreStaticFieldFrom->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2337:1-2337:47];)" <<  rel_233_new_ReachableStoreStaticFieldFrom->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2345:1-2345:52];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptLoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2348:1-2349:45];OptLoadHeapArrayIndex(?to,?basevalue) :- \n   LoadHeapArrayIndex(_,?to,_,?basevalue).;)",profile);
if (!rel_125_delta_LoadHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_125_delta_LoadHeapArrayIndex->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_delta_LoadHeapArrayIndex_op_ctxt,rel_125_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_183_new_OptLoadHeapArrayIndex_op_ctxt,rel_183_new_OptLoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_181_OptLoadHeapArrayIndex_op_ctxt,rel_181_OptLoadHeapArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_181_OptLoadHeapArrayIndex->contains(Tuple<RamDomain,2>({env0[1],env0[3]}),READ_OP_CONTEXT(rel_181_OptLoadHeapArrayIndex_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_183_new_OptLoadHeapArrayIndex->insert(tuple,READ_OP_CONTEXT(rel_183_new_OptLoadHeapArrayIndex_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2348:1-2349:45];@new_OptLoadHeapArrayIndex(?to,?basevalue) :-     @delta_LoadHeapArrayIndex( _unnamed_var1,?to, _unnamed_var2,?basevalue),    !OptLoadHeapArrayIndex(?to,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptLoadHeapArrayIndex;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2348:1-2349:45];OptLoadHeapArrayIndex(?to,?basevalue) :- \n   LoadHeapArrayIndex(_,?to,_,?basevalue).;)" <<  rel_183_new_OptLoadHeapArrayIndex->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2345:1-2345:52];)" <<  rel_183_new_OptLoadHeapArrayIndex->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2346:1-2346:36];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Temp1;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2350:1-2356:42];Temp1(?basevalue,?to) :- \n   NotEmptyArrayValue(?basevalue),\n   OptLoadHeapArrayIndex(?to,?basevalue),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?basecomponenttype),\n   Var_Type(?to,?type),\n   SupertypeOf(?type,?basecomponenttype).;)",profile);
if (!rel_182_delta_OptLoadHeapArrayIndex->empty()&&!rel_164_NotEmptyArrayValue->empty()&&!rel_319_SupertypeOf->empty()&&!rel_368_Value_Type->empty()&&!rel_376_Var_Type->empty()&&!rel_408_ComponentType->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_164_NotEmptyArrayValue->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_182_delta_OptLoadHeapArrayIndex_op_ctxt,rel_182_delta_OptLoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_347_new_Temp1_op_ctxt,rel_347_new_Temp1->createContext());
CREATE_OP_CONTEXT(rel_164_NotEmptyArrayValue_op_ctxt,rel_164_NotEmptyArrayValue->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_345_Temp1_op_ctxt,rel_345_Temp1->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
CREATE_OP_CONTEXT(rel_376_Var_Type_op_ctxt,rel_376_Var_Type->createContext());
CREATE_OP_CONTEXT(rel_408_ComponentType_op_ctxt,rel_408_ComponentType->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_182_delta_OptLoadHeapArrayIndex->equalRange<1>(key,READ_OP_CONTEXT(rel_182_delta_OptLoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_345_Temp1->contains(Tuple<RamDomain,2>({env0[0],env1[0]}),READ_OP_CONTEXT(rel_345_Temp1_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env2[1],0});
auto range = rel_408_ComponentType->equalRange<0>(key,READ_OP_CONTEXT(rel_408_ComponentType_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_376_Var_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_376_Var_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env4[1],env3[1]});
auto range = rel_319_SupertypeOf->equalRange<0,1>(key,READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_347_new_Temp1->insert(tuple,READ_OP_CONTEXT(rel_347_new_Temp1_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Temp1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2350:1-2356:42];@new_Temp1(?basevalue,?to) :-     NotEmptyArrayValue(?basevalue),    @delta_OptLoadHeapArrayIndex(?to,?basevalue),    Value_Type(?basevalue,?basevaluetype),    _ComponentType(?basevaluetype,?basecomponenttype),    Var_Type(?to,?type),    SupertypeOf(?type,?basecomponenttype),    !Temp1(?basevalue,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Temp1;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2350:1-2356:42];Temp1(?basevalue,?to) :- \n   NotEmptyArrayValue(?basevalue),\n   OptLoadHeapArrayIndex(?to,?basevalue),\n   Value_Type(?basevalue,?basevaluetype),\n   _ComponentType(?basevaluetype,?basecomponenttype),\n   Var_Type(?to,?type),\n   SupertypeOf(?type,?basecomponenttype).;)" <<  rel_347_new_Temp1->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2346:1-2346:36];)" <<  rel_347_new_Temp1->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2347:1-2347:66];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Temp2;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)",profile);
if (!rel_346_delta_Temp1->empty()&&!rel_124_LoadHeapArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_346_delta_Temp1->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_delta_LoadHeapArrayIndex_op_ctxt,rel_125_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_346_delta_Temp1_op_ctxt,rel_346_delta_Temp1->createContext());
CREATE_OP_CONTEXT(rel_350_new_Temp2_op_ctxt,rel_350_new_Temp2->createContext());
CREATE_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt,rel_124_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_348_Temp2_op_ctxt,rel_348_Temp2->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[1],0,env0[0]});
auto range = rel_124_LoadHeapArrayIndex->equalRange<1,3>(key,READ_OP_CONTEXT(rel_124_LoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_348_Temp2->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_348_Temp2_op_ctxt))) && (!rel_125_delta_LoadHeapArrayIndex->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_125_delta_LoadHeapArrayIndex_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_350_new_Temp2->insert(tuple,READ_OP_CONTEXT(rel_350_new_Temp2_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Temp2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];@new_Temp2(?ctx,?to,?basehctx,?basevalue) :-     @delta_Temp1(?basevalue,?to),    LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !Temp2(?ctx,?to,?basehctx,?basevalue),    !@delta_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Temp2;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)" <<  rel_350_new_Temp2->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;Temp2;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)",profile);
if (!rel_125_delta_LoadHeapArrayIndex->empty()&&!rel_345_Temp1->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_345_Temp1->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_125_delta_LoadHeapArrayIndex_op_ctxt,rel_125_delta_LoadHeapArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_350_new_Temp2_op_ctxt,rel_350_new_Temp2->createContext());
CREATE_OP_CONTEXT(rel_345_Temp1_op_ctxt,rel_345_Temp1->createContext());
CREATE_OP_CONTEXT(rel_348_Temp2_op_ctxt,rel_348_Temp2->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[1],0,env0[0]});
auto range = rel_125_delta_LoadHeapArrayIndex->equalRange<1,3>(key,READ_OP_CONTEXT(rel_125_delta_LoadHeapArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_348_Temp2->contains(Tuple<RamDomain,4>({env1[0],env0[1],env1[2],env0[0]}),READ_OP_CONTEXT(rel_348_Temp2_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_350_new_Temp2->insert(tuple,READ_OP_CONTEXT(rel_350_new_Temp2_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Temp2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];@new_Temp2(?ctx,?to,?basehctx,?basevalue) :-     Temp1(?basevalue,?to),    @delta_LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue),    !Temp2(?ctx,?to,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Temp2;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2357:1-2359:56];Temp2(?ctx,?to,?basehctx,?basevalue) :- \n   Temp1(?basevalue,?to),\n   LoadHeapArrayIndex(?ctx,?to,?basehctx,?basevalue).;)" <<  rel_350_new_Temp2->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2347:1-2347:66];)" <<  rel_350_new_Temp2->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2375:1-2375:45];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableLoadArrayIndexBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2376:1-2378:39];ReachableLoadArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   LoadArrayIndex(?base,_,?inmethod).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_121_LoadArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_227_new_ReachableLoadArrayIndexBase_op_ctxt,rel_227_new_ReachableLoadArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt,rel_121_LoadArrayIndex->createContext());
CREATE_OP_CONTEXT(rel_225_ReachableLoadArrayIndexBase_op_ctxt,rel_225_ReachableLoadArrayIndexBase->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_121_LoadArrayIndex->equalRange<2>(key,READ_OP_CONTEXT(rel_121_LoadArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_225_ReachableLoadArrayIndexBase->contains(Tuple<RamDomain,1>({env1[0]}),READ_OP_CONTEXT(rel_225_ReachableLoadArrayIndexBase_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_227_new_ReachableLoadArrayIndexBase->insert(tuple,READ_OP_CONTEXT(rel_227_new_ReachableLoadArrayIndexBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2376:1-2378:39];@new_ReachableLoadArrayIndexBase(?base) :-     @delta_Reachable(?inmethod),    LoadArrayIndex(?base, _unnamed_var1,?inmethod),    !ReachableLoadArrayIndexBase(?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableLoadArrayIndexBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2376:1-2378:39];ReachableLoadArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   LoadArrayIndex(?base,_,?inmethod).;)" <<  rel_227_new_ReachableLoadArrayIndexBase->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2375:1-2375:45];)" <<  rel_227_new_ReachableLoadArrayIndexBase->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2394:1-2394:46];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;ReachableStoreArrayIndexBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2395:1-2397:40];ReachableStoreArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   StoreArrayIndex(_,?base,?inmethod).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_294_StoreArrayIndex->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_230_new_ReachableStoreArrayIndexBase_op_ctxt,rel_230_new_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_228_ReachableStoreArrayIndexBase_op_ctxt,rel_228_ReachableStoreArrayIndexBase->createContext());
CREATE_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt,rel_294_StoreArrayIndex->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_294_StoreArrayIndex->equalRange<2>(key,READ_OP_CONTEXT(rel_294_StoreArrayIndex_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_228_ReachableStoreArrayIndexBase->contains(Tuple<RamDomain,1>({env1[1]}),READ_OP_CONTEXT(rel_228_ReachableStoreArrayIndexBase_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[1])});
if (!(rel_230_new_ReachableStoreArrayIndexBase->insert(tuple,READ_OP_CONTEXT(rel_230_new_ReachableStoreArrayIndexBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2395:1-2397:40];@new_ReachableStoreArrayIndexBase(?base) :-     @delta_Reachable(?inmethod),    StoreArrayIndex( _unnamed_var1,?base,?inmethod),    !ReachableStoreArrayIndexBase(?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;ReachableStoreArrayIndexBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2395:1-2397:40];ReachableStoreArrayIndexBase(?base) :- \n   Reachable(?inmethod),\n   StoreArrayIndex(_,?base,?inmethod).;)" <<  rel_230_new_ReachableStoreArrayIndexBase->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2394:1-2394:46];)" <<  rel_230_new_ReachableStoreArrayIndexBase->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2412:1-2412:78];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptVirtualMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2413:1-2416:52];OptVirtualMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   VirtualMethodInvocation_Base(?invocation,?base).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_109_Instruction_Method->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_193_new_OptVirtualMethodInvocationBase_op_ctxt,rel_193_new_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_191_OptVirtualMethodInvocationBase_op_ctxt,rel_191_OptVirtualMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_191_OptVirtualMethodInvocationBase->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_191_OptVirtualMethodInvocationBase_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_193_new_OptVirtualMethodInvocationBase->insert(tuple,READ_OP_CONTEXT(rel_193_new_OptVirtualMethodInvocationBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2413:1-2416:52];@new_OptVirtualMethodInvocationBase(?invocation,?base) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    VirtualMethodInvocation_Base(?invocation,?base),    !OptVirtualMethodInvocationBase(?invocation,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptVirtualMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2413:1-2416:52];OptVirtualMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   VirtualMethodInvocation_Base(?invocation,?base).;)" <<  rel_193_new_OptVirtualMethodInvocationBase->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2412:1-2412:78];)" <<  rel_193_new_OptVirtualMethodInvocationBase->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2432:1-2432:78];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;OptSpecialMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2433:1-2436:52];OptSpecialMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   SpecialMethodInvocation_Base(?invocation,?base).;)",profile);
if (!rel_214_delta_Reachable->empty()&&!rel_109_Instruction_Method->empty()&&!rel_252_SpecialMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_214_delta_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_214_delta_Reachable_op_ctxt,rel_214_delta_Reachable->createContext());
CREATE_OP_CONTEXT(rel_186_new_OptSpecialMethodInvocationBase_op_ctxt,rel_186_new_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_184_OptSpecialMethodInvocationBase_op_ctxt,rel_184_OptSpecialMethodInvocationBase->createContext());
CREATE_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt,rel_252_SpecialMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_252_SpecialMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_252_SpecialMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_184_OptSpecialMethodInvocationBase->contains(Tuple<RamDomain,2>({env1[0],env2[1]}),READ_OP_CONTEXT(rel_184_OptSpecialMethodInvocationBase_op_ctxt))) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env2[1])});
if (!(rel_186_new_OptSpecialMethodInvocationBase->insert(tuple,READ_OP_CONTEXT(rel_186_new_OptSpecialMethodInvocationBase_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2433:1-2436:52];@new_OptSpecialMethodInvocationBase(?invocation,?base) :-     @delta_Reachable(?inmethod),    Instruction_Method(?invocation,?inmethod),    SpecialMethodInvocation_Base(?invocation,?base),    !OptSpecialMethodInvocationBase(?invocation,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;OptSpecialMethodInvocationBase;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2433:1-2436:52];OptSpecialMethodInvocationBase(?invocation,?base) :- \n   Reachable(?inmethod),\n   Instruction_Method(?invocation,?inmethod),\n   SpecialMethodInvocation_Base(?invocation,?base).;)" <<  rel_186_new_OptSpecialMethodInvocationBase->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2432:1-2432:78];)" <<  rel_186_new_OptSpecialMethodInvocationBase->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2639:1-2639:88];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;Tamiflex_Invoke;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2807:1-2814:43];Tamiflex_Invoke(?callerCtx,?invocation,?method) :- \n   isMethod(\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_340_Tamiflex_ReflectionMap->empty()&&!rel_380_VirtualMethodInvocation->empty()&&!rel_485_isMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_338_new_Tamiflex_Invoke_op_ctxt,rel_338_new_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt,rel_340_Tamiflex_ReflectionMap->createContext());
CREATE_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt,rel_380_VirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_485_isMethod_op_ctxt,rel_485_isMethod->createContext());
const Tuple<RamDomain,1> key({175});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,3> key({0,175,0});
auto range = rel_380_VirtualMethodInvocation->equalRange<1>(key,READ_OP_CONTEXT(rel_380_VirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[0]});
auto range = rel_340_Tamiflex_ReflectionMap->equalRange<1>(key,READ_OP_CONTEXT(rel_340_Tamiflex_ReflectionMap_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_485_isMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_485_isMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({0,env4[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_336_Tamiflex_Invoke->contains(Tuple<RamDomain,3>({env5[0],env1[0],env2[0]}),READ_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env5[0]),(RamDomain)(env1[0]),(RamDomain)(env2[0])});
if (!(rel_338_new_Tamiflex_Invoke->insert(tuple,READ_OP_CONTEXT(rel_338_new_Tamiflex_Invoke_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2807:1-2814:43];@new_Tamiflex_Invoke(?callerCtx,?invocation,?method) :-     isMethod('<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>'),    VirtualMethodInvocation(?invocation,'<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>', _unnamed_var1),    Tamiflex_ReflectionMap(?method,?invocation),    isMethod(?method),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    !Tamiflex_Invoke(?callerCtx,?invocation,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;Tamiflex_Invoke;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2807:1-2814:43];Tamiflex_Invoke(?callerCtx,?invocation,?method) :- \n   isMethod(\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\"),\n   VirtualMethodInvocation(?invocation,\"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>\",_),\n   Tamiflex_ReflectionMap(?method,?invocation),\n   isMethod(?method),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod).;)" <<  rel_338_new_Tamiflex_Invoke->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2639:1-2639:88];)" <<  rel_338_new_Tamiflex_Invoke->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2768:1-2769:64];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_337_delta_Tamiflex_Invoke->empty()&&!rel_94_ImmutableContextFromHContext->empty()&&!rel_372_VarPointsTo->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_337_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_337_delta_Tamiflex_Invoke_op_ctxt,rel_337_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt,rel_94_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env2[0],env2[1],env0[0],env1[2]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_94_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) && (!rel_95_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_94_ImmutableContextFromHContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt,rel_94_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_373_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_94_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_94_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( ((!rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) && (!rel_95_delta_ImmutableContextFromHContext->contains(Tuple<RamDomain,2>({env2[0],env4[1]}),READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    @delta_VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_ImmutableContextFromHContext(?hctx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)",profile);
if (!rel_95_delta_ImmutableContextFromHContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_372_VarPointsTo->empty()&&!rel_385_ActualParam->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt,rel_95_delta_ImmutableContextFromHContext->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_435_Method_Modifier->contains(Tuple<RamDomain,2>({7,env0[2]}),READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt))) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,env0[0],env1[2]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[2],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_95_delta_ImmutableContextFromHContext->equalRange<0>(key,READ_OP_CONTEXT(rel_95_delta_ImmutableContextFromHContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
if( !rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env4[1],env0[2]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env4[1]),(RamDomain)(env0[2])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(0,?invocation,?base),    VarPointsTo(?hctx,?value,?callerCtx,?base),    _ThisVar(?callee,?this),    @delta_ImmutableContextFromHContext(?hctx,?calleeCtx),    !_Method_Modifier('static',?callee),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2815:1-2822:51];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(0,?invocation,?base),\n   VarPointsTo(?hctx,?value,?callerCtx,?base),\n   _ThisVar(?callee,?this),\n   ImmutableContextFromHContext(?hctx,?calleeCtx),\n   !_Method_Modifier(\"static\",?callee).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_337_delta_Tamiflex_Invoke->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_337_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_337_delta_Tamiflex_Invoke_op_ctxt,rel_337_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({7,env0[2]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( ((!rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[1],env0[2]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env2[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _Method_Modifier('static',?callee),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_435_Method_Modifier->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt,rel_323_new_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt,rel_321_TamiflexCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt,rel_435_Method_Modifier->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({7,env0[2]});
auto range = rel_435_Method_Modifier->equalRange<0,1>(key,READ_OP_CONTEXT(rel_435_Method_Modifier_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_321_TamiflexCallGraphEdge->contains(Tuple<RamDomain,4>({env0[0],env0[1],env2[1],env0[2]}),READ_OP_CONTEXT(rel_321_TamiflexCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env2[1]),(RamDomain)(env0[2])});
if (!(rel_323_new_TamiflexCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_323_new_TamiflexCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];@new_TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _Method_Modifier('static',?callee),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2823:1-2826:56];TamiflexCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _Method_Modifier(\"static\",?callee),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2768:1-2769:64];)" <<  rel_323_new_TamiflexCallGraphEdge->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2794:1-2795:75];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_220_delta_ReachableContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt,rel_220_delta_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_326_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt,rel_324_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_220_delta_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_220_delta_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
if( !rel_98_delta_ImmutableHContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env5[1]}),READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt))) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_324_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_326_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    @delta_ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableHContextFromContext(?callerCtx,?hctx),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_326_new_TamiflexConstructorCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_98_delta_ImmutableHContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt,rel_98_delta_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_326_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt,rel_324_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_98_delta_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_98_delta_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( ((!rel_324_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env2[0],env6[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_326_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    @delta_ImmutableHContextFromContext(?callerCtx,?hctx),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_326_new_TamiflexConstructorCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexConstructorCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_35_AssignReturnValue->empty()&&!rel_97_ImmutableHContextFromContext->empty()&&!rel_109_Instruction_Method->empty()&&!rel_219_ReachableContext->empty()&&!rel_335_Tamiflex_Constructor_NewInstance->empty()&&!rel_451_ThisVar->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_335_Tamiflex_Constructor_NewInstance->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt,rel_326_new_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt,rel_35_AssignReturnValue->createContext());
CREATE_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt,rel_97_ImmutableHContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt,rel_324_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_335_Tamiflex_Constructor_NewInstance_op_ctxt,rel_335_Tamiflex_Constructor_NewInstance->createContext());
CREATE_OP_CONTEXT(rel_451_ThisVar_op_ctxt,rel_451_ThisVar->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_109_Instruction_Method->equalRange<0>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_35_AssignReturnValue->equalRange<0>(key,READ_OP_CONTEXT(rel_35_AssignReturnValue_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
const Tuple<RamDomain,2> key({env0[1],0});
auto range = rel_451_ThisVar->equalRange<0>(key,READ_OP_CONTEXT(rel_451_ThisVar_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env4 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_97_ImmutableHContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_97_ImmutableHContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env5 : range) {
const Tuple<RamDomain,2> key({env2[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env6 : range) {
if( !rel_324_TamiflexConstructorCallGraphEdge->contains(Tuple<RamDomain,4>({env2[0],env0[0],env6[1],env0[1]}),READ_OP_CONTEXT(rel_324_TamiflexConstructorCallGraphEdge_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0]),(RamDomain)(env6[1]),(RamDomain)(env0[1])});
if (!(rel_326_new_TamiflexConstructorCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_326_new_TamiflexConstructorCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];@new_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :-     Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),    Instruction_Method(?invocation,?inmethod),    ReachableContext(?callerCtx,?inmethod),    AssignReturnValue(?invocation,?return),    _ThisVar(?constructor,?this),    ImmutableHContextFromContext(?callerCtx,?hctx),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexConstructorCallGraphEdge;2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2796:1-2806:55];TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?constructor) :- \n   Tamiflex_Constructor_NewInstance(?invocation,?constructor,?value),\n   Instruction_Method(?invocation,?inmethod),\n   ReachableContext(?callerCtx,?inmethod),\n   AssignReturnValue(?invocation,?return),\n   _ThisVar(?constructor,?this),\n   ImmutableHContextFromContext(?callerCtx,?hctx),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_326_new_TamiflexConstructorCallGraphEdge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2794:1-2795:75];)" <<  rel_326_new_TamiflexConstructorCallGraphEdge->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2832:1-2833:71];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_337_delta_Tamiflex_Invoke->empty()&&!rel_91_ImmutableContextFromContext->empty()&&!rel_385_ActualParam->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_337_delta_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_337_delta_Tamiflex_Invoke_op_ctxt,rel_337_delta_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt,rel_332_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt,rel_91_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt,rel_330_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({1,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[2],0});
auto range = rel_422_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_91_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_91_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( ((!rel_330_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env3[1],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt))) && (!rel_92_delta_ImmutableContextFromContext->contains(Tuple<RamDomain,2>({env0[0],env3[1]}),READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_332_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     @delta_Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(1,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam),    !@delta_ImmutableContextFromContext(?callerCtx,?calleeCtx).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_332_new_TamiflexInvocationFirstParam->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)",profile);
if (!rel_92_delta_ImmutableContextFromContext->empty()&&!rel_336_Tamiflex_Invoke->empty()&&!rel_385_ActualParam->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_336_Tamiflex_Invoke->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt,rel_92_delta_ImmutableContextFromContext->createContext());
CREATE_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt,rel_332_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt,rel_330_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_336_Tamiflex_Invoke_op_ctxt,rel_336_Tamiflex_Invoke->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({1,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[2],0});
auto range = rel_422_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_92_delta_ImmutableContextFromContext->equalRange<0>(key,READ_OP_CONTEXT(rel_92_delta_ImmutableContextFromContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env3 : range) {
if( !rel_330_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env3[1],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env3[1]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_332_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     Tamiflex_Invoke(?callerCtx,?invocation,?callee),    _ActualParam(1,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    @delta_ImmutableContextFromContext(?callerCtx,?calleeCtx),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2834:1-2838:55];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   Tamiflex_Invoke(?callerCtx,?invocation,?callee),\n   _ActualParam(1,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal),\n   ImmutableContextFromContext(?callerCtx,?calleeCtx).;)" <<  rel_332_new_TamiflexInvocationFirstParam->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2839:1-2842:36];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),\n   _ActualParam(0,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal).;)",profile);
if (!rel_325_delta_TamiflexConstructorCallGraphEdge->empty()&&!rel_385_ActualParam->empty()&&!rel_422_FormalParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_325_delta_TamiflexConstructorCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_325_delta_TamiflexConstructorCallGraphEdge_op_ctxt,rel_325_delta_TamiflexConstructorCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt,rel_332_new_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt,rel_330_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_385_ActualParam_op_ctxt,rel_385_ActualParam->createContext());
CREATE_OP_CONTEXT(rel_422_FormalParam_op_ctxt,rel_422_FormalParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,env0[1],0});
auto range = rel_385_ActualParam->equalRange<0,1>(key,READ_OP_CONTEXT(rel_385_ActualParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,3> key({0,env0[3],0});
auto range = rel_422_FormalParam->equalRange<1>(key,READ_OP_CONTEXT(rel_422_FormalParam_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_330_TamiflexInvocationFirstParam->contains(Tuple<RamDomain,4>({env0[2],env2[2],env0[0],env1[2]}),READ_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[2]),(RamDomain)(env2[2]),(RamDomain)(env0[0]),(RamDomain)(env1[2])});
if (!(rel_332_new_TamiflexInvocationFirstParam->insert(tuple,READ_OP_CONTEXT(rel_332_new_TamiflexInvocationFirstParam_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2839:1-2842:36];@new_TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :-     @delta_TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),    _ActualParam(0,?invocation,?argsParam),    _FormalParam( _unnamed_var1,?callee,?formal),    !TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexInvocationFirstParam;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2839:1-2842:36];TamiflexInvocationFirstParam(?calleeCtx,?formal,?callerCtx,?argsParam) :- \n   TamiflexConstructorCallGraphEdge(?callerCtx,?invocation,?calleeCtx,?callee),\n   _ActualParam(0,?invocation,?argsParam),\n   _FormalParam(_,?callee,?formal).;)" <<  rel_332_new_TamiflexInvocationFirstParam->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2832:1-2833:71];)" <<  rel_332_new_TamiflexInvocationFirstParam->size() << "\n";
}SECTION_END
SECTION_START;
{
	RamLogger logger(R"(@t-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2843:1-2844:81];)",profile);
{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationArgumentArrayValue;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_331_delta_TamiflexInvocationFirstParam->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_331_delta_TamiflexInvocationFirstParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_331_delta_TamiflexInvocationFirstParam_op_ctxt,rel_331_delta_TamiflexInvocationFirstParam->createContext());
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_329_new_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_329_new_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_327_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_327_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_372_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( ((!rel_327_TamiflexInvocationArgumentArrayValue->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_327_TamiflexInvocationArgumentArrayValue_op_ctxt))) && (!rel_373_delta_VarPointsTo->contains(Tuple<RamDomain,4>({env1[0],env1[1],env0[2],env0[3]}),READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt))))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_329_new_TamiflexInvocationArgumentArrayValue->insert(tuple,READ_OP_CONTEXT(rel_329_new_TamiflexInvocationArgumentArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];@new_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :-     @delta_TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),    VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue),    !@delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexInvocationArgumentArrayValue;0;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_329_new_TamiflexInvocationArgumentArrayValue->size() << "\n";
}{
	RamLogger logger(R"(@t-recursive-rule;TamiflexInvocationArgumentArrayValue;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)",profile);
if (!rel_373_delta_VarPointsTo->empty()&&!rel_330_TamiflexInvocationFirstParam->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_330_TamiflexInvocationFirstParam->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt,rel_373_delta_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_329_new_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_329_new_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_327_TamiflexInvocationArgumentArrayValue_op_ctxt,rel_327_TamiflexInvocationArgumentArrayValue->createContext());
CREATE_OP_CONTEXT(rel_330_TamiflexInvocationFirstParam_op_ctxt,rel_330_TamiflexInvocationFirstParam->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,env0[2],env0[3]});
auto range = rel_373_delta_VarPointsTo->equalRange<2,3>(key,READ_OP_CONTEXT(rel_373_delta_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( !rel_327_TamiflexInvocationArgumentArrayValue->contains(Tuple<RamDomain,4>({env0[0],env0[1],env1[0],env1[1]}),READ_OP_CONTEXT(rel_327_TamiflexInvocationArgumentArrayValue_op_ctxt))) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env0[1]),(RamDomain)(env1[0]),(RamDomain)(env1[1])});
if (!(rel_329_new_TamiflexInvocationArgumentArrayValue->insert(tuple,READ_OP_CONTEXT(rel_329_new_TamiflexInvocationArgumentArrayValue_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;@new_TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];@new_TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :-     TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),    @delta_VarPointsTo(?basehctx,?basevalue,?ctx,?base),    !TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-rule;TamiflexInvocationArgumentArrayValue;1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2845:1-2847:51];TamiflexInvocationArgumentArrayValue(?calleeCtx,?formal,?basehctx,?basevalue) :- \n   TamiflexInvocationFirstParam(?calleeCtx,?formal,?ctx,?base),\n   VarPointsTo(?basehctx,?basevalue,?ctx,?base).;)" <<  rel_329_new_TamiflexInvocationArgumentArrayValue->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2843:1-2844:81];)" <<  rel_329_new_TamiflexInvocationArgumentArrayValue->size() << "\n";
}SECTION_END
SECTIONS_END;
if(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((rel_76_new_ForcedReachableAndroidContext->empty()) && (rel_218_new_ReachableApplicationObjectOfType->empty()))) && (rel_14_new_ApplicationObjectFlowingToLibrary->empty()))) && (rel_212_new_PublicOnMethodOfReachableListener->empty()))) && (rel_119_new_LibraryReachableAppListenerType->empty()))) && (rel_207_new_ProtectedOnMethodOfReachableListener->empty()))) && (rel_199_new_OverridingProtectedOnMethodOfReachableListener->empty()))) && (rel_79_new_FormalOfForcedReachableContext->empty()))) && (rel_17_new_ApplicationObjectFlowingToLibraryStaticType->empty()))) && (rel_104_new_InitializedClass->empty()))) && (rel_114_new_Instruction_Throws->empty()))) && (rel_354_new_ThrowPointsTo->empty()))) && (rel_247_new_RunningThread->empty()))) && (rel_224_new_ReachableCurrentThreadInvocation->empty()))) && (rel_468_new_isContext->empty()))) && (rel_473_new_isHContext->empty()))) && (rel_96_new_ImmutableContextFromHContext->empty()))) && (rel_99_new_ImmutableHContextFromContext->empty()))) && (rel_93_new_ImmutableContextFromContext->empty()))) && (rel_374_new_VarPointsTo->empty()))) && (rel_107_new_InstanceFieldPointsTo->empty()))) && (rel_255_new_StaticFieldPointsTo->empty()))) && (rel_21_new_ArrayIndexPointsTo->empty()))) && (rel_38_new_CallGraphEdge->empty()))) && (rel_215_new_Reachable->empty()))) && (rel_221_new_ReachableContext->empty()))) && (rel_179_new_OptInterproceduralAssign->empty()))) && (rel_190_new_OptStoreIntoArray->empty()))) && (rel_129_new_LoadHeapInstanceField->empty()))) && (rel_302_new_StoreHeapInstanceField->empty()))) && (rel_126_new_LoadHeapArrayIndex->empty()))) && (rel_299_new_StoreHeapArrayIndex->empty()))) && (rel_174_new_OptAssignCast->empty()))) && (rel_233_new_ReachableStoreStaticFieldFrom->empty()))) && (rel_183_new_OptLoadHeapArrayIndex->empty()))) && (rel_347_new_Temp1->empty()))) && (rel_350_new_Temp2->empty()))) && (rel_227_new_ReachableLoadArrayIndexBase->empty()))) && (rel_230_new_ReachableStoreArrayIndexBase->empty()))) && (rel_193_new_OptVirtualMethodInvocationBase->empty()))) && (rel_186_new_OptSpecialMethodInvocationBase->empty()))) && (rel_338_new_Tamiflex_Invoke->empty()))) && (rel_323_new_TamiflexCallGraphEdge->empty()))) && (rel_326_new_TamiflexConstructorCallGraphEdge->empty()))) && (rel_332_new_TamiflexInvocationFirstParam->empty()))) && (rel_329_new_TamiflexInvocationArgumentArrayValue->empty()))) break;
{
	RamLogger logger(R"(@c-recursive-relation;ForcedReachableAndroidContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1259:1-1259:64];)",profile);
rel_74_ForcedReachableAndroidContext->insertAll(*rel_76_new_ForcedReachableAndroidContext);
{
auto rel_0 = rel_75_delta_ForcedReachableAndroidContext;
rel_75_delta_ForcedReachableAndroidContext = rel_76_new_ForcedReachableAndroidContext;
rel_76_new_ForcedReachableAndroidContext = rel_0;
}
rel_76_new_ForcedReachableAndroidContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableApplicationObjectOfType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1263:1-1263:81];)",profile);
rel_216_ReachableApplicationObjectOfType->insertAll(*rel_218_new_ReachableApplicationObjectOfType);
{
auto rel_0 = rel_217_delta_ReachableApplicationObjectOfType;
rel_217_delta_ReachableApplicationObjectOfType = rel_218_new_ReachableApplicationObjectOfType;
rel_218_new_ReachableApplicationObjectOfType = rel_0;
}
rel_218_new_ReachableApplicationObjectOfType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ApplicationObjectFlowingToLibrary;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1264:1-1264:84];)",profile);
rel_12_ApplicationObjectFlowingToLibrary->insertAll(*rel_14_new_ApplicationObjectFlowingToLibrary);
{
auto rel_0 = rel_13_delta_ApplicationObjectFlowingToLibrary;
rel_13_delta_ApplicationObjectFlowingToLibrary = rel_14_new_ApplicationObjectFlowingToLibrary;
rel_14_new_ApplicationObjectFlowingToLibrary = rel_0;
}
rel_14_new_ApplicationObjectFlowingToLibrary->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;PublicOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1265:1-1265:54];)",profile);
rel_210_PublicOnMethodOfReachableListener->insertAll(*rel_212_new_PublicOnMethodOfReachableListener);
{
auto rel_0 = rel_211_delta_PublicOnMethodOfReachableListener;
rel_211_delta_PublicOnMethodOfReachableListener = rel_212_new_PublicOnMethodOfReachableListener;
rel_212_new_PublicOnMethodOfReachableListener = rel_0;
}
rel_212_new_PublicOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LibraryReachableAppListenerType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1267:1-1267:50];)",profile);
rel_117_LibraryReachableAppListenerType->insertAll(*rel_119_new_LibraryReachableAppListenerType);
{
auto rel_0 = rel_118_delta_LibraryReachableAppListenerType;
rel_118_delta_LibraryReachableAppListenerType = rel_119_new_LibraryReachableAppListenerType;
rel_119_new_LibraryReachableAppListenerType = rel_0;
}
rel_119_new_LibraryReachableAppListenerType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1268:1-1268:57];)",profile);
rel_205_ProtectedOnMethodOfReachableListener->insertAll(*rel_207_new_ProtectedOnMethodOfReachableListener);
{
auto rel_0 = rel_206_delta_ProtectedOnMethodOfReachableListener;
rel_206_delta_ProtectedOnMethodOfReachableListener = rel_207_new_ProtectedOnMethodOfReachableListener;
rel_207_new_ProtectedOnMethodOfReachableListener = rel_0;
}
rel_207_new_ProtectedOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OverridingProtectedOnMethodOfReachableListener;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1269:1-1269:67];)",profile);
rel_197_OverridingProtectedOnMethodOfReachableListener->insertAll(*rel_199_new_OverridingProtectedOnMethodOfReachableListener);
{
auto rel_0 = rel_198_delta_OverridingProtectedOnMethodOfReachableListener;
rel_198_delta_OverridingProtectedOnMethodOfReachableListener = rel_199_new_OverridingProtectedOnMethodOfReachableListener;
rel_199_new_OverridingProtectedOnMethodOfReachableListener = rel_0;
}
rel_199_new_OverridingProtectedOnMethodOfReachableListener->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;FormalOfForcedReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1272:1-1272:82];)",profile);
rel_77_FormalOfForcedReachableContext->insertAll(*rel_79_new_FormalOfForcedReachableContext);
{
auto rel_0 = rel_78_delta_FormalOfForcedReachableContext;
rel_78_delta_FormalOfForcedReachableContext = rel_79_new_FormalOfForcedReachableContext;
rel_79_new_FormalOfForcedReachableContext = rel_0;
}
rel_79_new_FormalOfForcedReachableContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ApplicationObjectFlowingToLibraryStaticType;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1273:1-1273:100];)",profile);
rel_15_ApplicationObjectFlowingToLibraryStaticType->insertAll(*rel_17_new_ApplicationObjectFlowingToLibraryStaticType);
{
auto rel_0 = rel_16_delta_ApplicationObjectFlowingToLibraryStaticType;
rel_16_delta_ApplicationObjectFlowingToLibraryStaticType = rel_17_new_ApplicationObjectFlowingToLibraryStaticType;
rel_17_new_ApplicationObjectFlowingToLibraryStaticType = rel_0;
}
rel_17_new_ApplicationObjectFlowingToLibraryStaticType->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;InitializedClass;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1278:1-1278:47];)",profile);
rel_102_InitializedClass->insertAll(*rel_104_new_InitializedClass);
{
auto rel_0 = rel_103_delta_InitializedClass;
rel_103_delta_InitializedClass = rel_104_new_InitializedClass;
rel_104_new_InitializedClass = rel_0;
}
rel_104_new_InitializedClass->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Instruction_Throws;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1279:1-1279:88];)",profile);
rel_112_Instruction_Throws->insertAll(*rel_114_new_Instruction_Throws);
{
auto rel_0 = rel_113_delta_Instruction_Throws;
rel_113_delta_Instruction_Throws = rel_114_new_Instruction_Throws;
rel_114_new_Instruction_Throws = rel_0;
}
rel_114_new_Instruction_Throws->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ThrowPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1282:1-1282:80];)",profile);
rel_352_ThrowPointsTo->insertAll(*rel_354_new_ThrowPointsTo);
{
auto rel_0 = rel_353_delta_ThrowPointsTo;
rel_353_delta_ThrowPointsTo = rel_354_new_ThrowPointsTo;
rel_354_new_ThrowPointsTo = rel_0;
}
rel_354_new_ThrowPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;RunningThread;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1290:1-1290:50];)",profile);
rel_245_RunningThread->insertAll(*rel_247_new_RunningThread);
{
auto rel_0 = rel_246_delta_RunningThread;
rel_246_delta_RunningThread = rel_247_new_RunningThread;
rel_247_new_RunningThread = rel_0;
}
rel_247_new_RunningThread->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableCurrentThreadInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1291:1-1291:71];)",profile);
rel_222_ReachableCurrentThreadInvocation->insertAll(*rel_224_new_ReachableCurrentThreadInvocation);
{
auto rel_0 = rel_223_delta_ReachableCurrentThreadInvocation;
rel_223_delta_ReachableCurrentThreadInvocation = rel_224_new_ReachableCurrentThreadInvocation;
rel_224_new_ReachableCurrentThreadInvocation = rel_0;
}
rel_224_new_ReachableCurrentThreadInvocation->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;isContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1304:1-1304:30];)",profile);
rel_466_isContext->insertAll(*rel_468_new_isContext);
{
auto rel_0 = rel_467_delta_isContext;
rel_467_delta_isContext = rel_468_new_isContext;
rel_468_new_isContext = rel_0;
}
rel_468_new_isContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;isHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1305:1-1305:33];)",profile);
rel_471_isHContext->insertAll(*rel_473_new_isHContext);
{
auto rel_0 = rel_472_delta_isHContext;
rel_472_delta_isHContext = rel_473_new_isHContext;
rel_473_new_isHContext = rel_0;
}
rel_473_new_isHContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableContextFromHContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1312:1-1312:65];)",profile);
rel_94_ImmutableContextFromHContext->insertAll(*rel_96_new_ImmutableContextFromHContext);
{
auto rel_0 = rel_95_delta_ImmutableContextFromHContext;
rel_95_delta_ImmutableContextFromHContext = rel_96_new_ImmutableContextFromHContext;
rel_96_new_ImmutableContextFromHContext = rel_0;
}
rel_96_new_ImmutableContextFromHContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableHContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1313:1-1313:65];)",profile);
rel_97_ImmutableHContextFromContext->insertAll(*rel_99_new_ImmutableHContextFromContext);
{
auto rel_0 = rel_98_delta_ImmutableHContextFromContext;
rel_98_delta_ImmutableHContextFromContext = rel_99_new_ImmutableHContextFromContext;
rel_99_new_ImmutableHContextFromContext = rel_0;
}
rel_99_new_ImmutableHContextFromContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ImmutableContextFromContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1314:1-1314:64];)",profile);
rel_91_ImmutableContextFromContext->insertAll(*rel_93_new_ImmutableContextFromContext);
{
auto rel_0 = rel_92_delta_ImmutableContextFromContext;
rel_92_delta_ImmutableContextFromContext = rel_93_new_ImmutableContextFromContext;
rel_93_new_ImmutableContextFromContext = rel_0;
}
rel_93_new_ImmutableContextFromContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1319:1-1319:72];)",profile);
rel_372_VarPointsTo->insertAll(*rel_374_new_VarPointsTo);
{
auto rel_0 = rel_373_delta_VarPointsTo;
rel_373_delta_VarPointsTo = rel_374_new_VarPointsTo;
rel_374_new_VarPointsTo = rel_0;
}
rel_374_new_VarPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1320:1-1320:108];)",profile);
rel_105_InstanceFieldPointsTo->insertAll(*rel_107_new_InstanceFieldPointsTo);
{
auto rel_0 = rel_106_delta_InstanceFieldPointsTo;
rel_106_delta_InstanceFieldPointsTo = rel_107_new_InstanceFieldPointsTo;
rel_107_new_InstanceFieldPointsTo = rel_0;
}
rel_107_new_InstanceFieldPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1321:1-1321:68];)",profile);
rel_253_StaticFieldPointsTo->insertAll(*rel_255_new_StaticFieldPointsTo);
{
auto rel_0 = rel_254_delta_StaticFieldPointsTo;
rel_254_delta_StaticFieldPointsTo = rel_255_new_StaticFieldPointsTo;
rel_255_new_StaticFieldPointsTo = rel_0;
}
rel_255_new_StaticFieldPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1322:1-1322:93];)",profile);
rel_19_ArrayIndexPointsTo->insertAll(*rel_21_new_ArrayIndexPointsTo);
{
auto rel_0 = rel_20_delta_ArrayIndexPointsTo;
rel_20_delta_ArrayIndexPointsTo = rel_21_new_ArrayIndexPointsTo;
rel_21_new_ArrayIndexPointsTo = rel_0;
}
rel_21_new_ArrayIndexPointsTo->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;CallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1324:1-1324:106];)",profile);
rel_36_CallGraphEdge->insertAll(*rel_38_new_CallGraphEdge);
{
auto rel_0 = rel_37_delta_CallGraphEdge;
rel_37_delta_CallGraphEdge = rel_38_new_CallGraphEdge;
rel_38_new_CallGraphEdge = rel_0;
}
rel_38_new_CallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Reachable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1325:1-1325:32];)",profile);
rel_213_Reachable->insertAll(*rel_215_new_Reachable);
{
auto rel_0 = rel_214_delta_Reachable;
rel_214_delta_Reachable = rel_215_new_Reachable;
rel_215_new_Reachable = rel_0;
}
rel_215_new_Reachable->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableContext;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1327:1-1327:53];)",profile);
rel_219_ReachableContext->insertAll(*rel_221_new_ReachableContext);
{
auto rel_0 = rel_220_delta_ReachableContext;
rel_220_delta_ReachableContext = rel_221_new_ReachableContext;
rel_221_new_ReachableContext = rel_0;
}
rel_221_new_ReachableContext->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptInterproceduralAssign;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1332:1-1332:85];)",profile);
rel_177_OptInterproceduralAssign->insertAll(*rel_179_new_OptInterproceduralAssign);
{
auto rel_0 = rel_178_delta_OptInterproceduralAssign;
rel_178_delta_OptInterproceduralAssign = rel_179_new_OptInterproceduralAssign;
rel_179_new_OptInterproceduralAssign = rel_0;
}
rel_179_new_OptInterproceduralAssign->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptStoreIntoArray;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1337:1-1337:92];)",profile);
rel_188_OptStoreIntoArray->insertAll(*rel_190_new_OptStoreIntoArray);
{
auto rel_0 = rel_189_delta_OptStoreIntoArray;
rel_189_delta_OptStoreIntoArray = rel_190_new_OptStoreIntoArray;
rel_190_new_OptStoreIntoArray = rel_0;
}
rel_190_new_OptStoreIntoArray->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LoadHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1338:1-1338:101];)",profile);
rel_127_LoadHeapInstanceField->insertAll(*rel_129_new_LoadHeapInstanceField);
{
auto rel_0 = rel_128_delta_LoadHeapInstanceField;
rel_128_delta_LoadHeapInstanceField = rel_129_new_LoadHeapInstanceField;
rel_129_new_LoadHeapInstanceField = rel_0;
}
rel_129_new_LoadHeapInstanceField->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StoreHeapInstanceField;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1339:1-1339:104];)",profile);
rel_300_StoreHeapInstanceField->insertAll(*rel_302_new_StoreHeapInstanceField);
{
auto rel_0 = rel_301_delta_StoreHeapInstanceField;
rel_301_delta_StoreHeapInstanceField = rel_302_new_StoreHeapInstanceField;
rel_302_new_StoreHeapInstanceField = rel_0;
}
rel_302_new_StoreHeapInstanceField->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;LoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1340:1-1340:86];)",profile);
rel_124_LoadHeapArrayIndex->insertAll(*rel_126_new_LoadHeapArrayIndex);
{
auto rel_0 = rel_125_delta_LoadHeapArrayIndex;
rel_125_delta_LoadHeapArrayIndex = rel_126_new_LoadHeapArrayIndex;
rel_126_new_LoadHeapArrayIndex = rel_0;
}
rel_126_new_LoadHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;StoreHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [1341:1-1341:89];)",profile);
rel_297_StoreHeapArrayIndex->insertAll(*rel_299_new_StoreHeapArrayIndex);
{
auto rel_0 = rel_298_delta_StoreHeapArrayIndex;
rel_298_delta_StoreHeapArrayIndex = rel_299_new_StoreHeapArrayIndex;
rel_299_new_StoreHeapArrayIndex = rel_0;
}
rel_299_new_StoreHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptAssignCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2302:1-2302:52];)",profile);
rel_172_OptAssignCast->insertAll(*rel_174_new_OptAssignCast);
{
auto rel_0 = rel_173_delta_OptAssignCast;
rel_173_delta_OptAssignCast = rel_174_new_OptAssignCast;
rel_174_new_OptAssignCast = rel_0;
}
rel_174_new_OptAssignCast->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableStoreStaticFieldFrom;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2337:1-2337:47];)",profile);
rel_231_ReachableStoreStaticFieldFrom->insertAll(*rel_233_new_ReachableStoreStaticFieldFrom);
{
auto rel_0 = rel_232_delta_ReachableStoreStaticFieldFrom;
rel_232_delta_ReachableStoreStaticFieldFrom = rel_233_new_ReachableStoreStaticFieldFrom;
rel_233_new_ReachableStoreStaticFieldFrom = rel_0;
}
rel_233_new_ReachableStoreStaticFieldFrom->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptLoadHeapArrayIndex;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2345:1-2345:52];)",profile);
rel_181_OptLoadHeapArrayIndex->insertAll(*rel_183_new_OptLoadHeapArrayIndex);
{
auto rel_0 = rel_182_delta_OptLoadHeapArrayIndex;
rel_182_delta_OptLoadHeapArrayIndex = rel_183_new_OptLoadHeapArrayIndex;
rel_183_new_OptLoadHeapArrayIndex = rel_0;
}
rel_183_new_OptLoadHeapArrayIndex->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Temp1;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2346:1-2346:36];)",profile);
rel_345_Temp1->insertAll(*rel_347_new_Temp1);
{
auto rel_0 = rel_346_delta_Temp1;
rel_346_delta_Temp1 = rel_347_new_Temp1;
rel_347_new_Temp1 = rel_0;
}
rel_347_new_Temp1->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Temp2;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2347:1-2347:66];)",profile);
rel_348_Temp2->insertAll(*rel_350_new_Temp2);
{
auto rel_0 = rel_349_delta_Temp2;
rel_349_delta_Temp2 = rel_350_new_Temp2;
rel_350_new_Temp2 = rel_0;
}
rel_350_new_Temp2->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableLoadArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2375:1-2375:45];)",profile);
rel_225_ReachableLoadArrayIndexBase->insertAll(*rel_227_new_ReachableLoadArrayIndexBase);
{
auto rel_0 = rel_226_delta_ReachableLoadArrayIndexBase;
rel_226_delta_ReachableLoadArrayIndexBase = rel_227_new_ReachableLoadArrayIndexBase;
rel_227_new_ReachableLoadArrayIndexBase = rel_0;
}
rel_227_new_ReachableLoadArrayIndexBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;ReachableStoreArrayIndexBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2394:1-2394:46];)",profile);
rel_228_ReachableStoreArrayIndexBase->insertAll(*rel_230_new_ReachableStoreArrayIndexBase);
{
auto rel_0 = rel_229_delta_ReachableStoreArrayIndexBase;
rel_229_delta_ReachableStoreArrayIndexBase = rel_230_new_ReachableStoreArrayIndexBase;
rel_230_new_ReachableStoreArrayIndexBase = rel_0;
}
rel_230_new_ReachableStoreArrayIndexBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptVirtualMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2412:1-2412:78];)",profile);
rel_191_OptVirtualMethodInvocationBase->insertAll(*rel_193_new_OptVirtualMethodInvocationBase);
{
auto rel_0 = rel_192_delta_OptVirtualMethodInvocationBase;
rel_192_delta_OptVirtualMethodInvocationBase = rel_193_new_OptVirtualMethodInvocationBase;
rel_193_new_OptVirtualMethodInvocationBase = rel_0;
}
rel_193_new_OptVirtualMethodInvocationBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;OptSpecialMethodInvocationBase;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2432:1-2432:78];)",profile);
rel_184_OptSpecialMethodInvocationBase->insertAll(*rel_186_new_OptSpecialMethodInvocationBase);
{
auto rel_0 = rel_185_delta_OptSpecialMethodInvocationBase;
rel_185_delta_OptSpecialMethodInvocationBase = rel_186_new_OptSpecialMethodInvocationBase;
rel_186_new_OptSpecialMethodInvocationBase = rel_0;
}
rel_186_new_OptSpecialMethodInvocationBase->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;Tamiflex_Invoke;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2639:1-2639:88];)",profile);
rel_336_Tamiflex_Invoke->insertAll(*rel_338_new_Tamiflex_Invoke);
{
auto rel_0 = rel_337_delta_Tamiflex_Invoke;
rel_337_delta_Tamiflex_Invoke = rel_338_new_Tamiflex_Invoke;
rel_338_new_Tamiflex_Invoke = rel_0;
}
rel_338_new_Tamiflex_Invoke->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2768:1-2769:64];)",profile);
rel_321_TamiflexCallGraphEdge->insertAll(*rel_323_new_TamiflexCallGraphEdge);
{
auto rel_0 = rel_322_delta_TamiflexCallGraphEdge;
rel_322_delta_TamiflexCallGraphEdge = rel_323_new_TamiflexCallGraphEdge;
rel_323_new_TamiflexCallGraphEdge = rel_0;
}
rel_323_new_TamiflexCallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexConstructorCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2794:1-2795:75];)",profile);
rel_324_TamiflexConstructorCallGraphEdge->insertAll(*rel_326_new_TamiflexConstructorCallGraphEdge);
{
auto rel_0 = rel_325_delta_TamiflexConstructorCallGraphEdge;
rel_325_delta_TamiflexConstructorCallGraphEdge = rel_326_new_TamiflexConstructorCallGraphEdge;
rel_326_new_TamiflexConstructorCallGraphEdge = rel_0;
}
rel_326_new_TamiflexConstructorCallGraphEdge->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexInvocationFirstParam;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2832:1-2833:71];)",profile);
rel_330_TamiflexInvocationFirstParam->insertAll(*rel_332_new_TamiflexInvocationFirstParam);
{
auto rel_0 = rel_331_delta_TamiflexInvocationFirstParam;
rel_331_delta_TamiflexInvocationFirstParam = rel_332_new_TamiflexInvocationFirstParam;
rel_332_new_TamiflexInvocationFirstParam = rel_0;
}
rel_332_new_TamiflexInvocationFirstParam->purge();
}
{
	RamLogger logger(R"(@c-recursive-relation;TamiflexInvocationArgumentArrayValue;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2843:1-2844:81];)",profile);
rel_327_TamiflexInvocationArgumentArrayValue->insertAll(*rel_329_new_TamiflexInvocationArgumentArrayValue);
{
auto rel_0 = rel_328_delta_TamiflexInvocationArgumentArrayValue;
rel_328_delta_TamiflexInvocationArgumentArrayValue = rel_329_new_TamiflexInvocationArgumentArrayValue;
rel_329_new_TamiflexInvocationArgumentArrayValue = rel_0;
}
rel_329_new_TamiflexInvocationArgumentArrayValue->purge();
}
}
rel_75_delta_ForcedReachableAndroidContext->purge();
rel_76_new_ForcedReachableAndroidContext->purge();
rel_217_delta_ReachableApplicationObjectOfType->purge();
rel_218_new_ReachableApplicationObjectOfType->purge();
rel_13_delta_ApplicationObjectFlowingToLibrary->purge();
rel_14_new_ApplicationObjectFlowingToLibrary->purge();
rel_211_delta_PublicOnMethodOfReachableListener->purge();
rel_212_new_PublicOnMethodOfReachableListener->purge();
rel_118_delta_LibraryReachableAppListenerType->purge();
rel_119_new_LibraryReachableAppListenerType->purge();
rel_206_delta_ProtectedOnMethodOfReachableListener->purge();
rel_207_new_ProtectedOnMethodOfReachableListener->purge();
rel_198_delta_OverridingProtectedOnMethodOfReachableListener->purge();
rel_199_new_OverridingProtectedOnMethodOfReachableListener->purge();
rel_78_delta_FormalOfForcedReachableContext->purge();
rel_79_new_FormalOfForcedReachableContext->purge();
rel_16_delta_ApplicationObjectFlowingToLibraryStaticType->purge();
rel_17_new_ApplicationObjectFlowingToLibraryStaticType->purge();
rel_103_delta_InitializedClass->purge();
rel_104_new_InitializedClass->purge();
rel_113_delta_Instruction_Throws->purge();
rel_114_new_Instruction_Throws->purge();
rel_353_delta_ThrowPointsTo->purge();
rel_354_new_ThrowPointsTo->purge();
rel_246_delta_RunningThread->purge();
rel_247_new_RunningThread->purge();
rel_223_delta_ReachableCurrentThreadInvocation->purge();
rel_224_new_ReachableCurrentThreadInvocation->purge();
rel_467_delta_isContext->purge();
rel_468_new_isContext->purge();
rel_472_delta_isHContext->purge();
rel_473_new_isHContext->purge();
rel_95_delta_ImmutableContextFromHContext->purge();
rel_96_new_ImmutableContextFromHContext->purge();
rel_98_delta_ImmutableHContextFromContext->purge();
rel_99_new_ImmutableHContextFromContext->purge();
rel_92_delta_ImmutableContextFromContext->purge();
rel_93_new_ImmutableContextFromContext->purge();
rel_373_delta_VarPointsTo->purge();
rel_374_new_VarPointsTo->purge();
rel_106_delta_InstanceFieldPointsTo->purge();
rel_107_new_InstanceFieldPointsTo->purge();
rel_254_delta_StaticFieldPointsTo->purge();
rel_255_new_StaticFieldPointsTo->purge();
rel_20_delta_ArrayIndexPointsTo->purge();
rel_21_new_ArrayIndexPointsTo->purge();
rel_37_delta_CallGraphEdge->purge();
rel_38_new_CallGraphEdge->purge();
rel_214_delta_Reachable->purge();
rel_215_new_Reachable->purge();
rel_220_delta_ReachableContext->purge();
rel_221_new_ReachableContext->purge();
rel_178_delta_OptInterproceduralAssign->purge();
rel_179_new_OptInterproceduralAssign->purge();
rel_189_delta_OptStoreIntoArray->purge();
rel_190_new_OptStoreIntoArray->purge();
rel_128_delta_LoadHeapInstanceField->purge();
rel_129_new_LoadHeapInstanceField->purge();
rel_301_delta_StoreHeapInstanceField->purge();
rel_302_new_StoreHeapInstanceField->purge();
rel_125_delta_LoadHeapArrayIndex->purge();
rel_126_new_LoadHeapArrayIndex->purge();
rel_298_delta_StoreHeapArrayIndex->purge();
rel_299_new_StoreHeapArrayIndex->purge();
rel_173_delta_OptAssignCast->purge();
rel_174_new_OptAssignCast->purge();
rel_232_delta_ReachableStoreStaticFieldFrom->purge();
rel_233_new_ReachableStoreStaticFieldFrom->purge();
rel_182_delta_OptLoadHeapArrayIndex->purge();
rel_183_new_OptLoadHeapArrayIndex->purge();
rel_346_delta_Temp1->purge();
rel_347_new_Temp1->purge();
rel_349_delta_Temp2->purge();
rel_350_new_Temp2->purge();
rel_226_delta_ReachableLoadArrayIndexBase->purge();
rel_227_new_ReachableLoadArrayIndexBase->purge();
rel_229_delta_ReachableStoreArrayIndexBase->purge();
rel_230_new_ReachableStoreArrayIndexBase->purge();
rel_192_delta_OptVirtualMethodInvocationBase->purge();
rel_193_new_OptVirtualMethodInvocationBase->purge();
rel_185_delta_OptSpecialMethodInvocationBase->purge();
rel_186_new_OptSpecialMethodInvocationBase->purge();
rel_337_delta_Tamiflex_Invoke->purge();
rel_338_new_Tamiflex_Invoke->purge();
rel_322_delta_TamiflexCallGraphEdge->purge();
rel_323_new_TamiflexCallGraphEdge->purge();
rel_325_delta_TamiflexConstructorCallGraphEdge->purge();
rel_326_new_TamiflexConstructorCallGraphEdge->purge();
rel_331_delta_TamiflexInvocationFirstParam->purge();
rel_332_new_TamiflexInvocationFirstParam->purge();
rel_328_delta_TamiflexInvocationArgumentArrayValue->purge();
rel_329_new_TamiflexInvocationArgumentArrayValue->purge();
{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2880:1-2880:118];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_19_ArrayIndexPointsTo->empty()&&!rel_32_AssignNormalHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_260_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt,rel_260_Stats_Simple_Application_ArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_32_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env1[0]});
auto range = rel_19_ArrayIndexPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_260_Stats_Simple_Application_ArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_260_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)" <<  rel_260_Stats_Simple_Application_ArrayIndexPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2880:1-2880:118];)" <<  rel_260_Stats_Simple_Application_ArrayIndexPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2894:1-2894:68];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_InsensReachableApplicationMethod(?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_280_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_280_Stats_Simple_InsensReachableApplicationMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_280_Stats_Simple_InsensReachableApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_280_Stats_Simple_InsensReachableApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_InsensReachableApplicationMethod(?method) :-     ApplicationMethod(?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_InsensReachableApplicationMethod(?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_280_Stats_Simple_InsensReachableApplicationMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2894:1-2894:68];)" <<  rel_280_Stats_Simple_InsensReachableApplicationMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2904:1-2904:94];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2981:1-2984:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_InsensReachableApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_280_Stats_Simple_InsensReachableApplicationMethod->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_280_Stats_Simple_InsensReachableApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_280_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_280_Stats_Simple_InsensReachableApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_500_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2981:1-2984:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :-     Stats_Simple_InsensReachableApplicationMethod(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2981:1-2984:47];Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_InsensReachableApplicationMethod(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2904:1-2904:94];)" <<  rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2900:1-2900:73];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2974:1-2976:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :- \n   Stats_Simple_ApplicationConcreteMethod(?method),\n   !Stats_Simple_InsensReachableApplicationMethod(?method).;)",profile);
if (!rel_259_Stats_Simple_ApplicationConcreteMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_259_Stats_Simple_ApplicationConcreteMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_259_Stats_Simple_ApplicationConcreteMethod_op_ctxt,rel_259_Stats_Simple_ApplicationConcreteMethod->createContext());
CREATE_OP_CONTEXT(rel_280_Stats_Simple_InsensReachableApplicationMethod_op_ctxt,rel_280_Stats_Simple_InsensReachableApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_284_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt,rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( !rel_280_Stats_Simple_InsensReachableApplicationMethod->contains(Tuple<RamDomain,1>({env0[0]}),READ_OP_CONTEXT(rel_280_Stats_Simple_InsensReachableApplicationMethod_op_ctxt))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->insert(tuple,READ_OP_CONTEXT(rel_284_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2974:1-2976:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :-     Stats_Simple_ApplicationConcreteMethod(?method),    !Stats_Simple_InsensReachableApplicationMethod(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2974:1-2976:59];Stats_Simple_NonReachableApplicationConcreteMethod(?method) :- \n   Stats_Simple_ApplicationConcreteMethod(?method),\n   !Stats_Simple_InsensReachableApplicationMethod(?method).;)" <<  rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_NonReachableApplicationConcreteMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2900:1-2900:73];)" <<  rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2864:1-2864:61];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2933:1-2934:35];Stats_Simple_InsensVarPointsTo(?value,?var) :- \n   VarPointsTo(_,?value,_,?var).;)",profile);
if (!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_372_VarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_283_Stats_Simple_InsensVarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2933:1-2934:35];Stats_Simple_InsensVarPointsTo(?value,?var) :-     VarPointsTo(_,?value,_,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2933:1-2934:35];Stats_Simple_InsensVarPointsTo(?value,?var) :- \n   VarPointsTo(_,?value,_,?var).;)" <<  rel_283_Stats_Simple_InsensVarPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2864:1-2864:61];)" <<  rel_283_Stats_Simple_InsensVarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2919:1-2919:90];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3012:1-3015:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)",profile);
if (!rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt,rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( rel_283_Stats_Simple_InsensVarPointsTo->equalRange<1>(Tuple<RamDomain,2>({0,env1[1]}),READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3012:1-3015:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :-     Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),    VirtualMethodInvocation_Base(?invocation,?base),    !Stats_Simple_InsensVarPointsTo(_,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3012:1-3015:45];Stats_Simple_Application_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)" <<  rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2919:1-2919:90];)" <<  rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2917:1-2917:89];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3007:1-3011:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;)",profile);
if (!rel_85_HeapAllocation_Null->empty()&&!rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_283_Stats_Simple_InsensVarPointsTo->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_85_HeapAllocation_Null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_267_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt,rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_283_Stats_Simple_InsensVarPointsTo->equalRange<0>(key,READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<1>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_267_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3007:1-3011:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :-     HeapAllocation_Null(?null),    Stats_Simple_InsensVarPointsTo(?null,?base),    VirtualMethodInvocation_Base(?invocation,?base),    Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3007:1-3011:74];Stats_Simple_Application_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?invocation).;)" <<  rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2917:1-2917:89];)" <<  rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2866:1-2866:46];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2935:1-2936:43];Stats_Simple_AssignedVariable(?var) :- \n   Stats_Simple_InsensVarPointsTo(_,?var).;)",profile);
if (!rel_283_Stats_Simple_InsensVarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_283_Stats_Simple_InsensVarPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_275_Stats_Simple_AssignedVariable_op_ctxt,rel_275_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[1])});
if (!(rel_275_Stats_Simple_AssignedVariable->insert(tuple,READ_OP_CONTEXT(rel_275_Stats_Simple_AssignedVariable_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2935:1-2936:43];Stats_Simple_AssignedVariable(?var) :-     Stats_Simple_InsensVarPointsTo(_,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2935:1-2936:43];Stats_Simple_AssignedVariable(?var) :- \n   Stats_Simple_InsensVarPointsTo(_,?var).;)" <<  rel_275_Stats_Simple_AssignedVariable->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_AssignedVariable;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2866:1-2866:46];)" <<  rel_275_Stats_Simple_AssignedVariable->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2921:1-2921:83];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3016:1-3019:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :- \n   Stats_Simple_AssignedVariable(?from),\n   AssignCast(?type,?from,?to,?inmethod),\n   Reachable(?inmethod).;)",profile);
if (!rel_22_AssignCast->empty()&&!rel_213_Reachable->empty()&&!rel_275_Stats_Simple_AssignedVariable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_275_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignCast_op_ctxt,rel_22_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_275_Stats_Simple_AssignedVariable_op_ctxt,rel_275_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt,rel_289_Stats_Simple_ReachableCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,env0[0],0,0});
auto range = rel_22_AssignCast->equalRange<1>(key,READ_OP_CONTEXT(rel_22_AssignCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[3]});
auto range = rel_213_Reachable->equalRange<0>(key,READ_OP_CONTEXT(rel_213_Reachable_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[3]),(RamDomain)(env1[0]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_289_Stats_Simple_ReachableCast->insert(tuple,READ_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3016:1-3019:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :-     Stats_Simple_AssignedVariable(?from),    AssignCast(?type,?from,?to,?inmethod),    Reachable(?inmethod).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3016:1-3019:24];Stats_Simple_ReachableCast(?inmethod,?type,?to,?from) :- \n   Stats_Simple_AssignedVariable(?from),\n   AssignCast(?type,?from,?to,?inmethod),\n   Reachable(?inmethod).;)" <<  rel_289_Stats_Simple_ReachableCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2921:1-2921:83];)" <<  rel_289_Stats_Simple_ReachableCast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2927:1-2927:95];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3028:1-3030:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :- \n   ApplicationMethod(?inmethod),\n   Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_289_Stats_Simple_ReachableCast->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_270_Stats_Simple_Application_ReachableCast_op_ctxt,rel_270_Stats_Simple_Application_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt,rel_289_Stats_Simple_ReachableCast->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({env0[0],0,0,0});
auto range = rel_289_Stats_Simple_ReachableCast->equalRange<0>(key,READ_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env1[3])});
if (!(rel_270_Stats_Simple_Application_ReachableCast->insert(tuple,READ_OP_CONTEXT(rel_270_Stats_Simple_Application_ReachableCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3028:1-3030:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :-     ApplicationMethod(?inmethod),    Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3028:1-3030:60];Stats_Simple_Application_ReachableCast(?inmethod,?type,?to,?from) :- \n   ApplicationMethod(?inmethod),\n   Stats_Simple_ReachableCast(?inmethod,?type,?to,?from).;)" <<  rel_270_Stats_Simple_Application_ReachableCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2927:1-2927:95];)" <<  rel_270_Stats_Simple_Application_ReachableCast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2931:1-2931:86];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3034:1-3038:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_Application_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_270_Stats_Simple_Application_ReachableCast->empty()&&!rel_283_Stats_Simple_InsensVarPointsTo->empty()&&!rel_368_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_270_Stats_Simple_Application_ReachableCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_269_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt,rel_269_Stats_Simple_Application_PotentiallyFailingCast->createContext());
CREATE_OP_CONTEXT(rel_270_Stats_Simple_Application_ReachableCast_op_ctxt,rel_270_Stats_Simple_Application_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_283_Stats_Simple_InsensVarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_319_SupertypeOf->contains(Tuple<RamDomain,2>({env0[1],env2[1]}),READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3]),(RamDomain)(env0[2])});
if (!(rel_269_Stats_Simple_Application_PotentiallyFailingCast->insert(tuple,READ_OP_CONTEXT(rel_269_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3034:1-3038:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :-     Stats_Simple_Application_ReachableCast(_,?type,?to,?from),    Stats_Simple_InsensVarPointsTo(?value,?from),    Value_Type(?value,?valuetype),    !SupertypeOf(?type,?valuetype).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3034:1-3038:35];Stats_Simple_Application_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_Application_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)" <<  rel_269_Stats_Simple_Application_PotentiallyFailingCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2931:1-2931:86];)" <<  rel_269_Stats_Simple_Application_PotentiallyFailingCast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2923:1-2923:74];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3020:1-3024:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)",profile);
if (!rel_283_Stats_Simple_InsensVarPointsTo->empty()&&!rel_289_Stats_Simple_ReachableCast->empty()&&!rel_368_Value_Type->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_289_Stats_Simple_ReachableCast->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_287_Stats_Simple_PotentiallyFailingCast_op_ctxt,rel_287_Stats_Simple_PotentiallyFailingCast->createContext());
CREATE_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt,rel_289_Stats_Simple_ReachableCast->createContext());
CREATE_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt,rel_319_SupertypeOf->createContext());
CREATE_OP_CONTEXT(rel_368_Value_Type_op_ctxt,rel_368_Value_Type->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[3]});
auto range = rel_283_Stats_Simple_InsensVarPointsTo->equalRange<1>(key,READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({env1[0],0});
auto range = rel_368_Value_Type->equalRange<0>(key,READ_OP_CONTEXT(rel_368_Value_Type_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
if( !rel_319_SupertypeOf->contains(Tuple<RamDomain,2>({env0[1],env2[1]}),READ_OP_CONTEXT(rel_319_SupertypeOf_op_ctxt))) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3]),(RamDomain)(env0[2])});
if (!(rel_287_Stats_Simple_PotentiallyFailingCast->insert(tuple,READ_OP_CONTEXT(rel_287_Stats_Simple_PotentiallyFailingCast_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3020:1-3024:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :-     Stats_Simple_ReachableCast(_,?type,?to,?from),    Stats_Simple_InsensVarPointsTo(?value,?from),    Value_Type(?value,?valuetype),    !SupertypeOf(?type,?valuetype).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3020:1-3024:35];Stats_Simple_PotentiallyFailingCast(?type,?from,?to) :- \n   Stats_Simple_ReachableCast(_,?type,?to,?from),\n   Stats_Simple_InsensVarPointsTo(?value,?from),\n   Value_Type(?value,?valuetype),\n   !SupertypeOf(?type,?valuetype).;)" <<  rel_287_Stats_Simple_PotentiallyFailingCast->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_PotentiallyFailingCast;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2923:1-2923:74];)" <<  rel_287_Stats_Simple_PotentiallyFailingCast->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2872:1-2872:48];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_InsensReachableVar(?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_219_ReachableContext->empty()&&!rel_275_Stats_Simple_AssignedVariable->empty()&&!rel_375_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_275_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_275_Stats_Simple_AssignedVariable_op_ctxt,rel_275_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_281_Stats_Simple_InsensReachableVar_op_ctxt,rel_281_Stats_Simple_InsensReachableVar->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_375_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_281_Stats_Simple_InsensReachableVar->insert(tuple,READ_OP_CONTEXT(rel_281_Stats_Simple_InsensReachableVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_InsensReachableVar(?var) :-     Stats_Simple_AssignedVariable(?var),    Var_DeclaringMethod(?var,?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_InsensReachableVar(?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_281_Stats_Simple_InsensReachableVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2872:1-2872:48];)" <<  rel_281_Stats_Simple_InsensReachableVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2874:1-2874:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_ReachableVar(?ctx,?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_219_ReachableContext->empty()&&!rel_275_Stats_Simple_AssignedVariable->empty()&&!rel_375_Var_DeclaringMethod->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_275_Stats_Simple_AssignedVariable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_275_Stats_Simple_AssignedVariable_op_ctxt,rel_275_Stats_Simple_AssignedVariable->createContext());
CREATE_OP_CONTEXT(rel_290_Stats_Simple_ReachableVar_op_ctxt,rel_290_Stats_Simple_ReachableVar->createContext());
CREATE_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt,rel_375_Var_DeclaringMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_375_Var_DeclaringMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_375_Var_DeclaringMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[0]),(RamDomain)(env0[0])});
if (!(rel_290_Stats_Simple_ReachableVar->insert(tuple,READ_OP_CONTEXT(rel_290_Stats_Simple_ReachableVar_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_ReachableVar(?ctx,?var) :-     Stats_Simple_AssignedVariable(?var),    Var_DeclaringMethod(?var,?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2941:1-2945:35];Stats_Simple_ReachableVar(?ctx,?var) :- \n   Stats_Simple_AssignedVariable(?var),\n   Var_DeclaringMethod(?var,?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_290_Stats_Simple_ReachableVar->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableVar;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2874:1-2874:56];)" <<  rel_290_Stats_Simple_ReachableVar->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2878:1-2878:88];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_19_ArrayIndexPointsTo->empty()&&!rel_32_AssignNormalHeapAllocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt,rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_32_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,4> key({0,0,0,env1[0]});
auto range = rel_19_ArrayIndexPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env2[1]),(RamDomain)(env1[0])});
if (!(rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2948:1-2952:60];Stats_Simple_Application_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   ArrayIndexPointsTo(?hctx,?value,?baseHCtx,?basevalue).;)" <<  rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2878:1-2878:88];)" <<  rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2886:1-2886:103];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_32_AssignNormalHeapAllocation->empty()&&!rel_105_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt,rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_32_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,5> key({0,0,0,0,env1[0]});
auto range = rel_105_InstanceFieldPointsTo->equalRange<4>(key,READ_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple({(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env1[0])});
if (!(rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)" <<  rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2886:1-2886:103];)" <<  rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2868:1-2868:73];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_18_ApplicationVar->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_ApplicationVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_18_ApplicationVar_op_ctxt,rel_18_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_265_Stats_Simple_Application_InsensVarPointsTo_op_ctxt,rel_265_Stats_Simple_Application_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[1]),(RamDomain)(env0[0])});
if (!(rel_265_Stats_Simple_Application_InsensVarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_265_Stats_Simple_Application_InsensVarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :-     ApplicationVar(?var),    VarPointsTo(?hctx,?value,?ctx,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_InsensVarPointsTo(?value,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_265_Stats_Simple_Application_InsensVarPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InsensVarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2868:1-2868:73];)" <<  rel_265_Stats_Simple_Application_InsensVarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2888:1-2888:133];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_32_AssignNormalHeapAllocation->empty()&&!rel_105_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt,rel_32_AssignNormalHeapAllocation->createContext());
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_266_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt,rel_266_Stats_Simple_Application_InstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,3> key({0,0,env0[0]});
auto range = rel_32_AssignNormalHeapAllocation->equalRange<2>(key,READ_OP_CONTEXT(rel_32_AssignNormalHeapAllocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,5> key({0,0,0,0,env1[0]});
auto range = rel_105_InstanceFieldPointsTo->equalRange<4>(key,READ_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({(RamDomain)(env2[0]),(RamDomain)(env2[1]),(RamDomain)(env2[2]),(RamDomain)(env2[3]),(RamDomain)(env1[0])});
if (!(rel_266_Stats_Simple_Application_InstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_266_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :-     ApplicationMethod(?meth),    AssignNormalHeapAllocation(?basevalue,_,?meth),    InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2957:1-2961:69];Stats_Simple_Application_InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue) :- \n   ApplicationMethod(?meth),\n   AssignNormalHeapAllocation(?basevalue,_,?meth),\n   InstanceFieldPointsTo(?hctx,?value,?sig,?baseHCtx,?basevalue).;)" <<  rel_266_Stats_Simple_Application_InstanceFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_InstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2888:1-2888:133];)" <<  rel_266_Stats_Simple_Application_InstanceFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2890:1-2890:75];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2962:1-2963:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :- \n   CallGraphEdge(_,?from,_,?to).;)",profile);
if (!rel_36_CallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_36_CallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_278_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_278_Stats_Simple_InsensCallGraphEdge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_278_Stats_Simple_InsensCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_278_Stats_Simple_InsensCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2962:1-2963:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :-     CallGraphEdge(_,?from,_,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2962:1-2963:36];Stats_Simple_InsensCallGraphEdge(?from,?to) :- \n   CallGraphEdge(_,?from,_,?to).;)" <<  rel_278_Stats_Simple_InsensCallGraphEdge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2890:1-2890:75];)" <<  rel_278_Stats_Simple_InsensCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2902:1-2902:82];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2977:1-2980:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :- \n   Reachable(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)",profile);
if (!rel_109_Instruction_Method->empty()&&!rel_213_Reachable->empty()&&!rel_500_isVirtualMethodInvocation_Insn->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt,rel_109_Instruction_Method->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_291_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_109_Instruction_Method->equalRange<1>(key,READ_OP_CONTEXT(rel_109_Instruction_Method_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,1> key({env1[0]});
auto range = rel_500_isVirtualMethodInvocation_Insn->equalRange<0>(key,READ_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env1[0])});
if (!(rel_291_Stats_Simple_ReachableVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2977:1-2980:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :-     Reachable(?method),    Instruction_Method(?invocation,?method),    isVirtualMethodInvocation_Insn(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2977:1-2980:47];Stats_Simple_ReachableVirtualMethodInvocation(?invocation) :- \n   Reachable(?method),\n   Instruction_Method(?invocation,?method),\n   isVirtualMethodInvocation_Insn(?invocation).;)" <<  rel_291_Stats_Simple_ReachableVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2902:1-2902:82];)" <<  rel_291_Stats_Simple_ReachableVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2892:1-2892:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2964:1-2966:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?from),\n   Stats_Simple_InsensCallGraphEdge(?from,?to).;)",profile);
if (!rel_278_Stats_Simple_InsensCallGraphEdge->empty()&&!rel_291_Stats_Simple_ReachableVirtualMethodInvocation->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_291_Stats_Simple_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_278_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_278_Stats_Simple_InsensCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_291_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_292_Stats_Simple_VirtualCallGraphEdge_op_ctxt,rel_292_Stats_Simple_VirtualCallGraphEdge->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_278_Stats_Simple_InsensCallGraphEdge->equalRange<0>(key,READ_OP_CONTEXT(rel_278_Stats_Simple_InsensCallGraphEdge_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[1])});
if (!(rel_292_Stats_Simple_VirtualCallGraphEdge->insert(tuple,READ_OP_CONTEXT(rel_292_Stats_Simple_VirtualCallGraphEdge_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2964:1-2966:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :-     Stats_Simple_ReachableVirtualMethodInvocation(?from),    Stats_Simple_InsensCallGraphEdge(?from,?to).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2964:1-2966:49];Stats_Simple_VirtualCallGraphEdge(?from,?to) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?from),\n   Stats_Simple_InsensCallGraphEdge(?from,?to).;)" <<  rel_292_Stats_Simple_VirtualCallGraphEdge->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_VirtualCallGraphEdge;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2892:1-2892:76];)" <<  rel_292_Stats_Simple_VirtualCallGraphEdge->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2906:1-2906:75];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2985:1-2987:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :- \n   Stats_Simple_VirtualCallGraphEdge(?from,_).;)",profile);
if (!rel_292_Stats_Simple_VirtualCallGraphEdge->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_292_Stats_Simple_VirtualCallGraphEdge->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_292_Stats_Simple_VirtualCallGraphEdge_op_ctxt,rel_292_Stats_Simple_VirtualCallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_293_Stats_Simple_VirtualTargets_op_ctxt,rel_293_Stats_Simple_VirtualTargets->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
ram::Tuple<RamDomain,2> env1;
RamDomain res = 0;
const ram::Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_292_Stats_Simple_VirtualCallGraphEdge->equalRange<0>(key,READ_OP_CONTEXT(rel_292_Stats_Simple_VirtualCallGraphEdge_op_ctxt));
for(const auto& cur : range) {
++res
;}
env1[0] = res;
{
Tuple<RamDomain,2> tuple({(RamDomain)(env0[0]),(RamDomain)(env1[0])});
if (!(rel_293_Stats_Simple_VirtualTargets->insert(tuple,READ_OP_CONTEXT(rel_293_Stats_Simple_VirtualTargets_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2985:1-2987:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :-     Stats_Simple_VirtualCallGraphEdge(?from,_).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2985:1-2987:60];Stats_Simple_VirtualTargets(?from,count : Stats_Simple_VirtualCallGraphEdge(?from,_)) :- \n   Stats_Simple_VirtualCallGraphEdge(?from,_).;)" <<  rel_293_Stats_Simple_VirtualTargets->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_VirtualTargets;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2906:1-2906:75];)" <<  rel_293_Stats_Simple_VirtualTargets->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2907:1-2907:69];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2988:1-2990:13];Stats_Simple_PolymorphicCallSite(?from) :- \n   Stats_Simple_VirtualTargets(?from,?size),\n   ?size > 1.;)",profile);
if (!rel_293_Stats_Simple_VirtualTargets->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_293_Stats_Simple_VirtualTargets->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_286_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_286_Stats_Simple_PolymorphicCallSite->createContext());
CREATE_OP_CONTEXT(rel_293_Stats_Simple_VirtualTargets_op_ctxt,rel_293_Stats_Simple_VirtualTargets->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
if( ((env0[1]) > (1))) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_286_Stats_Simple_PolymorphicCallSite->insert(tuple,READ_OP_CONTEXT(rel_286_Stats_Simple_PolymorphicCallSite_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2988:1-2990:13];Stats_Simple_PolymorphicCallSite(?from) :-     Stats_Simple_VirtualTargets(?from,?size),    ?size > 1.;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2988:1-2990:13];Stats_Simple_PolymorphicCallSite(?from) :- \n   Stats_Simple_VirtualTargets(?from,?size),\n   ?size > 1.;)" <<  rel_286_Stats_Simple_PolymorphicCallSite->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2907:1-2907:69];)" <<  rel_286_Stats_Simple_PolymorphicCallSite->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2915:1-2915:81];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3004:1-3006:68];Stats_Simple_Application_PolymorphicCallSite(?from) :- \n   Stats_Simple_PolymorphicCallSite(?from),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;)",profile);
if (!rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->empty()&&!rel_286_Stats_Simple_PolymorphicCallSite->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_286_Stats_Simple_PolymorphicCallSite->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_268_Stats_Simple_Application_PolymorphicCallSite_op_ctxt,rel_268_Stats_Simple_Application_PolymorphicCallSite->createContext());
CREATE_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_286_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_286_Stats_Simple_PolymorphicCallSite->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_268_Stats_Simple_Application_PolymorphicCallSite->insert(tuple,READ_OP_CONTEXT(rel_268_Stats_Simple_Application_PolymorphicCallSite_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3004:1-3006:68];Stats_Simple_Application_PolymorphicCallSite(?from) :-     Stats_Simple_PolymorphicCallSite(?from),    Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3004:1-3006:68];Stats_Simple_Application_PolymorphicCallSite(?from) :- \n   Stats_Simple_PolymorphicCallSite(?from),\n   Stats_Simple_Application_ReachableVirtualMethodInvocation(?from).;)" <<  rel_268_Stats_Simple_Application_PolymorphicCallSite->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_PolymorphicCallSite;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2915:1-2915:81];)" <<  rel_268_Stats_Simple_Application_PolymorphicCallSite->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2911:1-2911:78];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2996:1-2999:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)",profile);
if (!rel_291_Stats_Simple_ReachableVirtualMethodInvocation->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_291_Stats_Simple_ReachableVirtualMethodInvocation->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_276_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt,rel_276_Stats_Simple_EmptyVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_291_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<0>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
if( rel_283_Stats_Simple_InsensVarPointsTo->equalRange<1>(Tuple<RamDomain,2>({0,env1[1]}),READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt)).empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_276_Stats_Simple_EmptyVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_276_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
 else { ++private_num_failed_proofs; }}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2996:1-2999:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :-     Stats_Simple_ReachableVirtualMethodInvocation(?invocation),    VirtualMethodInvocation_Base(?invocation,?base),    !Stats_Simple_InsensVarPointsTo(_,?base).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2996:1-2999:45];Stats_Simple_EmptyVirtualMethodInvocation(?invocation) :- \n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   !Stats_Simple_InsensVarPointsTo(_,?base).;)" <<  rel_276_Stats_Simple_EmptyVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_EmptyVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2911:1-2911:78];)" <<  rel_276_Stats_Simple_EmptyVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2909:1-2909:77];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2991:1-2995:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;)",profile);
if (!rel_85_HeapAllocation_Null->empty()&&!rel_283_Stats_Simple_InsensVarPointsTo->empty()&&!rel_291_Stats_Simple_ReachableVirtualMethodInvocation->empty()&&!rel_381_VirtualMethodInvocation_Base->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_85_HeapAllocation_Null->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_85_HeapAllocation_Null_op_ctxt,rel_85_HeapAllocation_Null->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_285_Stats_Simple_NullVirtualMethodInvocation_op_ctxt,rel_285_Stats_Simple_NullVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_291_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
CREATE_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt,rel_381_VirtualMethodInvocation_Base->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({env0[0],0});
auto range = rel_283_Stats_Simple_InsensVarPointsTo->equalRange<0>(key,READ_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
const Tuple<RamDomain,2> key({0,env1[1]});
auto range = rel_381_VirtualMethodInvocation_Base->equalRange<1>(key,READ_OP_CONTEXT(rel_381_VirtualMethodInvocation_Base_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env2 : range) {
const Tuple<RamDomain,1> key({env2[0]});
auto range = rel_291_Stats_Simple_ReachableVirtualMethodInvocation->equalRange<0>(key,READ_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env2[0])});
if (!(rel_285_Stats_Simple_NullVirtualMethodInvocation->insert(tuple,READ_OP_CONTEXT(rel_285_Stats_Simple_NullVirtualMethodInvocation_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2991:1-2995:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :-     HeapAllocation_Null(?null),    Stats_Simple_InsensVarPointsTo(?null,?base),    VirtualMethodInvocation_Base(?invocation,?base),    Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2991:1-2995:62];Stats_Simple_NullVirtualMethodInvocation(?invocation) :- \n   HeapAllocation_Null(?null),\n   Stats_Simple_InsensVarPointsTo(?null,?base),\n   VirtualMethodInvocation_Base(?invocation,?base),\n   Stats_Simple_ReachableVirtualMethodInvocation(?invocation).;)" <<  rel_285_Stats_Simple_NullVirtualMethodInvocation->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_NullVirtualMethodInvocation;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2909:1-2909:77];)" <<  rel_285_Stats_Simple_NullVirtualMethodInvocation->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2929:1-2929:63];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3031:1-3033:30];Stats_Simple_Application_ReachableMethod(?method) :- \n   Reachable(?method),\n   ApplicationMethod(?method).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_213_Reachable->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_213_Reachable->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_271_Stats_Simple_Application_ReachableMethod_op_ctxt,rel_271_Stats_Simple_Application_ReachableMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,1> key({env0[0]});
auto range = rel_11_ApplicationMethod->equalRange<0>(key,READ_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
if(!range.empty()) {
Tuple<RamDomain,1> tuple({(RamDomain)(env0[0])});
if (!(rel_271_Stats_Simple_Application_ReachableMethod->insert(tuple,READ_OP_CONTEXT(rel_271_Stats_Simple_Application_ReachableMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3031:1-3033:30];Stats_Simple_Application_ReachableMethod(?method) :-     Reachable(?method),    ApplicationMethod(?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3031:1-3033:30];Stats_Simple_Application_ReachableMethod(?method) :- \n   Reachable(?method),\n   ApplicationMethod(?method).;)" <<  rel_271_Stats_Simple_Application_ReachableMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_ReachableMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2929:1-2929:63];)" <<  rel_271_Stats_Simple_Application_ReachableMethod->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2870:1-2870:97];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)",profile);
if (!rel_18_ApplicationVar->empty()&&!rel_372_VarPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_18_ApplicationVar->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_18_ApplicationVar_op_ctxt,rel_18_ApplicationVar->createContext());
CREATE_OP_CONTEXT(rel_273_Stats_Simple_Application_VarPointsTo_op_ctxt,rel_273_Stats_Simple_Application_VarPointsTo->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,4> key({0,0,0,env0[0]});
auto range = rel_372_VarPointsTo->equalRange<3>(key,READ_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple({(RamDomain)(env1[0]),(RamDomain)(env1[1]),(RamDomain)(env1[2]),(RamDomain)(env0[0])});
if (!(rel_273_Stats_Simple_Application_VarPointsTo->insert(tuple,READ_OP_CONTEXT(rel_273_Stats_Simple_Application_VarPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :-     ApplicationVar(?var),    VarPointsTo(?hctx,?value,?ctx,?var).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2937:1-2940:42];Stats_Simple_Application_VarPointsTo(?hctx,?value,?ctx,?var) :- \n   ApplicationVar(?var),\n   VarPointsTo(?hctx,?value,?ctx,?var).;)" <<  rel_273_Stats_Simple_Application_VarPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_Application_VarPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2870:1-2870:97];)" <<  rel_273_Stats_Simple_Application_VarPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2876:1-2876:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2946:1-2947:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ArrayIndexPointsTo(_,?value,_,?basevalue).;)",profile);
if (!rel_19_ArrayIndexPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_19_ArrayIndexPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_277_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt,rel_277_Stats_Simple_InsensArrayIndexPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[3])});
if (!(rel_277_Stats_Simple_InsensArrayIndexPointsTo->insert(tuple,READ_OP_CONTEXT(rel_277_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2946:1-2947:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :-     ArrayIndexPointsTo(_,?value,_,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2946:1-2947:49];Stats_Simple_InsensArrayIndexPointsTo(?value,?basevalue) :- \n   ArrayIndexPointsTo(_,?value,_,?basevalue).;)" <<  rel_277_Stats_Simple_InsensArrayIndexPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensArrayIndexPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2876:1-2876:76];)" <<  rel_277_Stats_Simple_InsensArrayIndexPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2882:1-2882:91];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2953:1-2954:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;)",profile);
if (!rel_105_InstanceFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_105_InstanceFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_279_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt,rel_279_Stats_Simple_InsensInstanceFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,3> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2]),(RamDomain)(env0[4])});
if (!(rel_279_Stats_Simple_InsensInstanceFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_279_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2953:1-2954:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :-     InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2953:1-2954:57];Stats_Simple_InsensInstanceFieldPointsTo(?value,?sig,?basevalue) :- \n   InstanceFieldPointsTo(_,?value,?sig,_,?basevalue).;)" <<  rel_279_Stats_Simple_InsensInstanceFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensInstanceFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2882:1-2882:91];)" <<  rel_279_Stats_Simple_InsensInstanceFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2884:1-2884:71];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2955:1-2956:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :- \n   StaticFieldPointsTo(_,?value,?sig).;)",profile);
if (!rel_253_StaticFieldPointsTo->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_253_StaticFieldPointsTo->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_282_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt,rel_282_Stats_Simple_InsensStaticFieldPointsTo->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
Tuple<RamDomain,2> tuple({(RamDomain)(env0[1]),(RamDomain)(env0[2])});
if (!(rel_282_Stats_Simple_InsensStaticFieldPointsTo->insert(tuple,READ_OP_CONTEXT(rel_282_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt)))) { ++private_num_failed_proofs; }
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2955:1-2956:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :-     StaticFieldPointsTo(_,?value,?sig).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2955:1-2956:40];Stats_Simple_InsensStaticFieldPointsTo(?value,?sig) :- \n   StaticFieldPointsTo(_,?value,?sig).;)" <<  rel_282_Stats_Simple_InsensStaticFieldPointsTo->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_InsensStaticFieldPointsTo;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2884:1-2884:71];)" <<  rel_282_Stats_Simple_InsensStaticFieldPointsTo->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [236:1-236:56];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3039:1-3039:104];Stats_Metrics(\"1.0\",\"var points-to (INS)\",count : Stats_Simple_InsensVarPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_283_Stats_Simple_InsensVarPointsTo_op_ctxt,rel_283_Stats_Simple_InsensVarPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_283_Stats_Simple_InsensVarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(177),(RamDomain)(178),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3039:1-3039:104];Stats_Metrics('1.0','var points-to (INS)',count : Stats_Simple_InsensVarPointsTo(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3039:1-3039:104];Stats_Metrics(\"1.0\",\"var points-to (INS)\",count : Stats_Simple_InsensVarPointsTo(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3040:1-3040:92];Stats_Metrics(\"1.5\",\"var points-to (SENS)\",count : VarPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_372_VarPointsTo_op_ctxt,rel_372_VarPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_372_VarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(179),(RamDomain)(180),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3040:1-3040:92];Stats_Metrics('1.5','var points-to (SENS)',count : VarPointsTo(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3040:1-3040:92];Stats_Metrics(\"1.5\",\"var points-to (SENS)\",count : VarPointsTo(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3041:1-3041:120];Stats_Metrics(\"5.0\",\"app var points-to (INS)\",count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_265_Stats_Simple_Application_InsensVarPointsTo_op_ctxt,rel_265_Stats_Simple_Application_InsensVarPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_265_Stats_Simple_Application_InsensVarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(181),(RamDomain)(182),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3041:1-3041:120];Stats_Metrics('5.0','app var points-to (INS)',count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3041:1-3041:120];Stats_Metrics(\"5.0\",\"app var points-to (INS)\",count : Stats_Simple_Application_InsensVarPointsTo(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3042:1-3042:121];Stats_Metrics(\"5.5\",\"app var points-to (SENS)\",count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_273_Stats_Simple_Application_VarPointsTo_op_ctxt,rel_273_Stats_Simple_Application_VarPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_273_Stats_Simple_Application_VarPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(183),(RamDomain)(184),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3042:1-3042:121];Stats_Metrics('5.5','app var points-to (SENS)',count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3042:1-3042:121];Stats_Metrics(\"5.5\",\"app var points-to (SENS)\",count : Stats_Simple_Application_VarPointsTo(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3043:1-3043:109];Stats_Metrics(\"10.0\",\"reachable variables (INS)\",count : Stats_Simple_InsensReachableVar(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_281_Stats_Simple_InsensReachableVar_op_ctxt,rel_281_Stats_Simple_InsensReachableVar->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_281_Stats_Simple_InsensReachableVar->size();
Tuple<RamDomain,3> tuple({(RamDomain)(185),(RamDomain)(186),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3043:1-3043:109];Stats_Metrics('10.0','reachable variables (INS)',count : Stats_Simple_InsensReachableVar(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3043:1-3043:109];Stats_Metrics(\"10.0\",\"reachable variables (INS)\",count : Stats_Simple_InsensReachableVar(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3044:1-3044:107];Stats_Metrics(\"10.5\",\"reachable variables (SENS)\",count : Stats_Simple_ReachableVar(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_290_Stats_Simple_ReachableVar_op_ctxt,rel_290_Stats_Simple_ReachableVar->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_290_Stats_Simple_ReachableVar->size();
Tuple<RamDomain,3> tuple({(RamDomain)(187),(RamDomain)(188),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3044:1-3044:107];Stats_Metrics('10.5','reachable variables (SENS)',count : Stats_Simple_ReachableVar(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3044:1-3044:107];Stats_Metrics(\"10.5\",\"reachable variables (SENS)\",count : Stats_Simple_ReachableVar(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3045:1-3045:119];Stats_Metrics(\"2.0\",\"array index points-to (INS)\",count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_277_Stats_Simple_InsensArrayIndexPointsTo_op_ctxt,rel_277_Stats_Simple_InsensArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_277_Stats_Simple_InsensArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(189),(RamDomain)(190),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3045:1-3045:119];Stats_Metrics('2.0','array index points-to (INS)',count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3045:1-3045:119];Stats_Metrics(\"2.0\",\"array index points-to (INS)\",count : Stats_Simple_InsensArrayIndexPointsTo(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3046:1-3046:107];Stats_Metrics(\"2.5\",\"array index points-to (SENS)\",count : ArrayIndexPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_19_ArrayIndexPointsTo_op_ctxt,rel_19_ArrayIndexPointsTo->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_19_ArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(191),(RamDomain)(192),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3046:1-3046:107];Stats_Metrics('2.5','array index points-to (SENS)',count : ArrayIndexPointsTo(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3046:1-3046:107];Stats_Metrics(\"2.5\",\"array index points-to (SENS)\",count : ArrayIndexPointsTo(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3047:1-3047:135];Stats_Metrics(\"6.0\",\"app array index points-to (INS)\",count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo_op_ctxt,rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(193),(RamDomain)(194),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3047:1-3047:135];Stats_Metrics('6.0','app array index points-to (INS)',count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3047:1-3047:135];Stats_Metrics(\"6.0\",\"app array index points-to (INS)\",count : Stats_Simple_Application_InsensArrayIndexPointsTo(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3048:1-3048:136];Stats_Metrics(\"6.5\",\"app array index points-to (SENS)\",count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_260_Stats_Simple_Application_ArrayIndexPointsTo_op_ctxt,rel_260_Stats_Simple_Application_ArrayIndexPointsTo->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_260_Stats_Simple_Application_ArrayIndexPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(195),(RamDomain)(196),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3048:1-3048:136];Stats_Metrics('6.5','app array index points-to (SENS)',count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3048:1-3048:136];Stats_Metrics(\"6.5\",\"app array index points-to (SENS)\",count : Stats_Simple_Application_ArrayIndexPointsTo(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3049:1-3049:128];Stats_Metrics(\"3.0\",\"instance field points-to (INS)\",count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_279_Stats_Simple_InsensInstanceFieldPointsTo_op_ctxt,rel_279_Stats_Simple_InsensInstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_279_Stats_Simple_InsensInstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(197),(RamDomain)(198),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3049:1-3049:128];Stats_Metrics('3.0','instance field points-to (INS)',count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3049:1-3049:128];Stats_Metrics(\"3.0\",\"instance field points-to (INS)\",count : Stats_Simple_InsensInstanceFieldPointsTo(_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3050:1-3050:116];Stats_Metrics(\"3.5\",\"instance field points-to (SENS)\",count : InstanceFieldPointsTo(_,_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_105_InstanceFieldPointsTo_op_ctxt,rel_105_InstanceFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,5> env0;
env0[0] = rel_105_InstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(199),(RamDomain)(200),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3050:1-3050:116];Stats_Metrics('3.5','instance field points-to (SENS)',count : InstanceFieldPointsTo(_,_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3050:1-3050:116];Stats_Metrics(\"3.5\",\"instance field points-to (SENS)\",count : InstanceFieldPointsTo(_,_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3051:1-3051:121];Stats_Metrics(\"4.0\",\"static field points-to (INS)\",count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_282_Stats_Simple_InsensStaticFieldPointsTo_op_ctxt,rel_282_Stats_Simple_InsensStaticFieldPointsTo->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_282_Stats_Simple_InsensStaticFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(201),(RamDomain)(202),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3051:1-3051:121];Stats_Metrics('4.0','static field points-to (INS)',count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3051:1-3051:121];Stats_Metrics(\"4.0\",\"static field points-to (INS)\",count : Stats_Simple_InsensStaticFieldPointsTo(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3052:1-3052:106];Stats_Metrics(\"4.5\",\"static field points-to (SENS)\",count : StaticFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_253_StaticFieldPointsTo_op_ctxt,rel_253_StaticFieldPointsTo->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_253_StaticFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(203),(RamDomain)(204),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3052:1-3052:106];Stats_Metrics('4.5','static field points-to (SENS)',count : StaticFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3052:1-3052:106];Stats_Metrics(\"4.5\",\"static field points-to (SENS)\",count : StaticFieldPointsTo(_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3053:1-3053:144];Stats_Metrics(\"7.0\",\"app instance field points-to (INS)\",count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo_op_ctxt,rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(205),(RamDomain)(206),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3053:1-3053:144];Stats_Metrics('7.0','app instance field points-to (INS)',count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3053:1-3053:144];Stats_Metrics(\"7.0\",\"app instance field points-to (INS)\",count : Stats_Simple_Application_InsensInstanceFieldPointsTo(_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3054:1-3054:145];Stats_Metrics(\"7.5\",\"app instance field points-to (SENS)\",count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_266_Stats_Simple_Application_InstanceFieldPointsTo_op_ctxt,rel_266_Stats_Simple_Application_InstanceFieldPointsTo->createContext());
ram::Tuple<RamDomain,5> env0;
env0[0] = rel_266_Stats_Simple_Application_InstanceFieldPointsTo->size();
Tuple<RamDomain,3> tuple({(RamDomain)(207),(RamDomain)(208),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3054:1-3054:145];Stats_Metrics('7.5','app instance field points-to (SENS)',count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3054:1-3054:145];Stats_Metrics(\"7.5\",\"app instance field points-to (SENS)\",count : Stats_Simple_Application_InstanceFieldPointsTo(_,_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3055:1-3055:109];Stats_Metrics(\"8.0\",\"call graph edges (INS)\",count : Stats_Simple_InsensCallGraphEdge(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_278_Stats_Simple_InsensCallGraphEdge_op_ctxt,rel_278_Stats_Simple_InsensCallGraphEdge->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_278_Stats_Simple_InsensCallGraphEdge->size();
Tuple<RamDomain,3> tuple({(RamDomain)(209),(RamDomain)(210),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3055:1-3055:109];Stats_Metrics('8.0','call graph edges (INS)',count : Stats_Simple_InsensCallGraphEdge(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3055:1-3055:109];Stats_Metrics(\"8.0\",\"call graph edges (INS)\",count : Stats_Simple_InsensCallGraphEdge(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3056:1-3056:97];Stats_Metrics(\"8.5\",\"call graph edges (SENS)\",count : CallGraphEdge(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_36_CallGraphEdge_op_ctxt,rel_36_CallGraphEdge->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_36_CallGraphEdge->size();
Tuple<RamDomain,3> tuple({(RamDomain)(211),(RamDomain)(212),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3056:1-3056:97];Stats_Metrics('8.5','call graph edges (SENS)',count : CallGraphEdge(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3056:1-3056:97];Stats_Metrics(\"8.5\",\"call graph edges (SENS)\",count : CallGraphEdge(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3057:1-3057:136];Stats_Metrics(\"9.0\",\"non-reachable app concrete methods\",count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_284_Stats_Simple_NonReachableApplicationConcreteMethod_op_ctxt,rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_284_Stats_Simple_NonReachableApplicationConcreteMethod->size();
Tuple<RamDomain,3> tuple({(RamDomain)(213),(RamDomain)(214),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3057:1-3057:136];Stats_Metrics('9.0','non-reachable app concrete methods',count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3057:1-3057:136];Stats_Metrics(\"9.0\",\"non-reachable app concrete methods\",count : Stats_Simple_NonReachableApplicationConcreteMethod(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3058:1-3058:85];Stats_Metrics(\"11.0\",\"reachable methods (INS)\",count : Reachable(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_213_Reachable_op_ctxt,rel_213_Reachable->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_213_Reachable->size();
Tuple<RamDomain,3> tuple({(RamDomain)(215),(RamDomain)(216),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3058:1-3058:85];Stats_Metrics('11.0','reachable methods (INS)',count : Reachable(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3058:1-3058:85];Stats_Metrics(\"11.0\",\"reachable methods (INS)\",count : Reachable(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3059:1-3059:96];Stats_Metrics(\"11.5\",\"reachable methods (SENS)\",count : ReachableContext(_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,2> env0;
env0[0] = rel_219_ReachableContext->size();
Tuple<RamDomain,3> tuple({(RamDomain)(217),(RamDomain)(218),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3059:1-3059:96];Stats_Metrics('11.5','reachable methods (SENS)',count : ReachableContext(_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3059:1-3059:96];Stats_Metrics(\"11.5\",\"reachable methods (SENS)\",count : ReachableContext(_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3060:1-3060:114];Stats_Metrics(\"12.0\",\"virtual call sites (statically)\",count : isVirtualMethodInvocation_Insn(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_500_isVirtualMethodInvocation_Insn_op_ctxt,rel_500_isVirtualMethodInvocation_Insn->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_500_isVirtualMethodInvocation_Insn->size();
Tuple<RamDomain,3> tuple({(RamDomain)(219),(RamDomain)(220),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3060:1-3060:114];Stats_Metrics('12.0','virtual call sites (statically)',count : isVirtualMethodInvocation_Insn(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3060:1-3060:114];Stats_Metrics(\"12.0\",\"virtual call sites (statically)\",count : isVirtualMethodInvocation_Insn(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3061:1-3061:126];Stats_Metrics(\"13.0\",\"reachable virtual call sites\",count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_291_Stats_Simple_ReachableVirtualMethodInvocation_op_ctxt,rel_291_Stats_Simple_ReachableVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_291_Stats_Simple_ReachableVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(221),(RamDomain)(222),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3061:1-3061:126];Stats_Metrics('13.0','reachable virtual call sites',count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3061:1-3061:126];Stats_Metrics(\"13.0\",\"reachable virtual call sites\",count : Stats_Simple_ReachableVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3062:1-3062:115];Stats_Metrics(\"14.0\",\"polymorphic virtual call sites\",count : Stats_Simple_PolymorphicCallSite(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_286_Stats_Simple_PolymorphicCallSite_op_ctxt,rel_286_Stats_Simple_PolymorphicCallSite->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_286_Stats_Simple_PolymorphicCallSite->size();
Tuple<RamDomain,3> tuple({(RamDomain)(223),(RamDomain)(224),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3062:1-3062:115];Stats_Metrics('14.0','polymorphic virtual call sites',count : Stats_Simple_PolymorphicCallSite(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3062:1-3062:115];Stats_Metrics(\"14.0\",\"polymorphic virtual call sites\",count : Stats_Simple_PolymorphicCallSite(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3063:1-3063:116];Stats_Metrics(\"15.0\",\"null virtual call sites\",count : Stats_Simple_NullVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_285_Stats_Simple_NullVirtualMethodInvocation_op_ctxt,rel_285_Stats_Simple_NullVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_285_Stats_Simple_NullVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(225),(RamDomain)(226),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3063:1-3063:116];Stats_Metrics('15.0','null virtual call sites',count : Stats_Simple_NullVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3063:1-3063:116];Stats_Metrics(\"15.0\",\"null virtual call sites\",count : Stats_Simple_NullVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3064:1-3064:118];Stats_Metrics(\"15.5\",\"empty virtual call sites\",count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_276_Stats_Simple_EmptyVirtualMethodInvocation_op_ctxt,rel_276_Stats_Simple_EmptyVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_276_Stats_Simple_EmptyVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(227),(RamDomain)(228),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3064:1-3064:118];Stats_Metrics('15.5','empty virtual call sites',count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3064:1-3064:118];Stats_Metrics(\"15.5\",\"empty virtual call sites\",count : Stats_Simple_EmptyVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3065:1-3065:136];Stats_Metrics(\"16.0\",\"app virtual call sites (statically)\",count : Stats_Simple_Application_VirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_274_Stats_Simple_Application_VirtualMethodInvocation_op_ctxt,rel_274_Stats_Simple_Application_VirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_274_Stats_Simple_Application_VirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(229),(RamDomain)(230),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3065:1-3065:136];Stats_Metrics('16.0','app virtual call sites (statically)',count : Stats_Simple_Application_VirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3065:1-3065:136];Stats_Metrics(\"16.0\",\"app virtual call sites (statically)\",count : Stats_Simple_Application_VirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3066:1-3066:142];Stats_Metrics(\"17.0\",\"app reachable virtual call sites\",count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation_op_ctxt,rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(231),(RamDomain)(232),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3066:1-3066:142];Stats_Metrics('17.0','app reachable virtual call sites',count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3066:1-3066:142];Stats_Metrics(\"17.0\",\"app reachable virtual call sites\",count : Stats_Simple_Application_ReachableVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3067:1-3067:131];Stats_Metrics(\"18.0\",\"app polymorphic virtual call sites\",count : Stats_Simple_Application_PolymorphicCallSite(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_268_Stats_Simple_Application_PolymorphicCallSite_op_ctxt,rel_268_Stats_Simple_Application_PolymorphicCallSite->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_268_Stats_Simple_Application_PolymorphicCallSite->size();
Tuple<RamDomain,3> tuple({(RamDomain)(233),(RamDomain)(234),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3067:1-3067:131];Stats_Metrics('18.0','app polymorphic virtual call sites',count : Stats_Simple_Application_PolymorphicCallSite(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3067:1-3067:131];Stats_Metrics(\"18.0\",\"app polymorphic virtual call sites\",count : Stats_Simple_Application_PolymorphicCallSite(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3068:1-3068:132];Stats_Metrics(\"19.0\",\"app null virtual call sites\",count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_267_Stats_Simple_Application_NullVirtualMethodInvocation_op_ctxt,rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_267_Stats_Simple_Application_NullVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(235),(RamDomain)(236),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3068:1-3068:132];Stats_Metrics('19.0','app null virtual call sites',count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3068:1-3068:132];Stats_Metrics(\"19.0\",\"app null virtual call sites\",count : Stats_Simple_Application_NullVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3069:1-3069:134];Stats_Metrics(\"19.5\",\"app empty virtual call sites\",count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation_op_ctxt,rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation->size();
Tuple<RamDomain,3> tuple({(RamDomain)(237),(RamDomain)(238),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3069:1-3069:134];Stats_Metrics('19.5','app empty virtual call sites',count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3069:1-3069:134];Stats_Metrics(\"19.5\",\"app empty virtual call sites\",count : Stats_Simple_Application_EmptyVirtualMethodInvocation(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3070:1-3070:90];Stats_Metrics(\"20.0\",\"casts (statically)\",count : AssignCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_22_AssignCast_op_ctxt,rel_22_AssignCast->createContext());
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_22_AssignCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(239),(RamDomain)(240),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3070:1-3070:90];Stats_Metrics('20.0','casts (statically)',count : AssignCast(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3070:1-3070:90];Stats_Metrics(\"20.0\",\"casts (statically)\",count : AssignCast(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3071:1-3071:103];Stats_Metrics(\"21.0\",\"reachable casts\",count : Stats_Simple_ReachableCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_289_Stats_Simple_ReachableCast_op_ctxt,rel_289_Stats_Simple_ReachableCast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_289_Stats_Simple_ReachableCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(241),(RamDomain)(242),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3071:1-3071:103];Stats_Metrics('21.0','reachable casts',count : Stats_Simple_ReachableCast(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3071:1-3071:103];Stats_Metrics(\"21.0\",\"reachable casts\",count : Stats_Simple_ReachableCast(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3072:1-3072:123];Stats_Metrics(\"22.0\",\"reachable casts that may fail\",count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_287_Stats_Simple_PotentiallyFailingCast_op_ctxt,rel_287_Stats_Simple_PotentiallyFailingCast->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_287_Stats_Simple_PotentiallyFailingCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(243),(RamDomain)(244),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3072:1-3072:123];Stats_Metrics('22.0','reachable casts that may fail',count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3072:1-3072:123];Stats_Metrics(\"22.0\",\"reachable casts that may fail\",count : Stats_Simple_PotentiallyFailingCast(_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3073:1-3073:113];Stats_Metrics(\"23.0\",\"app casts (statically)\",count : Stats_Simple_Application_Cast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_261_Stats_Simple_Application_Cast_op_ctxt,rel_261_Stats_Simple_Application_Cast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_261_Stats_Simple_Application_Cast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(245),(RamDomain)(246),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3073:1-3073:113];Stats_Metrics('23.0','app casts (statically)',count : Stats_Simple_Application_Cast(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3073:1-3073:113];Stats_Metrics(\"23.0\",\"app casts (statically)\",count : Stats_Simple_Application_Cast(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3074:1-3074:119];Stats_Metrics(\"24.0\",\"app reachable casts\",count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_270_Stats_Simple_Application_ReachableCast_op_ctxt,rel_270_Stats_Simple_Application_ReachableCast->createContext());
ram::Tuple<RamDomain,4> env0;
env0[0] = rel_270_Stats_Simple_Application_ReachableCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(247),(RamDomain)(248),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3074:1-3074:119];Stats_Metrics('24.0','app reachable casts',count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3074:1-3074:119];Stats_Metrics(\"24.0\",\"app reachable casts\",count : Stats_Simple_Application_ReachableCast(_,_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3075:1-3075:139];Stats_Metrics(\"25.0\",\"app reachable casts that may fail\",count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_269_Stats_Simple_Application_PotentiallyFailingCast_op_ctxt,rel_269_Stats_Simple_Application_PotentiallyFailingCast->createContext());
ram::Tuple<RamDomain,3> env0;
env0[0] = rel_269_Stats_Simple_Application_PotentiallyFailingCast->size();
Tuple<RamDomain,3> tuple({(RamDomain)(249),(RamDomain)(250),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3075:1-3075:139];Stats_Metrics('25.0','app reachable casts that may fail',count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3075:1-3075:139];Stats_Metrics(\"25.0\",\"app reachable casts that may fail\",count : Stats_Simple_Application_PotentiallyFailingCast(_,_,_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3076:1-3076:114];Stats_Metrics(\"25.5\",\"app reachable methods\",count : Stats_Simple_Application_ReachableMethod(_)).;)",profile);
{
std::atomic<uint64_t> num_failed_proofs(0);
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt,rel_258_Stats_Metrics->createContext());
CREATE_OP_CONTEXT(rel_271_Stats_Simple_Application_ReachableMethod_op_ctxt,rel_271_Stats_Simple_Application_ReachableMethod->createContext());
ram::Tuple<RamDomain,1> env0;
env0[0] = rel_271_Stats_Simple_Application_ReachableMethod->size();
Tuple<RamDomain,3> tuple({(RamDomain)(251),(RamDomain)(252),(RamDomain)(env0[0])});
if (!(rel_258_Stats_Metrics->insert(tuple,READ_OP_CONTEXT(rel_258_Stats_Metrics_op_ctxt)))) { ++private_num_failed_proofs; }
num_failed_proofs += private_num_failed_proofs;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3076:1-3076:114];Stats_Metrics('25.5','app reachable methods',count : Stats_Simple_Application_ReachableMethod(_)).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [3076:1-3076:114];Stats_Metrics(\"25.5\",\"app reachable methods\",count : Stats_Simple_Application_ReachableMethod(_)).;)" <<  rel_258_Stats_Metrics->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Metrics;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [236:1-236:56];)" <<  rel_258_Stats_Metrics->size() << "\n";
}{
	RamLogger logger(R"(@t-nonrecursive-relation;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2896:1-2896:76];)",profile);
{
	RamLogger logger(R"(@t-nonrecursive-rule;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)",profile);
if (!rel_11_ApplicationMethod->empty()&&!rel_219_ReachableContext->empty()) {
std::atomic<uint64_t> num_failed_proofs(0);
auto part = rel_11_ApplicationMethod->partition();
PARALLEL_START;
uint64_t private_num_failed_proofs = 0;
CREATE_OP_CONTEXT(rel_11_ApplicationMethod_op_ctxt,rel_11_ApplicationMethod->createContext());
CREATE_OP_CONTEXT(rel_219_ReachableContext_op_ctxt,rel_219_ReachableContext->createContext());
CREATE_OP_CONTEXT(rel_288_Stats_Simple_ReachableApplicationMethod_op_ctxt,rel_288_Stats_Simple_ReachableApplicationMethod->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) 
for(const auto& env0 : *it) {
const Tuple<RamDomain,2> key({0,env0[0]});
auto range = rel_219_ReachableContext->equalRange<1>(key,READ_OP_CONTEXT(rel_219_ReachableContext_op_ctxt));
if (range.empty()) ++private_num_failed_proofs;
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple({(RamDomain)(env1[0]),(RamDomain)(env0[0])});
if (!(rel_288_Stats_Simple_ReachableApplicationMethod->insert(tuple,READ_OP_CONTEXT(rel_288_Stats_Simple_ReachableApplicationMethod_op_ctxt)))) { ++private_num_failed_proofs; }
}
}
num_failed_proofs += private_num_failed_proofs;
PARALLEL_END;
{ auto lease = getOutputLock().acquire(); profile << R"(#p-proof-counter;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :-     ApplicationMethod(?method),    ReachableContext(?ctx,?method).;;)" << num_failed_proofs << "\n";
}}
}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-rule;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2967:1-2970:35];Stats_Simple_ReachableApplicationMethod(?ctx,?method) :- \n   ApplicationMethod(?method),\n   ReachableContext(?ctx,?method).;)" <<  rel_288_Stats_Simple_ReachableApplicationMethod->size() << "\n";
}}
{ auto lease = getOutputLock().acquire(); 
profile << R"(@n-nonrecursive-relation;Stats_Simple_ReachableApplicationMethod;/home/tanghao/workspace/revised-rules/combobj/pts2o1h_opt.dl [2896:1-2896:76];)" <<  rel_288_Stats_Simple_ReachableApplicationMethod->size() << "\n";
}}
}
public:
void printAll(std::string dirname) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationMethod.csv"},{"name","ApplicationMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_11_ApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./CallGraphEdge.csv"},{"name","CallGraphEdge"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_36_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Reachable.csv"},{"name","Reachable"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_213_Reachable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Metrics.csv"},{"name","Stats_Metrics"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0}), symTable, ioDirectives)->writeAll(*rel_258_Stats_Metrics);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ApplicationConcreteMethod.csv"},{"name","Stats_Simple_ApplicationConcreteMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_259_Stats_Simple_ApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_ArrayIndexPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_260_Stats_Simple_Application_ArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_Cast.csv"},{"name","Stats_Simple_Application_Cast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_261_Stats_Simple_Application_Cast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_EmptyVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_Application_InsensArrayIndexPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InsensInstanceFieldPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InsensVarPointsTo.csv"},{"name","Stats_Simple_Application_InsensVarPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_265_Stats_Simple_Application_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_InstanceFieldPointsTo.csv"},{"name","Stats_Simple_Application_InstanceFieldPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_266_Stats_Simple_Application_InstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_NullVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_267_Stats_Simple_Application_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PolymorphicCallSite.csv"},{"name","Stats_Simple_Application_PolymorphicCallSite"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_268_Stats_Simple_Application_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_PotentiallyFailingCast.csv"},{"name","Stats_Simple_Application_PotentiallyFailingCast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_269_Stats_Simple_Application_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableCast.csv"},{"name","Stats_Simple_Application_ReachableCast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_270_Stats_Simple_Application_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableMethod.csv"},{"name","Stats_Simple_Application_ReachableMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_271_Stats_Simple_Application_ReachableMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_ReachableVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VarPointsTo.csv"},{"name","Stats_Simple_Application_VarPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_273_Stats_Simple_Application_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_Application_VirtualMethodInvocation.csv"},{"name","Stats_Simple_Application_VirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_274_Stats_Simple_Application_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_AssignedVariable.csv"},{"name","Stats_Simple_AssignedVariable"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_275_Stats_Simple_AssignedVariable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_EmptyVirtualMethodInvocation.csv"},{"name","Stats_Simple_EmptyVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_276_Stats_Simple_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensArrayIndexPointsTo.csv"},{"name","Stats_Simple_InsensArrayIndexPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_277_Stats_Simple_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensCallGraphEdge.csv"},{"name","Stats_Simple_InsensCallGraphEdge"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_278_Stats_Simple_InsensCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensInstanceFieldPointsTo.csv"},{"name","Stats_Simple_InsensInstanceFieldPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_279_Stats_Simple_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableApplicationMethod.csv"},{"name","Stats_Simple_InsensReachableApplicationMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_280_Stats_Simple_InsensReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensReachableVar.csv"},{"name","Stats_Simple_InsensReachableVar"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_281_Stats_Simple_InsensReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensStaticFieldPointsTo.csv"},{"name","Stats_Simple_InsensStaticFieldPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_282_Stats_Simple_InsensStaticFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_InsensVarPointsTo.csv"},{"name","Stats_Simple_InsensVarPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_283_Stats_Simple_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NonReachableApplicationConcreteMethod.csv"},{"name","Stats_Simple_NonReachableApplicationConcreteMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_284_Stats_Simple_NonReachableApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_NullVirtualMethodInvocation.csv"},{"name","Stats_Simple_NullVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_285_Stats_Simple_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PolymorphicCallSite.csv"},{"name","Stats_Simple_PolymorphicCallSite"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_286_Stats_Simple_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_PotentiallyFailingCast.csv"},{"name","Stats_Simple_PotentiallyFailingCast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_287_Stats_Simple_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableApplicationMethod.csv"},{"name","Stats_Simple_ReachableApplicationMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives)->writeAll(*rel_288_Stats_Simple_ReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableCast.csv"},{"name","Stats_Simple_ReachableCast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_289_Stats_Simple_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVar.csv"},{"name","Stats_Simple_ReachableVar"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives)->writeAll(*rel_290_Stats_Simple_ReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_ReachableVirtualMethodInvocation.csv"},{"name","Stats_Simple_ReachableVirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_291_Stats_Simple_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Stats_Simple_VirtualCallGraphEdge.csv"},{"name","Stats_Simple_VirtualCallGraphEdge"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_292_Stats_Simple_VirtualCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./VarPointsTo.csv"},{"name","VarPointsTo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_372_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string dirname) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Activity.facts"},{"name","_Activity"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_384_Activity);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ActualParam.facts"},{"name","_ActualParam"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives)->readAll(*rel_385_ActualParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AndroidEntryPoint.facts"},{"name","_AndroidEntryPoint"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_386_AndroidEntryPoint);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ApplicationClass.facts"},{"name","_ApplicationClass"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_387_ApplicationClass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ArrayType.facts"},{"name","_ArrayType"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_388_ArrayType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignBinop.facts"},{"name","_AssignBinop"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_389_AssignBinop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCast.facts"},{"name","_AssignCast"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_390_AssignCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNull.facts"},{"name","_AssignCastNull"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_391_AssignCastNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignCastNumConstant.facts"},{"name","_AssignCastNumConstant"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_392_AssignCastNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignHeapAllocation.facts"},{"name","_AssignHeapAllocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_393_AssignHeapAllocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignInstanceOf.facts"},{"name","_AssignInstanceOf"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_394_AssignInstanceOf);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignLocal.facts"},{"name","_AssignLocal"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_395_AssignLocal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNull.facts"},{"name","_AssignNull"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_396_AssignNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignNumConstant.facts"},{"name","_AssignNumConstant"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_397_AssignNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignPhantomInvoke.facts"},{"name","_AssignPhantomInvoke"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_398_AssignPhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignReturnValue.facts"},{"name","_AssignReturnValue"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_399_AssignReturnValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./AssignUnop.facts"},{"name","_AssignUnop"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_400_AssignUnop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BootstrapParam.facts"},{"name","_BootstrapParam"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives)->readAll(*rel_401_BootstrapParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BreakpointStmt.facts"},{"name","_BreakpointStmt"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_402_BreakpointStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./BroadcastReceiver.facts"},{"name","_BroadcastReceiver"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_403_BroadcastReceiver);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./CallbackMethod.facts"},{"name","_CallbackMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_404_CallbackMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassHeap.facts"},{"name","_ClassHeap"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_405_ClassHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassModifier.facts"},{"name","_ClassModifier"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_406_ClassModifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ClassType.facts"},{"name","_ClassType"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_407_ClassType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ComponentType.facts"},{"name","_ComponentType"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_408_ComponentType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ContentProvider.facts"},{"name","_ContentProvider"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_409_ContentProvider);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Dacapo.facts"},{"name","_Dacapo"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_410_Dacapo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperclass.facts"},{"name","_DirectSuperclass"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_411_DirectSuperclass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DirectSuperinterface.facts"},{"name","_DirectSuperinterface"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_412_DirectSuperinterface);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./DynamicMethodInvocation.facts"},{"name","_DynamicMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_413_DynamicMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EmptyArray.facts"},{"name","_EmptyArray"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_414_EmptyArray);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./EnterMonitor.facts"},{"name","_EnterMonitor"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_415_EnterMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler.facts"},{"name","_ExceptionHandler"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 0, 1, 1, 0, 0}), symTable, ioDirectives)->readAll(*rel_416_ExceptionHandler);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExceptionHandler-Previous.facts"},{"name","_ExceptionHandler_Previous"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_417_ExceptionHandler_Previous);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ExitMonitor.facts"},{"name","_ExitMonitor"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_418_ExitMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field.facts"},{"name","_Field"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_419_Field);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FieldInitialValue.facts"},{"name","_FieldInitialValue"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_420_FieldInitialValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Field-Modifier.facts"},{"name","_Field_Modifier"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_421_Field_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./FormalParam.facts"},{"name","_FormalParam"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({0, 1, 1}), symTable, ioDirectives)->readAll(*rel_422_FormalParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Goto.facts"},{"name","_Goto"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives)->readAll(*rel_423_Goto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./If.facts"},{"name","_If"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives)->readAll(*rel_424_If);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./InterfaceType.facts"},{"name","_InterfaceType"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_425_InterfaceType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LayoutControl.facts"},{"name","_LayoutControl"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1}), symTable, ioDirectives)->readAll(*rel_426_LayoutControl);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadArrayIndex.facts"},{"name","_LoadArrayIndex"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_427_LoadArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadInstanceField.facts"},{"name","_LoadInstanceField"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_428_LoadInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LoadStaticField.facts"},{"name","_LoadStaticField"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_429_LoadStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./LookupSwitch.facts"},{"name","_LookupSwitch"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_430_LookupSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method.facts"},{"name","_Method"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_431_Method);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodHandleConstant.facts"},{"name","_MethodHandleConstant"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_432_MethodHandleConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./MethodInvocation-Line.facts"},{"name","_MethodInvocation_Line"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0}), symTable, ioDirectives)->readAll(*rel_433_MethodInvocation_Line);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-DeclaresException.facts"},{"name","_Method_DeclaresException"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_434_Method_DeclaresException);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Method-Modifier.facts"},{"name","_Method_Modifier"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_435_Method_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NativeReturnVar.facts"},{"name","_NativeReturnVar"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_436_NativeReturnVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./NormalHeap.facts"},{"name","_NormalHeap"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_437_NormalHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./PhantomInvoke.facts"},{"name","_PhantomInvoke"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_438_PhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Return.facts"},{"name","_Return"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_439_Return);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ReturnVoid.facts"},{"name","_ReturnVoid"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_440_ReturnVoid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Service.facts"},{"name","_Service"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_441_Service);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./SpecialMethodInvocation.facts"},{"name","_SpecialMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_442_SpecialMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StaticMethodInvocation.facts"},{"name","_StaticMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_443_StaticMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreArrayIndex.facts"},{"name","_StoreArrayIndex"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_444_StoreArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreInstanceField.facts"},{"name","_StoreInstanceField"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_445_StoreInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StoreStaticField.facts"},{"name","_StoreStaticField"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_446_StoreStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./StringConstant.facts"},{"name","_StringConstant"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1}), symTable, ioDirectives)->readAll(*rel_447_StringConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./TableSwitch.facts"},{"name","_TableSwitch"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_448_TableSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Tamiflex.facts"},{"name","_Tamiflex_ReflectionData"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1, 1, 1, 1, 0}), symTable, ioDirectives)->readAll(*rel_449_Tamiflex_ReflectionData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThisVar.facts"},{"name","_ThisVar"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_451_ThisVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Throw.facts"},{"name","_Throw"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->readAll(*rel_452_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./ThrowNull.facts"},{"name","_ThrowNull"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_453_ThrowNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./UnsupportedInstruction.facts"},{"name","_UnsupportedInstruction"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1}), symTable, ioDirectives)->readAll(*rel_454_UnsupportedInstruction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-DeclaringMethod.facts"},{"name","_Var_DeclaringMethod"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_455_Var_DeclaringMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./Var-Type.facts"},{"name","_Var_Type"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 1}), symTable, ioDirectives)->readAll(*rel_456_Var_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"delimiter","\t"},{"filename","./VirtualMethodInvocation.facts"},{"name","_VirtualMethodInvocation"}});
if (!dirname.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = dirname + "/" + directiveMap["filename"];}IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->readAll(*rel_457_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpInputs(std::ostream& out = std::cout) {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_384_Activity");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_384_Activity);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_385_ActualParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_385_ActualParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_386_AndroidEntryPoint");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_386_AndroidEntryPoint);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_387_ApplicationClass");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_387_ApplicationClass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_388_ArrayType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_388_ArrayType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_389_AssignBinop");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_389_AssignBinop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_390_AssignCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_390_AssignCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_391_AssignCastNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_391_AssignCastNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_392_AssignCastNumConstant");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_392_AssignCastNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_393_AssignHeapAllocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_393_AssignHeapAllocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_394_AssignInstanceOf");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_394_AssignInstanceOf);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_395_AssignLocal");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_395_AssignLocal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_396_AssignNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_396_AssignNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_397_AssignNumConstant");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_397_AssignNumConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_398_AssignPhantomInvoke");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_398_AssignPhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_399_AssignReturnValue");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_399_AssignReturnValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_400_AssignUnop");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_400_AssignUnop);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_401_BootstrapParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_401_BootstrapParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_402_BreakpointStmt");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_402_BreakpointStmt);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_403_BroadcastReceiver");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_403_BroadcastReceiver);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_404_CallbackMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_404_CallbackMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_405_ClassHeap");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_405_ClassHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_406_ClassModifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_406_ClassModifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_407_ClassType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_407_ClassType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_408_ComponentType");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_408_ComponentType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_409_ContentProvider");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_409_ContentProvider);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_410_Dacapo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_410_Dacapo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_411_DirectSuperclass");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_411_DirectSuperclass);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_412_DirectSuperinterface");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_412_DirectSuperinterface);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_413_DynamicMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_413_DynamicMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_414_EmptyArray");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_414_EmptyArray);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_415_EnterMonitor");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_415_EnterMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_416_ExceptionHandler");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0, 1, 1, 0, 0}), symTable, ioDirectives)->writeAll(*rel_416_ExceptionHandler);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_417_ExceptionHandler_Previous");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_417_ExceptionHandler_Previous);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_418_ExitMonitor");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_418_ExitMonitor);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_419_Field");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_419_Field);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_420_FieldInitialValue");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_420_FieldInitialValue);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_421_Field_Modifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_421_Field_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_422_FormalParam");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_422_FormalParam);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_423_Goto");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives)->writeAll(*rel_423_Goto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_424_If");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 0, 1}), symTable, ioDirectives)->writeAll(*rel_424_If);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_425_InterfaceType");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_425_InterfaceType);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_426_LayoutControl");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_426_LayoutControl);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_427_LoadArrayIndex");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_427_LoadArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_428_LoadInstanceField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_428_LoadInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_429_LoadStaticField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_429_LoadStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_430_LookupSwitch");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_430_LookupSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_431_Method");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_431_Method);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_432_MethodHandleConstant");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_432_MethodHandleConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_433_MethodInvocation_Line");
IOSystem::getInstance().getWriter(SymbolMask({1, 0}), symTable, ioDirectives)->writeAll(*rel_433_MethodInvocation_Line);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_434_Method_DeclaresException");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_434_Method_DeclaresException);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_435_Method_Modifier");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_435_Method_Modifier);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_436_NativeReturnVar");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_436_NativeReturnVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_437_NormalHeap");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_437_NormalHeap);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_438_PhantomInvoke");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_438_PhantomInvoke);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_439_Return");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_439_Return);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_440_ReturnVoid");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_440_ReturnVoid);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_441_Service");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_441_Service);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_442_SpecialMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_442_SpecialMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_443_StaticMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_443_StaticMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_444_StoreArrayIndex");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_444_StoreArrayIndex);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_445_StoreInstanceField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_445_StoreInstanceField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_446_StoreStaticField");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_446_StoreStaticField);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_447_StringConstant");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_447_StringConstant);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_448_TableSwitch");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_448_TableSwitch);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_449_Tamiflex_ReflectionData");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1, 1, 0}), symTable, ioDirectives)->writeAll(*rel_449_Tamiflex_ReflectionData);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_451_ThisVar");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_451_ThisVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_452_Throw");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1}), symTable, ioDirectives)->writeAll(*rel_452_Throw);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_453_ThrowNull");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_453_ThrowNull);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_454_UnsupportedInstruction");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_454_UnsupportedInstruction);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_455_Var_DeclaringMethod");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_455_Var_DeclaringMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_456_Var_Type");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_456_Var_Type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_457_VirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1, 0, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_457_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_11_ApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_11_ApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_36_CallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_36_CallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_213_Reachable");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_213_Reachable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_258_Stats_Metrics");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 0}), symTable, ioDirectives)->writeAll(*rel_258_Stats_Metrics);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_259_Stats_Simple_ApplicationConcreteMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_259_Stats_Simple_ApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_260_Stats_Simple_Application_ArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_260_Stats_Simple_Application_ArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_261_Stats_Simple_Application_Cast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_261_Stats_Simple_Application_Cast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_262_Stats_Simple_Application_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_263_Stats_Simple_Application_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_264_Stats_Simple_Application_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_265_Stats_Simple_Application_InsensVarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_265_Stats_Simple_Application_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_266_Stats_Simple_Application_InstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_266_Stats_Simple_Application_InstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_267_Stats_Simple_Application_NullVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_267_Stats_Simple_Application_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_268_Stats_Simple_Application_PolymorphicCallSite");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_268_Stats_Simple_Application_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_269_Stats_Simple_Application_PotentiallyFailingCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_269_Stats_Simple_Application_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_270_Stats_Simple_Application_ReachableCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_270_Stats_Simple_Application_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_271_Stats_Simple_Application_ReachableMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_271_Stats_Simple_Application_ReachableMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_272_Stats_Simple_Application_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_273_Stats_Simple_Application_VarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_273_Stats_Simple_Application_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_274_Stats_Simple_Application_VirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_274_Stats_Simple_Application_VirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_275_Stats_Simple_AssignedVariable");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_275_Stats_Simple_AssignedVariable);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_276_Stats_Simple_EmptyVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_276_Stats_Simple_EmptyVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_277_Stats_Simple_InsensArrayIndexPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_277_Stats_Simple_InsensArrayIndexPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_278_Stats_Simple_InsensCallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_278_Stats_Simple_InsensCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_279_Stats_Simple_InsensInstanceFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_279_Stats_Simple_InsensInstanceFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_280_Stats_Simple_InsensReachableApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_280_Stats_Simple_InsensReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_281_Stats_Simple_InsensReachableVar");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_281_Stats_Simple_InsensReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_282_Stats_Simple_InsensStaticFieldPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_282_Stats_Simple_InsensStaticFieldPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_283_Stats_Simple_InsensVarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_283_Stats_Simple_InsensVarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_284_Stats_Simple_NonReachableApplicationConcreteMethod");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_284_Stats_Simple_NonReachableApplicationConcreteMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_285_Stats_Simple_NullVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_285_Stats_Simple_NullVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_286_Stats_Simple_PolymorphicCallSite");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_286_Stats_Simple_PolymorphicCallSite);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_287_Stats_Simple_PotentiallyFailingCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_287_Stats_Simple_PotentiallyFailingCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_288_Stats_Simple_ReachableApplicationMethod");
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives)->writeAll(*rel_288_Stats_Simple_ReachableApplicationMethod);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_289_Stats_Simple_ReachableCast");
IOSystem::getInstance().getWriter(SymbolMask({1, 1, 1, 1}), symTable, ioDirectives)->writeAll(*rel_289_Stats_Simple_ReachableCast);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_290_Stats_Simple_ReachableVar");
IOSystem::getInstance().getWriter(SymbolMask({0, 1}), symTable, ioDirectives)->writeAll(*rel_290_Stats_Simple_ReachableVar);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_291_Stats_Simple_ReachableVirtualMethodInvocation");
IOSystem::getInstance().getWriter(SymbolMask({1}), symTable, ioDirectives)->writeAll(*rel_291_Stats_Simple_ReachableVirtualMethodInvocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_292_Stats_Simple_VirtualCallGraphEdge");
IOSystem::getInstance().getWriter(SymbolMask({1, 1}), symTable, ioDirectives)->writeAll(*rel_292_Stats_Simple_VirtualCallGraphEdge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_372_VarPointsTo");
IOSystem::getInstance().getWriter(SymbolMask({0, 1, 0, 1}), symTable, ioDirectives)->writeAll(*rel_372_VarPointsTo);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
const SymbolTable &getSymbolTable() const {
return symTable;
}
};
SouffleProgram *newInstance_pts2o1h_opt(){return new Sf_pts2o1h_opt;}
SymbolTable *getST_pts2o1h_opt(SouffleProgram *p){return &reinterpret_cast<Sf_pts2o1h_opt*>(p)->symTable;}
#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_pts2o1h_opt: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_pts2o1h_opt();
};
public:
factory_Sf_pts2o1h_opt() : ProgramFactory("pts2o1h_opt"){}
};
static factory_Sf_pts2o1h_opt __factory_Sf_pts2o1h_opt_instance;
}
#else
}
int main(int argc, char** argv)
{
souffle::CmdOptions opt(R"(pts2o1h_opt.dl)",
R"(.)",
R"(.)",
true,
R"(pts2o1h_opt.log)",
1
);
if (!opt.parse(argc,argv)) return 1;
#if defined(_OPENMP) 
omp_set_nested(true);
#endif
souffle::Sf_pts2o1h_opt obj(opt.getProfileName());
obj.loadAll(opt.getInputFileDir());
obj.run();
obj.printAll(opt.getOutputFileDir());
return 0;
}
#endif
